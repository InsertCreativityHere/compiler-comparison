//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.Struct1 = class
    {
        constructor(isa = 0, retainCount = 0)
        {
            this.isa = isa;
            this.retainCount = retainCount;
        }

        _write(ostr)
        {
            ostr.writeInt(this.isa);
            ostr.writeInt(this.retainCount);
        }

        _read(istr)
        {
            this.isa = istr.readInt();
            this.retainCount = istr.readInt();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(Test.Struct1, true, false);

    Test.Exception1 = class extends Ice.UserException
    {
        constructor(isa = 0, reason = 0, raise = 0, name = 0, callStackReturnAddresses = 0, userInfo = 0, reserved = 0, _cause = "")
        {
            super(_cause);
            this.isa = isa;
            this.reason = reason;
            this.raise = raise;
            this.name = name;
            this.callStackReturnAddresses = callStackReturnAddresses;
            this.userInfo = userInfo;
            this.reserved = reserved;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception1";
        }

        _mostDerivedType()
        {
            return Test.Exception1;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.isa);
            ostr.writeInt(this.reason);
            ostr.writeInt(this.raise);
            ostr.writeInt(this.name);
            ostr.writeInt(this.callStackReturnAddresses);
            ostr.writeInt(this.userInfo);
            ostr.writeInt(this.reserved);
        }

        _readMemberImpl(istr)
        {
            this.isa = istr.readInt();
            this.reason = istr.readInt();
            this.raise = istr.readInt();
            this.name = istr.readInt();
            this.callStackReturnAddresses = istr.readInt();
            this.userInfo = istr.readInt();
            this.reserved = istr.readInt();
        }
    };

    const iceC_Test_Class1_ids = [
        "::Ice::Object",
        "::Test::Class1"
    ];

    Test.Class1 = class extends Ice.Value
    {
        constructor(reason = 0, isa = 0, autorelease = 0, classForCoder = 0, copy = 0, dealloc = 0, description = 0, hash = 0, init = 0, isProxy = 0, mutableCopy = 0, release = 0, retain = 0, retainCount = 0, self = 0, superclass = 0, zone = 0)
        {
            super();
            this.reason = reason;
            this.isa = isa;
            this.autorelease = autorelease;
            this.classForCoder = classForCoder;
            this.copy = copy;
            this.dealloc = dealloc;
            this.description = description;
            this.hash = hash;
            this.init = init;
            this.isProxy = isProxy;
            this.mutableCopy = mutableCopy;
            this.release = release;
            this.retain = retain;
            this.retainCount = retainCount;
            this.self = self;
            this.superclass = superclass;
            this.zone = zone;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.reason);
            ostr.writeInt(this.isa);
            ostr.writeInt(this.autorelease);
            ostr.writeInt(this.classForCoder);
            ostr.writeInt(this.copy);
            ostr.writeInt(this.dealloc);
            ostr.writeInt(this.description);
            ostr.writeInt(this.hash);
            ostr.writeInt(this.init);
            ostr.writeInt(this.isProxy);
            ostr.writeInt(this.mutableCopy);
            ostr.writeInt(this.release);
            ostr.writeInt(this.retain);
            ostr.writeInt(this.retainCount);
            ostr.writeInt(this.self);
            ostr.writeInt(this.superclass);
            ostr.writeInt(this.zone);
        }

        _iceReadMemberImpl(istr)
        {
            this.reason = istr.readInt();
            this.isa = istr.readInt();
            this.autorelease = istr.readInt();
            this.classForCoder = istr.readInt();
            this.copy = istr.readInt();
            this.dealloc = istr.readInt();
            this.description = istr.readInt();
            this.hash = istr.readInt();
            this.init = istr.readInt();
            this.isProxy = istr.readInt();
            this.mutableCopy = istr.readInt();
            this.release = istr.readInt();
            this.retain = istr.readInt();
            this.retainCount = istr.readInt();
            this.self = istr.readInt();
            this.superclass = istr.readInt();
            this.zone = istr.readInt();
        }
    };

    Slice.defineValue(Test.Class1, iceC_Test_Class1_ids[1], false);

    const iceC_Test_Intf1_ids = [
        "::Ice::Object",
        "::Test::Intf1"
    ];

    Test.Intf1 = class extends Ice.Object
    {
    };

    Test.Intf1Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Intf1, Test.Intf1Prx, iceC_Test_Intf1_ids, 1,
    {
        "isa": [, , , , , , , , , ],
        "reason": [, , , , , , , , , ],
        "autorelease": [, , , , , , , , , ],
        "classForCoder": [, , , , , , , , , ],
        "copy": [, , , , , , , , , ],
        "dealloc": [, , , , , , , , , ],
        "description": [, , , , , , , , , ],
        "hash": [, , , , , , , , , ],
        "init": [, , , , , , , , , ],
        "isProxy": [, , , , , , , , , ],
        "mutableCopy": [, , , , , , , , , ],
        "release": [, , , , , , , , , ],
        "retain": [, , , , , , , , , ],
        "retainCount": [, , , , , , , , , ],
        "self": [, , , , , , , , , ],
        "superclass": [, , , , , , , , , ],
        "zone": [, , , , , , , , , ]
    });

    const iceC_Test_Intf2_ids = [
        "::Ice::Object",
        "::Test::Intf2"
    ];

    Test.Intf2 = class extends Ice.Object
    {
    };

    Test.Intf2Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Intf2, Test.Intf2Prx, iceC_Test_Intf2_ids, 1,
    {
        "isa": [, , , , , [[3]], , , , ],
        "reason": [, , , , , [[3]], , , , ],
        "autorelease": [, , , , , [[3]], , , , ],
        "classForCoder": [, , , , , [[3]], , , , ],
        "copy": [, , , , , [[3]], , , , ],
        "dealloc": [, , , , , [[3]], , , , ],
        "description": [, , , , , [[3]], , , , ],
        "hash": [, , , , , [[3]], , , , ],
        "init": [, , , , , [[3]], , , , ],
        "isProxy": [, , , , , [[3]], , , , ],
        "mutableCopy": [, , , , , [[3]], , , , ],
        "release": [, , , , , [[3]], , , , ],
        "retain": [, , , , , [[3]], , , , ],
        "retainCount": [, , , , , [[3]], , , , ],
        "self": [, , , , , [[3]], , , , ],
        "superclass": [, , , , , [[3]], , , , ],
        "zone": [, , , , , [[3]], , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
