//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let and = _ModuleRegistry.module("and");

    and._continue = Slice.defineEnum([
        ['asm', 0]]);

    and.auto = class
    {
        constructor(_default = 0)
        {
            this._default = _default;
        }

        _write(ostr)
        {
            ostr.writeInt(this._default);
        }

        _read(istr)
        {
            this._default = istr.readInt();
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(and.auto, true, false);

    and._delete = class
    {
        constructor(_else = "")
        {
            this._else = _else;
        }

        _write(ostr)
        {
            ostr.writeString(this._else);
        }

        _read(istr)
        {
            this._else = istr.readString();
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(and._delete, true, true);

    const iceC_and__break_ids = [
        "::Ice::Object",
        "::and::break"
    ];

    and.break = class extends Ice.Object
    {
    };

    and.breakPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.break, and.breakPrx, iceC_and__break_ids, 1,
    {
        "case": ["_case", , , , , [[3]], [[3]], , , ]
    });

    const iceC_and_char_ids = [
        "::Ice::Object",
        "::and::char"
    ];

    and.char = class extends Ice.Object
    {
    };

    and.charPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.char, and.charPrx, iceC_and_char_ids, 1,
    {
        "explicit": [, , , , , , , , , ]
    });

    const iceC_and__switch_ids = [
        "::Ice::Object",
        "::and::switch"
    ];

    and.switch = class extends Ice.Object
    {
    };

    and.switchPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.switch, and.switchPrx, iceC_and__switch_ids, 1,
    {
        "foo": [, , , , , [["and.charPrx"]], [[3]], , , ],
        "foo2": [, , , , , [["and.charPrx"], [3]], [[3]], , , ],
        "foo3": [, , , , , [["and.charPrx"]], [[3]], , , ]
    });

    const iceC_and__do_ids = [
        "::Ice::Object",
        "::and::break",
        "::and::char",
        "::and::do",
        "::and::switch"
    ];

    and._do = class extends Ice.Value
    {
        constructor(_if = 0)
        {
            super();
            this._if = _if;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this._if);
        }

        _iceReadMemberImpl(istr)
        {
            this._if = istr.readInt();
        }
    };

    Slice.defineValue(and._do, iceC_and__do_ids[3], false);

    and.doDisp = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                and.char,
                and.break,
                and.switch
            ];
        }
    };

    and.doPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                and.charPrx,
                and.breakPrx,
                and.switchPrx];
        }
    };

    Slice.defineOperations(and.doDisp, and.doPrx, iceC_and__do_ids, 3);

    Slice.defineSequence(and, "externHelper", "and.auto", true);

    Slice.defineDictionary(and, "_for", "_forHelper", "Ice.StringHelper", "and.auto", false, undefined, undefined);

    and._return = class extends Ice.UserException
    {
        constructor(signed = 0, _cause = "")
        {
            super(_cause);
            this.signed = signed;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::and::return";
        }

        _mostDerivedType()
        {
            return and._return;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.signed);
        }

        _readMemberImpl(istr)
        {
            this.signed = istr.readInt();
        }
    };

    and.sizeof = class extends and._return
    {
        constructor(signed, _static = 0, _switch = 0, _cause = "")
        {
            super(signed, _cause);
            this._static = _static;
            this._switch = _switch;
        }

        static get _parent()
        {
            return and._return;
        }

        static get _id()
        {
            return "::and::sizeof";
        }

        _mostDerivedType()
        {
            return and.sizeof;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this._static);
            ostr.writeInt(this._switch);
        }

        _readMemberImpl(istr)
        {
            this._static = istr.readInt();
            this._switch = istr.readInt();
        }
    };

    const iceC_and_friend_ids = [
        "::Ice::Object",
        "::and::friend"
    ];

    and.friend = class extends Ice.Object
    {
    };

    and.friendPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.friend, and.friendPrx, iceC_and_friend_ids, 1,
    {
        "goto": [, , , , [and.auto], [[and._continue._helper], [and.auto], [and._delete], ["Ice.Value", true], ["and._do", true], ["and.breakPrx"], ["and.charPrx"], ["and.switchPrx"], ["and.doPrx"], [3], [3], [3], [3]], ,
        [
            and.sizeof,
            and._return
        ], true, ],
        "objc": [, , , , , [[3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3]], , , , ]
    });

    Object.defineProperty(and, 'template', {
        value: 0
    });

    Object.defineProperty(and, '_this', {
        value: 0
    });

    Object.defineProperty(and, '_throw', {
        value: 0
    });

    Object.defineProperty(and, 'typedef', {
        value: 0
    });

    Object.defineProperty(and, 'typeid', {
        value: 0
    });

    Object.defineProperty(and, 'typename', {
        value: 0
    });

    Object.defineProperty(and, 'union', {
        value: 0
    });

    Object.defineProperty(and, 'unsigned', {
        value: 0
    });

    Object.defineProperty(and, 'using', {
        value: 0
    });

    Object.defineProperty(and, 'virtual', {
        value: 0
    });

    Object.defineProperty(and, '_while', {
        value: 0
    });

    Object.defineProperty(and, 'xor', {
        value: 0
    });
    exports.and = and;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
