//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `DefaultValueTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.Color = Slice.defineEnum([
        ['red', 0], ['green', 1], ['blue', 2]]);

    Test.Struct1 = class
    {
        constructor(boolFalse = false, boolTrue = true, b = 254, s = 16000, i = 3, l = new Ice.Long(0, 4), f = 5, d = 6, str = "foo bar", c = Test.Color.red, noDefault = "")
        {
            this.boolFalse = boolFalse;
            this.boolTrue = boolTrue;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.c = c;
            this.noDefault = noDefault;
        }

        _write(ostr)
        {
            ostr.writeBool(this.boolFalse);
            ostr.writeBool(this.boolTrue);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            Test.Color._write(ostr, this.c);
            ostr.writeString(this.noDefault);
        }

        _read(istr)
        {
            this.boolFalse = istr.readBool();
            this.boolTrue = istr.readBool();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.c = Test.Color._read(istr);
            this.noDefault = istr.readString();
        }

        static get minWireSize()
        {
            return  32;
        }
    };

    Slice.defineStruct(Test.Struct1, false, true);

    Test.Struct2 = class
    {
        constructor(boolFalse = false, boolTrue = true, b = 1, s = 2, i = 3, l = new Ice.Long(0, 4), f = 5, d = 6, str = "foo bar", c = Test.Color.blue, noDefault = "")
        {
            this.boolFalse = boolFalse;
            this.boolTrue = boolTrue;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.c = c;
            this.noDefault = noDefault;
        }

        _write(ostr)
        {
            ostr.writeBool(this.boolFalse);
            ostr.writeBool(this.boolTrue);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            Test.Color._write(ostr, this.c);
            ostr.writeString(this.noDefault);
        }

        _read(istr)
        {
            this.boolFalse = istr.readBool();
            this.boolTrue = istr.readBool();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.c = Test.Color._read(istr);
            this.noDefault = istr.readString();
        }

        static get minWireSize()
        {
            return  32;
        }
    };

    Slice.defineStruct(Test.Struct2, false, true);

    const iceC_Test_Base_ids = [
        "::Ice::Object",
        "::Test::Base"
    ];

    Test.Base = class extends Ice.Value
    {
        constructor(boolFalse = false, boolTrue = true, b = 1, s = 2, i = 3, l = new Ice.Long(0, 4), f = 5, d = 6, str = "foo bar", noDefault = "")
        {
            super();
            this.boolFalse = boolFalse;
            this.boolTrue = boolTrue;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.noDefault = noDefault;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeBool(this.boolFalse);
            ostr.writeBool(this.boolTrue);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            ostr.writeString(this.noDefault);
        }

        _iceReadMemberImpl(istr)
        {
            this.boolFalse = istr.readBool();
            this.boolTrue = istr.readBool();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.noDefault = istr.readString();
        }
    };

    Slice.defineValue(Test.Base, iceC_Test_Base_ids[1], false);

    const iceC_Test_Derived_ids = [
        "::Ice::Object",
        "::Test::Base",
        "::Test::Derived"
    ];

    Test.Derived = class extends Test.Base
    {
        constructor(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, c = Test.Color.green)
        {
            super(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault);
            this.c = c;
        }

        _iceWriteMemberImpl(ostr)
        {
            Test.Color._write(ostr, this.c);
        }

        _iceReadMemberImpl(istr)
        {
            this.c = Test.Color._read(istr);
        }
    };

    Slice.defineValue(Test.Derived, iceC_Test_Derived_ids[2], false);

    Test.BaseEx = class extends Ice.UserException
    {
        constructor(boolFalse = false, boolTrue = true, b = 1, s = 2, i = 3, l = new Ice.Long(0, 4), f = 5, d = 6, str = "foo bar", noDefault = "", _cause = "")
        {
            super(_cause);
            this.boolFalse = boolFalse;
            this.boolTrue = boolTrue;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.noDefault = noDefault;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::BaseEx";
        }

        _mostDerivedType()
        {
            return Test.BaseEx;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeBool(this.boolFalse);
            ostr.writeBool(this.boolTrue);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            ostr.writeString(this.noDefault);
        }

        _readMemberImpl(istr)
        {
            this.boolFalse = istr.readBool();
            this.boolTrue = istr.readBool();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.noDefault = istr.readString();
        }
    };

    Test.DerivedEx = class extends Test.BaseEx
    {
        constructor(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, c = Test.Color.green, _cause = "")
        {
            super(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, _cause);
            this.c = c;
        }

        static get _parent()
        {
            return Test.BaseEx;
        }

        static get _id()
        {
            return "::Test::DerivedEx";
        }

        _mostDerivedType()
        {
            return Test.DerivedEx;
        }

        _writeMemberImpl(ostr)
        {
            Test.Color._write(ostr, this.c);
        }

        _readMemberImpl(istr)
        {
            this.c = Test.Color._read(istr);
        }
    };

    Slice.defineSequence(Test, "ByteSeqHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "IntSeqHelper", "Ice.IntHelper", true);

    Slice.defineDictionary(Test, "IntStringDict", "IntStringDictHelper", "Ice.IntHelper", "Ice.StringHelper", false, undefined, undefined);

    Test.InnerStruct = class
    {
        constructor(a = 0)
        {
            this.a = a;
        }

        _write(ostr)
        {
            ostr.writeInt(this.a);
        }

        _read(istr)
        {
            this.a = istr.readInt();
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(Test.InnerStruct, true, false);

    Test.StructNoDefaults = class
    {
        constructor(bo = false, b = 0, s = 0, i = 0, l = new Ice.Long(0, 0), f = 0.0, d = 0.0, str = "", c1 = Test.Color.red, bs = null, is = null, st = new Test.InnerStruct(), dict = null)
        {
            this.bo = bo;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.c1 = c1;
            this.bs = bs;
            this.is = is;
            this.st = st;
            this.dict = dict;
        }

        _write(ostr)
        {
            ostr.writeBool(this.bo);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            Test.Color._write(ostr, this.c1);
            Test.ByteSeqHelper.write(ostr, this.bs);
            Test.IntSeqHelper.write(ostr, this.is);
            Test.InnerStruct.write(ostr, this.st);
            Test.IntStringDictHelper.write(ostr, this.dict);
        }

        _read(istr)
        {
            this.bo = istr.readBool();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.c1 = Test.Color._read(istr);
            this.bs = Test.ByteSeqHelper.read(istr);
            this.is = Test.IntSeqHelper.read(istr);
            this.st = Test.InnerStruct.read(istr, this.st);
            this.dict = Test.IntStringDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  37;
        }
    };

    Slice.defineStruct(Test.StructNoDefaults, false, true);

    Test.ExceptionNoDefaultsBase = class extends Ice.UserException
    {
        constructor(str = "", c1 = Test.Color.red, bs = null, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.c1 = c1;
            this.bs = bs;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::ExceptionNoDefaultsBase";
        }

        _mostDerivedType()
        {
            return Test.ExceptionNoDefaultsBase;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            Test.Color._write(ostr, this.c1);
            Test.ByteSeqHelper.write(ostr, this.bs);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.c1 = Test.Color._read(istr);
            this.bs = Test.ByteSeqHelper.read(istr);
        }
    };

    Test.ExceptionNoDefaults = class extends Test.ExceptionNoDefaultsBase
    {
        constructor(str, c1, bs, st = new Test.InnerStruct(), dict = null, _cause = "")
        {
            super(str, c1, bs, _cause);
            this.st = st;
            this.dict = dict;
        }

        static get _parent()
        {
            return Test.ExceptionNoDefaultsBase;
        }

        static get _id()
        {
            return "::Test::ExceptionNoDefaults";
        }

        _mostDerivedType()
        {
            return Test.ExceptionNoDefaults;
        }

        _writeMemberImpl(ostr)
        {
            Test.InnerStruct.write(ostr, this.st);
            Test.IntStringDictHelper.write(ostr, this.dict);
        }

        _readMemberImpl(istr)
        {
            this.st = Test.InnerStruct.read(istr, this.st);
            this.dict = Test.IntStringDictHelper.read(istr);
        }
    };

    const iceC_Test_ClassNoDefaultsBase_ids = [
        "::Ice::Object",
        "::Test::ClassNoDefaultsBase"
    ];

    Test.ClassNoDefaultsBase = class extends Ice.Value
    {
        constructor(str = "", c1 = Test.Color.red, bs = null)
        {
            super();
            this.str = str;
            this.c1 = c1;
            this.bs = bs;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            Test.Color._write(ostr, this.c1);
            Test.ByteSeqHelper.write(ostr, this.bs);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.c1 = Test.Color._read(istr);
            this.bs = Test.ByteSeqHelper.read(istr);
        }
    };

    Slice.defineValue(Test.ClassNoDefaultsBase, iceC_Test_ClassNoDefaultsBase_ids[1], false);

    const iceC_Test_ClassNoDefaults_ids = [
        "::Ice::Object",
        "::Test::ClassNoDefaults",
        "::Test::ClassNoDefaultsBase"
    ];

    Test.ClassNoDefaults = class extends Test.ClassNoDefaultsBase
    {
        constructor(str, c1, bs, st = new Test.InnerStruct(), dict = null)
        {
            super(str, c1, bs);
            this.st = st;
            this.dict = dict;
        }

        _iceWriteMemberImpl(ostr)
        {
            Test.InnerStruct.write(ostr, this.st);
            Test.IntStringDictHelper.write(ostr, this.dict);
        }

        _iceReadMemberImpl(istr)
        {
            this.st = Test.InnerStruct.read(istr, this.st);
            this.dict = Test.IntStringDictHelper.read(istr);
        }
    };

    Slice.defineValue(Test.ClassNoDefaults, iceC_Test_ClassNoDefaults_ids[1], false);
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
