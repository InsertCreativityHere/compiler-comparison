//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `LocationTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    const iceC_Test_TestLocatorRegistry_ids = [
        "::Ice::LocatorRegistry",
        "::Ice::Object",
        "::Test::TestLocatorRegistry"
    ];

    Test.TestLocatorRegistry = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Ice.LocatorRegistry
            ];
        }
    };

    Test.TestLocatorRegistryPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Ice.LocatorRegistryPrx];
        }
    };

    Slice.defineOperations(Test.TestLocatorRegistry, Test.TestLocatorRegistryPrx, iceC_Test_TestLocatorRegistry_ids, 2,
    {
        "addObject": [, , , , , [[9]], , , , ]
    });

    const iceC_Test_TestLocator_ids = [
        "::Ice::Locator",
        "::Ice::Object",
        "::Test::TestLocator"
    ];

    Test.TestLocator = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Ice.Locator
            ];
        }
    };

    Test.TestLocatorPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Ice.LocatorPrx];
        }
    };

    Slice.defineOperations(Test.TestLocator, Test.TestLocatorPrx, iceC_Test_TestLocator_ids, 2,
    {
        "getRequestCount": [, 2, 2, , [3], , , , , ]
    });

    const iceC_Test_ServerManager_ids = [
        "::Ice::Object",
        "::Test::ServerManager"
    ];

    Test.ServerManager = class extends Ice.Object
    {
    };

    Test.ServerManagerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.ServerManager, Test.ServerManagerPrx, iceC_Test_ServerManager_ids, 1,
    {
        "startServer": [, , , , , , , , , ],
        "shutdown": [, , , , , , , , , ]
    });

    const iceC_Test_Hello_ids = [
        "::Ice::Object",
        "::Test::Hello"
    ];

    Test.Hello = class extends Ice.Object
    {
    };

    Test.HelloPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Hello, Test.HelloPrx, iceC_Test_Hello_ids, 1,
    {
        "sayHello": [, , , , , , , , , ]
    });

    const iceC_Test_TestIntf_ids = [
        "::Ice::Object",
        "::Test::TestIntf"
    ];

    Test.TestIntf = class extends Ice.Object
    {
    };

    Test.TestIntfPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.TestIntf, Test.TestIntfPrx, iceC_Test_TestIntf_ids, 1,
    {
        "shutdown": [, , , , , , , , , ],
        "getHello": [, , , , ["Test.HelloPrx"], , , , , ],
        "getReplicatedHello": [, , , , ["Test.HelloPrx"], , , , , ],
        "migrateHello": [, , , , , , , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
