//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    const iceC_Test_C_ids = [
        "::Ice::Object",
        "::Test::C"
    ];

    Test.C = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.C, iceC_Test_C_ids[1], false);

    Slice.defineSequence(Test, "CSeqHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineSequence(Test, "CArrayHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineSequence(Test, "CListHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineSequence(Test, "BoolSeqHelper", "Ice.BoolHelper", true);

    Slice.defineSequence(Test, "ByteSeqHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "ShortSeqHelper", "Ice.ShortHelper", true);

    Slice.defineSequence(Test, "IntSeqHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "LongSeqHelper", "Ice.LongHelper", true);

    Slice.defineSequence(Test, "FloatSeqHelper", "Ice.FloatHelper", true);

    Slice.defineSequence(Test, "DoubleSeqHelper", "Ice.DoubleHelper", true);

    Slice.defineSequence(Test, "StringSeqHelper", "Ice.StringHelper", false);

    Slice.defineSequence(Test, "ByteBufferHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "ShortBufferHelper", "Ice.ShortHelper", true);

    Slice.defineSequence(Test, "IntBufferHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "LongBufferHelper", "Ice.LongHelper", true);

    Slice.defineSequence(Test, "FloatBufferHelper", "Ice.FloatHelper", true);

    Slice.defineSequence(Test, "DoubleBufferHelper", "Ice.DoubleHelper", true);

    Test.E = Slice.defineEnum([
        ['E1', 0], ['E2', 1], ['E3', 2]]);

    Slice.defineSequence(Test, "ESeqHelper", "Test.E._helper", false);

    Test.S = class
    {
        constructor(en = Test.E.E1)
        {
            this.en = en;
        }

        _write(ostr)
        {
            Test.E._write(ostr, this.en);
        }

        _read(istr)
        {
            this.en = Test.E._read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.S, true, true);

    Slice.defineSequence(Test, "SSeqHelper", "Test.S", false);

    Slice.defineDictionary(Test, "D", "DHelper", "Ice.IntHelper", "Ice.StringHelper", false, undefined, undefined);

    Slice.defineSequence(Test, "DSeqHelper", "Test.DHelper", false);

    Slice.defineSequence(Test, "StringSeqSeqHelper", "Test.StringSeqHelper", false);

    const iceC_Test_TestIntf_ids = [
        "::Ice::Object",
        "::Test::TestIntf"
    ];

    Test.TestIntf = class extends Ice.Object
    {
    };

    Test.TestIntfPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.TestIntf, Test.TestIntfPrx, iceC_Test_TestIntf_ids, 1,
    {
        "opCSeq": [, , , , ["Test.CSeqHelper"], [["Test.CSeqHelper"]], [["Test.CSeqHelper"]], , true, true],
        "opCArray": [, , , , ["Test.CArrayHelper"], [["Test.CArrayHelper"]], [["Test.CArrayHelper"]], , true, true],
        "opCList": [, , , , ["Test.CListHelper"], [["Test.CListHelper"]], [["Test.CListHelper"]], , true, true],
        "opBoolSeq": [, , , , ["Test.BoolSeqHelper"], [["Test.BoolSeqHelper"]], [["Test.BoolSeqHelper"]], , , ],
        "opByteSeq": [, , , , ["Test.ByteSeqHelper"], [["Test.ByteSeqHelper"]], [["Test.ByteSeqHelper"]], , , ],
        "opShortSeq": [, , , , ["Test.ShortSeqHelper"], [["Test.ShortSeqHelper"]], [["Test.ShortSeqHelper"]], , , ],
        "opIntSeq": [, , , , ["Test.IntSeqHelper"], [["Test.IntSeqHelper"]], [["Test.IntSeqHelper"]], , , ],
        "opLongSeq": [, , , , ["Test.LongSeqHelper"], [["Test.LongSeqHelper"]], [["Test.LongSeqHelper"]], , , ],
        "opFloatSeq": [, , , , ["Test.FloatSeqHelper"], [["Test.FloatSeqHelper"]], [["Test.FloatSeqHelper"]], , , ],
        "opDoubleSeq": [, , , , ["Test.DoubleSeqHelper"], [["Test.DoubleSeqHelper"]], [["Test.DoubleSeqHelper"]], , , ],
        "opStringSeq": [, , , , ["Test.StringSeqHelper"], [["Test.StringSeqHelper"]], [["Test.StringSeqHelper"]], , , ],
        "opESeq": [, , , , ["Test.ESeqHelper"], [["Test.ESeqHelper"]], [["Test.ESeqHelper"]], , , ],
        "opSSeq": [, , , , ["Test.SSeqHelper"], [["Test.SSeqHelper"]], [["Test.SSeqHelper"]], , , ],
        "opDSeq": [, , , , ["Test.DSeqHelper"], [["Test.DSeqHelper"]], [["Test.DSeqHelper"]], , , ],
        "opStringSeqSeq": [, , , , ["Test.StringSeqSeqHelper"], [["Test.StringSeqSeqHelper"]], [["Test.StringSeqSeqHelper"]], , , ],
        "opByteBufferSeq": [, , , , ["Test.ByteBufferHelper"], [["Test.ByteBufferHelper"]], [["Test.ByteBufferHelper"]], , , ],
        "opShortBufferSeq": [, , , , ["Test.ShortBufferHelper"], [["Test.ShortBufferHelper"]], [["Test.ShortBufferHelper"]], , , ],
        "opIntBufferSeq": [, , , , ["Test.IntBufferHelper"], [["Test.IntBufferHelper"]], [["Test.IntBufferHelper"]], , , ],
        "opLongBufferSeq": [, , , , ["Test.LongBufferHelper"], [["Test.LongBufferHelper"]], [["Test.LongBufferHelper"]], , , ],
        "opFloatBufferSeq": [, , , , ["Test.FloatBufferHelper"], [["Test.FloatBufferHelper"]], [["Test.FloatBufferHelper"]], , , ],
        "opDoubleBufferSeq": [, , , , ["Test.DoubleBufferHelper"], [["Test.DoubleBufferHelper"]], [["Test.DoubleBufferHelper"]], , , ],
        "shutdown": [, , , , , , , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
