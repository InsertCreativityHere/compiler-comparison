//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Types.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Object.defineProperty(Test, 'IntConst1', {
        value: 100
    });

    Object.defineProperty(Test, 'IntConst2', {
        value: 100
    });

    Object.defineProperty(Test, 'IntConst3', {
        value: 100
    });

    Test.Enum1 = Slice.defineEnum([
        ['Enum11', 0], ['Enum12', 1], ['Enum13', 2]]);

    Test.Enum2 = Slice.defineEnum([
        ['Enum21', 0], ['Enum22', 1], ['Enum23', 2]]);

    Test.Enum3 = Slice.defineEnum([
        ['Enum31', 0], ['Enum32', 1], ['Enum33', 2]]);

    Test.Enum4 = Slice.defineEnum([
        ['Enum41', 0], ['Enum42', 1], ['Enum43', 2]]);

    Test.EnumExplicit0 = Slice.defineEnum([
        ['EnumExplicit01', 1], ['EnumExplicit02', 2], ['EnumExplicit03', 3]]);

    Test.EnumExplicit1 = Slice.defineEnum([
        ['EnumExplicit11', 1], ['EnumExplicit12', 2], ['EnumExplicit13', 3]]);

    Test.EnumExplicit2 = Slice.defineEnum([
        ['EnumExplicit21', 1], ['EnumExplicit22', 2], ['EnumExplicit23', 3]]);

    Test.EnumExplicit3 = Slice.defineEnum([
        ['EnumExplicit31', 1], ['EnumExplicit32', 2], ['EnumExplicit33', 3]]);

    Slice.defineSequence(Test, "Sequence1Helper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "Sequence2Helper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "Sequence3Helper", "Ice.IntHelper", true);

    Slice.defineDictionary(Test, "Dictionary1", "Dictionary1Helper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "Dictionary2", "Dictionary2Helper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "Dictionary3", "Dictionary3Helper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "Dictionary4", "Dictionary4Helper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    Test.Struct1 = class
    {
        constructor(str = "", b = false)
        {
            this.str = str;
            this.b = b;
        }

        _write(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _read(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Struct1, true, true);

    Test.Struct2 = class
    {
        constructor(str = "", b = false)
        {
            this.str = str;
            this.b = b;
        }

        _write(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _read(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Struct2, true, true);

    Test.Struct3 = class
    {
        constructor(str = "", b = false)
        {
            this.str = str;
            this.b = b;
        }

        _write(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _read(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Struct3, true, true);

    Test.Struct4 = class
    {
        constructor(str = "", b = false)
        {
            this.str = str;
            this.b = b;
        }

        _write(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _read(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Struct4, true, true);

    Test.Struct5 = class
    {
        constructor(str = "", b = false)
        {
            this.str = str;
            this.b = b;
        }

        _write(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _read(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Struct5, true, true);

    const iceC_Test_Interface1_ids = [
        "::Ice::Object",
        "::Test::Interface1"
    ];

    Test.Interface1 = class extends Ice.Object
    {
    };

    Test.Interface1Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Interface1, Test.Interface1Prx, iceC_Test_Interface1_ids, 1);

    const iceC_Test_Interface2_ids = [
        "::Ice::Object",
        "::Test::Interface2"
    ];

    Test.Interface2 = class extends Ice.Object
    {
    };

    Test.Interface2Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Interface2, Test.Interface2Prx, iceC_Test_Interface2_ids, 1);

    const iceC_Test_Interface3_ids = [
        "::Ice::Object",
        "::Test::Interface3"
    ];

    Test.Interface3 = class extends Ice.Object
    {
    };

    Test.Interface3Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Interface3, Test.Interface3Prx, iceC_Test_Interface3_ids, 1);

    const iceC_Test_Interface4_ids = [
        "::Ice::Object",
        "::Test::Interface4"
    ];

    Test.Interface4 = class extends Ice.Object
    {
    };

    Test.Interface4Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Interface4, Test.Interface4Prx, iceC_Test_Interface4_ids, 1);

    const iceC_Test_EmptyClass1_ids = [
        "::Ice::Object",
        "::Test::EmptyClass1"
    ];

    Test.EmptyClass1 = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.EmptyClass1, iceC_Test_EmptyClass1_ids[1], false);

    const iceC_Test_EmptyClass2_ids = [
        "::Ice::Object",
        "::Test::EmptyClass2"
    ];

    Test.EmptyClass2 = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.EmptyClass2, iceC_Test_EmptyClass2_ids[1], false);

    const iceC_Test_EmptyClass3_ids = [
        "::Ice::Object",
        "::Test::EmptyClass3"
    ];

    Test.EmptyClass3 = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.EmptyClass3, iceC_Test_EmptyClass3_ids[1], false);

    const iceC_Test_EmptyClass4_ids = [
        "::Ice::Object",
        "::Test::EmptyClass4"
    ];

    Test.EmptyClass4 = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.EmptyClass4, iceC_Test_EmptyClass4_ids[1], false);

    const iceC_Test_EmptyClass5_ids = [
        "::Ice::Object",
        "::Test::EmptyClass5"
    ];

    Test.EmptyClass5 = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.EmptyClass5, iceC_Test_EmptyClass5_ids[1], false);

    const iceC_Test_SimpleClass1_ids = [
        "::Ice::Object",
        "::Test::SimpleClass1"
    ];

    Test.SimpleClass1 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass1, iceC_Test_SimpleClass1_ids[1], false);

    const iceC_Test_SimpleClass2_ids = [
        "::Ice::Object",
        "::Test::SimpleClass2"
    ];

    Test.SimpleClass2 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass2, iceC_Test_SimpleClass2_ids[1], false);

    const iceC_Test_SimpleClass3_ids = [
        "::Ice::Object",
        "::Test::SimpleClass3"
    ];

    Test.SimpleClass3 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass3, iceC_Test_SimpleClass3_ids[1], false);

    const iceC_Test_SimpleClass4_ids = [
        "::Ice::Object",
        "::Test::SimpleClass4"
    ];

    Test.SimpleClass4 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass4, iceC_Test_SimpleClass4_ids[1], false);

    const iceC_Test_SimpleClass5_ids = [
        "::Ice::Object",
        "::Test::SimpleClass5"
    ];

    Test.SimpleClass5 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass5, iceC_Test_SimpleClass5_ids[1], false);

    const iceC_Test_SimpleClass6_ids = [
        "::Ice::Object",
        "::Test::SimpleClass6"
    ];

    Test.SimpleClass6 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass6, iceC_Test_SimpleClass6_ids[1], false);

    const iceC_Test_SimpleClass7_ids = [
        "::Ice::Object",
        "::Test::SimpleClass7"
    ];

    Test.SimpleClass7 = class extends Ice.Value
    {
        constructor(str = "", f = 0.0)
        {
            super();
            this.str = str;
            this.f = f;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeFloat(this.f);
        }

        _iceReadMemberImpl(istr)
        {
            this.str = istr.readString();
            this.f = istr.readFloat();
        }
    };

    Slice.defineValue(Test.SimpleClass7, iceC_Test_SimpleClass7_ids[1], false);

    Test.Exception1 = class extends Ice.UserException
    {
        constructor(str = "", b = false, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception1";
        }

        _mostDerivedType()
        {
            return Test.Exception1;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }
    };

    Test.Exception2 = class extends Ice.UserException
    {
        constructor(str = "", b = false, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception2";
        }

        _mostDerivedType()
        {
            return Test.Exception2;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }
    };

    Test.Exception3 = class extends Ice.UserException
    {
        constructor(str = "", b = false, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception3";
        }

        _mostDerivedType()
        {
            return Test.Exception3;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }
    };

    Test.Exception4 = class extends Ice.UserException
    {
        constructor(str = "", b = false, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception4";
        }

        _mostDerivedType()
        {
            return Test.Exception4;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }
    };

    Test.Exception5 = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception5";
        }

        _mostDerivedType()
        {
            return Test.Exception5;
        }
    };

    Test.Exception6 = class extends Ice.UserException
    {
        constructor(str = "", b = false, _cause = "")
        {
            super(_cause);
            this.str = str;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Exception6";
        }

        _mostDerivedType()
        {
            return Test.Exception6;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.str);
            ostr.writeBool(this.b);
        }

        _readMemberImpl(istr)
        {
            this.str = istr.readString();
            this.b = istr.readBool();
        }
    };

    Test.OptionalEx0 = class extends Ice.UserException
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined, _cause = "")
        {
            super(_cause);
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::OptionalEx0";
        }

        _mostDerivedType()
        {
            return Test.OptionalEx0;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _readMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Test.OptionalEx1 = class extends Ice.UserException
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined, _cause = "")
        {
            super(_cause);
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::OptionalEx1";
        }

        _mostDerivedType()
        {
            return Test.OptionalEx1;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _readMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Test.OptionalEx2 = class extends Ice.UserException
    {
        constructor(firstName = "", secondName = "", emailAddress = undefined, _cause = "")
        {
            super(_cause);
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::OptionalEx2";
        }

        _mostDerivedType()
        {
            return Test.OptionalEx2;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            ostr.writeString(this.secondName);
            Ice.StringHelper.writeOptional(ostr, 1, this.emailAddress);
        }

        _readMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = istr.readString();
            this.emailAddress = Ice.StringHelper.readOptional(istr, 1);
        }
    };

    Test.OptionalEx3 = class extends Ice.UserException
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined, _cause = "")
        {
            super(_cause);
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::OptionalEx3";
        }

        _mostDerivedType()
        {
            return Test.OptionalEx3;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _readMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Test.OptionalEx4 = class extends Ice.UserException
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined, _cause = "")
        {
            super(_cause);
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::OptionalEx4";
        }

        _mostDerivedType()
        {
            return Test.OptionalEx4;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _readMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    const iceC_Test_BaseInterface1_ids = [
        "::Ice::Object",
        "::Test::BaseInterface1"
    ];

    Test.BaseInterface1 = class extends Ice.Object
    {
    };

    Test.BaseInterface1Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface1, Test.BaseInterface1Prx, iceC_Test_BaseInterface1_ids, 1,
    {
        "baseOp1": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface2_ids = [
        "::Ice::Object",
        "::Test::BaseInterface2"
    ];

    Test.BaseInterface2 = class extends Ice.Object
    {
    };

    Test.BaseInterface2Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface2, Test.BaseInterface2Prx, iceC_Test_BaseInterface2_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface3_ids = [
        "::Ice::Object",
        "::Test::BaseInterface3"
    ];

    Test.BaseInterface3 = class extends Ice.Object
    {
    };

    Test.BaseInterface3Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface3, Test.BaseInterface3Prx, iceC_Test_BaseInterface3_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface4_ids = [
        "::Ice::Object",
        "::Test::BaseInterface4"
    ];

    Test.BaseInterface4 = class extends Ice.Object
    {
    };

    Test.BaseInterface4Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface4, Test.BaseInterface4Prx, iceC_Test_BaseInterface4_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface5_ids = [
        "::Ice::Object",
        "::Test::BaseInterface5"
    ];

    Test.BaseInterface5 = class extends Ice.Object
    {
    };

    Test.BaseInterface5Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface5, Test.BaseInterface5Prx, iceC_Test_BaseInterface5_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface6_ids = [
        "::Ice::Object",
        "::Test::BaseInterface6"
    ];

    Test.BaseInterface6 = class extends Ice.Object
    {
    };

    Test.BaseInterface6Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface6, Test.BaseInterface6Prx, iceC_Test_BaseInterface6_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface7_ids = [
        "::Ice::Object",
        "::Test::BaseInterface7"
    ];

    Test.BaseInterface7 = class extends Ice.Object
    {
    };

    Test.BaseInterface7Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface7, Test.BaseInterface7Prx, iceC_Test_BaseInterface7_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface8_ids = [
        "::Ice::Object",
        "::Test::BaseInterface8"
    ];

    Test.BaseInterface8 = class extends Ice.Object
    {
    };

    Test.BaseInterface8Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface8, Test.BaseInterface8Prx, iceC_Test_BaseInterface8_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_BaseInterface9_ids = [
        "::Ice::Object",
        "::Test::BaseInterface9"
    ];

    Test.BaseInterface9 = class extends Ice.Object
    {
    };

    Test.BaseInterface9Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.BaseInterface9, Test.BaseInterface9Prx, iceC_Test_BaseInterface9_ids, 1,
    {
        "baseOp": [, , , , , , , , , ],
        "baseOp2": [, , , , , [[3]], [[7]],
        [
            Test.Exception1
        ], , ]
    });

    const iceC_Test_Compact1_ids = [
        "::Ice::Object",
        "::Test::Compact1"
    ];

    Test.Compact1 = class extends Ice.Value
    {
        constructor(id = 0)
        {
            super();
            this.id = id;
        }

        static get _iceCompactId()
        {
            return 1;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.id);
        }

        _iceReadMemberImpl(istr)
        {
            this.id = istr.readInt();
        }
    };

    Slice.defineValue(Test.Compact1, iceC_Test_Compact1_ids[1], false, 1);

    const iceC_Test_Derived1_ids = [
        "::Ice::Object",
        "::Test::Compact1",
        "::Test::Derived1"
    ];

    Test.Derived1 = class extends Test.Compact1
    {
        constructor(id)
        {
            super(id);
        }
    };

    Slice.defineValue(Test.Derived1, iceC_Test_Derived1_ids[2], false);

    const iceC_Test_Compact2_ids = [
        "::Ice::Object",
        "::Test::Compact2"
    ];

    Test.Compact2 = class extends Ice.Value
    {
        constructor(id = 0)
        {
            super();
            this.id = id;
        }

        static get _iceCompactId()
        {
            return 2;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.id);
        }

        _iceReadMemberImpl(istr)
        {
            this.id = istr.readInt();
        }
    };

    Slice.defineValue(Test.Compact2, iceC_Test_Compact2_ids[1], false, 2);

    const iceC_Test_Optional0_ids = [
        "::Ice::Object",
        "::Test::Optional0"
    ];

    Test.Optional0 = class extends Ice.Value
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined)
        {
            super();
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Slice.defineValue(Test.Optional0, iceC_Test_Optional0_ids[1], false);

    const iceC_Test_Optional1_ids = [
        "::Ice::Object",
        "::Test::Optional1"
    ];

    Test.Optional1 = class extends Ice.Value
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined)
        {
            super();
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Slice.defineValue(Test.Optional1, iceC_Test_Optional1_ids[1], false);

    const iceC_Test_Optional2_ids = [
        "::Ice::Object",
        "::Test::Optional2"
    ];

    Test.Optional2 = class extends Ice.Value
    {
        constructor(firstName = "", secondName = "", emailAddress = undefined)
        {
            super();
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            ostr.writeString(this.secondName);
            Ice.StringHelper.writeOptional(ostr, 1, this.emailAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = istr.readString();
            this.emailAddress = Ice.StringHelper.readOptional(istr, 1);
        }
    };

    Slice.defineValue(Test.Optional2, iceC_Test_Optional2_ids[1], false);

    const iceC_Test_Optional3_ids = [
        "::Ice::Object",
        "::Test::Optional3"
    ];

    Test.Optional3 = class extends Ice.Value
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined)
        {
            super();
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Slice.defineValue(Test.Optional3, iceC_Test_Optional3_ids[1], false);

    const iceC_Test_Optional4_ids = [
        "::Ice::Object",
        "::Test::Optional4"
    ];

    Test.Optional4 = class extends Ice.Value
    {
        constructor(firstName = "", secondName = undefined, emailAddress = undefined)
        {
            super();
            this.firstName = firstName;
            this.secondName = secondName;
            this.emailAddress = emailAddress;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.firstName);
            Ice.StringHelper.writeOptional(ostr, 1, this.secondName);
            Ice.StringHelper.writeOptional(ostr, 2, this.emailAddress);
        }

        _iceReadMemberImpl(istr)
        {
            this.firstName = istr.readString();
            this.secondName = Ice.StringHelper.readOptional(istr, 1);
            this.emailAddress = Ice.StringHelper.readOptional(istr, 2);
        }
    };

    Slice.defineValue(Test.Optional4, iceC_Test_Optional4_ids[1], false);

    const iceC_Test_OptionalParameters0_ids = [
        "::Ice::Object",
        "::Test::OptionalParameters0"
    ];

    Test.OptionalParameters0 = class extends Ice.Object
    {
    };

    Test.OptionalParameters0Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalParameters0, Test.OptionalParameters0Prx, iceC_Test_OptionalParameters0_ids, 1,
    {
        "op1": [, , , , , [[7], [7, , 1], [7, , 2]], , , , ]
    });

    const iceC_Test_OptionalParameters1_ids = [
        "::Ice::Object",
        "::Test::OptionalParameters1"
    ];

    Test.OptionalParameters1 = class extends Ice.Object
    {
    };

    Test.OptionalParameters1Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalParameters1, Test.OptionalParameters1Prx, iceC_Test_OptionalParameters1_ids, 1,
    {
        "op1": [, , , , , [[7], [7, , 1], [7, , 2]], , , , ]
    });

    const iceC_Test_OptionalParameters2_ids = [
        "::Ice::Object",
        "::Test::OptionalParameters2"
    ];

    Test.OptionalParameters2 = class extends Ice.Object
    {
    };

    Test.OptionalParameters2Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalParameters2, Test.OptionalParameters2Prx, iceC_Test_OptionalParameters2_ids, 1,
    {
        "op1": [, , , , , [[7], [7, , 1], [7, , 2]], , , , ]
    });

    const iceC_Test_OptionalParameters3_ids = [
        "::Ice::Object",
        "::Test::OptionalParameters3"
    ];

    Test.OptionalParameters3 = class extends Ice.Object
    {
    };

    Test.OptionalParameters3Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalParameters3, Test.OptionalParameters3Prx, iceC_Test_OptionalParameters3_ids, 1,
    {
        "op1": [, , , , , [[7], [7, , 1], [7]], , , , ]
    });

    const iceC_Test_OptionalReturn0_ids = [
        "::Ice::Object",
        "::Test::OptionalReturn0"
    ];

    Test.OptionalReturn0 = class extends Ice.Object
    {
    };

    Test.OptionalReturn0Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalReturn0, Test.OptionalReturn0Prx, iceC_Test_OptionalReturn0_ids, 1,
    {
        "op": [, , , , [3, , 1], , , , , ]
    });

    const iceC_Test_OptionalReturn2_ids = [
        "::Ice::Object",
        "::Test::OptionalReturn2"
    ];

    Test.OptionalReturn2 = class extends Ice.Object
    {
    };

    Test.OptionalReturn2Prx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.OptionalReturn2, Test.OptionalReturn2Prx, iceC_Test_OptionalReturn2_ids, 1,
    {
        "op": [, , , , [3, , 1], , , , , ]
    });

    Test.LocalEnum = Slice.defineEnum([
        ['LocalEnum1', 0], ['LocalEnum2', 1], ['LocalEnum3', 2]]);

    Slice.defineSequence(Test, "LocalSequenceHelper", "Ice.StringHelper", false);

    Slice.defineDictionary(Test, "LocalDictionary", "LocalDictionaryHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    Test.LocalStruct = class
    {
        constructor(str = "")
        {
            this.str = str;
        }
    };

    Slice.defineStruct(Test.LocalStruct, true, true);

    Test.LocalClass = class
    {
    };

    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
