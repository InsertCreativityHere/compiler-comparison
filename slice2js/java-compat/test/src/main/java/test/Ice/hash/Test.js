//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.PointF = class
    {
        constructor(x = 0.0, y = 0.0, z = 0.0)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        _write(ostr)
        {
            ostr.writeFloat(this.x);
            ostr.writeFloat(this.y);
            ostr.writeFloat(this.z);
        }

        _read(istr)
        {
            this.x = istr.readFloat();
            this.y = istr.readFloat();
            this.z = istr.readFloat();
        }

        static get minWireSize()
        {
            return  12;
        }
    };

    Slice.defineStruct(Test.PointF, false, false);

    Test.PointD = class
    {
        constructor(x = 0.0, y = 0.0, z = 0.0)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        _write(ostr)
        {
            ostr.writeDouble(this.x);
            ostr.writeDouble(this.y);
            ostr.writeDouble(this.z);
        }

        _read(istr)
        {
            this.x = istr.readDouble();
            this.y = istr.readDouble();
            this.z = istr.readDouble();
        }

        static get minWireSize()
        {
            return  24;
        }
    };

    Slice.defineStruct(Test.PointD, false, false);

    Test.Point = class
    {
        constructor(x = 0, y = 0)
        {
            this.x = x;
            this.y = y;
        }

        _write(ostr)
        {
            ostr.writeInt(this.x);
            ostr.writeInt(this.y);
        }

        _read(istr)
        {
            this.x = istr.readInt();
            this.y = istr.readInt();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(Test.Point, true, false);

    Slice.defineSequence(Test, "PointsHelper", "Test.Point", true);

    Test.Polyline = class
    {
        constructor(vertices = null)
        {
            this.vertices = vertices;
        }

        _write(ostr)
        {
            Test.PointsHelper.write(ostr, this.vertices);
        }

        _read(istr)
        {
            this.vertices = Test.PointsHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.Polyline, true, true);

    Test.Color = class
    {
        constructor(r = 0, g = 0, b = 0, a = 0)
        {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }

        _write(ostr)
        {
            ostr.writeInt(this.r);
            ostr.writeInt(this.g);
            ostr.writeInt(this.b);
            ostr.writeInt(this.a);
        }

        _read(istr)
        {
            this.r = istr.readInt();
            this.g = istr.readInt();
            this.b = istr.readInt();
            this.a = istr.readInt();
        }

        static get minWireSize()
        {
            return  16;
        }
    };

    Slice.defineStruct(Test.Color, true, false);

    Slice.defineDictionary(Test, "StringColorMap", "StringColorMapHelper", "Ice.IntHelper", "Test.Color", true, undefined, undefined);

    Test.ColorPalette = class
    {
        constructor(colors = null)
        {
            this.colors = colors;
        }

        _write(ostr)
        {
            Test.StringColorMapHelper.write(ostr, this.colors);
        }

        _read(istr)
        {
            this.colors = Test.StringColorMapHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.ColorPalette, false, true);

    const iceC_Test_Pen_ids = [
        "::Ice::Object",
        "::Test::Pen"
    ];

    Test.Pen = class extends Ice.Value
    {
        constructor(thickness = 0, color = new Test.Color())
        {
            super();
            this.thickness = thickness;
            this.color = color;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.thickness);
            Test.Color.write(ostr, this.color);
        }

        _iceReadMemberImpl(istr)
        {
            this.thickness = istr.readInt();
            this.color = Test.Color.read(istr, this.color);
        }
    };

    Slice.defineValue(Test.Pen, iceC_Test_Pen_ids[1], false);

    Test.Draw = class
    {
        constructor(backgroundColor = new Test.Color(), pen = null, shared = false)
        {
            this.backgroundColor = backgroundColor;
            this.pen = pen;
            this.shared = shared;
        }

        _write(ostr)
        {
            Test.Color.write(ostr, this.backgroundColor);
            ostr.writeValue(this.pen);
            ostr.writeBool(this.shared);
        }

        _read(istr)
        {
            this.backgroundColor = Test.Color.read(istr, this.backgroundColor);
            istr.readValue(obj => this.pen = obj, Test.Pen);
            this.shared = istr.readBool();
        }

        static get minWireSize()
        {
            return  18;
        }
    };

    Slice.defineStruct(Test.Draw, false, true);
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
