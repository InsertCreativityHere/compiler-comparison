//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";

import { 
    DataStorm as DataStorm_______slice_DataStorm_Sample, } from "../../../slice/DataStorm/Sample.js"

const DataStorm = {
    ...DataStorm_______slice_DataStorm_Sample,
};

export const DataStormContract = {};

DataStormContract.ClearHistoryPolicy = Ice.defineEnum([
    ['OnAdd', 0], ['OnRemove', 1], ['OnAll', 2], ['OnAllExceptPartialUpdate', 3], ['Never', 4]]);

[DataStormContract.LongLongDict, DataStormContract.LongLongDictHelper] = Ice.defineDictionary(Ice.LongHelper, Ice.LongHelper, true, Ice.HashMap.compareEquals);

DataStormContract.DataSample = class
{
    constructor(id = new Ice.Long(0, 0), keyId = new Ice.Long(0, 0), keyValue = null, timestamp = new Ice.Long(0, 0), tag = new Ice.Long(0, 0), event = DataStorm.SampleEvent.Add, value = null)
    {
        this.id = id;
        this.keyId = keyId;
        this.keyValue = keyValue;
        this.timestamp = timestamp;
        this.tag = tag;
        this.event = event;
        this.value = value;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeLong(this.keyId);
        Ice.ByteSeqHelper.write(ostr, this.keyValue);
        ostr.writeLong(this.timestamp);
        ostr.writeLong(this.tag);
        DataStorm.SampleEvent._write(ostr, this.event);
        Ice.ByteSeqHelper.write(ostr, this.value);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        this.keyId = istr.readLong();
        this.keyValue = Ice.ByteSeqHelper.read(istr);
        this.timestamp = istr.readLong();
        this.tag = istr.readLong();
        this.event = DataStorm.SampleEvent._read(istr);
        this.value = Ice.ByteSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  35;
    }
};

Ice.defineStruct(DataStormContract.DataSample, false, true);

DataStormContract.DataSampleSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.DataSample, false);

DataStormContract.DataSamples = class
{
    constructor(id = new Ice.Long(0, 0), samples = null)
    {
        this.id = id;
        this.samples = samples;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        DataStormContract.DataSampleSeqHelper.write(ostr, this.samples);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        this.samples = DataStormContract.DataSampleSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  9;
    }
};

Ice.defineStruct(DataStormContract.DataSamples, false, true);

DataStormContract.DataSamplesSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.DataSamples, false);

DataStormContract.ElementInfo = class
{
    constructor(id = new Ice.Long(0, 0), name = "", value = null)
    {
        this.id = id;
        this.name = name;
        this.value = value;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeString(this.name);
        Ice.ByteSeqHelper.write(ostr, this.value);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        this.name = istr.readString();
        this.value = Ice.ByteSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  10;
    }
};

Ice.defineStruct(DataStormContract.ElementInfo, false, true);

DataStormContract.ElementInfoSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.ElementInfo, false);

DataStormContract.TopicInfo = class
{
    constructor(name = "", ids = null)
    {
        this.name = name;
        this.ids = ids;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        Ice.LongSeqHelper.write(ostr, this.ids);
    }

    _read(istr)
    {
        this.name = istr.readString();
        this.ids = Ice.LongSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(DataStormContract.TopicInfo, false, true);

DataStormContract.TopicInfoSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.TopicInfo, false);

DataStormContract.TopicSpec = class
{
    constructor(id = new Ice.Long(0, 0), name = "", elements = null, tags = null)
    {
        this.id = id;
        this.name = name;
        this.elements = elements;
        this.tags = tags;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeString(this.name);
        DataStormContract.ElementInfoSeqHelper.write(ostr, this.elements);
        DataStormContract.ElementInfoSeqHelper.write(ostr, this.tags);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        this.name = istr.readString();
        this.elements = DataStormContract.ElementInfoSeqHelper.read(istr);
        this.tags = DataStormContract.ElementInfoSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  11;
    }
};

Ice.defineStruct(DataStormContract.TopicSpec, false, true);

DataStormContract.FilterInfo = class
{
    constructor(name = "", criteria = null)
    {
        this.name = name;
        this.criteria = criteria;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        Ice.ByteSeqHelper.write(ostr, this.criteria);
    }

    _read(istr)
    {
        this.name = istr.readString();
        this.criteria = Ice.ByteSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(DataStormContract.FilterInfo, false, true);

DataStormContract.ElementConfig = class extends Ice.Value
{
    constructor(facet = undefined, sampleFilter = undefined, name = undefined, priority = undefined, sampleCount = undefined, sampleLifetime = undefined, clearHistory = undefined)
    {
        super();
        this.facet = facet;
        this.sampleFilter = sampleFilter;
        this.name = name;
        this.priority = priority;
        this.sampleCount = sampleCount;
        this.sampleLifetime = sampleLifetime;
        this.clearHistory = clearHistory;
    }

    static get _iceCompactId()
    {
        return 1;
    }

    _iceWriteMemberImpl(ostr)
    {
        Ice.StringHelper.writeOptional(ostr, 1, this.facet);
        DataStormContract.FilterInfo.writeOptional(ostr, 2, this.sampleFilter);
        Ice.StringHelper.writeOptional(ostr, 3, this.name);
        Ice.IntHelper.writeOptional(ostr, 4, this.priority);
        Ice.IntHelper.writeOptional(ostr, 10, this.sampleCount);
        Ice.IntHelper.writeOptional(ostr, 11, this.sampleLifetime);
        DataStormContract.ClearHistoryPolicy._writeOpt(ostr, 12, this.clearHistory);
    }

    _iceReadMemberImpl(istr)
    {
        this.facet = Ice.StringHelper.readOptional(istr, 1);
        this.sampleFilter = DataStormContract.FilterInfo.readOptional(istr, 2);
        this.name = Ice.StringHelper.readOptional(istr, 3);
        this.priority = Ice.IntHelper.readOptional(istr, 4);
        this.sampleCount = Ice.IntHelper.readOptional(istr, 10);
        this.sampleLifetime = Ice.IntHelper.readOptional(istr, 11);
        this.clearHistory = DataStormContract.ClearHistoryPolicy._readOpt(istr, 12);
    }
};

Ice.defineValue(DataStormContract.ElementConfig, "::DataStormContract::ElementConfig", 1);
Ice.TypeRegistry.declareValueType("DataStormContract.ElementConfig", DataStormContract.ElementConfig);

DataStormContract.ElementData = class
{
    constructor(id = new Ice.Long(0, 0), config = null, lastIds = null)
    {
        this.id = id;
        this.config = config;
        this.lastIds = lastIds;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeValue(this.config);
        DataStormContract.LongLongDictHelper.write(ostr, this.lastIds);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        istr.readValue(obj => this.config = obj, Ice.TypeRegistry.getValueType("DataStormContract.ElementConfig"));
        this.lastIds = DataStormContract.LongLongDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  10;
    }
};

Ice.defineStruct(DataStormContract.ElementData, false, true);

DataStormContract.ElementDataSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.ElementData, false);

DataStormContract.ElementSpec = class
{
    constructor(elements = null, id = new Ice.Long(0, 0), name = "", value = null, peerId = new Ice.Long(0, 0), peerName = "")
    {
        this.elements = elements;
        this.id = id;
        this.name = name;
        this.value = value;
        this.peerId = peerId;
        this.peerName = peerName;
    }

    _write(ostr)
    {
        DataStormContract.ElementDataSeqHelper.write(ostr, this.elements);
        ostr.writeLong(this.id);
        ostr.writeString(this.name);
        Ice.ByteSeqHelper.write(ostr, this.value);
        ostr.writeLong(this.peerId);
        ostr.writeString(this.peerName);
    }

    _read(istr)
    {
        this.elements = DataStormContract.ElementDataSeqHelper.read(istr);
        this.id = istr.readLong();
        this.name = istr.readString();
        this.value = Ice.ByteSeqHelper.read(istr);
        this.peerId = istr.readLong();
        this.peerName = istr.readString();
    }

    static get minWireSize()
    {
        return  20;
    }
};

Ice.defineStruct(DataStormContract.ElementSpec, false, true);

DataStormContract.ElementSpecSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.ElementSpec, false);

DataStormContract.ElementDataAck = class
{
    constructor(id = new Ice.Long(0, 0), config = null, lastIds = null, samples = null, peerId = new Ice.Long(0, 0))
    {
        this.id = id;
        this.config = config;
        this.lastIds = lastIds;
        this.samples = samples;
        this.peerId = peerId;
    }

    _write(ostr)
    {
        ostr.writeLong(this.id);
        ostr.writeValue(this.config);
        DataStormContract.LongLongDictHelper.write(ostr, this.lastIds);
        DataStormContract.DataSampleSeqHelper.write(ostr, this.samples);
        ostr.writeLong(this.peerId);
    }

    _read(istr)
    {
        this.id = istr.readLong();
        istr.readValue(obj => this.config = obj, Ice.TypeRegistry.getValueType("DataStormContract.ElementConfig"));
        this.lastIds = DataStormContract.LongLongDictHelper.read(istr);
        this.samples = DataStormContract.DataSampleSeqHelper.read(istr);
        this.peerId = istr.readLong();
    }

    static get minWireSize()
    {
        return  19;
    }
};

Ice.defineStruct(DataStormContract.ElementDataAck, false, true);

DataStormContract.ElementDataAckSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.ElementDataAck, false);

DataStormContract.ElementSpecAck = class
{
    constructor(elements = null, id = new Ice.Long(0, 0), name = "", value = null, peerId = new Ice.Long(0, 0), peerName = "")
    {
        this.elements = elements;
        this.id = id;
        this.name = name;
        this.value = value;
        this.peerId = peerId;
        this.peerName = peerName;
    }

    _write(ostr)
    {
        DataStormContract.ElementDataAckSeqHelper.write(ostr, this.elements);
        ostr.writeLong(this.id);
        ostr.writeString(this.name);
        Ice.ByteSeqHelper.write(ostr, this.value);
        ostr.writeLong(this.peerId);
        ostr.writeString(this.peerName);
    }

    _read(istr)
    {
        this.elements = DataStormContract.ElementDataAckSeqHelper.read(istr);
        this.id = istr.readLong();
        this.name = istr.readString();
        this.value = Ice.ByteSeqHelper.read(istr);
        this.peerId = istr.readLong();
        this.peerName = istr.readString();
    }

    static get minWireSize()
    {
        return  20;
    }
};

Ice.defineStruct(DataStormContract.ElementSpecAck, false, true);

DataStormContract.ElementSpecAckSeqHelper = Ice.StreamHelpers.generateSeqHelper(DataStormContract.ElementSpecAck, false);

const iceC_DataStormContract_Session_ids = [
    "::DataStormContract::Session",
    "::Ice::Object"
];

DataStormContract.Session = class extends Ice.Object
{
};

DataStormContract.SessionPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("DataStormContract.SessionPrx", DataStormContract.SessionPrx);

Ice.defineOperations(
    DataStormContract.Session,
    DataStormContract.SessionPrx,
    iceC_DataStormContract_Session_ids,
    "::DataStormContract::Session",
    {
        "announceTopics": [, , , , [[DataStormContract.TopicInfoSeqHelper], [1]], , , , ],
        "attachTopic": [, , , , [[DataStormContract.TopicSpec]], , , , ],
        "detachTopic": [, , , , [[4]], , , , ],
        "attachTags": [, , , , [[4], [DataStormContract.ElementInfoSeqHelper], [1]], , , , ],
        "detachTags": [, , , , [[4], [Ice.LongSeqHelper]], , , , ],
        "announceElements": [, , , , [[4], [DataStormContract.ElementInfoSeqHelper]], , , , ],
        "attachElements": [, , , , [[4], [DataStormContract.ElementSpecSeqHelper], [1]], , , true, ],
        "attachElementsAck": [, , , , [[4], [DataStormContract.ElementSpecAckSeqHelper]], , , true, ],
        "detachElements": [, , , , [[4], [Ice.LongSeqHelper]], , , , ],
        "initSamples": [, , , , [[4], [DataStormContract.DataSamplesSeqHelper]], , , , ],
        "disconnected": [, , , , , , , , ]
    });

const iceC_DataStormContract_PublisherSession_ids = [
    "::DataStormContract::PublisherSession",
    "::DataStormContract::Session",
    "::Ice::Object"
];

DataStormContract.PublisherSession = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            DataStormContract.Session
        ];
    }
};

DataStormContract.PublisherSessionPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            DataStormContract.SessionPrx];
    }
};
Ice.TypeRegistry.declareProxyType("DataStormContract.PublisherSessionPrx", DataStormContract.PublisherSessionPrx);

Ice.defineOperations(
    DataStormContract.PublisherSession,
    DataStormContract.PublisherSessionPrx,
    iceC_DataStormContract_PublisherSession_ids,
    "::DataStormContract::PublisherSession");

const iceC_DataStormContract_SubscriberSession_ids = [
    "::DataStormContract::Session",
    "::DataStormContract::SubscriberSession",
    "::Ice::Object"
];

DataStormContract.SubscriberSession = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            DataStormContract.Session
        ];
    }
};

DataStormContract.SubscriberSessionPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            DataStormContract.SessionPrx];
    }
};
Ice.TypeRegistry.declareProxyType("DataStormContract.SubscriberSessionPrx", DataStormContract.SubscriberSessionPrx);

Ice.defineOperations(
    DataStormContract.SubscriberSession,
    DataStormContract.SubscriberSessionPrx,
    iceC_DataStormContract_SubscriberSession_ids,
    "::DataStormContract::SubscriberSession",
    {
        "s": [, , , , [[4], [4], [DataStormContract.DataSample]], , , , ]
    });

const iceC_DataStormContract_Node_ids = [
    "::DataStormContract::Node",
    "::Ice::Object"
];

/**
 * The Node interface allows DataStorm nodes to create publisher and subscriber sessions with each other.
 *
 * When a node has a writer for a topic that another node is reading, the node initiates the creation of a
 * publisher session. Likewise, when a node has a reader for a topic that another node is writing, the node
 * initiates the creation of a subscriber session.
 *
 * The publisher node hosts the publisher session servant, which is accessed by the subscriber node through a
 * PublisherSession proxy. The subscriber node hosts the subscriber session servant, which is accessed by the
 * publisher node through a SubscriberSession proxy.
 **/
DataStormContract.Node = class extends Ice.Object
{
};

DataStormContract.NodePrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("DataStormContract.NodePrx", DataStormContract.NodePrx);

Ice.defineOperations(
    DataStormContract.Node,
    DataStormContract.NodePrx,
    iceC_DataStormContract_Node_ids,
    "::DataStormContract::Node",
    {
        "initiateCreateSession": [, , , , [["DataStormContract.NodePrx"]], , , , ],
        "createSession": [, , , , [["DataStormContract.NodePrx"], ["DataStormContract.SubscriberSessionPrx"], [1]], , , , ],
        "confirmCreateSession": [, , , , [["DataStormContract.NodePrx"], ["DataStormContract.PublisherSessionPrx"]], , , , ]
    });

const iceC_DataStormContract_Lookup_ids = [
    "::DataStormContract::Lookup",
    "::Ice::Object"
];

/**
 * The lookup interface is used by DataStorm nodes to announce their topic readers and writers to other connected
 * nodes. When multicast is enabled, the lookup interface also broadcasts these announcements.
 * Each DataStorm node hosts a lookup servant with the identity "DataStorm/Lookup".
 **/
DataStormContract.Lookup = class extends Ice.Object
{
};

DataStormContract.LookupPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("DataStormContract.LookupPrx", DataStormContract.LookupPrx);

Ice.defineOperations(
    DataStormContract.Lookup,
    DataStormContract.LookupPrx,
    iceC_DataStormContract_Lookup_ids,
    "::DataStormContract::Lookup",
    {
        "announceTopicReader": [, 2, , , [[7], ["DataStormContract.NodePrx"]], , , , ],
        "announceTopicWriter": [, 2, , , [[7], ["DataStormContract.NodePrx"]], , , , ],
        "announceTopics": [, 2, , , [[Ice.StringSeqHelper], [Ice.StringSeqHelper], ["DataStormContract.NodePrx"]], , , , ],
        "createSession": [, , , ["DataStormContract.NodePrx"], [["DataStormContract.NodePrx"]], , , , ]
    });
