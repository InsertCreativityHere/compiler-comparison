//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `SubscriberRecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice, 
import { IceStorm } from "ice";


export const IceStorm = {};

/**
 * The key for persistent subscribers, or topics.
 * If the subscriber identity is empty then the record is used as a place holder for the creation of a topic,
 * otherwise the record holds a subscription record.
 **/
IceStorm.SubscriberRecordKey = class
{
    constructor(topic = new Ice.Identity(), id = new Ice.Identity())
    {
        this.topic = topic;
        this.id = id;
    }

    _write(ostr)
    {
        Ice.Identity.write(ostr, this.topic);
        Ice.Identity.write(ostr, this.id);
    }

    _read(istr)
    {
        this.topic = Ice.Identity.read(istr, this.topic);
        this.id = Ice.Identity.read(istr, this.id);
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(IceStorm.SubscriberRecordKey, true, true);

/**
 * Used to store persistent information for persistent subscribers.
 **/
IceStorm.SubscriberRecord = class
{
    constructor(topicName = "", id = new Ice.Identity(), link = false, obj = null, theQoS = null, cost = 0, theTopic = null)
    {
        this.topicName = topicName;
        this.id = id;
        this.link = link;
        this.obj = obj;
        this.theQoS = theQoS;
        this.cost = cost;
        this.theTopic = theTopic;
    }

    _write(ostr)
    {
        ostr.writeString(this.topicName);
        Ice.Identity.write(ostr, this.id);
        ostr.writeBool(this.link);
        ostr.writeProxy(this.obj);
        IceStorm.QoSHelper.write(ostr, this.theQoS);
        ostr.writeInt(this.cost);
        ostr.writeProxy(this.theTopic);
    }

    _read(istr)
    {
        this.topicName = istr.readString();
        this.id = Ice.Identity.read(istr, this.id);
        this.link = istr.readBool();
        this.obj = istr.readProxy();
        this.theQoS = IceStorm.QoSHelper.read(istr);
        this.cost = istr.readInt();
        this.theTopic = istr.readProxy();
    }

    static get minWireSize()
    {
        return  13;
    }
};

Ice.defineStruct(IceStorm.SubscriberRecord, false, true);

IceStorm.SubscriberRecordSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceStorm.SubscriberRecord, false);
