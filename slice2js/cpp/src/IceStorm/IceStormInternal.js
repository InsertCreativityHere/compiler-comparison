//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const IceStorm = require("ice").IceStorm;
    const IceStormElection = require("Election").IceStormElection;
    const Slice = Ice.Slice;

    /**
     * The event data.
     *
     **/
    IceStorm.EventData = class
    {
        constructor(op = "", mode = Ice.OperationMode.Normal, data = null, context = null)
        {
            this.op = op;
            this.mode = mode;
            this.data = data;
            this.context = context;
        }

        _write(ostr)
        {
            ostr.writeString(this.op);
            Ice.OperationMode._write(ostr, this.mode);
            Ice.ByteSeqHelper.write(ostr, this.data);
            Ice.ContextHelper.write(ostr, this.context);
        }

        _read(istr)
        {
            this.op = istr.readString();
            this.mode = Ice.OperationMode._read(istr);
            this.data = Ice.ByteSeqHelper.read(istr);
            this.context = Ice.ContextHelper.read(istr);
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(IceStorm.EventData, false, true);

    IceStorm.SendQueueSizeMaxReached = class extends Ice.LocalException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.LocalException;
        }

        static get _id()
        {
            return "::IceStorm::SendQueueSizeMaxReached";
        }
    };

    Slice.defineSequence(IceStorm, "EventDataSeqHelper", "IceStorm.EventData", false);

    const iceC_IceStorm_TopicLink_ids = [
        "::Ice::Object",
        "::IceStorm::TopicLink"
    ];

    /**
     * The TopicLink interface. This is used to forward events between
     * federated Topic instances.
     *
     * @see TopicInternal
     *
     **/
    IceStorm.TopicLink = class extends Ice.Object
    {
    };

    IceStorm.TopicLinkPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(IceStorm.TopicLink, IceStorm.TopicLinkPrx, iceC_IceStorm_TopicLink_ids, 1,
    {
        "forward": [, , , , , [["IceStorm.EventDataSeqHelper"]], , , , ]
    });

    /**
     * Thrown if the reap call would block.
     **/
    IceStorm.ReapWouldBlock = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::IceStorm::ReapWouldBlock";
        }

        _mostDerivedType()
        {
            return IceStorm.ReapWouldBlock;
        }
    };

    const iceC_IceStorm_TopicInternal_ids = [
        "::Ice::Object",
        "::IceStorm::Topic",
        "::IceStorm::TopicInternal"
    ];

    /**
     * Internal operations for a topic.
     *
     * @see Topic
     *
     **/
    IceStorm.TopicInternal = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                IceStorm.Topic
            ];
        }
    };

    IceStorm.TopicInternalPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                IceStorm.TopicPrx];
        }
    };

    Slice.defineOperations(IceStorm.TopicInternal, IceStorm.TopicInternalPrx, iceC_IceStorm_TopicInternal_ids, 2,
    {
        "getLinkProxy": [, 2, 2, , ["IceStorm.TopicLinkPrx"], , , , , ],
        "reap": [, , , , , [["Ice.IdentitySeqHelper"]], ,
        [
            IceStorm.ReapWouldBlock
        ], , ]
    });

    const iceC_IceStorm_TopicManagerInternal_ids = [
        "::Ice::Object",
        "::IceStorm::TopicManager",
        "::IceStorm::TopicManagerInternal"
    ];

    /**
     * Internal operations for a topic manager.
     *
     * @see TopicManager
     *
     **/
    IceStorm.TopicManagerInternal = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                IceStorm.TopicManager
            ];
        }
    };

    IceStorm.TopicManagerInternalPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                IceStorm.TopicManagerPrx];
        }
    };

    Slice.defineOperations(IceStorm.TopicManagerInternal, IceStorm.TopicManagerInternalPrx, iceC_IceStorm_TopicManagerInternal_ids, 2,
    {
        "getReplicaNode": [, 2, 2, , ["IceStormElection.NodePrx"], , , , , ]
    });
    exports.IceStorm = IceStorm;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
