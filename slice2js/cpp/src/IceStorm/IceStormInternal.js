//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice, 
import { IceStorm } from "ice";

import { 
    IceStormElection as IceStormElection_Election, } from "./Election.js"

const IceStormElection = {
    ...IceStormElection_Election,
};

export const IceStorm = {};

/**
 * The event data.
 **/
IceStorm.EventData = class
{
    constructor(op = "", mode = Ice.OperationMode.Normal, data = null, context = null)
    {
        this.op = op;
        this.mode = mode;
        this.data = data;
        this.context = context;
    }

    _write(ostr)
    {
        ostr.writeString(this.op);
        Ice.OperationMode._write(ostr, this.mode);
        Ice.ByteSeqHelper.write(ostr, this.data);
        Ice.ContextHelper.write(ostr, this.context);
    }

    _read(istr)
    {
        this.op = istr.readString();
        this.mode = Ice.OperationMode._read(istr);
        this.data = Ice.ByteSeqHelper.read(istr);
        this.context = Ice.ContextHelper.read(istr);
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(IceStorm.EventData, false, true);

IceStorm.EventDataSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceStorm.EventData, false);

const iceC_IceStorm_TopicLink_ids = [
    "::Ice::Object",
    "::IceStorm::TopicLink"
];

/**
 * The TopicLink interface. This is used to forward events between federated Topic instances.
 * @see TopicInternal
 **/
IceStorm.TopicLink = class extends Ice.Object
{
};

IceStorm.TopicLinkPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceStorm.TopicLinkPrx", IceStorm.TopicLinkPrx);

Ice.defineOperations(
    IceStorm.TopicLink,
    IceStorm.TopicLinkPrx,
    iceC_IceStorm_TopicLink_ids,
    "::IceStorm::TopicLink",
    {
        "forward": [, , , , [[IceStorm.EventDataSeqHelper]], , , , ]
    });

/**
 * Thrown if the reap call would block.
 **/
IceStorm.ReapWouldBlock = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceStorm::ReapWouldBlock";
    }

    _mostDerivedType()
    {
        return IceStorm.ReapWouldBlock;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceStorm.ReapWouldBlock",
    IceStorm.ReapWouldBlock);

const iceC_IceStorm_TopicInternal_ids = [
    "::Ice::Object",
    "::IceStorm::Topic",
    "::IceStorm::TopicInternal"
];

/**
 * Internal operations for a topic.
 * @see Topic
 **/
IceStorm.TopicInternal = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            IceStorm.Topic
        ];
    }
};

IceStorm.TopicInternalPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            IceStorm.TopicPrx];
    }
};
Ice.TypeRegistry.declareProxyType("IceStorm.TopicInternalPrx", IceStorm.TopicInternalPrx);

Ice.defineOperations(
    IceStorm.TopicInternal,
    IceStorm.TopicInternalPrx,
    iceC_IceStorm_TopicInternal_ids,
    "::IceStorm::TopicInternal",
    {
        "getLinkProxy": [, 2, , ["IceStorm.TopicLinkPrx"], , , , , ],
        "reap": [, , , , [[Ice.IdentitySeqHelper]], ,
        [
            IceStorm.ReapWouldBlock
        ], , ]
    });

const iceC_IceStorm_TopicManagerInternal_ids = [
    "::Ice::Object",
    "::IceStorm::TopicManager",
    "::IceStorm::TopicManagerInternal"
];

/**
 * Internal operations for a topic manager.
 * @see TopicManager
 **/
IceStorm.TopicManagerInternal = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            IceStorm.TopicManager
        ];
    }
};

IceStorm.TopicManagerInternalPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            IceStorm.TopicManagerPrx];
    }
};
Ice.TypeRegistry.declareProxyType("IceStorm.TopicManagerInternalPrx", IceStorm.TopicManagerInternalPrx);

Ice.defineOperations(
    IceStorm.TopicManagerInternal,
    IceStorm.TopicManagerInternalPrx,
    iceC_IceStorm_TopicManagerInternal_ids,
    "::IceStorm::TopicManagerInternal",
    {
        "getReplicaNode": [, 2, , ["IceStormElection.NodePrx"], , , , , ]
    });
