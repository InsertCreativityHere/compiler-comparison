//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const IceStorm = require("ice").IceStorm;
    const IceStormElection = require("LLURecord").IceStormElection;
    const Slice = Ice.Slice;

    Slice.defineDictionary(IceStormElection, "StringLogUpdateDict", "StringLogUpdateDictHelper", "Ice.StringHelper", "IceStormElection.LogUpdate", false, undefined, undefined);

    Slice.defineDictionary(IceStorm, "SubscriberRecordDict", "SubscriberRecordDictHelper", "IceStorm.SubscriberRecordKey", "IceStorm.SubscriberRecord", false, Ice.HashMap.compareEquals, undefined);

    IceStorm.AllData = class
    {
        constructor(llus = null, subscribers = null)
        {
            this.llus = llus;
            this.subscribers = subscribers;
        }

        _write(ostr)
        {
            IceStormElection.StringLogUpdateDictHelper.write(ostr, this.llus);
            IceStorm.SubscriberRecordDictHelper.write(ostr, this.subscribers);
        }

        _read(istr)
        {
            this.llus = IceStormElection.StringLogUpdateDictHelper.read(istr);
            this.subscribers = IceStorm.SubscriberRecordDictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(IceStorm.AllData, false, true);
    exports.IceStormElection = IceStormElection;
    exports.IceStorm = IceStorm;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
