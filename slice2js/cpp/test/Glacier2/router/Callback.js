//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.CallbackException = class extends Ice.UserException
    {
        constructor(someValue = 0.0, someString = "", _cause = "")
        {
            super(_cause);
            this.someValue = someValue;
            this.someString = someString;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::CallbackException";
        }

        _mostDerivedType()
        {
            return Test.CallbackException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeDouble(this.someValue);
            ostr.writeString(this.someString);
        }

        _readMemberImpl(istr)
        {
            this.someValue = istr.readDouble();
            this.someString = istr.readString();
        }
    };

    const iceC_Test_CallbackReceiver_ids = [
        "::Ice::Object",
        "::Test::CallbackReceiver"
    ];

    Test.CallbackReceiver = class extends Ice.Object
    {
    };

    Test.CallbackReceiverPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.CallbackReceiver, Test.CallbackReceiverPrx, iceC_Test_CallbackReceiver_ids, 1,
    {
        "callback": [, , , , , , , , , ],
        "callbackEx": [, , , , , , ,
        [
            Test.CallbackException
        ], , ],
        "concurrentCallback": [, , , , [3], [[3]], , , , ],
        "waitCallback": [, , , , , , , , , ],
        "callbackWithPayload": [, , , , , [["Ice.ByteSeqHelper"]], , , , ]
    });

    const iceC_Test_Callback_ids = [
        "::Ice::Object",
        "::Test::Callback"
    ];

    Test.Callback = class extends Ice.Object
    {
    };

    Test.CallbackPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Callback, Test.CallbackPrx, iceC_Test_Callback_ids, 1,
    {
        "initiateCallback": [, , , , , [["Test.CallbackReceiverPrx"]], , , , ],
        "initiateCallbackEx": [, , , , , [["Test.CallbackReceiverPrx"]], ,
        [
            Test.CallbackException
        ], , ],
        "initiateConcurrentCallback": [, , , , [3], [[3], ["Test.CallbackReceiverPrx"]], , , , ],
        "initiateWaitCallback": [, , , , , [["Test.CallbackReceiverPrx"]], , , , ],
        "initiateCallbackWithPayload": [, , , , , [["Test.CallbackReceiverPrx"]], , , , ],
        "shutdown": [, , , , , , , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
