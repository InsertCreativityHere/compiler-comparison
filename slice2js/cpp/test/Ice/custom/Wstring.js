//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Wstring.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test1 = {};

export const Test2 = {};

Test1.WstringSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.StringHelper, false);

[Test1.WstringWStringDict, Test1.WstringWStringDictHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.StringHelper, false, undefined);

Test1.WstringStruct = class
{
    constructor(s = "")
    {
        this.s = s;
    }

    _write(ostr)
    {
        ostr.writeString(this.s);
    }

    _read(istr)
    {
        this.s = istr.readString();
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(Test1.WstringStruct, true, true);

Test1.WstringException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test1::WstringException";
    }

    _mostDerivedType()
    {
        return Test1.WstringException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test1.WstringException",
    Test1.WstringException);

const iceC_Test1_WstringClass_ids = [
    "::Ice::Object",
    "::Test1::WstringClass"
];

Test1.WstringClass = class extends Ice.Object
{
};

Test1.WstringClassPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test1.WstringClassPrx", Test1.WstringClassPrx);

Ice.defineOperations(
    Test1.WstringClass,
    Test1.WstringClassPrx,
    iceC_Test1_WstringClass_ids,
    "::Test1::WstringClass",
    {
        "opString": [, , , [7], [[7]], [[7]], , , ],
        "opStruct": [, , , [Test1.WstringStruct], [[Test1.WstringStruct]], [[Test1.WstringStruct]], , , ],
        "throwExcept": [, , , , [[7]], ,
        [
            Test1.WstringException
        ], , ]
    });

Test2.WstringSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.StringHelper, false);

[Test2.WstringWStringDict, Test2.WstringWStringDictHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.StringHelper, false, undefined);

Test2.WstringStruct = class
{
    constructor(s = "")
    {
        this.s = s;
    }

    _write(ostr)
    {
        ostr.writeString(this.s);
    }

    _read(istr)
    {
        this.s = istr.readString();
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(Test2.WstringStruct, true, true);

Test2.WstringException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test2::WstringException";
    }

    _mostDerivedType()
    {
        return Test2.WstringException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test2.WstringException",
    Test2.WstringException);

const iceC_Test2_WstringClass_ids = [
    "::Ice::Object",
    "::Test2::WstringClass"
];

Test2.WstringClass = class extends Ice.Object
{
};

Test2.WstringClassPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test2.WstringClassPrx", Test2.WstringClassPrx);

Ice.defineOperations(
    Test2.WstringClass,
    Test2.WstringClassPrx,
    iceC_Test2_WstringClass_ids,
    "::Test2::WstringClass",
    {
        "opString": [, , , [7], [[7]], [[7]], , , ],
        "opStruct": [, , , [Test2.WstringStruct], [[Test2.WstringStruct]], [[Test2.WstringStruct]], , , ],
        "throwExcept": [, , , , [[7]], ,
        [
            Test2.WstringException
        ], , ]
    });
