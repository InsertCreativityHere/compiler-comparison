//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Slice.defineSequence(Test, "BoolSeqHelper", "Ice.BoolHelper", true);

    Slice.defineSequence(Test, "BoolListHelper", "Ice.BoolHelper", true);

    Slice.defineSequence(Test, "BoolListListHelper", "Test.BoolListHelper", false);

    Slice.defineSequence(Test, "BoolListSeqHelper", "Test.BoolListHelper", false);

    Slice.defineSequence(Test, "BoolSeqListHelper", "Test.BoolSeqHelper", false);

    Slice.defineSequence(Test, "BoolDequeListHelper", "Test.BoolSeqHelper", false);

    Slice.defineSequence(Test, "ByteSeqHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "ByteListHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "ByteListListHelper", "Test.ByteListHelper", false);

    Slice.defineSequence(Test, "ByteListSeqHelper", "Test.ByteListHelper", false);

    Slice.defineSequence(Test, "ByteSeqListHelper", "Test.ByteSeqHelper", false);

    Slice.defineSequence(Test, "StringSeqHelper", "Ice.StringHelper", false);

    Slice.defineSequence(Test, "StringListHelper", "Ice.StringHelper", false);

    Slice.defineSequence(Test, "StringListListHelper", "Test.StringListHelper", false);

    Slice.defineSequence(Test, "StringListSeqHelper", "Test.StringListHelper", false);

    Slice.defineSequence(Test, "StringSeqListHelper", "Test.StringSeqHelper", false);

    Test.Fixed = class
    {
        constructor(s = 0)
        {
            this.s = s;
        }

        _write(ostr)
        {
            ostr.writeShort(this.s);
        }

        _read(istr)
        {
            this.s = istr.readShort();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.Fixed, true, false);

    Slice.defineSequence(Test, "FixedSeqHelper", "Test.Fixed", true);

    Slice.defineSequence(Test, "FixedListHelper", "Test.Fixed", true);

    Slice.defineSequence(Test, "FixedListListHelper", "Test.FixedListHelper", false);

    Slice.defineSequence(Test, "FixedListSeqHelper", "Test.FixedListHelper", false);

    Slice.defineSequence(Test, "FixedSeqListHelper", "Test.FixedSeqHelper", false);

    Test.Variable = class
    {
        constructor(s = "", bl = null, ss = null)
        {
            this.s = s;
            this.bl = bl;
            this.ss = ss;
        }

        _write(ostr)
        {
            ostr.writeString(this.s);
            Test.BoolListHelper.write(ostr, this.bl);
            Test.StringSeqHelper.write(ostr, this.ss);
        }

        _read(istr)
        {
            this.s = istr.readString();
            this.bl = Test.BoolListHelper.read(istr);
            this.ss = Test.StringSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  3;
        }
    };

    Slice.defineStruct(Test.Variable, true, true);

    Slice.defineSequence(Test, "VariableSeqHelper", "Test.Variable", false);

    Slice.defineSequence(Test, "VariableListHelper", "Test.Variable", false);

    Slice.defineSequence(Test, "VariableListListHelper", "Test.VariableListHelper", false);

    Slice.defineSequence(Test, "VariableListSeqHelper", "Test.VariableListHelper", false);

    Slice.defineSequence(Test, "VariableSeqListHelper", "Test.VariableSeqHelper", false);

    Slice.defineDictionary(Test, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    Slice.defineSequence(Test, "StringStringDictSeqHelper", "Test.StringStringDictHelper", false);

    Slice.defineSequence(Test, "StringStringDictListHelper", "Test.StringStringDictHelper", false);

    Slice.defineSequence(Test, "StringStringDictListListHelper", "Test.StringStringDictListHelper", false);

    Slice.defineSequence(Test, "StringStringDictListSeqHelper", "Test.StringStringDictListHelper", false);

    Slice.defineSequence(Test, "StringStringDictSeqListHelper", "Test.StringStringDictSeqHelper", false);

    Test.E = Slice.defineEnum([
        ['E1', 0], ['E2', 1], ['E3', 2]]);

    Slice.defineSequence(Test, "ESeqHelper", "Test.E._helper", false);

    Slice.defineSequence(Test, "EListHelper", "Test.E._helper", false);

    Slice.defineSequence(Test, "EListListHelper", "Test.EListHelper", false);

    Slice.defineSequence(Test, "EListSeqHelper", "Test.EListHelper", false);

    Slice.defineSequence(Test, "ESeqListHelper", "Test.ESeqHelper", false);

    const iceC_Test_C_ids = [
        "::Ice::Object",
        "::Test::C"
    ];

    Test.C = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.C, iceC_Test_C_ids[1], false);

    Slice.defineSequence(Test, "CSeqHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineSequence(Test, "CListHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineSequence(Test, "CListListHelper", "Test.CListHelper", false);

    Slice.defineSequence(Test, "CListSeqHelper", "Test.CListHelper", false);

    Slice.defineSequence(Test, "CSeqListHelper", "Test.CSeqHelper", false);

    const iceC_Test_D_ids = [
        "::Ice::Object",
        "::Test::D"
    ];

    Test.D = class extends Ice.Object
    {
    };

    Test.DPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.D, Test.DPrx, iceC_Test_D_ids, 1);

    Slice.defineSequence(Test, "DPrxSeqHelper", "Test.DPrx", false);

    Slice.defineSequence(Test, "DPrxListHelper", "Test.DPrx", false);

    Slice.defineSequence(Test, "DPrxListListHelper", "Test.DPrxListHelper", false);

    Slice.defineSequence(Test, "DPrxListSeqHelper", "Test.DPrxListHelper", false);

    Slice.defineSequence(Test, "DPrxSeqListHelper", "Test.DPrxSeqHelper", false);

    Slice.defineSequence(Test, "DoubleSeqHelper", "Ice.DoubleHelper", true);

    Test.ClassOtherStruct = class
    {
        constructor(x = 0)
        {
            this.x = x;
        }

        _write(ostr)
        {
            ostr.writeInt(this.x);
        }

        _read(istr)
        {
            this.x = istr.readInt();
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(Test.ClassOtherStruct, true, false);

    Slice.defineSequence(Test, "ClassOtherStructSeqHelper", "Test.ClassOtherStruct", true);

    Test.ClassStruct = class
    {
        constructor(otherSeq = null, other = new Test.ClassOtherStruct(), y = 0)
        {
            this.otherSeq = otherSeq;
            this.other = other;
            this.y = y;
        }

        _write(ostr)
        {
            Test.ClassOtherStructSeqHelper.write(ostr, this.otherSeq);
            Test.ClassOtherStruct.write(ostr, this.other);
            ostr.writeInt(this.y);
        }

        _read(istr)
        {
            this.otherSeq = Test.ClassOtherStructSeqHelper.read(istr);
            this.other = Test.ClassOtherStruct.read(istr, this.other);
            this.y = istr.readInt();
        }

        static get minWireSize()
        {
            return  9;
        }
    };

    Slice.defineStruct(Test.ClassStruct, true, true);

    Slice.defineSequence(Test, "ClassStructSeqHelper", "Test.ClassStruct", false);

    Slice.defineDictionary(Test, "IntStringDict", "IntStringDictHelper", "Ice.IntHelper", "Ice.StringHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "LongLongDict", "LongLongDictHelper", "Ice.LongHelper", "Ice.LongHelper", true, Ice.HashMap.compareEquals, undefined);

    Slice.defineDictionary(Test, "StringIntDict", "StringIntDictHelper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    const iceC_Test_DictClass_ids = [
        "::Ice::Object",
        "::Test::DictClass"
    ];

    Test.DictClass = class extends Ice.Value
    {
        constructor(isdict = null)
        {
            super();
            this.isdict = isdict;
        }

        _iceWriteMemberImpl(ostr)
        {
            Test.IntStringDictHelper.write(ostr, this.isdict);
        }

        _iceReadMemberImpl(istr)
        {
            this.isdict = Test.IntStringDictHelper.read(istr);
        }
    };

    Slice.defineValue(Test.DictClass, iceC_Test_DictClass_ids[1], false);

    Slice.defineSequence(Test, "BoolBufferHelper", "Ice.BoolHelper", true);

    Slice.defineSequence(Test, "ShortBufferHelper", "Ice.ShortHelper", true);

    Slice.defineSequence(Test, "IntBufferHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "LongBufferHelper", "Ice.LongHelper", true);

    Slice.defineSequence(Test, "FloatBufferHelper", "Ice.FloatHelper", true);

    Slice.defineSequence(Test, "DoubleBufferHelper", "Ice.DoubleHelper", true);

    Slice.defineSequence(Test, "ByteBufferHelper", "Ice.ByteHelper", true);

    Test.BufferStruct = class
    {
        constructor(byteBuf = null, boolBuf = null, shortBuf = null, intBuf = null, longBuf = null, floatBuf = null, doubleBuf = null)
        {
            this.byteBuf = byteBuf;
            this.boolBuf = boolBuf;
            this.shortBuf = shortBuf;
            this.intBuf = intBuf;
            this.longBuf = longBuf;
            this.floatBuf = floatBuf;
            this.doubleBuf = doubleBuf;
        }

        _write(ostr)
        {
            Test.ByteBufferHelper.write(ostr, this.byteBuf);
            Test.BoolBufferHelper.write(ostr, this.boolBuf);
            Test.ShortBufferHelper.write(ostr, this.shortBuf);
            Test.IntBufferHelper.write(ostr, this.intBuf);
            Test.LongBufferHelper.write(ostr, this.longBuf);
            Test.FloatBufferHelper.write(ostr, this.floatBuf);
            Test.DoubleBufferHelper.write(ostr, this.doubleBuf);
        }

        _read(istr)
        {
            this.byteBuf = Test.ByteBufferHelper.read(istr);
            this.boolBuf = Test.BoolBufferHelper.read(istr);
            this.shortBuf = Test.ShortBufferHelper.read(istr);
            this.intBuf = Test.IntBufferHelper.read(istr);
            this.longBuf = Test.LongBufferHelper.read(istr);
            this.floatBuf = Test.FloatBufferHelper.read(istr);
            this.doubleBuf = Test.DoubleBufferHelper.read(istr);
        }

        static get minWireSize()
        {
            return  7;
        }
    };

    Slice.defineStruct(Test.BufferStruct, false, true);

    const iceC_Test_TestIntf_ids = [
        "::Ice::Object",
        "::Test::TestIntf"
    ];

    Test.TestIntf = class extends Ice.Object
    {
    };

    Test.TestIntfPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.TestIntf, Test.TestIntfPrx, iceC_Test_TestIntf_ids, 1,
    {
        "opDoubleArray": [, , , , ["Test.DoubleSeqHelper"], [["Test.DoubleSeqHelper"]], [["Test.DoubleSeqHelper"]], , , ],
        "opBoolArray": [, , , , ["Test.BoolSeqHelper"], [["Test.BoolSeqHelper"]], [["Test.BoolSeqHelper"]], , , ],
        "opByteArray": [, , , , ["Test.ByteListHelper"], [["Test.ByteListHelper"]], [["Test.ByteListHelper"]], , , ],
        "opVariableArray": [, , , , ["Test.VariableListHelper"], [["Test.VariableListHelper"]], [["Test.VariableListHelper"]], , , ],
        "opBoolRange": [, , , , ["Test.BoolSeqHelper"], [["Test.BoolSeqHelper"]], [["Test.BoolSeqHelper"]], , , ],
        "opByteRange": [, , , , ["Test.ByteListHelper"], [["Test.ByteListHelper"]], [["Test.ByteListHelper"]], , , ],
        "opVariableRange": [, , , , ["Test.VariableListHelper"], [["Test.VariableListHelper"]], [["Test.VariableListHelper"]], , , ],
        "opByteRangeType": [, , , , ["Test.ByteListHelper"], [["Test.ByteListHelper"]], [["Test.ByteListHelper"]], , , ],
        "opVariableRangeType": [, , , , ["Test.VariableListHelper"], [["Test.VariableListHelper"]], [["Test.VariableListHelper"]], , , ],
        "opBoolSeq": [, , , , ["Test.BoolSeqHelper"], [["Test.BoolSeqHelper"]], [["Test.BoolSeqHelper"]], , , ],
        "opBoolList": [, , , , ["Test.BoolListHelper"], [["Test.BoolListHelper"]], [["Test.BoolListHelper"]], , , ],
        "opBoolDequeList": [, , , , ["Test.BoolDequeListHelper"], [["Test.BoolDequeListHelper"]], [["Test.BoolDequeListHelper"]], , , ],
        "opBoolDequeListArray": [, , , , ["Test.BoolDequeListHelper"], [["Test.BoolDequeListHelper"]], [["Test.BoolDequeListHelper"]], , , ],
        "opBoolDequeListRange": [, , , , ["Test.BoolDequeListHelper"], [["Test.BoolDequeListHelper"]], [["Test.BoolDequeListHelper"]], , , ],
        "opByteSeq": [, , , , ["Test.ByteSeqHelper"], [["Test.ByteSeqHelper"]], [["Test.ByteSeqHelper"]], , , ],
        "opByteList": [, , , , ["Test.ByteListHelper"], [["Test.ByteListHelper"]], [["Test.ByteListHelper"]], , , ],
        "opMyByteSeq": [, , , , ["Test.ByteSeqHelper"], [["Test.ByteSeqHelper"]], [["Test.ByteSeqHelper"]], , , ],
        "opString": [, , , , [7], [[7]], [[7]], , , ],
        "opStringSeq": [, , , , ["Test.StringSeqHelper"], [["Test.StringSeqHelper"]], [["Test.StringSeqHelper"]], , , ],
        "opStringList": [, , , , ["Test.StringListHelper"], [["Test.StringListHelper"]], [["Test.StringListHelper"]], , , ],
        "opFixedSeq": [, , , , ["Test.FixedSeqHelper"], [["Test.FixedSeqHelper"]], [["Test.FixedSeqHelper"]], , , ],
        "opFixedList": [, , , , ["Test.FixedListHelper"], [["Test.FixedListHelper"]], [["Test.FixedListHelper"]], , , ],
        "opVariableSeq": [, , , , ["Test.VariableSeqHelper"], [["Test.VariableSeqHelper"]], [["Test.VariableSeqHelper"]], , , ],
        "opVariableList": [, , , , ["Test.VariableListHelper"], [["Test.VariableListHelper"]], [["Test.VariableListHelper"]], , , ],
        "opStringStringDictSeq": [, , , , ["Test.StringStringDictSeqHelper"], [["Test.StringStringDictSeqHelper"]], [["Test.StringStringDictSeqHelper"]], , , ],
        "opStringStringDictList": [, , , , ["Test.StringStringDictListHelper"], [["Test.StringStringDictListHelper"]], [["Test.StringStringDictListHelper"]], , , ],
        "opESeq": [, , , , ["Test.ESeqHelper"], [["Test.ESeqHelper"]], [["Test.ESeqHelper"]], , , ],
        "opEList": [, , , , ["Test.EListHelper"], [["Test.EListHelper"]], [["Test.EListHelper"]], , , ],
        "opDPrxSeq": [, , , , ["Test.DPrxSeqHelper"], [["Test.DPrxSeqHelper"]], [["Test.DPrxSeqHelper"]], , , ],
        "opDPrxList": [, , , , ["Test.DPrxListHelper"], [["Test.DPrxListHelper"]], [["Test.DPrxListHelper"]], , , ],
        "opCSeq": [, , , , ["Test.CSeqHelper"], [["Test.CSeqHelper"]], [["Test.CSeqHelper"]], , true, true],
        "opCList": [, , , , ["Test.CListHelper"], [["Test.CListHelper"]], [["Test.CListHelper"]], , true, true],
        "opClassStruct": [, , , , [Test.ClassStruct], [[Test.ClassStruct], ["Test.ClassStructSeqHelper"]], [[Test.ClassStruct], ["Test.ClassStructSeqHelper"]], , , ],
        "opOutArrayByteSeq": [, , , , , [["Test.ByteSeqHelper"]], [["Test.ByteSeqHelper"]], , , ],
        "opOutRangeByteSeq": [, , , , , [["Test.ByteSeqHelper"]], [["Test.ByteSeqHelper"]], , , ],
        "opIntStringDict": [, , , , ["Test.IntStringDictHelper"], [["Test.IntStringDictHelper"]], [["Test.IntStringDictHelper"]], , , ],
        "opVarDict": [, , , , ["Test.LongLongDictHelper"], [["Test.StringIntDictHelper"]], [["Test.StringIntDictHelper"]], , , ],
        "opCustomIntStringDict": [, , , , ["Test.IntStringDictHelper"], [["Test.IntStringDictHelper"]], [["Test.IntStringDictHelper"]], , , ],
        "opShortBuffer": [, , , , ["Test.ShortBufferHelper"], [["Test.ShortBufferHelper"]], [["Test.ShortBufferHelper"]], , , ],
        "opBoolBuffer": [, , , , ["Test.BoolSeqHelper"], [["Test.BoolSeqHelper"]], [["Test.BoolSeqHelper"]], , , ],
        "opBufferStruct": [, , , , [Test.BufferStruct], [[Test.BufferStruct]], , , , ],
        "shutdown": [, , , , , , , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
