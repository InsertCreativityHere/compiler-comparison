//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    const iceC_Test_C_ids = [
        "::Ice::Object",
        "::Test::C"
    ];

    Test.C = class extends Ice.Value
    {
        constructor(left = null, right = null)
        {
            super();
            this.left = left;
            this.right = right;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.left);
            ostr.writeValue(this.right);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.left = obj, Test.C);
            istr.readValue(obj => this.right = obj, Test.C);
        }
    };

    Slice.defineValue(Test.C, iceC_Test_C_ids[1], false);

    Slice.defineSequence(Test, "CSeqHelper", "Ice.ObjectHelper", false, "Test.C");

    Slice.defineDictionary(Test, "CDict", "CDictHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, undefined, "Test.C");

    Test.S = class
    {
        constructor(theC = null)
        {
            this.theC = theC;
        }

        _write(ostr)
        {
            ostr.writeValue(this.theC);
        }

        _read(istr)
        {
            istr.readValue(obj => this.theC = obj, Test.C);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.S, false, true);

    Slice.defineSequence(Test, "SSeqHelper", "Test.S", false);

    Slice.defineDictionary(Test, "C2Dict", "C2DictHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, undefined, "Test.C2");

    Test.S2 = class
    {
        constructor(theC2Dict = null)
        {
            this.theC2Dict = theC2Dict;
        }

        _write(ostr)
        {
            Test.C2DictHelper.write(ostr, this.theC2Dict);
        }

        _read(istr)
        {
            this.theC2Dict = Test.C2DictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.S2, false, true);

    Slice.defineSequence(Test, "S2SeqHelper", "Test.S2", false);

    const iceC_Test_C2_ids = [
        "::Ice::Object",
        "::Test::C2"
    ];

    Test.C2 = class extends Ice.Value
    {
        constructor(theS2Seq = null)
        {
            super();
            this.theS2Seq = theS2Seq;
        }

        _iceWriteMemberImpl(ostr)
        {
            Test.S2SeqHelper.write(ostr, this.theS2Seq);
        }

        _iceReadMemberImpl(istr)
        {
            this.theS2Seq = Test.S2SeqHelper.read(istr);
        }
    };

    Slice.defineValue(Test.C2, iceC_Test_C2_ids[1], false);

    const iceC_Test_Leaf_ids = [
        "::Ice::Object",
        "::Test::Leaf"
    ];

    Test.Leaf = class extends Ice.Value
    {
        constructor(i = 0)
        {
            super();
            this.i = i;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.i);
        }

        _iceReadMemberImpl(istr)
        {
            this.i = istr.readInt();
        }
    };

    Slice.defineValue(Test.Leaf, iceC_Test_Leaf_ids[1], false);

    const iceC_Test_Node_ids = [
        "::Ice::Object",
        "::Test::Node"
    ];

    Test.Node = class extends Ice.Value
    {
        constructor(l = null, n = null)
        {
            super();
            this.l = l;
            this.n = n;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.l);
            ostr.writeValue(this.n);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.l = obj, Test.Leaf);
            istr.readValue(obj => this.n = obj, Test.Node);
        }
    };

    Slice.defineValue(Test.Node, iceC_Test_Node_ids[1], false);

    Slice.defineSequence(Test, "C2DictSeqHelper", "Test.C2DictHelper", false);

    Slice.defineSequence(Test, "CSeqSeqHelper", "Test.CSeqHelper", false);

    Test.A = class
    {
        constructor(theSSeq = null)
        {
            this.theSSeq = theSSeq;
        }

        _write(ostr)
        {
            Test.SSeqHelper.write(ostr, this.theSSeq);
        }

        _read(istr)
        {
            this.theSSeq = Test.SSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.A, false, true);

    Test.B = class
    {
        constructor(theS = new Test.S())
        {
            this.theS = theS;
        }

        _write(ostr)
        {
            Test.S.write(ostr, this.theS);
        }

        _read(istr)
        {
            this.theS = Test.S.read(istr, this.theS);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.B, false, true);

    Slice.defineDictionary(Test, "CSeqDict", "CSeqDictHelper", "Ice.IntHelper", "Test.CSeqHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    Slice.defineDictionary(Test, "SDict", "SDictHelper", "Ice.IntHelper", "Test.S", false, undefined, undefined);

    Slice.defineDictionary(Test, "CDictDict", "CDictDictHelper", "Ice.IntHelper", "Test.CDictHelper", false, undefined, undefined);

    const iceC_Test_CTest_ids = [
        "::Ice::Object",
        "::Test::CTest"
    ];

    Test.CTest = class extends Ice.Value
    {
        constructor(theCSeq = null, theSSeq = null, theC2DictSeq = null, theCSeqSeq = null, theS = new Test.S(), theA = new Test.A(), theS2 = new Test.S2(), theB = new Test.B(), theCDict = null, theCSeqDict = null, theSDict = null, theCDictDict = null)
        {
            super();
            this.theCSeq = theCSeq;
            this.theSSeq = theSSeq;
            this.theC2DictSeq = theC2DictSeq;
            this.theCSeqSeq = theCSeqSeq;
            this.theS = theS;
            this.theA = theA;
            this.theS2 = theS2;
            this.theB = theB;
            this.theCDict = theCDict;
            this.theCSeqDict = theCSeqDict;
            this.theSDict = theSDict;
            this.theCDictDict = theCDictDict;
        }

        _iceWriteMemberImpl(ostr)
        {
            Test.CSeqHelper.write(ostr, this.theCSeq);
            Test.SSeqHelper.write(ostr, this.theSSeq);
            Test.C2DictSeqHelper.write(ostr, this.theC2DictSeq);
            Test.CSeqSeqHelper.write(ostr, this.theCSeqSeq);
            Test.S.write(ostr, this.theS);
            Test.A.write(ostr, this.theA);
            Test.S2.write(ostr, this.theS2);
            Test.B.write(ostr, this.theB);
            Test.CDictHelper.write(ostr, this.theCDict);
            Test.CSeqDictHelper.write(ostr, this.theCSeqDict);
            Test.SDictHelper.write(ostr, this.theSDict);
            Test.CDictDictHelper.write(ostr, this.theCDictDict);
        }

        _iceReadMemberImpl(istr)
        {
            this.theCSeq = Test.CSeqHelper.read(istr);
            this.theSSeq = Test.SSeqHelper.read(istr);
            this.theC2DictSeq = Test.C2DictSeqHelper.read(istr);
            this.theCSeqSeq = Test.CSeqSeqHelper.read(istr);
            this.theS = Test.S.read(istr, this.theS);
            this.theA = Test.A.read(istr, this.theA);
            this.theS2 = Test.S2.read(istr, this.theS2);
            this.theB = Test.B.read(istr, this.theB);
            this.theCDict = Test.CDictHelper.read(istr);
            this.theCSeqDict = Test.CSeqDictHelper.read(istr);
            this.theSDict = Test.SDictHelper.read(istr);
            this.theCDictDict = Test.CDictDictHelper.read(istr);
        }
    };

    Slice.defineValue(Test.CTest, iceC_Test_CTest_ids[1], false);

    Test.AAA = _ModuleRegistry.module("Test.AAA");

    Slice.defineSequence(Test.AAA, "BSeqHelper", "Ice.ObjectHelper", false, "Test.AAA.B");

    Slice.defineDictionary(Test.AAA, "BDict", "BDictHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, undefined, "Test.AAA.B");

    Test.AAA.BStruct = class
    {
        constructor(bMem = null)
        {
            this.bMem = bMem;
        }

        _write(ostr)
        {
            ostr.writeValue(this.bMem);
        }

        _read(istr)
        {
            istr.readValue(obj => this.bMem = obj, Test.AAA.B);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.AAA.BStruct, false, true);

    const iceC_Test_AAA_C_ids = [
        "::Ice::Object",
        "::Test::AAA::C"
    ];

    Test.AAA.C = class extends Ice.Value
    {
        constructor(obj1 = null, obj2 = null, b1 = null, b2 = null, x = null, y = null, z = new Test.AAA.BStruct())
        {
            super();
            this.obj1 = obj1;
            this.obj2 = obj2;
            this.b1 = b1;
            this.b2 = b2;
            this.x = x;
            this.y = y;
            this.z = z;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.obj1);
            ostr.writeValue(this.obj2);
            ostr.writeValue(this.b1);
            ostr.writeValue(this.b2);
            Test.AAA.BSeqHelper.write(ostr, this.x);
            Test.AAA.BDictHelper.write(ostr, this.y);
            Test.AAA.BStruct.write(ostr, this.z);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.obj1 = obj, Ice.Value);
            istr.readValue(obj => this.obj2 = obj, Ice.Value);
            istr.readValue(obj => this.b1 = obj, Test.AAA.B);
            istr.readValue(obj => this.b2 = obj, Test.AAA.B);
            this.x = Test.AAA.BSeqHelper.read(istr);
            this.y = Test.AAA.BDictHelper.read(istr);
            this.z = Test.AAA.BStruct.read(istr, this.z);
        }
    };

    Slice.defineValue(Test.AAA.C, iceC_Test_AAA_C_ids[1], false);

    Slice.defineSequence(Test.AAA, "CSeqHelper", "Ice.ObjectHelper", false, "Test.AAA.C");

    Slice.defineDictionary(Test.AAA, "CDict", "CDictHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, undefined, "Test.AAA.C");

    Test.AAA.CStruct = class
    {
        constructor(cMem = null)
        {
            this.cMem = cMem;
        }

        _write(ostr)
        {
            ostr.writeValue(this.cMem);
        }

        _read(istr)
        {
            istr.readValue(obj => this.cMem = obj, Test.AAA.C);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(Test.AAA.CStruct, false, true);

    const iceC_Test_AAA_B_ids = [
        "::Ice::Object",
        "::Test::AAA::B"
    ];

    Test.AAA.B = class extends Ice.Value
    {
        constructor(obj1 = null, obj2 = null, c1 = null, c2 = null, x = null, y = null, z = new Test.AAA.CStruct())
        {
            super();
            this.obj1 = obj1;
            this.obj2 = obj2;
            this.c1 = c1;
            this.c2 = c2;
            this.x = x;
            this.y = y;
            this.z = z;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.obj1);
            ostr.writeValue(this.obj2);
            ostr.writeValue(this.c1);
            ostr.writeValue(this.c2);
            Test.AAA.CSeqHelper.write(ostr, this.x);
            Test.AAA.CDictHelper.write(ostr, this.y);
            Test.AAA.CStruct.write(ostr, this.z);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.obj1 = obj, Ice.Value);
            istr.readValue(obj => this.obj2 = obj, Ice.Value);
            istr.readValue(obj => this.c1 = obj, Test.AAA.C);
            istr.readValue(obj => this.c2 = obj, Test.AAA.C);
            this.x = Test.AAA.CSeqHelper.read(istr);
            this.y = Test.AAA.CDictHelper.read(istr);
            this.z = Test.AAA.CStruct.read(istr, this.z);
        }
    };

    Slice.defineValue(Test.AAA.B, iceC_Test_AAA_B_ids[1], false);

    Test.CCC = _ModuleRegistry.module("Test.CCC");

    Slice.defineSequence(Test.CCC, "ForwardProxySeqHelper", "Ice.ObjectPrx", false);

    const iceC_Test_CCC_Forward_ids = [
        "::Ice::Object",
        "::Test::CCC::Forward"
    ];

    Test.CCC.Forward = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.CCC.Forward, iceC_Test_CCC_Forward_ids[1], false);

    Test.DDD = _ModuleRegistry.module("Test.DDD");

    const iceC_Test_DDD_I_ids = [
        "::Ice::Object",
        "::Test::DDD::I"
    ];

    Test.DDD.I = class extends Ice.Object
    {
    };

    Test.DDD.IPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.DDD.I, Test.DDD.IPrx, iceC_Test_DDD_I_ids, 1,
    {
        "op": [, , , , , , , , , ]
    });

    const iceC_Test_DDD_C_ids = [
        "::Ice::Object",
        "::Test::DDD::C"
    ];

    Test.DDD.C = class extends Ice.Value
    {
    };

    Slice.defineValue(Test.DDD.C, iceC_Test_DDD_C_ids[1], false);

    const iceC_Test_DDD_U_ids = [
        "::Ice::Object",
        "::Test::DDD::U"
    ];

    Test.DDD.U = class extends Ice.Value
    {
        constructor(myI = null, myIstar = null, myC = null, myCstar = null, myC2 = null, myC2star = null)
        {
            super();
            this.myI = myI;
            this.myIstar = myIstar;
            this.myC = myC;
            this.myCstar = myCstar;
            this.myC2 = myC2;
            this.myC2star = myC2star;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.myI);
            Test.DDD.IPrx.write(ostr, this.myIstar);
            ostr.writeValue(this.myC);
            
