// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.UserError = class extends Ice.UserException
{
    constructor(message = "", _cause = "")
    {
        super(_cause);
        this.message = message;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::UserError";
    }

    _mostDerivedType()
    {
        return Test.UserError;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.message);
    }

    _readMemberImpl(istr)
    {
        this.message = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.UserError",
    Test.UserError);

const iceC_Test_MyInterface_ids = [
    "::Ice::Object",
    "::Test::MyInterface"
];

Test.MyInterface = class extends Ice.Object
{
};

Test.MyInterfacePrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.MyInterfacePrx", Test.MyInterfacePrx);

Ice.defineOperations(
    Test.MyInterface,
    Test.MyInterfacePrx,
    iceC_Test_MyInterface_ids,
    "::Test::MyInterface",
    {
        "op": [, , , , [[1]], ,
        [
            Test.UserError
        ], , ]
    });
