//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.SBase = class extends Ice.Value
{
    constructor(sb = "")
    {
        super();
        this.sb = sb;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.sb);
    }

    _iceReadMemberImpl(istr)
    {
        this.sb = istr.readString();
    }
};

Ice.defineValue(Test.SBase, "::Test::SBase");
Ice.TypeRegistry.declareValueType("Test.SBase", Test.SBase);

Test.SBSKnownDerived = class extends Test.SBase
{
    constructor(sb, sbskd = "")
    {
        super(sb);
        this.sbskd = sbskd;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.sbskd);
    }

    _iceReadMemberImpl(istr)
    {
        this.sbskd = istr.readString();
    }
};

Ice.defineValue(Test.SBSKnownDerived, "::Test::SBSKnownDerived");
Ice.TypeRegistry.declareValueType("Test.SBSKnownDerived", Test.SBSKnownDerived);

Test.B = class extends Ice.Value
{
    constructor(sb = "", pb = null)
    {
        super();
        this.sb = sb;
        this.pb = pb;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.sb);
        ostr.writeValue(this.pb);
    }

    _iceReadMemberImpl(istr)
    {
        this.sb = istr.readString();
        istr.readValue(obj => this.pb = obj, Ice.TypeRegistry.getValueType("Test.B"));
    }
};

Ice.defineValue(Test.B, "::Test::B");
Ice.TypeRegistry.declareValueType("Test.B", Test.B);

Test.D1 = class extends Test.B
{
    constructor(sb, pb, sd1 = "", pd1 = null)
    {
        super(sb, pb);
        this.sd1 = sd1;
        this.pd1 = pd1;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.sd1);
        ostr.writeValue(this.pd1);
    }

    _iceReadMemberImpl(istr)
    {
        this.sd1 = istr.readString();
        istr.readValue(obj => this.pd1 = obj, Ice.TypeRegistry.getValueType("Test.B"));
    }
};

Ice.defineValue(Test.D1, "::Test::D1");
Ice.TypeRegistry.declareValueType("Test.D1", Test.D1);

Test.BSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "Test.B");

Test.SS1 = class extends Ice.Value
{
    constructor(s = null)
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.BSeqHelper.write(ostr, this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = Test.BSeqHelper.read(istr);
    }
};

Ice.defineValue(Test.SS1, "::Test::SS1");
Ice.TypeRegistry.declareValueType("Test.SS1", Test.SS1);

Test.SS2 = class extends Ice.Value
{
    constructor(s = null)
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.BSeqHelper.write(ostr, this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = Test.BSeqHelper.read(istr);
    }
};

Ice.defineValue(Test.SS2, "::Test::SS2");
Ice.TypeRegistry.declareValueType("Test.SS2", Test.SS2);

Test.SS3 = class
{
    constructor(c1 = null, c2 = null)
    {
        this.c1 = c1;
        this.c2 = c2;
    }

    _write(ostr)
    {
        ostr.writeValue(this.c1);
        ostr.writeValue(this.c2);
    }

    _read(istr)
    {
        istr.readValue(obj => this.c1 = obj, Ice.TypeRegistry.getValueType("Test.SS1"));
        istr.readValue(obj => this.c2 = obj, Ice.TypeRegistry.getValueType("Test.SS2"));
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(Test.SS3, false, true);

[Test.BDict, Test.BDictHelper] = Ice.defineDictionary(Ice.IntHelper, Ice.ObjectHelper, false, undefined, "Test.B");

Test.BaseException = class extends Ice.UserException
{
    constructor(sbe = "", pb = null, _cause = "")
    {
        super(_cause);
        this.sbe = sbe;
        this.pb = pb;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::BaseException";
    }

    _mostDerivedType()
    {
        return Test.BaseException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.sbe);
        ostr.writeValue(this.pb);
    }

    _readMemberImpl(istr)
    {
        this.sbe = istr.readString();
        istr.readValue(obj => this.pb = obj, Ice.TypeRegistry.getValueType("Test.B"));
    }

    _usesClasses()
    {
        return true;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.BaseException",
    Test.BaseException);

Test.DerivedException = class extends Test.BaseException
{
    constructor(sbe, pb, sde = "", pd1 = null, _cause = "")
    {
        super(sbe, pb, _cause);
        this.sde = sde;
        this.pd1 = pd1;
    }

    static get _parent()
    {
        return Test.BaseException;
    }

    static get _ice_id()
    {
        return "::Test::DerivedException";
    }

    _mostDerivedType()
    {
        return Test.DerivedException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.sde);
        ostr.writeValue(this.pd1);
    }

    _readMemberImpl(istr)
    {
        this.sde = istr.readString();
        istr.readValue(obj => this.pd1 = obj, Ice.TypeRegistry.getValueType("Test.D1"));
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.DerivedException",
    Test.DerivedException);

Test.PBase = class extends Ice.Value
{
    constructor(pi = 0)
    {
        super();
        this.pi = pi;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.pi);
    }

    _iceReadMemberImpl(istr)
    {
        this.pi = istr.readInt();
    }
};

Ice.defineValue(Test.PBase, "::Test::PBase");
Ice.TypeRegistry.declareValueType("Test.PBase", Test.PBase);

Test.PBaseSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "Test.PBase");

Test.Preserved = class extends Test.PBase
{
    constructor(pi, ps = "")
    {
        super(pi);
        this.ps = ps;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.ps);
    }

    _iceReadMemberImpl(istr)
    {
        this.ps = istr.readString();
    }
};

Ice.defineValue(Test.Preserved, "::Test::Preserved");
Ice.TypeRegistry.declareValueType("Test.Preserved", Test.Preserved);

Test.PDerived = class extends Test.Preserved
{
    constructor(pi, ps, pb = null)
    {
        super(pi, ps);
        this.pb = pb;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.pb);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.pb = obj, Ice.TypeRegistry.getValueType("Test.PBase"));
    }
};

Ice.defineValue(Test.PDerived, "::Test::PDerived");
Ice.TypeRegistry.declareValueType("Test.PDerived", Test.PDerived);

Test.CompactPDerived = class extends Test.Preserved
{
    constructor(pi, ps, pb = null)
    {
        super(pi, ps);
        this.pb = pb;
    }

    static get _iceCompactId()
    {
        return 56;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.pb);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.pb = obj, Ice.TypeRegistry.getValueType("Test.PBase"));
    }
};

Ice.defineValue(Test.CompactPDerived, "::Test::CompactPDerived", 56);
Ice.TypeRegistry.declareValueType("Test.CompactPDerived", Test.CompactPDerived);

Test.PNode = class extends Ice.Value
{
    constructor(next = null)
    {
        super();
        this.next = next;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.next);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.next = obj, Ice.TypeRegistry.getValueType("Test.PNode"));
    }
};

Ice.defineValue(Test.PNode, "::Test::PNode");
Ice.TypeRegistry.declareValueType("Test.PNode", Test.PNode);

Test.PreservedException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::PreservedException";
    }

    _mostDerivedType()
    {
        return Test.PreservedException;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.PreservedException",
    Test.PreservedException);

const iceC_Test_TestIntf_ids = [
    "::Ice::Object",
    "::Test::TestIntf"
];

Test.TestIntf = class extends Ice.Object
{
};

Test.TestIntfPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.TestIntfPrx", Test.TestIntfPrx);

Ice.defineOperations(
    Test.TestIntf,
    Test.TestIntfPrx,
    iceC_Test_TestIntf_ids,
    "::Test::TestIntf",
    {
        "SBaseAsObject": [, , 1, [8, true], , , , , true],
        "SBaseAsSBase": [, , 1, ["Test.SBase", true], , , , , true],
        "SBSKnownDerivedAsSBase": [, , 1, ["Test.SBase", true], , , , , true],
        "SBSKnownDerivedAsSBSKnownDerived": [, , 1, ["Test.SBSKnownDerived", true], , , , , true],
        "SBSUnknownDerivedAsSBase": [, , 1, ["Test.SBase", true], , , , , true],
        "SBSUnknownDerivedAsSBaseCompact": [, , 0, ["Test.SBase", true], , , , , true],
        "SUnknownAsObject": [, , 1, [8, true], , , , , true],
        "checkSUnknown": [, , 1, , [[8, true]], , , true, ],
        "oneElementCycle": [, , 1, ["Test.B", true], , , , , true],
        "twoElementCycle": [, , 1, ["Test.B", true], , , , , true],
        "D1AsB": [, , 1, ["Test.B", true], , , , , true],
        "D1AsD1": [, , 1, ["Test.D1", true], , , , , true],
        "D2AsB": [, , 1, ["Test.B", true], , , , , true],
        "paramTest1": [, , 1, , , [["Test.B", true], ["Test.B", true]], , , true],
        "paramTest2": [, , 1, , , [["Test.B", true], ["Test.B", true]], , , true],
        "paramTest3": [, , 1, ["Test.B", true], , [["Test.B", true], ["Test.B", true]], , , true],
        "paramTest4": [, , 1, ["Test.B", true], , [["Test.B", true]], , , true],
        "returnTest1": [, , 1, ["Test.B", true], , [["Test.B", true], ["Test.B", true]], , , true],
        "returnTest2": [, , 1, ["Test.B", true], , [["Test.B", true], ["Test.B", true]], , , true],
        "returnTest3": [, , 1, ["Test.B", true], [["Test.B", true], ["Test.B", true]], , , true, true],
        "sequenceTest": [, , 1, [Test.SS3], [["Test.SS1", true], ["Test.SS2", true]], , , true, true],
        "dictionaryTest": [, , 1, [Test.BDictHelper], [[Test.BDictHelper]], [[Test.BDictHelper]], , true, true],
        "exchangePBase": [, , 1, ["Test.PBase", true], [["Test.PBase", true]], , , true, true],
        "PBSUnknownAsPreserved": [, , 1, ["Test.Preserved", true], , , , , true],
        "checkPBSUnknown": [, , 1, , [["Test.Preserved", true]], , , true, ],
        "PBSUnknownAsPreservedWithGraph": [, , 1, ["Test.Preserved", true], , , , , true],
        "checkPBSUnknownWithGraph": [, , 1, , [["Test.Preserved", true]], , , true, ],
        "PBSUnknown2AsPreservedWithGraph": [, , 1, ["Test.Preserved", true], , , , , true],
        "checkPBSUnknown2WithGraph": [, , 1, , [["Test.Preserved", true]], , , true, ],
        "exchangePNode": [, , 1, ["Test.PNode", true], [["Test.PNode", true]], , , true, true],
        "throwBaseAsBase": [, , 1, , , ,
        [
            Test.BaseException
        ], , ],
        "throwDerivedAsBase": [, , 1, , , ,
        [
            Test.BaseException
        ], , ],
        "throwDerivedAsDerived": [, , 1, , , ,
        [
            Test.DerivedException
        ], , ],
        "throwUnknownDerivedAsBase": [, , 1, , , ,
        [
            Test.BaseException
        ], , ],
        "throwPreservedException": [, , 1, , , ,
        [
            Test.PreservedException
        ], , ],
        "useForward": [, , 1, , , [["Test.Forward", true]], , , true],
        "shutdown": [, , 1, , , , , , ]
    });

Test.D3 = class extends Test.B
{
    constructor(sb, pb, sd3 = "", pd3 = null)
    {
        super(sb, pb);
        this.sd3 = sd3;
        this.pd3 = pd3;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.sd3);
        ostr.writeValue(this.pd3);
    }

    _iceReadMemberImpl(istr)
    {
        this.sd3 = istr.readString();
        istr.readValue(obj => this.pd3 = obj, Ice.TypeRegistry.getValueType("Test.B"));
    }
};

Ice.defineValue(Test.D3, "::Test::D3");
Ice.TypeRegistry.declareValueType("Test.D3", Test.D3);

Test.PCUnknown = class extends Test.PBase
{
    constructor(pi, pu = "")
    {
        super(pi);
        this.pu = pu;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.pu);
    }

    _iceReadMemberImpl(istr)
    {
        this.pu = istr.readString();
    }
};

Ice.defineValue(Test.PCUnknown, "::Test::PCUnknown");
Ice.TypeRegistry.declareValueType("Test.PCUnknown", Test.PCUnknown);

Test.PCDerived = class extends Test.PDerived
{
    constructor(pi, ps, pb, pbs = null)
    {
        super(pi, ps, pb);
        this.pbs = pbs;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.PBaseSeqHelper.write(ostr, this.pbs);
    }

    _iceReadMemberImpl(istr)
    {
        this.pbs = Test.PBaseSeqHelper.read(istr);
    }
};

Ice.defineValue(Test.PCDerived, "::Test::PCDerived");
Ice.TypeRegistry.declareValueType("Test.PCDerived", Test.PCDerived);

Test.PCDerived2 = class extends Test.PCDerived
{
    constructor(pi, ps, pb, pbs, pcd2 = 0)
    {
        super(pi, ps, pb, pbs);
        this.pcd2 = pcd2;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.pcd2);
    }

    _iceReadMemberImpl(istr)
    {
        this.pcd2 = istr.readInt();
    }
};

Ice.defineValue(Test.PCDerived2, "::Test::PCDerived2");
Ice.TypeRegistry.declareValueType("Test.PCDerived2", Test.PCDerived2);

Test.PCDerived3 = class extends Test.PCDerived2
{
    constructor(pi, ps, pb, pbs, pcd2, pcd3 = null)
    {
        super(pi, ps, pb, pbs, pcd2);
        this.pcd3 = pcd3;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.pcd3);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.pcd3 = obj, Ice.TypeRegistry.getValueType("Ice.Value"));
    }
};

Ice.defineValue(Test.PCDerived3, "::Test::PCDerived3");
Ice.TypeRegistry.declareValueType("Test.PCDerived3", Test.PCDerived3);

Test.CompactPCDerived = class extends Test.CompactPDerived
{
    constructor(pi, ps, pb, pbs = null)
    {
        super(pi, ps, pb);
        this.pbs = pbs;
    }

    static get _iceCompactId()
    {
        return 57;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.PBaseSeqHelper.write(ostr, this.pbs);
    }

    _iceReadMemberImpl(istr)
    {
        this.pbs = Test.PBaseSeqHelper.read(istr);
    }
};

Ice.defineValue(Test.CompactPCDerived, "::Test::CompactPCDerived", 57);
Ice.TypeRegistry.declareValueType("Test.CompactPCDerived", Test.CompactPCDerived);

Test.Hidden = class extends Ice.Value
{
    constructor(f = null)
    {
        super();
        this.f = f;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.f);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.f = obj, Ice.TypeRegistry.getValueType("Test.Forward"));
    }
};

Ice.defineValue(Test.Hidden, "::Test::Hidden");
Ice.TypeRegistry.declareValueType("Test.Hidden", Test.Hidden);

Test.Forward = class extends Ice.Value
{
    constructor(h = null)
    {
        super();
        this.h = h;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.h);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.h = obj, Ice.TypeRegistry.getValueType("Test.Hidden"));
    }
};

Ice.defineValue(Test.Forward, "::Test::Forward");
Ice.TypeRegistry.declareValueType("Test.Forward", Test.Forward);
