//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `LocalTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let LocalTest = _ModuleRegistry.module("LocalTest");

    const iceC_LocalTest_C1_ids = [
        "::Ice::Object",
        "::LocalTest::C1"
    ];

    LocalTest.C1 = class extends Ice.Value
    {
        constructor(i = 0)
        {
            super();
            this.i = i;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.i);
        }

        _iceReadMemberImpl(istr)
        {
            this.i = istr.readInt();
        }
    };

    Slice.defineValue(LocalTest.C1, iceC_LocalTest_C1_ids[1], false);

    LocalTest.S1 = class
    {
        constructor(c1 = null)
        {
            this.c1 = c1;
        }

        _write(ostr)
        {
            ostr.writeValue(this.c1);
        }

        _read(istr)
        {
            istr.readValue(obj => this.c1 = obj, LocalTest.C1);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S1, false, true);

    Slice.defineSequence(LocalTest, "C1SeqHelper", "Ice.ObjectHelper", false, "LocalTest.C1");

    Slice.defineSequence(LocalTest, "S1SeqHelper", "LocalTest.S1", false);

    Slice.defineDictionary(LocalTest, "C1Dict", "C1DictHelper", "Ice.IntHelper", "Ice.ObjectHelper", false, undefined, "LocalTest.C1");

    Slice.defineDictionary(LocalTest, "S1Dict", "S1DictHelper", "Ice.IntHelper", "LocalTest.S1", false, undefined, undefined);

    Slice.defineSequence(LocalTest, "C1SeqSeqHelper", "LocalTest.C1SeqHelper", false);

    Slice.defineSequence(LocalTest, "S1SeqSeqHelper", "LocalTest.S1SeqHelper", false);

    LocalTest.S2 = class
    {
        constructor(s1 = new LocalTest.S1())
        {
            this.s1 = s1;
        }

        _write(ostr)
        {
            LocalTest.S1.write(ostr, this.s1);
        }

        _read(istr)
        {
            this.s1 = LocalTest.S1.read(istr, this.s1);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S2, false, true);

    LocalTest.S3 = class
    {
        constructor(c1seq = null)
        {
            this.c1seq = c1seq;
        }

        _write(ostr)
        {
            LocalTest.C1SeqHelper.write(ostr, this.c1seq);
        }

        _read(istr)
        {
            this.c1seq = LocalTest.C1SeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S3, false, true);

    LocalTest.S4 = class
    {
        constructor(s1seq = null)
        {
            this.s1seq = s1seq;
        }

        _write(ostr)
        {
            LocalTest.S1SeqHelper.write(ostr, this.s1seq);
        }

        _read(istr)
        {
            this.s1seq = LocalTest.S1SeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S4, false, true);

    LocalTest.S5 = class
    {
        constructor(c1dict = null)
        {
            this.c1dict = c1dict;
        }

        _write(ostr)
        {
            LocalTest.C1DictHelper.write(ostr, this.c1dict);
        }

        _read(istr)
        {
            this.c1dict = LocalTest.C1DictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S5, false, true);

    LocalTest.S6 = class
    {
        constructor(s1dict = null)
        {
            this.s1dict = s1dict;
        }

        _write(ostr)
        {
            LocalTest.S1DictHelper.write(ostr, this.s1dict);
        }

        _read(istr)
        {
            this.s1dict = LocalTest.S1DictHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S6, false, true);

    LocalTest.S7 = class
    {
        constructor(c1seqseq = null)
        {
            this.c1seqseq = c1seqseq;
        }

        _write(ostr)
        {
            LocalTest.C1SeqSeqHelper.write(ostr, this.c1seqseq);
        }

        _read(istr)
        {
            this.c1seqseq = LocalTest.C1SeqSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S7, false, true);

    LocalTest.S8 = class
    {
        constructor(s1seqseq = null)
        {
            this.s1seqseq = s1seqseq;
        }

        _write(ostr)
        {
            LocalTest.S1SeqSeqHelper.write(ostr, this.s1seqseq);
        }

        _read(istr)
        {
            this.s1seqseq = LocalTest.S1SeqSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(LocalTest.S8, false, true);

    const iceC_LocalTest_CB1_ids = [
        "::Ice::Object",
        "::LocalTest::CB1"
    ];

    LocalTest.CB1 = class extends Ice.Value
    {
        constructor(s1 = new LocalTest.S1())
        {
            super();
            this.s1 = s1;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1.write(ostr, this.s1);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1 = LocalTest.S1.read(istr, this.s1);
        }
    };

    Slice.defineValue(LocalTest.CB1, iceC_LocalTest_CB1_ids[1], false);

    const iceC_LocalTest_CB2_ids = [
        "::Ice::Object",
        "::LocalTest::CB2"
    ];

    LocalTest.CB2 = class extends Ice.Value
    {
        constructor(c1seq = null)
        {
            super();
            this.c1seq = c1seq;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.C1SeqHelper.write(ostr, this.c1seq);
        }

        _iceReadMemberImpl(istr)
        {
            this.c1seq = LocalTest.C1SeqHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB2, iceC_LocalTest_CB2_ids[1], false);

    const iceC_LocalTest_CB3_ids = [
        "::Ice::Object",
        "::LocalTest::CB3"
    ];

    LocalTest.CB3 = class extends Ice.Value
    {
        constructor(s1seq = null)
        {
            super();
            this.s1seq = s1seq;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1SeqHelper.write(ostr, this.s1seq);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1seq = LocalTest.S1SeqHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB3, iceC_LocalTest_CB3_ids[1], false);

    const iceC_LocalTest_CB4_ids = [
        "::Ice::Object",
        "::LocalTest::CB4"
    ];

    LocalTest.CB4 = class extends Ice.Value
    {
        constructor(c1dict = null)
        {
            super();
            this.c1dict = c1dict;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.C1DictHelper.write(ostr, this.c1dict);
        }

        _iceReadMemberImpl(istr)
        {
            this.c1dict = LocalTest.C1DictHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB4, iceC_LocalTest_CB4_ids[1], false);

    const iceC_LocalTest_CB5_ids = [
        "::Ice::Object",
        "::LocalTest::CB5"
    ];

    LocalTest.CB5 = class extends Ice.Value
    {
        constructor(s1dict = null)
        {
            super();
            this.s1dict = s1dict;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1DictHelper.write(ostr, this.s1dict);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1dict = LocalTest.S1DictHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB5, iceC_LocalTest_CB5_ids[1], false);

    const iceC_LocalTest_CB6_ids = [
        "::Ice::Object",
        "::LocalTest::CB6"
    ];

    LocalTest.CB6 = class extends Ice.Value
    {
        constructor(c1seqseq = null)
        {
            super();
            this.c1seqseq = c1seqseq;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.C1SeqSeqHelper.write(ostr, this.c1seqseq);
        }

        _iceReadMemberImpl(istr)
        {
            this.c1seqseq = LocalTest.C1SeqSeqHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB6, iceC_LocalTest_CB6_ids[1], false);

    const iceC_LocalTest_CB7_ids = [
        "::Ice::Object",
        "::LocalTest::CB7"
    ];

    LocalTest.CB7 = class extends Ice.Value
    {
        constructor(s1seqseq = null)
        {
            super();
            this.s1seqseq = s1seqseq;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1SeqSeqHelper.write(ostr, this.s1seqseq);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1seqseq = LocalTest.S1SeqSeqHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB7, iceC_LocalTest_CB7_ids[1], false);

    const iceC_LocalTest_CB8_ids = [
        "::Ice::Object",
        "::LocalTest::CB8"
    ];

    LocalTest.CB8 = class extends Ice.Value
    {
        constructor(s1 = new LocalTest.S1(), c1seq = null, s1dict = null)
        {
            super();
            this.s1 = s1;
            this.c1seq = c1seq;
            this.s1dict = s1dict;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1.write(ostr, this.s1);
            LocalTest.C1SeqHelper.write(ostr, this.c1seq);
            LocalTest.S1DictHelper.write(ostr, this.s1dict);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1 = LocalTest.S1.read(istr, this.s1);
            this.c1seq = LocalTest.C1SeqHelper.read(istr);
            this.s1dict = LocalTest.S1DictHelper.read(istr);
        }
    };

    Slice.defineValue(LocalTest.CB8, iceC_LocalTest_CB8_ids[1], false);

    LocalTest.StructKey = class
    {
        constructor(i = 0, j = 0)
        {
            this.i = i;
            this.j = j;
        }

        _write(ostr)
        {
            ostr.writeInt(this.i);
            ostr.writeInt(this.j);
        }

        _read(istr)
        {
            this.i = istr.readInt();
            this.j = istr.readInt();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(LocalTest.StructKey, true, false);

    Slice.defineDictionary(LocalTest, "StructDict1", "StructDict1Helper", "LocalTest.StructKey", "Ice.ObjectHelper", false, Ice.HashMap.compareEquals, "LocalTest.C1");

    Slice.defineDictionary(LocalTest, "StructDict2", "StructDict2Helper", "LocalTest.StructKey", "LocalTest.S1", false, Ice.HashMap.compareEquals, undefined);

    Slice.defineDictionary(LocalTest, "C1DictDict", "C1DictDictHelper", "Ice.IntHelper", "LocalTest.C1DictHelper", false, undefined, undefined);

    Slice.defineDictionary(LocalTest, "S1DictDict", "S1DictDictHelper", "Ice.IntHelper", "LocalTest.S1DictHelper", false, undefined, undefined);

    const iceC_LocalTest_Opt_ids = [
        "::Ice::Object",
        "::LocalTest::Opt"
    ];

    LocalTest.Opt = class extends Ice.Value
    {
        constructor(s1 = undefined, c1seq = undefined, s1dict = undefined)
        {
            super();
            this.s1 = s1;
            this.c1seq = c1seq;
            this.s1dict = s1dict;
        }

        _iceWriteMemberImpl(ostr)
        {
            LocalTest.S1.writeOptional(ostr, 1, this.s1);
            LocalTest.C1SeqHelper.writeOptional(ostr, 2, this.c1seq);
            LocalTest.S1DictHelper.writeOptional(ostr, 3, this.s1dict);
        }

        _iceReadMemberImpl(istr)
        {
            this.s1 = LocalTest.S1.readOptional(istr, 1);
            this.c1seq = LocalTest.C1SeqHelper.readOptional(istr, 2);
            this.s1dict = LocalTest.S1DictHelper.readOptional(istr, 3);
        }
    };

    Slice.defineValue(LocalTest.Opt, iceC_LocalTest_Opt_ids[1], false);
    exports.LocalTest = LocalTest;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
