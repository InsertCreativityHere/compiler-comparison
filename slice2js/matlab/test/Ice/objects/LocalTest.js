// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'LocalTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const LocalTest = {};

LocalTest.C1 = class extends Ice.Value
{
    constructor(i = 0)
    {
        super();
        this.i = i;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.i);
    }

    _iceReadMemberImpl(istr)
    {
        this.i = istr.readInt();
    }
};

Ice.defineValue(LocalTest.C1, "::LocalTest::C1");
Ice.TypeRegistry.declareValueType("LocalTest.C1", LocalTest.C1);

LocalTest.S1 = class
{
    constructor(c1 = null)
    {
        this.c1 = c1;
    }

    _write(ostr)
    {
        ostr.writeValue(this.c1);
    }

    _read(istr)
    {
        istr.readValue(obj => this.c1 = obj, Ice.TypeRegistry.getValueType("LocalTest.C1"));
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S1, false, true);

LocalTest.C1SeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "LocalTest.C1");

LocalTest.S1SeqHelper = Ice.StreamHelpers.generateSeqHelper(LocalTest.S1, false);

[LocalTest.C1Dict, LocalTest.C1DictHelper] = Ice.defineDictionary(Ice.IntHelper, Ice.ObjectHelper, false, undefined, "LocalTest.C1");

[LocalTest.S1Dict, LocalTest.S1DictHelper] = Ice.defineDictionary(Ice.IntHelper, LocalTest.S1, false, undefined);

LocalTest.C1SeqSeqHelper = Ice.StreamHelpers.generateSeqHelper(LocalTest.C1SeqHelper, false);

LocalTest.S1SeqSeqHelper = Ice.StreamHelpers.generateSeqHelper(LocalTest.S1SeqHelper, false);

LocalTest.S2 = class
{
    constructor(s1 = new LocalTest.S1())
    {
        this.s1 = s1;
    }

    _write(ostr)
    {
        LocalTest.S1.write(ostr, this.s1);
    }

    _read(istr)
    {
        this.s1 = LocalTest.S1.read(istr, this.s1);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S2, false, true);

LocalTest.S3 = class
{
    constructor(c1seq = null)
    {
        this.c1seq = c1seq;
    }

    _write(ostr)
    {
        LocalTest.C1SeqHelper.write(ostr, this.c1seq);
    }

    _read(istr)
    {
        this.c1seq = LocalTest.C1SeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S3, false, true);

LocalTest.S4 = class
{
    constructor(s1seq = null)
    {
        this.s1seq = s1seq;
    }

    _write(ostr)
    {
        LocalTest.S1SeqHelper.write(ostr, this.s1seq);
    }

    _read(istr)
    {
        this.s1seq = LocalTest.S1SeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S4, false, true);

LocalTest.S5 = class
{
    constructor(c1dict = null)
    {
        this.c1dict = c1dict;
    }

    _write(ostr)
    {
        LocalTest.C1DictHelper.write(ostr, this.c1dict);
    }

    _read(istr)
    {
        this.c1dict = LocalTest.C1DictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S5, false, true);

LocalTest.S6 = class
{
    constructor(s1dict = null)
    {
        this.s1dict = s1dict;
    }

    _write(ostr)
    {
        LocalTest.S1DictHelper.write(ostr, this.s1dict);
    }

    _read(istr)
    {
        this.s1dict = LocalTest.S1DictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S6, false, true);

LocalTest.S7 = class
{
    constructor(c1seqseq = null)
    {
        this.c1seqseq = c1seqseq;
    }

    _write(ostr)
    {
        LocalTest.C1SeqSeqHelper.write(ostr, this.c1seqseq);
    }

    _read(istr)
    {
        this.c1seqseq = LocalTest.C1SeqSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S7, false, true);

LocalTest.S8 = class
{
    constructor(s1seqseq = null)
    {
        this.s1seqseq = s1seqseq;
    }

    _write(ostr)
    {
        LocalTest.S1SeqSeqHelper.write(ostr, this.s1seqseq);
    }

    _read(istr)
    {
        this.s1seqseq = LocalTest.S1SeqSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(LocalTest.S8, false, true);

LocalTest.CB1 = class extends Ice.Value
{
    constructor(s1 = new LocalTest.S1())
    {
        super();
        this.s1 = s1;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.S1.write(ostr, this.s1);
    }

    _iceReadMemberImpl(istr)
    {
        this.s1 = LocalTest.S1.read(istr, this.s1);
    }
};

Ice.defineValue(LocalTest.CB1, "::LocalTest::CB1");
Ice.TypeRegistry.declareValueType("LocalTest.CB1", LocalTest.CB1);

LocalTest.CB2 = class extends Ice.Value
{
    constructor(c1seq = null)
    {
        super();
        this.c1seq = c1seq;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.C1SeqHelper.write(ostr, this.c1seq);
    }

    _iceReadMemberImpl(istr)
    {
        this.c1seq = LocalTest.C1SeqHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB2, "::LocalTest::CB2");
Ice.TypeRegistry.declareValueType("LocalTest.CB2", LocalTest.CB2);

LocalTest.CB3 = class extends Ice.Value
{
    constructor(s1seq = null)
    {
        super();
        this.s1seq = s1seq;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.S1SeqHelper.write(ostr, this.s1seq);
    }

    _iceReadMemberImpl(istr)
    {
        this.s1seq = LocalTest.S1SeqHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB3, "::LocalTest::CB3");
Ice.TypeRegistry.declareValueType("LocalTest.CB3", LocalTest.CB3);

LocalTest.CB4 = class extends Ice.Value
{
    constructor(c1dict = null)
    {
        super();
        this.c1dict = c1dict;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.C1DictHelper.write(ostr, this.c1dict);
    }

    _iceReadMemberImpl(istr)
    {
        this.c1dict = LocalTest.C1DictHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB4, "::LocalTest::CB4");
Ice.TypeRegistry.declareValueType("LocalTest.CB4", LocalTest.CB4);

LocalTest.CB5 = class extends Ice.Value
{
    constructor(s1dict = null)
    {
        super();
        this.s1dict = s1dict;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.S1DictHelper.write(ostr, this.s1dict);
    }

    _iceReadMemberImpl(istr)
    {
        this.s1dict = LocalTest.S1DictHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB5, "::LocalTest::CB5");
Ice.TypeRegistry.declareValueType("LocalTest.CB5", LocalTest.CB5);

LocalTest.CB6 = class extends Ice.Value
{
    constructor(c1seqseq = null)
    {
        super();
        this.c1seqseq = c1seqseq;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.C1SeqSeqHelper.write(ostr, this.c1seqseq);
    }

    _iceReadMemberImpl(istr)
    {
        this.c1seqseq = LocalTest.C1SeqSeqHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB6, "::LocalTest::CB6");
Ice.TypeRegistry.declareValueType("LocalTest.CB6", LocalTest.CB6);

LocalTest.CB7 = class extends Ice.Value
{
    constructor(s1seqseq = null)
    {
        super();
        this.s1seqseq = s1seqseq;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.S1SeqSeqHelper.write(ostr, this.s1seqseq);
    }

    _iceReadMemberImpl(istr)
    {
        this.s1seqseq = LocalTest.S1SeqSeqHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB7, "::LocalTest::CB7");
Ice.TypeRegistry.declareValueType("LocalTest.CB7", LocalTest.CB7);

LocalTest.CB8 = class extends Ice.Value
{
    constructor(s1 = new LocalTest.S1(), c1seq = null, s1dict = null)
    {
        super();
        this.s1 = s1;
        this.c1seq = c1seq;
        this.s1dict = s1dict;
    }

    _iceWriteMemberImpl(ostr)
    {
        LocalTest.S1.write(ostr, this.s1);
        LocalTest.C1SeqHelper.write(ostr, this.c1seq);
        LocalTest.S1DictHelper.write(ostr, this.s1dict);
    }

    _iceReadMemberImpl(istr)
    {
        this.s1 = LocalTest.S1.read(istr, this.s1);
        this.c1seq = LocalTest.C1SeqHelper.read(istr);
        this.s1dict = LocalTest.S1DictHelper.read(istr);
    }
};

Ice.defineValue(LocalTest.CB8, "::LocalTest::CB8");
Ice.TypeRegistry.declareValueType("LocalTest.CB8", LocalTest.CB8);

LocalTest.StructKey = class
{
    constructor(i = 0, j = 0)
    {
        this.i = i;
        this.j = j;
    }

    _write(ostr)
    {
        ostr.writeInt(this.i);
        ostr.writeInt(this.j);
    }

    _read(istr)
    {
        this.i = istr.readInt();
        this.j = istr.readInt();
    }

    static get minWireSize()
    {
        return  8;
    }
};

Ice.defineStruct(LocalTest.StructKey, true, false);

[LocalTest.StructDict1, LocalTest.StructDict1Helper] = Ice.defineDictionary(LocalTest.StructKey, Ice.ObjectHelper, false, Ice.HashMap.compareEquals, "LocalTest.C1");

[LocalTest.StructDict2, LocalTest.StructDict2Helper] = Ice.defineDictionary(LocalTest.StructKey, LocalTest.S1, false, Ice.HashMap.compareEquals);

[LocalTest.C1DictDict, LocalTest.C1DictDictHelper] = Ice.defineDictionary(Ice.IntHelper, LocalTest.C1DictHelper, false, undefined);

[LocalTest.S1DictDict, LocalTest.S1DictDictHelper] = Ice.defineDictionary(Ice.IntHelper, LocalTest.S1DictHelper, false, undefined);
