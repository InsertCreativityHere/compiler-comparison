//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.Inner = Test.Inner || {};

Test.Inner.Inner2 = Test.Inner.Inner2 || {};

export const Inner = {};

Inner.Test = Inner.Test || {};

Inner.Test.Inner2 = Inner.Test.Inner2 || {};

Test.S = class
{
    constructor(v = 0)
    {
        this.v = v;
    }

    _write(ostr)
    {
        ostr.writeInt(this.v);
    }

    _read(istr)
    {
        this.v = istr.readInt();
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(Test.S, true, false);

[Test.SMap, Test.SMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.S, false, undefined);

Test.SSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.S, true);

Test.C = class extends Ice.Value
{
    constructor(s = new Test.S())
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.S.write(ostr, this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = Test.S.read(istr, this.s);
    }
};

Ice.defineValue(Test.C, "::Test::C");
Ice.TypeRegistry.declareValueType("Test.C", Test.C);

[Test.CMap, Test.CMapHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.ObjectHelper, false, undefined, "Test.C");

Test.CSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "Test.C");

Test.E1 = Ice.defineEnum([
    ['v1', 0], ['v2', 1], ['v3', 2]]);

Test.S1 = class
{
    constructor(s = "")
    {
        this.s = s;
    }

    _write(ostr)
    {
        ostr.writeString(this.s);
    }

    _read(istr)
    {
        this.s = istr.readString();
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(Test.S1, true, true);

Test.C1 = class extends Ice.Value
{
    constructor(s = "")
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = istr.readString();
    }
};

Ice.defineValue(Test.C1, "::Test::C1");
Ice.TypeRegistry.declareValueType("Test.C1", Test.C1);

Test.S2 = class
{
    constructor(E1 = Test.E1.v1, S1 = new Test.S1(), C1 = null)
    {
        this.E1 = E1;
        this.S1 = S1;
        this.C1 = C1;
    }

    _write(ostr)
    {
        Test.E1._write(ostr, this.E1);
        Test.S1.write(ostr, this.S1);
        ostr.writeValue(this.C1);
    }

    _read(istr)
    {
        this.E1 = Test.E1._read(istr);
        this.S1 = Test.S1.read(istr, this.S1);
        istr.readValue(obj => this.C1 = obj, Ice.TypeRegistry.getValueType("Test.C1"));
    }

    static get minWireSize()
    {
        return  3;
    }
};

Ice.defineStruct(Test.S2, false, true);

Test.C2 = class extends Ice.Value
{
    constructor(E1 = Test.E1.v1, S1 = new Test.S1(), C1 = null)
    {
        super();
        this.E1 = E1;
        this.S1 = S1;
        this.C1 = C1;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.E1._write(ostr, this.E1);
        Test.S1.write(ostr, this.S1);
        ostr.writeValue(this.C1);
    }

    _iceReadMemberImpl(istr)
    {
        this.E1 = Test.E1._read(istr);
        this.S1 = Test.S1.read(istr, this.S1);
        istr.readValue(obj => this.C1 = obj, Ice.TypeRegistry.getValueType("Test.C1"));
    }
};

Ice.defineValue(Test.C2, "::Test::C2");
Ice.TypeRegistry.declareValueType("Test.C2", Test.C2);

const iceC_Test_I_ids = [
    "::Ice::Object",
    "::Test::I"
];

Test.I = class extends Ice.Object
{
};

Test.IPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.IPrx", Test.IPrx);

Ice.defineOperations(
    Test.I,
    Test.IPrx,
    iceC_Test_I_ids,
    "::Test::I",
    {
        "opS": [, , , [Test.S], [[Test.S]], [[Test.S]], , , ],
        "opSSeq": [, , , [Test.SSeqHelper], [[Test.SSeqHelper]], [[Test.SSeqHelper]], , , ],
        "opSMap": [, , , [Test.SMapHelper], [[Test.SMapHelper]], [[Test.SMapHelper]], , , ],
        "opC": [, , , ["Test.C", true], [["Test.C", true]], [["Test.C", true]], , true, true],
        "opCSeq": [, , , [Test.CSeqHelper], [[Test.CSeqHelper]], [[Test.CSeqHelper]], , true, true],
        "opCMap": [, , , [Test.CMapHelper], [[Test.CMapHelper]], [[Test.CMapHelper]], , true, true],
        "opE1": [, , , [Test.E1._helper], [[Test.E1._helper]], , , , ],
        "opS1": [, , , [Test.S1], [[Test.S1]], , , , ],
        "opC1": [, , , ["Test.C1", true], [["Test.C1", true]], , , true, true],
        "shutdown": [, , , , , , , , ]
    });

[Test.IMap, Test.IMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.IPrx, false, undefined);

Test.ISeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.IPrx, false);

Test.Inner.S = class
{
    constructor(v = 0)
    {
        this.v = v;
    }

    _write(ostr)
    {
        ostr.writeInt(this.v);
    }

    _read(istr)
    {
        this.v = istr.readInt();
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(Test.Inner.S, true, false);

Test.Inner.Inner2.S = class
{
    constructor(v = 0)
    {
        this.v = v;
    }

    _write(ostr)
    {
        ostr.writeInt(this.v);
    }

    _read(istr)
    {
        this.v = istr.readInt();
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(Test.Inner.Inner2.S, true, false);

[Test.Inner.Inner2.SMap, Test.Inner.Inner2.SMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.Inner.Inner2.S, false, undefined);

Test.Inner.Inner2.SSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.Inner.Inner2.S, true);

Test.Inner.Inner2.C = class extends Ice.Value
{
    constructor(s = new Test.Inner.Inner2.S())
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.Inner.Inner2.S.write(ostr, this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = Test.Inner.Inner2.S.read(istr, this.s);
    }
};

Ice.defineValue(Test.Inner.Inner2.C, "::Test::Inner::Inner2::C");
Ice.TypeRegistry.declareValueType("Test.Inner.Inner2.C", Test.Inner.Inner2.C);

[Test.Inner.Inner2.CMap, Test.Inner.Inner2.CMapHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.ObjectHelper, false, undefined, "Test.Inner.Inner2.C");

Test.Inner.Inner2.CSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "Test.Inner.Inner2.C");

const iceC_Test_Inner_Inner2_I_ids = [
    "::Ice::Object",
    "::Test::Inner::Inner2::I"
];

Test.Inner.Inner2.I = class extends Ice.Object
{
};

Test.Inner.Inner2.IPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.Inner.Inner2.IPrx", Test.Inner.Inner2.IPrx);

Ice.defineOperations(
    Test.Inner.Inner2.I,
    Test.Inner.Inner2.IPrx,
    iceC_Test_Inner_Inner2_I_ids,
    "::Test::Inner::Inner2::I",
    {
        "opS": [, , , [Test.Inner.Inner2.S], [[Test.Inner.Inner2.S]], [[Test.Inner.Inner2.S]], , , ],
        "opSSeq": [, , , [Test.Inner.Inner2.SSeqHelper], [[Test.Inner.Inner2.SSeqHelper]], [[Test.Inner.Inner2.SSeqHelper]], , , ],
        "opSMap": [, , , [Test.Inner.Inner2.SMapHelper], [[Test.Inner.Inner2.SMapHelper]], [[Test.Inner.Inner2.SMapHelper]], , , ],
        "opC": [, , , ["Test.Inner.Inner2.C", true], [["Test.Inner.Inner2.C", true]], [["Test.Inner.Inner2.C", true]], , true, true],
        "opCSeq": [, , , [Test.Inner.Inner2.CSeqHelper], [[Test.Inner.Inner2.CSeqHelper]], [[Test.Inner.Inner2.CSeqHelper]], , true, true],
        "opCMap": [, , , [Test.Inner.Inner2.CMapHelper], [[Test.Inner.Inner2.CMapHelper]], [[Test.Inner.Inner2.CMapHelper]], , true, true],
        "shutdown": [, , , , , , , , ]
    });

[Test.Inner.Inner2.IMap, Test.Inner.Inner2.IMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.Inner.Inner2.IPrx, false, undefined);

Test.Inner.Inner2.ISeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.Inner.Inner2.IPrx, false);

Test.Inner.C = class extends Ice.Value
{
    constructor(s = new Test.Inner.S())
    {
        super();
        this.s = s;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.Inner.S.write(ostr, this.s);
    }

    _iceReadMemberImpl(istr)
    {
        this.s = Test.Inner.S.read(istr, this.s);
    }
};

Ice.defineValue(Test.Inner.C, "::Test::Inner::C");
Ice.TypeRegistry.declareValueType("Test.Inner.C", Test.Inner.C);

Test.Inner.SSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.Inner.Inner2.S, true);

[Test.Inner.SMap, Test.Inner.SMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.Inner.Inner2.S, false, undefined);

[Test.Inner.CMap, Test.Inner.CMapHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.ObjectHelper, false, undefined, "Test.Inner.Inner2.C");

Test.Inner.CSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "Test.Inner.Inner2.C");

const iceC_Test_Inner_I_ids = [
    "::Ice::Object",
    "::Test::Inner::I"
];

Test.Inner.I = class extends Ice.Object
{
};

Test.Inner.IPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.Inner.IPrx", Test.Inner.IPrx);

Ice.defineOperations(
    Test.Inner.I,
    Test.Inner.IPrx,
    iceC_Test_Inner_I_ids,
    "::Test::Inner::I",
    {
        "opS": [, , , [Test.Inner.Inner2.S], [[Test.Inner.Inner2.S]], [[Test.Inner.Inner2.S]], , , ],
        "opSSeq": [, , , [Test.Inner.Inner2.SSeqHelper], [[Test.Inner.Inner2.SSeqHelper]], [[Test.Inner.Inner2.SSeqHelper]], , , ],
        "opSMap": [, , , [Test.Inner.Inner2.SMapHelper], [[Test.Inner.Inner2.SMapHelper]], [[Test.Inner.Inner2.SMapHelper]], , , ],
        "opC": [, , , ["Test.Inner.Inner2.C", true], [["Test.Inner.Inner2.C", true]], [["Test.Inner.Inner2.C", true]], , true, true],
        "opCSeq": [, , , [Test.Inner.Inner2.CSeqHelper], [[Test.Inner.Inner2.CSeqHelper]], [[Test.Inner.Inner2.CSeqHelper]], , true, true],
        "opCMap": [, , , [Test.Inner.Inner2.CMapHelper], [[Test.Inner.Inner2.CMapHelper]], [[Test.Inner.Inner2.CMapHelper]], , true, true],
        "shutdown": [, , , , , , , , ]
    });

[Test.Inner.IMap, Test.Inner.IMapHelper] = Ice.defineDictionary(Ice.StringHelper, Test.Inner.IPrx, false, undefined);

Test.Inner.ISeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.Inner.IPrx, false);

const iceC_Inner_Test_Inner2_I_ids = [
    "::Ice::Object",
    "::Inner::Test::Inner2::I"
];

Inner.Test.Inner2.I = class extends Ice.Object
{
};

Inner.Test.Inner2.IPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Inner.Test.Inner2.IPrx", Inner.Test.Inner2.IPrx);

Ice.defineOperations(
    Inner.Test.Inner2.I,
    Inner.Test.Inner2.IPrx,
    iceC_Inner_Test_Inner2_I_ids,
    "::Inner::Test::Inner2::I",
    {
        "opS": [, , , [Test.S], [[Test.S]], [[Test.S]], , , ],
        "opSSeq": [, , , [Test.SSeqHelper], [[Test.SSeqHelper]], [[Test.SSeqHelper]], , , ],
        "opSMap": [, , , [Test.SMapHelper], [[Test.SMapHelper]], [[Test.SMapHelper]], , , ],
        "opC": [, , , ["Test.C", true], [["Test.C", true]], [["Test.C", true]], , true, true],
        "opCSeq": [, , , [Test.CSeqHelper], [[Test.CSeqHelper]], [[Test.CSeqHelper]], , true, true],
        "opCMap": [, , , [Test.CMapHelper], [[Test.CMapHelper]], [[Test.CMapHelper]], , true, true],
        "shutdown": [, , , , , , , , ]
    });
