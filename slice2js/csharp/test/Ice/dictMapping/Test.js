//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Slice.defineDictionary(Test, "NV", "NVHelper", "Ice.IntHelper", "Ice.IntHelper", true, undefined, undefined);

    Slice.defineDictionary(Test, "NR", "NRHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "NDV", "NDVHelper", "Ice.StringHelper", "Test.NVHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "NDR", "NDRHelper", "Ice.StringHelper", "Test.NRHelper", false, undefined, undefined);

    Slice.defineSequence(Test, "IntSeqHelper", "Ice.IntHelper", true);

    Test.TEstNv = class
    {
        constructor(d = null, s = null)
        {
            this.d = d;
            this.s = s;
        }

        _write(ostr)
        {
            Test.NVHelper.write(ostr, this.d);
            Test.IntSeqHelper.write(ostr, this.s);
        }

        _read(istr)
        {
            this.d = Test.NVHelper.read(istr);
            this.s = Test.IntSeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Test.TEstNv, false, true);

    Slice.defineSequence(Test, "AISHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "GISHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "ASSHelper", "Ice.StringHelper", false);

    Slice.defineSequence(Test, "GSSHelper", "Ice.StringHelper", false);

    Slice.defineDictionary(Test, "NDAIS", "NDAISHelper", "Ice.StringHelper", "Test.AISHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    Slice.defineDictionary(Test, "NDGIS", "NDGISHelper", "Ice.StringHelper", "Test.GISHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    Slice.defineDictionary(Test, "NDASS", "NDASSHelper", "Ice.StringHelper", "Test.ASSHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    Slice.defineDictionary(Test, "NDGSS", "NDGSSHelper", "Ice.StringHelper", "Test.GSSHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    const iceC_Test_MyClass_ids = [
        "::Ice::Object",
        "::Test::MyClass"
    ];

    Test.MyClass = class extends Ice.Object
    {
    };

    Test.MyClassPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.MyClass, Test.MyClassPrx, iceC_Test_MyClass_ids, 1,
    {
        "shutdown": [, , , , , , , , , ],
        "opNV": [, , , , ["Test.NVHelper"], [["Test.NVHelper"]], [["Test.NVHelper"]], , , ],
        "opNR": [, , , , ["Test.NRHelper"], [["Test.NRHelper"]], [["Test.NRHelper"]], , , ],
        "opNDV": [, , , , ["Test.NDVHelper"], [["Test.NDVHelper"]], [["Test.NDVHelper"]], , , ],
        "opNDR": [, , , , ["Test.NDRHelper"], [["Test.NDRHelper"]], [["Test.NDRHelper"]], , , ],
        "opNDAIS": [, , , , ["Test.NDAISHelper"], [["Test.NDAISHelper"]], [["Test.NDAISHelper"]], , , ],
        "opNDGIS": [, , , , ["Test.NDGISHelper"], [["Test.NDGISHelper"]], [["Test.NDGISHelper"]], , , ],
        "opNDASS": [, , , , ["Test.NDASSHelper"], [["Test.NDASSHelper"]], [["Test.NDASSHelper"]], , , ],
        "opNDGSS": [, , , , ["Test.NDGSSHelper"], [["Test.NDGSSHelper"]], [["Test.NDGSSHelper"]], , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
