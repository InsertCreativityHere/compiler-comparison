//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Test = require("Test").Test;
    const Slice = Ice.Slice;

    Test.SBSUnknownDerived = class extends Test.SBase
    {
        constructor(sb, sbsud = "")
        {
            super(sb);
            this.sbsud = sbsud;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.sbsud);
        }

        _iceReadMemberImpl(istr)
        {
            this.sbsud = istr.readString();
        }
    };

    Slice.defineValue(Test.SBSUnknownDerived, "::Test::SBSUnknownDerived", false);

    Test.SUnknown = class extends Ice.Value
    {
        constructor(su = "", cycle = null)
        {
            super();
            this.su = su;
            this.cycle = cycle;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.su);
            ostr.writeValue(this.cycle);
        }

        _iceReadMemberImpl(istr)
        {
            this.su = istr.readString();
            istr.readValue(obj => this.cycle = obj, Test.SUnknown);
        }
    };

    Slice.defineValue(Test.SUnknown, "::Test::SUnknown", false);

    Test.D2 = class extends Test.B
    {
        constructor(sb, pb, sd2 = "", pd2 = null)
        {
            super(sb, pb);
            this.sd2 = sd2;
            this.pd2 = pd2;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.sd2);
            ostr.writeValue(this.pd2);
        }

        _iceReadMemberImpl(istr)
        {
            this.sd2 = istr.readString();
            istr.readValue(obj => this.pd2 = obj, Test.B);
        }
    };

    Slice.defineValue(Test.D2, "::Test::D2", false);

    Test.D4 = class extends Test.B
    {
        constructor(sb, pb, p1 = null, p2 = null)
        {
            super(sb, pb);
            this.p1 = p1;
            this.p2 = p2;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.p1 = obj, Test.B);
            istr.readValue(obj => this.p2 = obj, Test.B);
        }
    };

    Slice.defineValue(Test.D4, "::Test::D4", false);

    Test.UnknownDerivedException = class extends Test.BaseException
    {
        constructor(sbe, pb, sude = "", pd2 = null, _cause = "")
        {
            super(sbe, pb, _cause);
            this.sude = sude;
            this.pd2 = pd2;
        }

        static get _parent()
        {
            return Test.BaseException;
        }

        static get _id()
        {
            return "::Test::UnknownDerivedException";
        }

        _mostDerivedType()
        {
            return Test.UnknownDerivedException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.sude);
            ostr.writeValue(this.pd2);
        }

        _readMemberImpl(istr)
        {
            this.sude = istr.readString();
            istr.readValue(obj => this.pd2 = obj, Test.D2);
        }
    };

    Test.MyClass = class extends Ice.Value
    {
        constructor(i = 0)
        {
            super();
            this.i = i;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this.i);
        }

        _iceReadMemberImpl(istr)
        {
            this.i = istr.readInt();
        }
    };

    Slice.defineValue(Test.MyClass, "::Test::MyClass", false);

    Test.PSUnknown = class extends Test.Preserved
    {
        constructor(pi, ps, psu = "", graph = null, cl = null)
        {
            super(pi, ps);
            this.psu = psu;
            this.graph = graph;
            this.cl = cl;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.psu);
            ostr.writeValue(this.graph);
            ostr.writeValue(this.cl);
        }

        _iceReadMemberImpl(istr)
        {
            this.psu = istr.readString();
            istr.readValue(obj => this.graph = obj, Test.PNode);
            istr.readValue(obj => this.cl = obj, Test.MyClass);
        }
    };

    Slice.defineValue(Test.PSUnknown, "::Test::PSUnknown", false);

    Test.PSUnknown2 = class extends Test.Preserved
    {
        constructor(pi, ps, pb = null)
        {
            super(pi, ps);
            this.pb = pb;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.pb);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.pb = obj, Test.PBase);
        }
    };

    Slice.defineValue(Test.PSUnknown2, "::Test::PSUnknown2", false);

    Test.PSUnknownException = class extends Test.PreservedException
    {
        constructor(p = null, _cause = "")
        {
            super(_cause);
            this.p = p;
        }

        static get _parent()
        {
            return Test.PreservedException;
        }

        static get _id()
        {
            return "::Test::PSUnknownException";
        }

        _mostDerivedType()
        {
            return Test.PSUnknownException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeValue(this.p);
        }

        _readMemberImpl(istr)
        {
            istr.readValue(obj => this.p = obj, Test.PSUnknown2);
        }

        _usesClasses()
        {
            return true;
        }
    };
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
