//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.MyEnum = Slice.defineEnum([
        ['enum1', 0], ['enum2', 1], ['enum3', 2]]);

    Test.ValStruct = class
    {
        constructor(bo = false, by = 0, sh = 0, i = 0, l = new Ice.Long(0, 0), e = Test.MyEnum.enum1)
        {
            this.bo = bo;
            this.by = by;
            this.sh = sh;
            this.i = i;
            this.l = l;
            this.e = e;
        }

        _write(ostr)
        {
            ostr.writeBool(this.bo);
            ostr.writeByte(this.by);
            ostr.writeShort(this.sh);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            Test.MyEnum._write(ostr, this.e);
        }

        _read(istr)
        {
            this.bo = istr.readBool();
            this.by = istr.readByte();
            this.sh = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.e = Test.MyEnum._read(istr);
        }

        static get minWireSize()
        {
            return  17;
        }
    };

    Slice.defineStruct(Test.ValStruct, true, true);

    const iceC_Test_MyInterface_ids = [
        "::Ice::Object",
        "::Test::MyInterface"
    ];

    Test.MyInterface = class extends Ice.Object
    {
    };

    Test.MyInterfacePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.MyInterface, Test.MyInterfacePrx, iceC_Test_MyInterface_ids, 1,
    {
        "op": [, , , , , , , , , ]
    });

    Slice.defineSequence(Test, "ProxySeqHelper", "Test.MyInterfacePrx", false);

    Test.RefStruct = class
    {
        constructor(s = "", sp = "", c = null, p = null, seq = null)
        {
            this.s = s;
            this.sp = sp;
            this.c = c;
            this.p = p;
            this.seq = seq;
        }

        _write(ostr)
        {
            ostr.writeString(this.s);
            ostr.writeString(this.sp);
            ostr.writeValue(this.c);
            Test.MyInterfacePrx.write(ostr, this.p);
            Test.ProxySeqHelper.write(ostr, this.seq);
        }

        _read(istr)
        {
            this.s = istr.readString();
            this.sp = istr.readString();
            istr.readValue(obj => this.c = obj, Test.MyClass);
            this.p = Test.MyInterfacePrx.read(istr, this.p);
            this.seq = Test.ProxySeqHelper.read(istr);
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(Test.RefStruct, false, true);

    Slice.defineSequence(Test, "ValStructSHelper", "Test.ValStruct", false);

    Slice.defineSequence(Test, "ValStructListHelper", "Test.ValStruct", false);

    Slice.defineSequence(Test, "ValStructLinkedListHelper", "Test.ValStruct", false);

    Slice.defineSequence(Test, "ValStructStackHelper", "Test.ValStruct", false);

    Slice.defineSequence(Test, "ValStructQueueHelper", "Test.ValStruct", false);

    Slice.defineDictionary(Test, "IntStringD", "IntStringDHelper", "Ice.IntHelper", "Ice.StringHelper", false, undefined, undefined);

    Slice.defineDictionary(Test, "IntValStructD", "IntValStructDHelper", "Ice.IntHelper", "Test.ValStruct", false, undefined, undefined);

    Slice.defineDictionary(Test, "IntProxyD", "IntProxyDHelper", "Ice.IntHelper", "Test.MyInterfacePrx", false, undefined, undefined);

    Slice.defineDictionary(Test, "IntStringSD", "IntStringSDHelper", "Ice.IntHelper", "Ice.StringHelper", false, undefined, undefined);

    const iceC_Test_Base_ids = [
        "::Ice::Object",
        "::Test::Base"
    ];

    Test.Base = class extends Ice.Value
    {
        constructor(bo = false, by = 0, sh = 0, i = 0, l = new Ice.Long(0, 0), e = Test.MyEnum.enum1)
        {
            super();
            this.bo = bo;
            this.by = by;
            this.sh = sh;
            this.i = i;
            this.l = l;
            this.e = e;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeBool(this.bo);
            ostr.writeByte(this.by);
            ostr.writeShort(this.sh);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            Test.MyEnum._write(ostr, this.e);
        }

        _iceReadMemberImpl(istr)
        {
            this.bo = istr.readBool();
            this.by = istr.readByte();
            this.sh = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.e = Test.MyEnum._read(istr);
        }
    };

    Slice.defineValue(Test.Base, iceC_Test_Base_ids[1], false);

    const iceC_Test_MyClass_ids = [
        "::Ice::Object",
        "::Test::Base",
        "::Test::MyClass"
    ];

    Test.MyClass = class extends Test.Base
    {
        constructor(bo, by, sh, i, l, e, c = null, o = null, s = new Test.ValStruct())
        {
            super(bo, by, sh, i, l, e);
            this.c = c;
            this.o = o;
            this.s = s;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.c);
            ostr.writeValue(this.o);
            Test.ValStruct.write(ostr, this.s);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.c = obj, Test.MyClass);
            istr.readValue(obj => this.o = obj, Ice.Value);
            this.s = Test.ValStruct.read(istr, this.s);
        }
    };

    Slice.defineValue(Test.MyClass, iceC_Test_MyClass_ids[2], false);

    Test.MyException = class extends Ice.UserException
    {
        constructor(name = "", b = 0, s = 0, i = 0, l = new Ice.Long(0, 0), vs = new Test.ValStruct(), rs = new Test.RefStruct(), c = null, p = null, vss = null, vsl = null, vsll = null, vssk = null, vsq = null, isd = null, ivd = null, ipd = null, issd = null, optName = undefined, optInt = undefined, optValStruct = undefined, optRefStruct = undefined, optEnum = undefined, optClass = undefined, optProxy = undefined, _cause = "")
        {
            super(_cause);
            this.name = name;
            this.b = b;
            this.s = s;
            this.i = i;
            this.l = l;
            this.vs = vs;
            this.rs = rs;
            this.c = c;
            this.p = p;
            this.vss = vss;
            this.vsl = vsl;
            this.vsll = vsll;
            this.vssk = vssk;
            this.vsq = vsq;
            this.isd = isd;
            this.ivd = ivd;
            this.ipd = ipd;
            this.issd = issd;
            this.optName = optName;
            this.optInt = optInt;
            this.optValStruct = optValStruct;
            this.optRefStruct = optRefStruct;
            this.optEnum = optEnum;
            this.optClass = optClass;
            this.optProxy = optProxy;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::MyException";
        }

        _mostDerivedType()
        {
            return Test.MyException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.name);
            ostr.writeByte(this.b);
            ostr.writeShort(this.s);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            Test.ValStruct.write(ostr, this.vs);
            Test.RefStruct.write(ostr, this.rs);
            ostr.writeValue(this.c);
            Test.MyInterfacePrx.write(ostr, this.p);
            Test.ValStructSHelper.write(ostr, this.vss);
            Test.ValStructListHelper.write(ostr, this.vsl);
            Test.ValStructLinkedListHelper.write(ostr, this.vsll);
            Test.ValStructStackHelper.write(ostr, this.vssk);
            Test.ValStructQueueHelper.write(ostr, this.vsq);
            Test.IntStringDHelper.write(ostr, this.isd);
            Test.IntValStructDHelper.write(ostr, this.ivd);
            Test.IntProxyDHelper.write(ostr, this.ipd);
            Test.IntStringSDHelper.write(ostr, this.issd);
            Ice.StringHelper.writeOptional(ostr, 1, this.optName);
            Ice.IntHelper.writeOptional(ostr, 2, this.optInt);
            Test.ValStruct.writeOptional(ostr, 3, this.optValStruct);
            Test.RefStruct.writeOptional(ostr, 4, this.optRefStruct);
            Test.MyEnum._writeOpt(ostr, 5, this.optEnum);
            ostr.writeOptionalValue(6, this.optClass);
            Test.MyInterfacePrx.writeOptional(ostr, 7, this.optProxy);
        }

        _readMemberImpl(istr)
        {
            this.name = istr.readString();
            this.b = istr.readByte();
            this.s = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.vs = Test.ValStruct.read(istr, this.vs);
            this.rs = Test.RefStruct.read(istr, this.rs);
            istr.readValue(obj => this.c = obj, Test.MyClass);
            this.p = Test.MyInterfacePrx.read(istr, this.p);
            this.vss = Test.ValStructSHelper.read(istr);
            this.vsl = Test.ValStructListHelper.read(istr);
            this.vsll = Test.ValStructLinkedListHelper.read(istr);
            this.vssk = Test.ValStructStackHelper.read(istr);
            this.vsq = Test.ValStructQueueHelper.read(istr);
            this.isd = Test.IntStringDHelper.read(istr);
            this.ivd = Test.IntValStructDHelper.read(istr);
            this.ipd = Test.IntProxyDHelper.read(istr);
            this.issd = Test.IntStringSDHelper.read(istr);
            this.optName = Ice.StringHelper.readOptional(istr, 1);
            this.optInt = Ice.IntHelper.readOptional(istr, 2);
            this.optValStruct = Test.ValStruct.readOptional(istr, 3);
            this.optRefStruct = Test.RefStruct.readOptional(istr, 4);
            this.optEnum = Test.MyEnum._readOpt(istr, 5);
            istr.readOptionalValue(6, obj => this.optClass = obj, Test.MyClass);
            this.optProxy = Test.MyInterfacePrx.readOptional(istr, 7);
        }

        _usesClasses()
        {
            return true;
        }
    };
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
