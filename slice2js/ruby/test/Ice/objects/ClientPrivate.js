//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.Empty = class extends Ice.Value
{
};

Ice.defineValue(Test.Empty, "::Test::Empty");
Ice.TypeRegistry.declareValueType("Test.Empty", Test.Empty);

Test.AlsoEmpty = class extends Ice.Value
{
};

Ice.defineValue(Test.AlsoEmpty, "::Test::AlsoEmpty");
Ice.TypeRegistry.declareValueType("Test.AlsoEmpty", Test.AlsoEmpty);

const iceC_Test_UnexpectedObjectExceptionTest_ids = [
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
];

Test.UnexpectedObjectExceptionTest = class extends Ice.Object
{
};

Test.UnexpectedObjectExceptionTestPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.UnexpectedObjectExceptionTestPrx", Test.UnexpectedObjectExceptionTestPrx);

Ice.defineOperations(
    Test.UnexpectedObjectExceptionTest,
    Test.UnexpectedObjectExceptionTestPrx,
    iceC_Test_UnexpectedObjectExceptionTest_ids,
    "::Test::UnexpectedObjectExceptionTest",
    {
        "op": [, , , ["Test.Empty", true], , , , , true]
    });

Test.COneMember = class extends Ice.Value
{
    constructor(e = null)
    {
        super();
        this.e = e;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.e);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.e = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }
};

Ice.defineValue(Test.COneMember, "::Test::COneMember");
Ice.TypeRegistry.declareValueType("Test.COneMember", Test.COneMember);

Test.CTwoMembers = class extends Ice.Value
{
    constructor(e1 = null, e2 = null)
    {
        super();
        this.e1 = e1;
        this.e2 = e2;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeValue(this.e1);
        ostr.writeValue(this.e2);
    }

    _iceReadMemberImpl(istr)
    {
        istr.readValue(obj => this.e1 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
        istr.readValue(obj => this.e2 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }
};

Ice.defineValue(Test.CTwoMembers, "::Test::CTwoMembers");
Ice.TypeRegistry.declareValueType("Test.CTwoMembers", Test.CTwoMembers);

Test.EOneMember = class extends Ice.UserException
{
    constructor(e = null, _cause = "")
    {
        super(_cause);
        this.e = e;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::EOneMember";
    }

    _mostDerivedType()
    {
        return Test.EOneMember;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeValue(this.e);
    }

    _readMemberImpl(istr)
    {
        istr.readValue(obj => this.e = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }

    _usesClasses()
    {
        return true;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.EOneMember",
    Test.EOneMember);

Test.ETwoMembers = class extends Ice.UserException
{
    constructor(e1 = null, e2 = null, _cause = "")
    {
        super(_cause);
        this.e1 = e1;
        this.e2 = e2;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::ETwoMembers";
    }

    _mostDerivedType()
    {
        return Test.ETwoMembers;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeValue(this.e1);
        ostr.writeValue(this.e2);
    }

    _readMemberImpl(istr)
    {
        istr.readValue(obj => this.e1 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
        istr.readValue(obj => this.e2 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }

    _usesClasses()
    {
        return true;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.ETwoMembers",
    Test.ETwoMembers);

Test.SOneMember = class
{
    constructor(e = null)
    {
        this.e = e;
    }

    _write(ostr)
    {
        ostr.writeValue(this.e);
    }

    _read(istr)
    {
        istr.readValue(obj => this.e = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(Test.SOneMember, false, true);

Test.STwoMembers = class
{
    constructor(e1 = null, e2 = null)
    {
        this.e1 = e1;
        this.e2 = e2;
    }

    _write(ostr)
    {
        ostr.writeValue(this.e1);
        ostr.writeValue(this.e2);
    }

    _read(istr)
    {
        istr.readValue(obj => this.e1 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
        istr.readValue(obj => this.e2 = obj, Ice.TypeRegistry.getValueType("Test.Empty"));
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(Test.STwoMembers, false, true);

[Test.DOneMember, Test.DOneMemberHelper] = Ice.defineDictionary(Ice.IntHelper, Ice.ObjectHelper, false, undefined, "Test.COneMember");

[Test.DTwoMembers, Test.DTwoMembersHelper] = Ice.defineDictionary(Ice.IntHelper, Ice.ObjectHelper, false, undefined, "Test.CTwoMembers");
