// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const and = {};

and._continue = Ice.defineEnum([
    ['_let', 0], ['_var', 1]]);

and.guard = class
{
    constructor(_default = 0)
    {
        this._default = _default;
    }

    _write(ostr)
    {
        ostr.writeInt(this._default);
    }

    _read(istr)
    {
        this._default = istr.readInt();
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(and.guard, true, false);

and.defer = class
{
    constructor(_else = "")
    {
        this._else = _else;
    }

    _write(ostr)
    {
        ostr.writeString(this._else);
    }

    _read(istr)
    {
        this._else = istr.readString();
    }

    static get minWireSize()
    {
        return  1;
    }
};

Ice.defineStruct(and.defer, true, true);

const iceC_and__break_ids = [
    "::Ice::Object",
    "::and::break"
];

and._break = class extends Ice.Object
{
};

and.breakPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.breakPrx", and.breakPrx);

Ice.defineOperations(
    and._break,
    and.breakPrx,
    iceC_and__break_ids,
    "::and::break",
    {
        "case": ["_case", , , , [[3]], [[3]], , , ]
    });

const iceC_and_func_ids = [
    "::Ice::Object",
    "::and::func"
];

and.func = class extends Ice.Object
{
};

and.funcPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.funcPrx", and.funcPrx);

Ice.defineOperations(
    and.func,
    and.funcPrx,
    iceC_and_func_ids,
    "::and::func",
    {
        "public": ["_public", , , , , , , , ]
    });

and._switch = class extends Ice.Value
{
    constructor(_if = 0, _export = null, volatile = 0)
    {
        super();
        this._if = _if;
        this._export = _export;
        this.volatile = volatile;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this._if);
        ostr.writeProxy(this._export);
        ostr.writeInt(this.volatile);
    }

    _iceReadMemberImpl(istr)
    {
        this._if = istr.readInt();
        this._export = istr.readProxy();
        this.volatile = istr.readInt();
    }
};

Ice.defineValue(and._switch, "::and::switch");
Ice.TypeRegistry.declareValueType("and._switch", and._switch);

const iceC_and__do_ids = [
    "::Ice::Object",
    "::and::break",
    "::and::do",
    "::and::func"
];

and._do = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            and.func,
            and.break
        ];
    }
};

and.doPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            and.funcPrx,
            and.breakPrx];
    }
};
Ice.TypeRegistry.declareProxyType("and.doPrx", and.doPrx);

Ice.defineOperations(
    and._do,
    and.doPrx,
    iceC_and__do_ids,
    "::and::do");

and.fileprivateHelper = Ice.StreamHelpers.generateSeqHelper(and.guard, true);

[and._for, and._forHelper] = Ice.defineDictionary(Ice.StringHelper, and.guard, false, undefined);

and._return = class extends Ice.UserException
{
    constructor(Int32 = 0, _cause = "")
    {
        super(_cause);
        this.Int32 = Int32;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::and::return";
    }

    _mostDerivedType()
    {
        return and._return;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this.Int32);
    }

    _readMemberImpl(istr)
    {
        this.Int32 = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "and._return",
    and._return);

and.as = class extends and._return
{
    constructor(Int32, _static = 0, _switch = 0, _cause = "")
    {
        super(Int32, _cause);
        this._static = _static;
        this._switch = _switch;
    }

    static get _parent()
    {
        return and._return;
    }

    static get _ice_id()
    {
        return "::and::as";
    }

    _mostDerivedType()
    {
        return and.as;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this._static);
        ostr.writeInt(this._switch);
    }

    _readMemberImpl(istr)
    {
        this._static = istr.readInt();
        this._switch = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "and.as",
    and.as);

const iceC_and_friend_ids = [
    "::Ice::Object",
    "::and::friend"
];

and.friend = class extends Ice.Object
{
};

and.friendPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.friendPrx", and.friendPrx);

Ice.defineOperations(
    and.friend,
    and.friendPrx,
    iceC_and_friend_ids,
    "::and::friend",
    {
        "goto": [, , , [and.guard], [[and._continue._helper], [and.guard], [and.defer], ["and._switch", true], ["and.doPrx"], ["and.breakPrx"], ["and.funcPrx"], ["and._switch", true], ["and.doPrx"], [3], [3], [3], [3]], ,
        [
            and.as,
            and._return
        ], true, ]
    });

Object.defineProperty(and, 'is', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, 'self', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, '_throw', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, 'typealias', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, 'internal', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, '_while', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, '_import', {
    enumerable: true,
    value: 0
});
