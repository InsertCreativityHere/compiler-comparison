//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let and = _ModuleRegistry.module("and");

    and._continue = Slice.defineEnum([
        ['_let', 0], ['_var', 1]]);

    and.guard = class
    {
        constructor(_default = 0)
        {
            this._default = _default;
        }

        _write(ostr)
        {
            ostr.writeInt(this._default);
        }

        _read(istr)
        {
            this._default = istr.readInt();
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(and.guard, true, false);

    and.defer = class
    {
        constructor(_else = "")
        {
            this._else = _else;
        }

        _write(ostr)
        {
            ostr.writeString(this._else);
        }

        _read(istr)
        {
            this._else = istr.readString();
        }

        static get minWireSize()
        {
            return  1;
        }
    };

    Slice.defineStruct(and.defer, true, true);

    const iceC_and__break_ids = [
        "::Ice::Object",
        "::and::break"
    ];

    and.break = class extends Ice.Object
    {
    };

    and.breakPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.break, and.breakPrx, iceC_and__break_ids, 1,
    {
        "case": ["_case", , , , , [[3]], [[3]], , , ]
    });

    const iceC_and_func_ids = [
        "::Ice::Object",
        "::and::func"
    ];

    and.func = class extends Ice.Object
    {
    };

    and.funcPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.func, and.funcPrx, iceC_and_func_ids, 1,
    {
        "public": ["_public", , , , , , , , , ]
    });

    const iceC_and__switch_ids = [
        "::Ice::Object",
        "::and::switch"
    ];

    and._switch = class extends Ice.Value
    {
        constructor(_if = 0, _export = null, volatile = 0)
        {
            super();
            this._if = _if;
            this._export = _export;
            this.volatile = volatile;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this._if);
            and.funcPrx.write(ostr, this._export);
            ostr.writeInt(this.volatile);
        }

        _iceReadMemberImpl(istr)
        {
            this._if = istr.readInt();
            this._export = and.funcPrx.read(istr, this._export);
            this.volatile = istr.readInt();
        }
    };

    Slice.defineValue(and._switch, iceC_and__switch_ids[1], false);

    const iceC_and__do_ids = [
        "::Ice::Object",
        "::and::break",
        "::and::do",
        "::and::func"
    ];

    and.do = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                and.func,
                and.break
            ];
        }
    };

    and.doPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                and.funcPrx,
                and.breakPrx];
        }
    };

    Slice.defineOperations(and.do, and.doPrx, iceC_and__do_ids, 2);

    Slice.defineSequence(and, "fileprivateHelper", "and.guard", true);

    Slice.defineDictionary(and, "_for", "_forHelper", "Ice.StringHelper", "and.guard", false, undefined, undefined);

    and._return = class extends Ice.UserException
    {
        constructor(Int32 = 0, _cause = "")
        {
            super(_cause);
            this.Int32 = Int32;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::and::return";
        }

        _mostDerivedType()
        {
            return and._return;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.Int32);
        }

        _readMemberImpl(istr)
        {
            this.Int32 = istr.readInt();
        }
    };

    and.as = class extends and._return
    {
        constructor(Int32, _static = 0, _switch = 0, _cause = "")
        {
            super(Int32, _cause);
            this._static = _static;
            this._switch = _switch;
        }

        static get _parent()
        {
            return and._return;
        }

        static get _id()
        {
            return "::and::as";
        }

        _mostDerivedType()
        {
            return and.as;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this._static);
            ostr.writeInt(this._switch);
        }

        _readMemberImpl(istr)
        {
            this._static = istr.readInt();
            this._switch = istr.readInt();
        }
    };

    Object.defineProperty(and, 'is', {
        value: 0
    });

    Object.defineProperty(and, 'self', {
        value: 0
    });

    Object.defineProperty(and, '_throw', {
        value: 0
    });

    Object.defineProperty(and, 'typealias', {
        value: 0
    });

    Object.defineProperty(and, 'internal', {
        value: 0
    });

    Object.defineProperty(and, '_while', {
        value: 0
    });

    Object.defineProperty(and, '_import', {
        value: 0
    });
    exports.and = and;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
