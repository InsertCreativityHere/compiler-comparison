//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServiceManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_Exception from "../Ice/Exception.js";
import * as Ice_Long from "../Ice/Long.js";
import * as Ice_Object from "../Ice/Object.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_Operation from "../Ice/Operation.js";
import * as Ice_Stream from "../Ice/Stream.js";
import * as Ice_StreamHelpers from "../Ice/StreamHelpers.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_Value from "../Ice/Value.js";
import { Ice as Ice_Ice_BuiltinSequences } from "../Ice/BuiltinSequences.js"

const Ice = {
    ...Ice_Exception,
    ...Ice_Long,
    ...Ice_Object,
    ...Ice_ObjectPrx,
    ...Ice_Operation,
    ...Ice_Stream,
    ...Ice_StreamHelpers,
    ...Ice_TypeRegistry,
    ...Ice_Value,
    ...Ice_Ice_BuiltinSequences,
};


export const IceBox = {};

/**
 *  This exception is thrown if an attempt is made to start an already-started service.
 **/
IceBox.AlreadyStartedException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::AlreadyStartedException";
    }

    _mostDerivedType()
    {
        return IceBox.AlreadyStartedException;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceBox.AlreadyStartedException",
    IceBox.AlreadyStartedException);

/**
 *  This exception is thrown if an attempt is made to stop an already-stopped service.
 **/
IceBox.AlreadyStoppedException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::AlreadyStoppedException";
    }

    _mostDerivedType()
    {
        return IceBox.AlreadyStoppedException;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceBox.AlreadyStoppedException",
    IceBox.AlreadyStoppedException);

/**
 *  This exception is thrown if a service name does not refer to an existing service.
 **/
IceBox.NoSuchServiceException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::NoSuchServiceException";
    }

    _mostDerivedType()
    {
        return IceBox.NoSuchServiceException;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceBox.NoSuchServiceException",
    IceBox.NoSuchServiceException);

const iceC_IceBox_ServiceObserver_ids = [
    "::Ice::Object",
    "::IceBox::ServiceObserver"
];

/**
 *  An Observer interface implemented by admin clients interested in the status of services.
 *  @see ServiceManager
 **/
IceBox.ServiceObserver = class extends Ice.Object
{
};

IceBox.ServiceObserverPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceBox.ServiceObserverPrx", IceBox.ServiceObserverPrx);

Ice.defineOperations(
    IceBox.ServiceObserver,
    IceBox.ServiceObserverPrx,
    iceC_IceBox_ServiceObserver_ids,
    "::IceBox::ServiceObserver",
    {
        "servicesStarted": [, , , , [[Ice.StringSeqHelper]], , , , ],
        "servicesStopped": [, , , , [[Ice.StringSeqHelper]], , , , ]
    });

const iceC_IceBox_ServiceManager_ids = [
    "::Ice::Object",
    "::IceBox::ServiceManager"
];

/**
 *  Administers a set of IceBox Service instances.
 *  @see Service
 **/
IceBox.ServiceManager = class extends Ice.Object
{
};

IceBox.ServiceManagerPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceBox.ServiceManagerPrx", IceBox.ServiceManagerPrx);

Ice.defineOperations(
    IceBox.ServiceManager,
    IceBox.ServiceManagerPrx,
    iceC_IceBox_ServiceManager_ids,
    "::IceBox::ServiceManager",
    {
        "startService": [, , , , [[7]], ,
        [
            IceBox.AlreadyStartedException,
            IceBox.NoSuchServiceException
        ], , ],
        "stopService": [, , , , [[7]], ,
        [
            IceBox.AlreadyStoppedException,
            IceBox.NoSuchServiceException
        ], , ],
        "addObserver": [, , , , [["IceBox.ServiceObserverPrx"]], , , , ],
        "shutdown": [, , , , , , , , ]
    });
