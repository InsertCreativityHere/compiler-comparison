//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `IceBox.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

/* slice2js browser-bundle-skip */
const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
require("../Ice/Object");
require("../Ice/Value");
require("../Ice/ObjectPrx");
require("../Ice/Operation");
require("../Ice/Exception");
require("../Ice/Long");
require("../Ice/HashMap");
require("../Ice/HashUtil");
require("../Ice/ArrayUtil");
require("../Ice/StreamHelpers");
require("../Ice/BuiltinSequences");
require("../Ice/CommunicatorF");
require("../Ice/PropertiesF");
const Ice = _ModuleRegistry.module("Ice");

const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

let IceBox = _ModuleRegistry.module("IceBox");
/* slice2js browser-bundle-skip-end */

/**
 *  This exception is a general failure notification. It is thrown for errors such as a service encountering an error
 *  during initialization, or the service manager being unable to load a service executable.
 **/
IceBox.FailureException = class extends Ice.LocalException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.LocalException;
    }

    static get _id()
    {
        return "::IceBox::FailureException";
    }
};

/**
 *  This exception is thrown if an attempt is made to start an already-started service.
 **/
IceBox.AlreadyStartedException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::AlreadyStartedException";
    }

    _mostDerivedType()
    {
        return IceBox.AlreadyStartedException;
    }
};

/**
 *  This exception is thrown if an attempt is made to stop an already-stopped service.
 **/
IceBox.AlreadyStoppedException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::AlreadyStoppedException";
    }

    _mostDerivedType()
    {
        return IceBox.AlreadyStoppedException;
    }
};

/**
 *  This exception is thrown if a service name does not refer to an existing service.
 **/
IceBox.NoSuchServiceException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceBox::NoSuchServiceException";
    }

    _mostDerivedType()
    {
        return IceBox.NoSuchServiceException;
    }
};

const iceC_IceBox_ServiceObserver_ids = [
    "::Ice::Object",
    "::IceBox::ServiceObserver"
];

/**
 *  An Observer interface implemented by admin clients interested in the status of services.
 *  @see ServiceManager
 **/
IceBox.ServiceObserver = class extends Ice.Object
{
};

IceBox.ServiceObserverPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(IceBox.ServiceObserver, IceBox.ServiceObserverPrx, iceC_IceBox_ServiceObserver_ids, 1,
{
    "servicesStarted": [, , , , , [["Ice.StringSeqHelper"]], , , , ],
    "servicesStopped": [, , , , , [["Ice.StringSeqHelper"]], , , , ]
});

const iceC_IceBox_ServiceManager_ids = [
    "::Ice::Object",
    "::IceBox::ServiceManager"
];

/**
 *  Administers a set of {@link Service} instances.
 *  @see Service
 **/
IceBox.ServiceManager = class extends Ice.Object
{
};

IceBox.ServiceManagerPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(IceBox.ServiceManager, IceBox.ServiceManagerPrx, iceC_IceBox_ServiceManager_ids, 1,
{
    "startService": [, , , , , [[7]], ,
    [
        IceBox.AlreadyStartedException,
        IceBox.NoSuchServiceException
    ], , ],
    "stopService": [, , , , , [[7]], ,
    [
        IceBox.AlreadyStoppedException,
        IceBox.NoSuchServiceException
    ], , ],
    "addObserver": [, , , , , [["IceBox.ServiceObserverPrx"]], , , , ],
    "shutdown": [, , , , , , , , , ]
});
/* slice2js browser-bundle-skip */
exports.IceBox = IceBox;
/* slice2js browser-bundle-skip-end */
