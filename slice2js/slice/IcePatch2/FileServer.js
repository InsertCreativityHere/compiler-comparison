//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

/* slice2js browser-bundle-skip */
const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
require("../Ice/Object");
require("../Ice/Value");
require("../Ice/ObjectPrx");
require("../Ice/Operation");
require("../Ice/Exception");
require("../Ice/Long");
require("../Ice/HashMap");
require("../Ice/HashUtil");
require("../Ice/ArrayUtil");
require("../Ice/StreamHelpers");
const Ice = _ModuleRegistry.module("Ice");

const IcePatch2 = require("FileInfo").IcePatch2;
const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

Slice.defineSequence(IcePatch2, "ByteSeqSeqHelper", "Ice.ByteSeqHelper", false);

/**
 *  A <code>partition</code> argument was not in the range 0-255.
 **/
IcePatch2.PartitionOutOfRangeException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IcePatch2::PartitionOutOfRangeException";
    }

    _mostDerivedType()
    {
        return IcePatch2.PartitionOutOfRangeException;
    }
};

/**
 *  This exception is raised if a file's contents cannot be read.
 **/
IcePatch2.FileAccessException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IcePatch2::FileAccessException";
    }

    _mostDerivedType()
    {
        return IcePatch2.FileAccessException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};

/**
 *  This exception is raised if an operation tries to use a file whose size is larger than 2.1 GB. Use the "large"
 *  versions of the operations instead.
 **/
IcePatch2.FileSizeRangeException = class extends IcePatch2.FileAccessException
{
    constructor(reason, _cause = "")
    {
        super(reason, _cause);
    }

    static get _parent()
    {
        return IcePatch2.FileAccessException;
    }

    static get _id()
    {
        return "::IcePatch2::FileSizeRangeException";
    }

    _mostDerivedType()
    {
        return IcePatch2.FileSizeRangeException;
    }
};

const iceC_IcePatch2_FileServer_ids = [
    "::Ice::Object",
    "::IcePatch2::FileServer"
];

/**
 *  The interface that provides access to files.
 **/
IcePatch2.FileServer = class extends Ice.Object
{
};

IcePatch2.FileServerPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(IcePatch2.FileServer, IcePatch2.FileServerPrx, iceC_IcePatch2_FileServer_ids, "::IcePatch2::FileServer",
{
    "getFileInfoSeq": [, 2, 1, , ["IcePatch2.FileInfoSeqHelper"], [[3]], ,
    [
        IcePatch2.PartitionOutOfRangeException,
        IcePatch2.FileSizeRangeException
    ], , ],
    "getLargeFileInfoSeq": [, 2, 1, , ["IcePatch2.LargeFileInfoSeqHelper"], [[3]], ,
    [
        IcePatch2.PartitionOutOfRangeException
    ], , ],
    "getChecksumSeq": [, 2, 1, , ["IcePatch2.ByteSeqSeqHelper"], , , , , ],
    "getChecksum": [, 2, 1, , ["Ice.ByteSeqHelper"], , , , , ],
    "getFileCompressed": [, 2, 1, , ["Ice.ByteSeqHelper"], [[7], [3], [3]], ,
    [
        IcePatch2.FileSizeRangeException,
        IcePatch2.FileAccessException
    ], , ],
    "getLargeFileCompressed": [, 2, 1, , ["Ice.ByteSeqHelper"], [[7], [4], [3]], ,
    [
        IcePatch2.FileAccessException
    ], , ]
});
/* slice2js browser-bundle-skip */
exports.IcePatch2 = IcePatch2;
/* slice2js browser-bundle-skip-end */
