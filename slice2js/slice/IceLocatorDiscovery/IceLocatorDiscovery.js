//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

/* slice2js browser-bundle-skip */
const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
require("../Ice/Object");
require("../Ice/Value");
require("../Ice/ObjectPrx");
require("../Ice/Operation");
require("../Ice/Long");
require("../Ice/HashMap");
require("../Ice/HashUtil");
require("../Ice/ArrayUtil");
require("../Ice/StreamHelpers");
require("../Ice/Locator");
const Ice = _ModuleRegistry.module("Ice");

const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

let IceLocatorDiscovery = _ModuleRegistry.module("IceLocatorDiscovery");
/* slice2js browser-bundle-skip-end */

const iceC_IceLocatorDiscovery_LookupReply_ids = [
    "::Ice::Object",
    "::IceLocatorDiscovery::LookupReply"
];

/**
 *  The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
 *  implementations invoke on this interface to provide their locator proxy.
 *  @see Lookup
 **/
IceLocatorDiscovery.LookupReply = class extends Ice.Object
{
};

IceLocatorDiscovery.LookupReplyPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(IceLocatorDiscovery.LookupReply, IceLocatorDiscovery.LookupReplyPrx, iceC_IceLocatorDiscovery_LookupReply_ids, "::IceLocatorDiscovery::LookupReply",
{
    "foundLocator": [, , , , , [["Ice.LocatorPrx"]], , , , ]
});

const iceC_IceLocatorDiscovery_Lookup_ids = [
    "::Ice::Object",
    "::IceLocatorDiscovery::Lookup"
];

/**
 *  The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
 *  available Ice locators on the network.
 *  Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
 *  Clients typically make a multicast findLocator request to find the locator proxy.
 *  @see LookupReply
 **/
IceLocatorDiscovery.Lookup = class extends Ice.Object
{
};

IceLocatorDiscovery.LookupPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(IceLocatorDiscovery.Lookup, IceLocatorDiscovery.LookupPrx, iceC_IceLocatorDiscovery_Lookup_ids, "::IceLocatorDiscovery::Lookup",
{
    "findLocator": [, 2, 2, , , [[7], ["IceLocatorDiscovery.LookupReplyPrx"]], , , , ]
});
/* slice2js browser-bundle-skip */
exports.IceLocatorDiscovery = IceLocatorDiscovery;
/* slice2js browser-bundle-skip-end */
