//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_Long from "../Ice/Long.js";
import * as Ice_Object from "../Ice/Object.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_Operation from "../Ice/Operation.js";
import * as Ice_StreamHelpers from "../Ice/StreamHelpers.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_Value from "../Ice/Value.js";
import { Ice as Ice_Ice_Locator } from "../Ice/Locator.js"

const Ice = {
    ...Ice_Long,
    ...Ice_Object,
    ...Ice_ObjectPrx,
    ...Ice_Operation,
    ...Ice_StreamHelpers,
    ...Ice_TypeRegistry,
    ...Ice_Value,
    ...Ice_Ice_Locator,
};


export const IceLocatorDiscovery = {};

const iceC_IceLocatorDiscovery_LookupReply_ids = [
    "::Ice::Object",
    "::IceLocatorDiscovery::LookupReply"
];

/**
 *  The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
 *  implementations invoke on this interface to provide their locator proxy.
 *  @see Lookup
 **/
IceLocatorDiscovery.LookupReply = class extends Ice.Object
{
};

IceLocatorDiscovery.LookupReplyPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceLocatorDiscovery.LookupReplyPrx", IceLocatorDiscovery.LookupReplyPrx);

Ice.defineOperations(
    IceLocatorDiscovery.LookupReply,
    IceLocatorDiscovery.LookupReplyPrx,
    iceC_IceLocatorDiscovery_LookupReply_ids,
    "::IceLocatorDiscovery::LookupReply",
    {
        "foundLocator": [, , , , [["Ice.LocatorPrx"]], , , , ]
    });

const iceC_IceLocatorDiscovery_Lookup_ids = [
    "::Ice::Object",
    "::IceLocatorDiscovery::Lookup"
];

/**
 *  The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
 *  available Ice locators on the network.
 *  Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
 *  Clients typically make a multicast findLocator request to find the locator proxy.
 *  @see LookupReply
 **/
IceLocatorDiscovery.Lookup = class extends Ice.Object
{
};

IceLocatorDiscovery.LookupPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceLocatorDiscovery.LookupPrx", IceLocatorDiscovery.LookupPrx);

Ice.defineOperations(
    IceLocatorDiscovery.Lookup,
    IceLocatorDiscovery.LookupPrx,
    iceC_IceLocatorDiscovery_Lookup_ids,
    "::IceLocatorDiscovery::Lookup",
    {
        "findLocator": [, 2, , , [[7], ["IceLocatorDiscovery.LookupReplyPrx"]], , , , ]
    });
