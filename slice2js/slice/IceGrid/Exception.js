//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_Long from "../Ice/Long.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_UserException from "../Ice/UserException.js";
import { Ice as Ice_Ice_BuiltinSequences } from "../Ice/BuiltinSequences.js"
import { Ice as Ice_Ice_Identity } from "../Ice/Identity.js"

const Ice = {
    ...Ice_Long,
    ...Ice_ObjectPrx,
    ...Ice_TypeRegistry,
    ...Ice_UserException,
    ...Ice_Ice_BuiltinSequences,
    ...Ice_Ice_Identity,
};


export const IceGrid = {};

/**
 * This exception is raised if an application does not exist.
 **/
IceGrid.ApplicationNotExistException = class extends Ice.UserException
{
    constructor(name = "", _cause = "")
    {
        super(_cause);
        this.name = name;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ApplicationNotExistException";
    }

    _mostDerivedType()
    {
        return IceGrid.ApplicationNotExistException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ApplicationNotExistException",
    IceGrid.ApplicationNotExistException);

/**
 * This exception is raised if a server does not exist.
 **/
IceGrid.ServerNotExistException = class extends Ice.UserException
{
    constructor(id = "", _cause = "")
    {
        super(_cause);
        this.id = id;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ServerNotExistException";
    }

    _mostDerivedType()
    {
        return IceGrid.ServerNotExistException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.id);
    }

    _readMemberImpl(istr)
    {
        this.id = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ServerNotExistException",
    IceGrid.ServerNotExistException);

/**
 * This exception is raised if a server failed to start.
 **/
IceGrid.ServerStartException = class extends Ice.UserException
{
    constructor(id = "", reason = "", _cause = "")
    {
        super(_cause);
        this.id = id;
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ServerStartException";
    }

    _mostDerivedType()
    {
        return IceGrid.ServerStartException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.id = istr.readString();
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ServerStartException",
    IceGrid.ServerStartException);

/**
 * This exception is raised if a server failed to stop.
 **/
IceGrid.ServerStopException = class extends Ice.UserException
{
    constructor(id = "", reason = "", _cause = "")
    {
        super(_cause);
        this.id = id;
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ServerStopException";
    }

    _mostDerivedType()
    {
        return IceGrid.ServerStopException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.id = istr.readString();
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ServerStopException",
    IceGrid.ServerStopException);

/**
 * This exception is raised if an adapter does not exist.
 **/
IceGrid.AdapterNotExistException = class extends Ice.UserException
{
    constructor(id = "", _cause = "")
    {
        super(_cause);
        this.id = id;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::AdapterNotExistException";
    }

    _mostDerivedType()
    {
        return IceGrid.AdapterNotExistException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.id);
    }

    _readMemberImpl(istr)
    {
        this.id = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.AdapterNotExistException",
    IceGrid.AdapterNotExistException);

/**
 * This exception is raised if an object already exists.
 **/
IceGrid.ObjectExistsException = class extends Ice.UserException
{
    constructor(id = new Ice.Identity(), _cause = "")
    {
        super(_cause);
        this.id = id;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ObjectExistsException";
    }

    _mostDerivedType()
    {
        return IceGrid.ObjectExistsException;
    }

    _writeMemberImpl(ostr)
    {
        Ice.Identity.write(ostr, this.id);
    }

    _readMemberImpl(istr)
    {
        this.id = Ice.Identity.read(istr, this.id);
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ObjectExistsException",
    IceGrid.ObjectExistsException);

/**
 * This exception is raised if an object is not registered.
 **/
IceGrid.ObjectNotRegisteredException = class extends Ice.UserException
{
    constructor(id = new Ice.Identity(), _cause = "")
    {
        super(_cause);
        this.id = id;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ObjectNotRegisteredException";
    }

    _mostDerivedType()
    {
        return IceGrid.ObjectNotRegisteredException;
    }

    _writeMemberImpl(ostr)
    {
        Ice.Identity.write(ostr, this.id);
    }

    _readMemberImpl(istr)
    {
        this.id = Ice.Identity.read(istr, this.id);
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ObjectNotRegisteredException",
    IceGrid.ObjectNotRegisteredException);

/**
 * This exception is raised if a node does not exist.
 **/
IceGrid.NodeNotExistException = class extends Ice.UserException
{
    constructor(name = "", _cause = "")
    {
        super(_cause);
        this.name = name;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::NodeNotExistException";
    }

    _mostDerivedType()
    {
        return IceGrid.NodeNotExistException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.NodeNotExistException",
    IceGrid.NodeNotExistException);

/**
 * This exception is raised if a registry does not exist.
 **/
IceGrid.RegistryNotExistException = class extends Ice.UserException
{
    constructor(name = "", _cause = "")
    {
        super(_cause);
        this.name = name;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::RegistryNotExistException";
    }

    _mostDerivedType()
    {
        return IceGrid.RegistryNotExistException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.RegistryNotExistException",
    IceGrid.RegistryNotExistException);

/**
 * An exception for deployment errors.
 **/
IceGrid.DeploymentException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::DeploymentException";
    }

    _mostDerivedType()
    {
        return IceGrid.DeploymentException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.DeploymentException",
    IceGrid.DeploymentException);

/**
 * This exception is raised if a node could not be reached.
 **/
IceGrid.NodeUnreachableException = class extends Ice.UserException
{
    constructor(name = "", reason = "", _cause = "")
    {
        super(_cause);
        this.name = name;
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::NodeUnreachableException";
    }

    _mostDerivedType()
    {
        return IceGrid.NodeUnreachableException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.NodeUnreachableException",
    IceGrid.NodeUnreachableException);

/**
 * This exception is raised if a server could not be reached.
 **/
IceGrid.ServerUnreachableException = class extends Ice.UserException
{
    constructor(name = "", reason = "", _cause = "")
    {
        super(_cause);
        this.name = name;
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ServerUnreachableException";
    }

    _mostDerivedType()
    {
        return IceGrid.ServerUnreachableException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ServerUnreachableException",
    IceGrid.ServerUnreachableException);

/**
 * This exception is raised if a registry could not be reached.
 **/
IceGrid.RegistryUnreachableException = class extends Ice.UserException
{
    constructor(name = "", reason = "", _cause = "")
    {
        super(_cause);
        this.name = name;
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::RegistryUnreachableException";
    }

    _mostDerivedType()
    {
        return IceGrid.RegistryUnreachableException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.name = istr.readString();
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.RegistryUnreachableException",
    IceGrid.RegistryUnreachableException);

/**
 * This exception is raised if an unknown signal was sent to to a server.
 **/
IceGrid.BadSignalException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::BadSignalException";
    }

    _mostDerivedType()
    {
        return IceGrid.BadSignalException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.BadSignalException",
    IceGrid.BadSignalException);

/**
 * his exception is raised if a registry lock wasn't acquired or is already held by a session.
 **/
IceGrid.AccessDeniedException = class extends Ice.UserException
{
    constructor(lockUserId = "", _cause = "")
    {
        super(_cause);
        this.lockUserId = lockUserId;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::AccessDeniedException";
    }

    _mostDerivedType()
    {
        return IceGrid.AccessDeniedException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.lockUserId);
    }

    _readMemberImpl(istr)
    {
        this.lockUserId = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.AccessDeniedException",
    IceGrid.AccessDeniedException);

/**
 * This exception is raised if the allocation of an object failed.
 **/
IceGrid.AllocationException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::AllocationException";
    }

    _mostDerivedType()
    {
        return IceGrid.AllocationException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.AllocationException",
    IceGrid.AllocationException);

/**
 * This exception is raised if the request to allocate an object times out.
 **/
IceGrid.AllocationTimeoutException = class extends IceGrid.AllocationException
{
    constructor(reason, _cause = "")
    {
        super(reason, _cause);
    }

    static get _parent()
    {
        return IceGrid.AllocationException;
    }

    static get _ice_id()
    {
        return "::IceGrid::AllocationTimeoutException";
    }

    _mostDerivedType()
    {
        return IceGrid.AllocationTimeoutException;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.AllocationTimeoutException",
    IceGrid.AllocationTimeoutException);

/**
 * This exception is raised if a client is denied the ability to create a session with IceGrid.
 **/
IceGrid.PermissionDeniedException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::PermissionDeniedException";
    }

    _mostDerivedType()
    {
        return IceGrid.PermissionDeniedException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.PermissionDeniedException",
    IceGrid.PermissionDeniedException);

/**
 * This exception is raised if an observer is already registered with the registry.
 * @see AdminSession#setObservers
 * @see AdminSession#setObserversByIdentity
 **/
IceGrid.ObserverAlreadyRegisteredException = class extends Ice.UserException
{
    constructor(id = new Ice.Identity(), _cause = "")
    {
        super(_cause);
        this.id = id;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::ObserverAlreadyRegisteredException";
    }

    _mostDerivedType()
    {
        return IceGrid.ObserverAlreadyRegisteredException;
    }

    _writeMemberImpl(ostr)
    {
        Ice.Identity.write(ostr, this.id);
    }

    _readMemberImpl(istr)
    {
        this.id = Ice.Identity.read(istr, this.id);
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.ObserverAlreadyRegisteredException",
    IceGrid.ObserverAlreadyRegisteredException);

/**
 * This exception is raised if a file is not available.
 * @see AdminSession#openServerStdOut
 * @see AdminSession#openServerStdErr
 * @see AdminSession#openNodeStdOut
 * @see AdminSession#openNodeStdErr
 * @see AdminSession#openRegistryStdOut
 * @see AdminSession#openRegistryStdErr
 **/
IceGrid.FileNotAvailableException = class extends Ice.UserException
{
    constructor(reason = "", _cause = "")
    {
        super(_cause);
        this.reason = reason;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::IceGrid::FileNotAvailableException";
    }

    _mostDerivedType()
    {
        return IceGrid.FileNotAvailableException;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeString(this.reason);
    }

    _readMemberImpl(istr)
    {
        this.reason = istr.readString();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceGrid.FileNotAvailableException",
    IceGrid.FileNotAvailableException);
