//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_EnumBase from "../Ice/EnumBase.js";
import * as Ice_Long from "../Ice/Long.js";
import * as Ice_Object from "../Ice/Object.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_Operation from "../Ice/Operation.js";
import * as Ice_StreamHelpers from "../Ice/StreamHelpers.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_Value from "../Ice/Value.js";
import { Ice as Ice_Ice_Locator } from "../Ice/Locator.js"

const Ice = {
    ...Ice_EnumBase,
    ...Ice_Long,
    ...Ice_Object,
    ...Ice_ObjectPrx,
    ...Ice_Operation,
    ...Ice_StreamHelpers,
    ...Ice_TypeRegistry,
    ...Ice_Value,
    ...Ice_Ice_Locator,
};

import { 
    IceGrid as IceGrid_Admin, } from "./Admin.js"
import { 
    IceGrid as IceGrid_Exception, } from "./Exception.js"
import { 
    IceGrid as IceGrid_Session, } from "./Session.js"

const IceGrid = {
    ...IceGrid_Admin,
    ...IceGrid_Exception,
    ...IceGrid_Session,
};

export { IceGrid };

/**
 * Determines which load sampling interval to use.
 **/
IceGrid.LoadSample = Ice.defineEnum([
    ['LoadSample1', 0], ['LoadSample5', 1], ['LoadSample15', 2]]);

const iceC_IceGrid_Query_ids = [
    "::Ice::Object",
    "::IceGrid::Query"
];

/**
 * The IceGrid query interface. This interface is accessible to Ice clients who wish to look up well-known
 * objects.
 **/
IceGrid.Query = class extends Ice.Object
{
};

IceGrid.QueryPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceGrid.QueryPrx", IceGrid.QueryPrx);

Ice.defineOperations(
    IceGrid.Query,
    IceGrid.QueryPrx,
    iceC_IceGrid_Query_ids,
    "::IceGrid::Query",
    {
        "findObjectById": [, 2, , [9], [[Ice.Identity]], , , , ],
        "findObjectByType": [, 2, , [9], [[7]], , , , ],
        "findObjectByTypeOnLeastLoadedNode": [, 2, , [9], [[7], [IceGrid.LoadSample._helper]], , , , ],
        "findAllObjectsByType": [, 2, , [Ice.ObjectProxySeqHelper], [[7]], , , , ],
        "findAllReplicas": [, 2, , [Ice.ObjectProxySeqHelper], [[9]], , , , ]
    });

const iceC_IceGrid_Registry_ids = [
    "::Ice::Object",
    "::IceGrid::Registry"
];

/**
 * The IceGrid registry allows clients create sessions directly with the registry.
 * @see Session
 * @see AdminSession
 **/
IceGrid.Registry = class extends Ice.Object
{
};

IceGrid.RegistryPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceGrid.RegistryPrx", IceGrid.RegistryPrx);

Ice.defineOperations(
    IceGrid.Registry,
    IceGrid.RegistryPrx,
    iceC_IceGrid_Registry_ids,
    "::IceGrid::Registry",
    {
        "createSession": [, , , ["IceGrid.SessionPrx"], [[7], [7]], ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createAdminSession": [, , , ["IceGrid.AdminSessionPrx"], [[7], [7]], ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createSessionFromSecureConnection": [, , , ["IceGrid.SessionPrx"], , ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "createAdminSessionFromSecureConnection": [, , , ["IceGrid.AdminSessionPrx"], , ,
        [
            IceGrid.PermissionDeniedException
        ], , ],
        "getSessionTimeout": [, 2, , [3], , , , , ]
    });

const iceC_IceGrid_Locator_ids = [
    "::Ice::Locator",
    "::Ice::Object",
    "::IceGrid::Locator"
];

/**
 * The IceGrid locator interface provides access to the {@link Query} and {@link Registry} object of the IceGrid
 * registry.
 * @see Query
 * @see Registry
 **/
IceGrid.Locator = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Ice.Locator
        ];
    }
};

IceGrid.LocatorPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Ice.LocatorPrx];
    }
};
Ice.TypeRegistry.declareProxyType("IceGrid.LocatorPrx", IceGrid.LocatorPrx);

Ice.defineOperations(
    IceGrid.Locator,
    IceGrid.LocatorPrx,
    iceC_IceGrid_Locator_ids,
    "::IceGrid::Locator",
    {
        "getLocalRegistry": [, 2, , ["IceGrid.RegistryPrx"], , , , , ],
        "getLocalQuery": [, 2, , ["IceGrid.QueryPrx"], , , , , ]
    });
