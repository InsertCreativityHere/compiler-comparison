//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_HashMap from "../Ice/HashMap.js";
import * as Ice_HashUtil from "../Ice/HashUtil.js";
import * as Ice_Long from "../Ice/Long.js";
import * as Ice_Object from "../Ice/Object.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_StreamHelpers from "../Ice/StreamHelpers.js";
import * as Ice_Struct from "../Ice/Struct.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_Value from "../Ice/Value.js";
import { Ice as Ice_Ice_BuiltinSequences } from "../Ice/BuiltinSequences.js"
import { Ice as Ice_Ice_Identity } from "../Ice/Identity.js"

const Ice = {
    ...Ice_HashMap,
    ...Ice_HashUtil,
    ...Ice_Long,
    ...Ice_Object,
    ...Ice_ObjectPrx,
    ...Ice_StreamHelpers,
    ...Ice_Struct,
    ...Ice_TypeRegistry,
    ...Ice_Value,
    ...Ice_Ice_BuiltinSequences,
    ...Ice_Ice_Identity,
};


export const IceGrid = {};

[IceGrid.StringStringDict, IceGrid.StringStringDictHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.StringHelper, false, undefined);

/**
 * Property descriptor.
 **/
IceGrid.PropertyDescriptor = class
{
    constructor(name = "", value = "")
    {
        this.name = name;
        this.value = value;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.value);
    }

    _read(istr)
    {
        this.name = istr.readString();
        this.value = istr.readString();
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(IceGrid.PropertyDescriptor, true, true);

IceGrid.PropertyDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.PropertyDescriptor, false);

/**
 * A property set descriptor.
 **/
IceGrid.PropertySetDescriptor = class
{
    constructor(references = null, properties = null)
    {
        this.references = references;
        this.properties = properties;
    }

    _write(ostr)
    {
        Ice.StringSeqHelper.write(ostr, this.references);
        IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
    }

    _read(istr)
    {
        this.references = Ice.StringSeqHelper.read(istr);
        this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(IceGrid.PropertySetDescriptor, false, true);

[IceGrid.PropertySetDescriptorDict, IceGrid.PropertySetDescriptorDictHelper] = Ice.defineDictionary(Ice.StringHelper, IceGrid.PropertySetDescriptor, false, undefined);

/**
 * An Ice object descriptor.
 **/
IceGrid.ObjectDescriptor = class
{
    constructor(id = new Ice.Identity(), type = "", proxyOptions = "")
    {
        this.id = id;
        this.type = type;
        this.proxyOptions = proxyOptions;
    }

    _write(ostr)
    {
        Ice.Identity.write(ostr, this.id);
        ostr.writeString(this.type);
        ostr.writeString(this.proxyOptions);
    }

    _read(istr)
    {
        this.id = Ice.Identity.read(istr, this.id);
        this.type = istr.readString();
        this.proxyOptions = istr.readString();
    }

    static get minWireSize()
    {
        return  4;
    }
};

Ice.defineStruct(IceGrid.ObjectDescriptor, true, true);

IceGrid.ObjectDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.ObjectDescriptor, false);

/**
 * An Ice object adapter descriptor.
 **/
IceGrid.AdapterDescriptor = class
{
    constructor(name = "", description = "", id = "", replicaGroupId = "", priority = "", registerProcess = false, serverLifetime = false, objects = null, allocatables = null)
    {
        this.name = name;
        this.description = description;
        this.id = id;
        this.replicaGroupId = replicaGroupId;
        this.priority = priority;
        this.registerProcess = registerProcess;
        this.serverLifetime = serverLifetime;
        this.objects = objects;
        this.allocatables = allocatables;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.description);
        ostr.writeString(this.id);
        ostr.writeString(this.replicaGroupId);
        ostr.writeString(this.priority);
        ostr.writeBool(this.registerProcess);
        ostr.writeBool(this.serverLifetime);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
    }

    _read(istr)
    {
        this.name = istr.readString();
        this.description = istr.readString();
        this.id = istr.readString();
        this.replicaGroupId = istr.readString();
        this.priority = istr.readString();
        this.registerProcess = istr.readBool();
        this.serverLifetime = istr.readBool();
        this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  9;
    }
};

Ice.defineStruct(IceGrid.AdapterDescriptor, false, true);

IceGrid.AdapterDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.AdapterDescriptor, false);

/**
 * A communicator descriptor.
 **/
IceGrid.CommunicatorDescriptor = class extends Ice.Value
{
    constructor(adapters = null, propertySet = new IceGrid.PropertySetDescriptor(), logs = null, description = "")
    {
        super();
        this.adapters = adapters;
        this.propertySet = propertySet;
        this.logs = logs;
        this.description = description;
    }

    _iceWriteMemberImpl(ostr)
    {
        IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        Ice.StringSeqHelper.write(ostr, this.logs);
        ostr.writeString(this.description);
    }

    _iceReadMemberImpl(istr)
    {
        this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        this.logs = Ice.StringSeqHelper.read(istr);
        this.description = istr.readString();
    }
};

Ice.defineValue(IceGrid.CommunicatorDescriptor, "::IceGrid::CommunicatorDescriptor");
Ice.TypeRegistry.declareValueType("IceGrid.CommunicatorDescriptor", IceGrid.CommunicatorDescriptor);

/**
 * A distribution descriptor defines an IcePatch2 server and the directories to retrieve from the patch server.
 * This descriptor is no longer used. It's provided only for schema compatibility with Ice 3.7 and earlier
 * releases.
 **/
IceGrid.DistributionDescriptor = class
{
    constructor(icepatch = "", directories = null)
    {
        this.icepatch = icepatch;
        this.directories = directories;
    }

    _write(ostr)
    {
        ostr.writeString(this.icepatch);
        Ice.StringSeqHelper.write(ostr, this.directories);
    }

    _read(istr)
    {
        this.icepatch = istr.readString();
        this.directories = Ice.StringSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(IceGrid.DistributionDescriptor, false, true);

/**
 * An Ice server descriptor.
 **/
IceGrid.ServerDescriptor = class extends IceGrid.CommunicatorDescriptor
{
    constructor(adapters, propertySet, logs, description, id = "", exe = "", iceVersion = "", pwd = "", options = null, envs = null, activation = "", activationTimeout = "", deactivationTimeout = "", applicationDistrib = false, distrib = new IceGrid.DistributionDescriptor(), allocatable = false, user = "")
    {
        super(adapters, propertySet, logs, description);
        this.id = id;
        this.exe = exe;
        this.iceVersion = iceVersion;
        this.pwd = pwd;
        this.options = options;
        this.envs = envs;
        this.activation = activation;
        this.activationTimeout = activationTimeout;
        this.deactivationTimeout = deactivationTimeout;
        this.applicationDistrib = applicationDistrib;
        this.distrib = distrib;
        this.allocatable = allocatable;
        this.user = user;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.exe);
        ostr.writeString(this.iceVersion);
        ostr.writeString(this.pwd);
        Ice.StringSeqHelper.write(ostr, this.options);
        Ice.StringSeqHelper.write(ostr, this.envs);
        ostr.writeString(this.activation);
        ostr.writeString(this.activationTimeout);
        ostr.writeString(this.deactivationTimeout);
        ostr.writeBool(this.applicationDistrib);
        IceGrid.DistributionDescriptor.write(ostr, this.distrib);
        ostr.writeBool(this.allocatable);
        ostr.writeString(this.user);
    }

    _iceReadMemberImpl(istr)
    {
        this.id = istr.readString();
        this.exe = istr.readString();
        this.iceVersion = istr.readString();
        this.pwd = istr.readString();
        this.options = Ice.StringSeqHelper.read(istr);
        this.envs = Ice.StringSeqHelper.read(istr);
        this.activation = istr.readString();
        this.activationTimeout = istr.readString();
        this.deactivationTimeout = istr.readString();
        this.applicationDistrib = istr.readBool();
        this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
        this.allocatable = istr.readBool();
        this.user = istr.readString();
    }
};

Ice.defineValue(IceGrid.ServerDescriptor, "::IceGrid::ServerDescriptor");
Ice.TypeRegistry.declareValueType("IceGrid.ServerDescriptor", IceGrid.ServerDescriptor);

IceGrid.ServerDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "IceGrid.ServerDescriptor");

/**
 * An IceBox service descriptor.
 **/
IceGrid.ServiceDescriptor = class extends IceGrid.CommunicatorDescriptor
{
    constructor(adapters, propertySet, logs, description, name = "", entry = "")
    {
        super(adapters, propertySet, logs, description);
        this.name = name;
        this.entry = entry;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeString(this.entry);
    }

    _iceReadMemberImpl(istr)
    {
        this.name = istr.readString();
        this.entry = istr.readString();
    }
};

Ice.defineValue(IceGrid.ServiceDescriptor, "::IceGrid::ServiceDescriptor");
Ice.TypeRegistry.declareValueType("IceGrid.ServiceDescriptor", IceGrid.ServiceDescriptor);

IceGrid.ServiceDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "IceGrid.ServiceDescriptor");

/**
 * A server template instance descriptor.
 **/
IceGrid.ServerInstanceDescriptor = class
{
    constructor(template = "", parameterValues = null, propertySet = new IceGrid.PropertySetDescriptor(), servicePropertySets = null)
    {
        this.template = template;
        this.parameterValues = parameterValues;
        this.propertySet = propertySet;
        this.servicePropertySets = servicePropertySets;
    }

    _write(ostr)
    {
        ostr.writeString(this.template);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
    }

    _read(istr)
    {
        this.template = istr.readString();
        this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  5;
    }
};

Ice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);

IceGrid.ServerInstanceDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.ServerInstanceDescriptor, false);

/**
 * A template descriptor for server or service templates.
 **/
IceGrid.TemplateDescriptor = class
{
    constructor(descriptor = null, parameters = null, parameterDefaults = null)
    {
        this.descriptor = descriptor;
        this.parameters = parameters;
        this.parameterDefaults = parameterDefaults;
    }

    _write(ostr)
    {
        ostr.writeValue(this.descriptor);
        Ice.StringSeqHelper.write(ostr, this.parameters);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
    }

    _read(istr)
    {
        istr.readValue(obj => this.descriptor = obj, Ice.TypeRegistry.getValueType("IceGrid.CommunicatorDescriptor"));
        this.parameters = Ice.StringSeqHelper.read(istr);
        this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  3;
    }
};

Ice.defineStruct(IceGrid.TemplateDescriptor, false, true);

[IceGrid.TemplateDescriptorDict, IceGrid.TemplateDescriptorDictHelper] = Ice.defineDictionary(Ice.StringHelper, IceGrid.TemplateDescriptor, false, undefined);

/**
 * A service template instance descriptor.
 **/
IceGrid.ServiceInstanceDescriptor = class
{
    constructor(template = "", parameterValues = null, descriptor = null, propertySet = new IceGrid.PropertySetDescriptor())
    {
        this.template = template;
        this.parameterValues = parameterValues;
        this.descriptor = descriptor;
        this.propertySet = propertySet;
    }

    _write(ostr)
    {
        ostr.writeString(this.template);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
        ostr.writeValue(this.descriptor);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
    }

    _read(istr)
    {
        this.template = istr.readString();
        this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
        istr.readValue(obj => this.descriptor = obj, Ice.TypeRegistry.getValueType("IceGrid.ServiceDescriptor"));
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
    }

    static get minWireSize()
    {
        return  5;
    }
};

Ice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);

IceGrid.ServiceInstanceDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.ServiceInstanceDescriptor, false);

/**
 * An IceBox server descriptor.
 **/
IceGrid.IceBoxDescriptor = class extends IceGrid.ServerDescriptor
{
    constructor(adapters, propertySet, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user, services = null)
    {
        super(adapters, propertySet, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user);
        this.services = services;
    }

    _iceWriteMemberImpl(ostr)
    {
        IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
    }

    _iceReadMemberImpl(istr)
    {
        this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
    }
};

Ice.defineValue(IceGrid.IceBoxDescriptor, "::IceGrid::IceBoxDescriptor");
Ice.TypeRegistry.declareValueType("IceGrid.IceBoxDescriptor", IceGrid.IceBoxDescriptor);

/**
 * A node descriptor.
 **/
IceGrid.NodeDescriptor = class
{
    constructor(variables = null, serverInstances = null, servers = null, loadFactor = "", description = "", propertySets = null)
    {
        this.variables = variables;
        this.serverInstances = serverInstances;
        this.servers = servers;
        this.loadFactor = loadFactor;
        this.description = description;
        this.propertySets = propertySets;
    }

    _write(ostr)
    {
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
        IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
        ostr.writeString(this.loadFactor);
        ostr.writeString(this.description);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
    }

    _read(istr)
    {
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
        this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
        this.loadFactor = istr.readString();
        this.description = istr.readString();
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  6;
    }
};

Ice.defineStruct(IceGrid.NodeDescriptor, false, true);

[IceGrid.NodeDescriptorDict, IceGrid.NodeDescriptorDictHelper] = Ice.defineDictionary(Ice.StringHelper, IceGrid.NodeDescriptor, false, undefined);

/**
 * A base class for load balancing policies.
 **/
IceGrid.LoadBalancingPolicy = class extends Ice.Value
{
    constructor(nReplicas = "")
    {
        super();
        this.nReplicas = nReplicas;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.nReplicas);
    }

    _iceReadMemberImpl(istr)
    {
        this.nReplicas = istr.readString();
    }
};

Ice.defineValue(IceGrid.LoadBalancingPolicy, "::IceGrid::LoadBalancingPolicy");
Ice.TypeRegistry.declareValueType("IceGrid.LoadBalancingPolicy", IceGrid.LoadBalancingPolicy);

/**
 * Random load balancing policy.
 **/
IceGrid.RandomLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
{
    constructor(nReplicas)
    {
        super(nReplicas);
    }
};

Ice.defineValue(IceGrid.RandomLoadBalancingPolicy, "::IceGrid::RandomLoadBalancingPolicy");
Ice.TypeRegistry.declareValueType("IceGrid.RandomLoadBalancingPolicy", IceGrid.RandomLoadBalancingPolicy);

/**
 * Ordered load balancing policy.
 **/
IceGrid.OrderedLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
{
    constructor(nReplicas)
    {
        super(nReplicas);
    }
};

Ice.defineValue(IceGrid.OrderedLoadBalancingPolicy, "::IceGrid::OrderedLoadBalancingPolicy");
Ice.TypeRegistry.declareValueType("IceGrid.OrderedLoadBalancingPolicy", IceGrid.OrderedLoadBalancingPolicy);

/**
 * Round robin load balancing policy.
 **/
IceGrid.RoundRobinLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
{
    constructor(nReplicas)
    {
        super(nReplicas);
    }
};

Ice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, "::IceGrid::RoundRobinLoadBalancingPolicy");
Ice.TypeRegistry.declareValueType("IceGrid.RoundRobinLoadBalancingPolicy", IceGrid.RoundRobinLoadBalancingPolicy);

/**
 * Adaptive load balancing policy.
 **/
IceGrid.AdaptiveLoadBalancingPolicy = class extends IceGrid.LoadBalancingPolicy
{
    constructor(nReplicas, loadSample = "")
    {
        super(nReplicas);
        this.loadSample = loadSample;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.loadSample);
    }

    _iceReadMemberImpl(istr)
    {
        this.loadSample = istr.readString();
    }
};

Ice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, "::IceGrid::AdaptiveLoadBalancingPolicy");
Ice.TypeRegistry.declareValueType("IceGrid.AdaptiveLoadBalancingPolicy", IceGrid.AdaptiveLoadBalancingPolicy);

/**
 * A replica group descriptor.
 **/
IceGrid.ReplicaGroupDescriptor = class
{
    constructor(id = "", loadBalancing = null, proxyOptions = "", objects = null, description = "", filter = "")
    {
        this.id = id;
        this.loadBalancing = loadBalancing;
        this.proxyOptions = proxyOptions;
        this.objects = objects;
        this.description = description;
        this.filter = filter;
    }

    _write(ostr)
    {
        ostr.writeString(this.id);
        ostr.writeValue(this.loadBalancing);
        ostr.writeString(this.proxyOptions);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
        ostr.writeString(this.description);
        ostr.writeString(this.filter);
    }

    _read(istr)
    {
        this.id = istr.readString();
        istr.readValue(obj => this.loadBalancing = obj, Ice.TypeRegistry.getValueType("IceGrid.LoadBalancingPolicy"));
        this.proxyOptions = istr.readString();
        this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        this.description = istr.readString();
        this.filter = istr.readString();
    }

    static get minWireSize()
    {
        return  6;
    }
};

Ice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);

IceGrid.ReplicaGroupDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.ReplicaGroupDescriptor, false);

/**
 * An application descriptor.
 **/
IceGrid.ApplicationDescriptor = class
{
    constructor(name = "", variables = null, replicaGroups = null, serverTemplates = null, serviceTemplates = null, nodes = null, distrib = new IceGrid.DistributionDescriptor(), description = "", propertySets = null)
    {
        this.name = name;
        this.variables = variables;
        this.replicaGroups = replicaGroups;
        this.serverTemplates = serverTemplates;
        this.serviceTemplates = serviceTemplates;
        this.nodes = nodes;
        this.distrib = distrib;
        this.description = description;
        this.propertySets = propertySets;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
        IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
        IceGrid.DistributionDescriptor.write(ostr, this.distrib);
        ostr.writeString(this.description);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
    }

    _read(istr)
    {
        this.name = istr.readString();
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
        this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
        this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
        this.description = istr.readString();
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  10;
    }
};

Ice.defineStruct(IceGrid.ApplicationDescriptor, false, true);

IceGrid.ApplicationDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.ApplicationDescriptor, false);

/**
 * A "boxed" string.
 **/
IceGrid.BoxedString = class extends Ice.Value
{
    constructor(value = "")
    {
        super();
        this.value = value;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.value);
    }

    _iceReadMemberImpl(istr)
    {
        this.value = istr.readString();
    }
};

Ice.defineValue(IceGrid.BoxedString, "::IceGrid::BoxedString");
Ice.TypeRegistry.declareValueType("IceGrid.BoxedString", IceGrid.BoxedString);

/**
 * A node update descriptor to describe the updates to apply to a node of a deployed application.
 **/
IceGrid.NodeUpdateDescriptor = class
{
    constructor(name = "", description = null, variables = null, removeVariables = null, propertySets = null, removePropertySets = null, serverInstances = null, servers = null, removeServers = null, loadFactor = null)
    {
        this.name = name;
        this.description = description;
        this.variables = variables;
        this.removeVariables = removeVariables;
        this.propertySets = propertySets;
        this.removePropertySets = removePropertySets;
        this.serverInstances = serverInstances;
        this.servers = servers;
        this.removeServers = removeServers;
        this.loadFactor = loadFactor;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeValue(this.description);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        Ice.StringSeqHelper.write(ostr, this.removeVariables);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        Ice.StringSeqHelper.write(ostr, this.removePropertySets);
        IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
        IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
        Ice.StringSeqHelper.write(ostr, this.removeServers);
        ostr.writeValue(this.loadFactor);
    }

    _read(istr)
    {
        this.name = istr.readString();
        istr.readValue(obj => this.description = obj, Ice.TypeRegistry.getValueType("IceGrid.BoxedString"));
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.removeVariables = Ice.StringSeqHelper.read(istr);
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        this.removePropertySets = Ice.StringSeqHelper.read(istr);
        this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
        this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
        this.removeServers = Ice.StringSeqHelper.read(istr);
        istr.readValue(obj => this.loadFactor = obj, Ice.TypeRegistry.getValueType("IceGrid.BoxedString"));
    }

    static get minWireSize()
    {
        return  10;
    }
};

Ice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);

IceGrid.NodeUpdateDescriptorSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceGrid.NodeUpdateDescriptor, false);

/**
 * A "boxed" distribution descriptor.
 **/
IceGrid.BoxedDistributionDescriptor = class extends Ice.Value
{
    constructor(value = new IceGrid.DistributionDescriptor())
    {
        super();
        this.value = value;
    }

    _iceWriteMemberImpl(ostr)
    {
        IceGrid.DistributionDescriptor.write(ostr, this.value);
    }

    _iceReadMemberImpl(istr)
    {
        this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
    }
};

Ice.defineValue(IceGrid.BoxedDistributionDescriptor, "::IceGrid::BoxedDistributionDescriptor");
Ice.TypeRegistry.declareValueType("IceGrid.BoxedDistributionDescriptor", IceGrid.BoxedDistributionDescriptor);

/**
 * An application update descriptor to describe the updates to apply to a deployed application.
 **/
IceGrid.ApplicationUpdateDescriptor = class
{
    constructor(name = "", description = null, distrib = null, variables = null, removeVariables = null, propertySets = null, removePropertySets = null, replicaGroups = null, removeReplicaGroups = null, serverTemplates = null, removeServerTemplates = null, serviceTemplates = null, removeServiceTemplates = null, nodes = null, removeNodes = null)
    {
        this.name = name;
        this.description = description;
        this.distrib = distrib;
        this.variables = variables;
        this.removeVariables = removeVariables;
        this.propertySets = propertySets;
        this.removePropertySets = removePropertySets;
        this.replicaGroups = replicaGroups;
        this.removeReplicaGroups = removeReplicaGroups;
        this.serverTemplates = serverTemplates;
        this.removeServerTemplates = removeServerTemplates;
        this.serviceTemplates = serviceTemplates;
        this.removeServiceTemplates = removeServiceTemplates;
        this.nodes = nodes;
        this.removeNodes = removeNodes;
    }

    _write(ostr)
    {
        ostr.writeString(this.name);
        ostr.writeValue(this.description);
        ostr.writeValue(this.distrib);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        Ice.StringSeqHelper.write(ostr, this.removeVariables);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        Ice.StringSeqHelper.write(ostr, this.removePropertySets);
        IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
        Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
        Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
        Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
        IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
        Ice.StringSeqHelper.write(ostr, this.removeNodes);
    }

    _read(istr)
    {
        this.name = istr.readString();
        istr.readValue(obj => this.description = obj, Ice.TypeRegistry.getValueType("IceGrid.BoxedString"));
        istr.readValue(obj => this.distrib = obj, Ice.TypeRegistry.getValueType("IceGrid.BoxedDistributionDescriptor"));
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.removeVariables = Ice.StringSeqHelper.read(istr);
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        this.removePropertySets = Ice.StringSeqHelper.read(istr);
        this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
        this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
        this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
        this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
        this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
        this.removeNodes = Ice.StringSeqHelper.read(istr);
    }

    static get minWireSize()
    {
        return  15;
    }
};

Ice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
