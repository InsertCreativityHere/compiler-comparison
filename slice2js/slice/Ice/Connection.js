//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

/* slice2js browser-bundle-skip */
const _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;
require("../Ice/Long");
require("../Ice/HashMap");
require("../Ice/HashUtil");
require("../Ice/ArrayUtil");
require("../Ice/StreamHelpers");
require("../ObjectAdapterF");
require("../Identity");
require("../Endpoint");
const Ice = _ModuleRegistry.module("Ice");

const Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

/**
 *  The batch compression option when flushing queued batch requests.
 **/
Ice.CompressBatch = Slice.defineEnum([
    ['Yes', 0], ['No', 1], ['BasedOnProxy', 2]]);

/**
 *  Specifies the close semantics for Active Connection Management.
 **/
Ice.ACMClose = Slice.defineEnum([
    ['CloseOff', 0], ['CloseOnIdle', 1], ['CloseOnInvocation', 2], ['CloseOnInvocationAndIdle', 3], ['CloseOnIdleForceful', 4]]);

/**
 *  Specifies the heartbeat semantics for Active Connection Management.
 **/
Ice.ACMHeartbeat = Slice.defineEnum([
    ['HeartbeatOff', 0], ['HeartbeatOnDispatch', 1], ['HeartbeatOnIdle', 2], ['HeartbeatAlways', 3]]);

/**
 *  A collection of Active Connection Management configuration settings.
 **/
Ice.ACM = class
{
    constructor(timeout = 0, close = Ice.ACMClose.CloseOff, heartbeat = Ice.ACMHeartbeat.HeartbeatOff)
    {
        this.timeout = timeout;
        this.close = close;
        this.heartbeat = heartbeat;
    }

    _write(ostr)
    {
        ostr.writeInt(this.timeout);
        Ice.ACMClose._write(ostr, this.close);
        Ice.ACMHeartbeat._write(ostr, this.heartbeat);
    }

    _read(istr)
    {
        this.timeout = istr.readInt();
        this.close = Ice.ACMClose._read(istr);
        this.heartbeat = Ice.ACMHeartbeat._read(istr);
    }

    static get minWireSize()
    {
        return  6;
    }
};

Slice.defineStruct(Ice.ACM, true, true);

/**
 *  Determines the behavior when manually closing a connection.
 **/
Ice.ConnectionClose = Slice.defineEnum([
    ['Forcefully', 0], ['Gracefully', 1], ['GracefullyWithWait', 2]]);

Slice.defineDictionary(Ice, "HeaderDict", "HeaderDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
/* slice2js browser-bundle-skip */
exports.Ice = Ice;
/* slice2js browser-bundle-skip-end */
