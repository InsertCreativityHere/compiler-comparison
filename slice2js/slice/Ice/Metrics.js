//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import * as Ice_HashMap from "../Ice/HashMap.js";
import * as Ice_HashUtil from "../Ice/HashUtil.js";
import * as Ice_Long from "../Ice/Long.js";
import * as Ice_Object from "../Ice/Object.js";
import * as Ice_ObjectPrx from "../Ice/ObjectPrx.js";
import * as Ice_Operation from "../Ice/Operation.js";
import * as Ice_Stream from "../Ice/Stream.js";
import * as Ice_StreamHelpers from "../Ice/StreamHelpers.js";
import * as Ice_Struct from "../Ice/Struct.js";
import * as Ice_TypeRegistry from "../Ice/TypeRegistry.js";
import * as Ice_UserException from "../Ice/UserException.js";
import * as Ice_Value from "../Ice/Value.js";
import { Ice as Ice_BuiltinSequences } from "./BuiltinSequences.js"

const Ice = {
    ...Ice_HashMap,
    ...Ice_HashUtil,
    ...Ice_Long,
    ...Ice_Object,
    ...Ice_ObjectPrx,
    ...Ice_Operation,
    ...Ice_Stream,
    ...Ice_StreamHelpers,
    ...Ice_Struct,
    ...Ice_TypeRegistry,
    ...Ice_UserException,
    ...Ice_Value,
    ...Ice_BuiltinSequences,
};


export const IceMX = {};

[IceMX.StringIntDict, IceMX.StringIntDictHelper] = Ice.defineDictionary(Ice.StringHelper, Ice.IntHelper, false, undefined);

/**
 *  The base class for metrics. A metrics object represents a collection of measurements associated to a given a
 *  system.
 **/
IceMX.Metrics = class extends Ice.Value
{
    constructor(id = "", total = new Ice.Long(0, 0), current = 0, totalLifetime = new Ice.Long(0, 0), failures = 0)
    {
        super();
        this.id = id;
        this.total = total;
        this.current = current;
        this.totalLifetime = totalLifetime;
        this.failures = failures;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeString(this.id);
        ostr.writeLong(this.total);
        ostr.writeInt(this.current);
        ostr.writeLong(this.totalLifetime);
        ostr.writeInt(this.failures);
    }

    _iceReadMemberImpl(istr)
    {
        this.id = istr.readString();
        this.total = istr.readLong();
        this.current = istr.readInt();
        this.totalLifetime = istr.readLong();
        this.failures = istr.readInt();
    }
};

Ice.defineValue(IceMX.Metrics, "::IceMX::Metrics");
Ice.TypeRegistry.declareValueType("IceMX.Metrics", IceMX.Metrics);

/**
 *  A structure to keep track of failures associated with a given metrics.
 **/
IceMX.MetricsFailures = class
{
    constructor(id = "", failures = null)
    {
        this.id = id;
        this.failures = failures;
    }

    _write(ostr)
    {
        ostr.writeString(this.id);
        IceMX.StringIntDictHelper.write(ostr, this.failures);
    }

    _read(istr)
    {
        this.id = istr.readString();
        this.failures = IceMX.StringIntDictHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(IceMX.MetricsFailures, false, true);

IceMX.MetricsFailuresSeqHelper = Ice.StreamHelpers.generateSeqHelper(IceMX.MetricsFailures, false);

IceMX.MetricsMapHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ObjectHelper, false, "IceMX.Metrics");

[IceMX.MetricsView, IceMX.MetricsViewHelper] = Ice.defineDictionary(Ice.StringHelper, IceMX.MetricsMapHelper, false, undefined);

/**
 *  Raised if a metrics view cannot be found.
 **/
IceMX.UnknownMetricsView = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::IceMX::UnknownMetricsView";
    }

    _mostDerivedType()
    {
        return IceMX.UnknownMetricsView;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "IceMX.UnknownMetricsView",
    IceMX.UnknownMetricsView);

const iceC_IceMX_MetricsAdmin_ids = [
    "::Ice::Object",
    "::IceMX::MetricsAdmin"
];

/**
 *  The metrics administrative facet interface. This interface allows remote administrative clients to access
 *  metrics of an application that enabled the Ice administrative facility and configured some metrics views.
 **/
IceMX.MetricsAdmin = class extends Ice.Object
{
};

IceMX.MetricsAdminPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("IceMX.MetricsAdminPrx", IceMX.MetricsAdminPrx);

Ice.defineOperations(
    IceMX.MetricsAdmin,
    IceMX.MetricsAdminPrx,
    iceC_IceMX_MetricsAdmin_ids,
    "::IceMX::MetricsAdmin",
    {
        "getMetricsViewNames": [, , , [Ice.StringSeqHelper], , [[Ice.StringSeqHelper]], , , ],
        "enableMetricsView": [, , , , [[7]], ,
        [
            IceMX.UnknownMetricsView
        ], , ],
        "disableMetricsView": [, , , , [[7]], ,
        [
            IceMX.UnknownMetricsView
        ], , ],
        "getMetricsView": [, , 2, [IceMX.MetricsViewHelper], [[7]], [[4]],
        [
            IceMX.UnknownMetricsView
        ], , true],
        "getMapMetricsFailures": [, , , [IceMX.MetricsFailuresSeqHelper], [[7], [7]], ,
        [
            IceMX.UnknownMetricsView
        ], , ],
        "getMetricsFailures": [, , , [IceMX.MetricsFailures], [[7], [7], [7]], ,
        [
            IceMX.UnknownMetricsView
        ], , ]
    });

/**
 *  Provides information on the number of threads currently in use and their activity.
 **/
IceMX.ThreadMetrics = class extends IceMX.Metrics
{
    constructor(id, total, current, totalLifetime, failures, inUseForIO = 0, inUseForUser = 0, inUseForOther = 0)
    {
        super(id, total, current, totalLifetime, failures);
        this.inUseForIO = inUseForIO;
        this.inUseForUser = inUseForUser;
        this.inUseForOther = inUseForOther;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.inUseForIO);
        ostr.writeInt(this.inUseForUser);
        ostr.writeInt(this.inUseForOther);
    }

    _iceReadMemberImpl(istr)
    {
        this.inUseForIO = istr.readInt();
        this.inUseForUser = istr.readInt();
        this.inUseForOther = istr.readInt();
    }
};

Ice.defineValue(IceMX.ThreadMetrics, "::IceMX::ThreadMetrics");
Ice.TypeRegistry.declareValueType("IceMX.ThreadMetrics", IceMX.ThreadMetrics);

/**
 *  Provides information on servant dispatch.
 **/
IceMX.DispatchMetrics = class extends IceMX.Metrics
{
    constructor(id, total, current, totalLifetime, failures, userException = 0, size = new Ice.Long(0, 0), replySize = new Ice.Long(0, 0))
    {
        super(id, total, current, totalLifetime, failures);
        this.userException = userException;
        this.size = size;
        this.replySize = replySize;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.userException);
        ostr.writeLong(this.size);
        ostr.writeLong(this.replySize);
    }

    _iceReadMemberImpl(istr)
    {
        this.userException = istr.readInt();
        this.size = istr.readLong();
        this.replySize = istr.readLong();
    }
};

Ice.defineValue(IceMX.DispatchMetrics, "::IceMX::DispatchMetrics");
Ice.TypeRegistry.declareValueType("IceMX.DispatchMetrics", IceMX.DispatchMetrics);

/**
 *  Provides information on child invocations. A child invocation is either remote (sent over an Ice connection) or
 *  collocated. An invocation can have multiple child invocation if it is retried. Child invocation metrics are
 *  embedded within {@link InvocationMetrics}.
 **/
IceMX.ChildInvocationMetrics = class extends IceMX.Metrics
{
    constructor(id, total, current, totalLifetime, failures, size = new Ice.Long(0, 0), replySize = new Ice.Long(0, 0))
    {
        super(id, total, current, totalLifetime, failures);
        this.size = size;
        this.replySize = replySize;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeLong(this.size);
        ostr.writeLong(this.replySize);
    }

    _iceReadMemberImpl(istr)
    {
        this.size = istr.readLong();
        this.replySize = istr.readLong();
    }
};

Ice.defineValue(IceMX.ChildInvocationMetrics, "::IceMX::ChildInvocationMetrics");
Ice.TypeRegistry.declareValueType("IceMX.ChildInvocationMetrics", IceMX.ChildInvocationMetrics);

/**
 *  Provides information on invocations that are collocated. Collocated metrics are embedded within
 *  {@link InvocationMetrics}.
 **/
IceMX.CollocatedMetrics = class extends IceMX.ChildInvocationMetrics
{
    constructor(id, total, current, totalLifetime, failures, size, replySize)
    {
        super(id, total, current, totalLifetime, failures, size, replySize);
    }
};

Ice.defineValue(IceMX.CollocatedMetrics, "::IceMX::CollocatedMetrics");
Ice.TypeRegistry.declareValueType("IceMX.CollocatedMetrics", IceMX.CollocatedMetrics);

/**
 *  Provides information on invocations that are specifically sent over Ice connections. Remote metrics are embedded
 *  within {@link InvocationMetrics}.
 **/
IceMX.RemoteMetrics = class extends IceMX.ChildInvocationMetrics
{
    constructor(id, total, current, totalLifetime, failures, size, replySize)
    {
        super(id, total, current, totalLifetime, failures, size, replySize);
    }
};

Ice.defineValue(IceMX.RemoteMetrics, "::IceMX::RemoteMetrics");
Ice.TypeRegistry.declareValueType("IceMX.RemoteMetrics", IceMX.RemoteMetrics);

/**
 *  Provide measurements for proxy invocations. Proxy invocations can either be sent over the wire or be collocated.
 **/
IceMX.InvocationMetrics = class extends IceMX.Metrics
{
    constructor(id, total, current, totalLifetime, failures, retry = 0, userException = 0, remotes = null, collocated = null)
    {
        super(id, total, current, totalLifetime, failures);
        this.retry = retry;
        this.userException = userException;
        this.remotes = remotes;
        this.collocated = collocated;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.retry);
        ostr.writeInt(this.userException);
        IceMX.MetricsMapHelper.write(ostr, this.remotes);
        IceMX.MetricsMapHelper.write(ostr, this.collocated);
    }

    _iceReadMemberImpl(istr)
    {
        this.retry = istr.readInt();
        this.userException = istr.readInt();
        this.remotes = IceMX.MetricsMapHelper.read(istr);
        this.collocated = IceMX.MetricsMapHelper.read(istr);
    }
};

Ice.defineValue(IceMX.InvocationMetrics, "::IceMX::InvocationMetrics");
Ice.TypeRegistry.declareValueType("IceMX.InvocationMetrics", IceMX.InvocationMetrics);

/**
 *  Provides information on the data sent and received over Ice connections.
 **/
IceMX.ConnectionMetrics = class extends IceMX.Metrics
{
    constructor(id, total, current, totalLifetime, failures, receivedBytes = new Ice.Long(0, 0), sentBytes = new Ice.Long(0, 0))
    {
        super(id, total, current, totalLifetime, failures);
        this.receivedBytes = receivedBytes;
        this.sentBytes = sentBytes;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeLong(this.receivedBytes);
        ostr.writeLong(this.sentBytes);
    }

    _iceReadMemberImpl(istr)
    {
        this.receivedBytes = istr.readLong();
        this.sentBytes = istr.readLong();
    }
};

Ice.defineValue(IceMX.ConnectionMetrics, "::IceMX::ConnectionMetrics");
Ice.TypeRegistry.declareValueType("IceMX.ConnectionMetrics", IceMX.ConnectionMetrics);
