//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const and = {};

and.array = Ice.defineEnum([
    ['as', 0]]);

and.xor = class
{
    constructor(abstract = 0, clone = 0, _private = 0, _protected = 0, _public = 0, _this = 0, _throw = 0, use = 0, _var = 0)
    {
        this.abstract = abstract;
        this.clone = clone;
        this._private = _private;
        this._protected = _protected;
        this._public = _public;
        this._this = _this;
        this._throw = _throw;
        this.use = use;
        this._var = _var;
    }

    _write(ostr)
    {
        ostr.writeInt(this.abstract);
        ostr.writeInt(this.clone);
        ostr.writeInt(this._private);
        ostr.writeInt(this._protected);
        ostr.writeInt(this._public);
        ostr.writeInt(this._this);
        ostr.writeInt(this._throw);
        ostr.writeInt(this.use);
        ostr.writeInt(this._var);
    }

    _read(istr)
    {
        this.abstract = istr.readInt();
        this.clone = istr.readInt();
        this._private = istr.readInt();
        this._protected = istr.readInt();
        this._public = istr.readInt();
        this._this = istr.readInt();
        this._throw = istr.readInt();
        this.use = istr.readInt();
        this._var = istr.readInt();
    }

    static get minWireSize()
    {
        return  36;
    }
};

Ice.defineStruct(and.xor, true, false);

const iceC_and__break_ids = [
    "::Ice::Object",
    "::and::break"
];

and._break = class extends Ice.Object
{
};

and.breakPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.breakPrx", and.breakPrx);

Ice.defineOperations(
    and._break,
    and.breakPrx,
    iceC_and__break_ids,
    "::and::break",
    {
        "case": ["_case", , , , [[3]], [[3]], , , ]
    });

const iceC_and__function_ids = [
    "::Ice::Object",
    "::and::function"
];

and._function = class extends Ice.Object
{
};

and.functionPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.functionPrx", and.functionPrx);

Ice.defineOperations(
    and._function,
    and.functionPrx,
    iceC_and__function_ids,
    "::and::function",
    {
        "continue": ["_continue", , , , [[3], [3]], , , , ]
    });

const iceC_and_die_ids = [
    "::Ice::Object",
    "::and::die"
];

and.die = class extends Ice.Object
{
};

and.diePrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.diePrx", and.diePrx);

Ice.defineOperations(
    and.die,
    and.diePrx,
    iceC_and_die_ids,
    "::and::die",
    {
        "do": ["_do", , , , , , , , ]
    });

and.echo = class extends Ice.Value
{
    constructor(_if = 0, _else = 0, elseif = null, empty = 0)
    {
        super();
        this._if = _if;
        this._else = _else;
        this.elseif = elseif;
        this.empty = empty;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this._if);
        ostr.writeInt(this._else);
        ostr.writeProxy(this.elseif);
        ostr.writeInt(this.empty);
    }

    _iceReadMemberImpl(istr)
    {
        this._if = istr.readInt();
        this._else = istr.readInt();
        this.elseif = istr.readProxy();
        this.empty = istr.readInt();
    }
};

Ice.defineValue(and.echo, "::and::echo");
Ice.TypeRegistry.declareValueType("and.echo", and.echo);

const iceC_and_enddeclare_ids = [
    "::Ice::Object",
    "::and::die",
    "::and::enddeclare",
    "::and::function"
];

and.enddeclare = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            and.die,
            and.function
        ];
    }
};

and.enddeclarePrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            and.diePrx,
            and.functionPrx];
    }
};
Ice.TypeRegistry.declareProxyType("and.enddeclarePrx", and.enddeclarePrx);

Ice.defineOperations(
    and.enddeclare,
    and.enddeclarePrx,
    iceC_and_enddeclare_ids,
    "::and::enddeclare");

and.endforHelper = Ice.StreamHelpers.generateSeqHelper(and.array._helper, false);

[and.endforeach, and.endforeachHelper] = Ice.defineDictionary(Ice.StringHelper, and.array._helper, false, undefined);

and.endif = class extends Ice.UserException
{
    constructor(endswitch = 0, _cause = "")
    {
        super(_cause);
        this.endswitch = endswitch;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::and::endif";
    }

    _mostDerivedType()
    {
        return and.endif;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this.endswitch);
    }

    _readMemberImpl(istr)
    {
        this.endswitch = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "and.endif",
    and.endif);

and.endwhile = class extends and.endif
{
    constructor(endswitch, eval = 0, exit = 0, _cause = "")
    {
        super(endswitch, _cause);
        this.eval = eval;
        this.exit = exit;
    }

    static get _parent()
    {
        return and.endif;
    }

    static get _id()
    {
        return "::and::endwhile";
    }

    _mostDerivedType()
    {
        return and.endwhile;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this.eval);
        ostr.writeInt(this.exit);
    }

    _readMemberImpl(istr)
    {
        this.eval = istr.readInt();
        this.exit = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "and.endwhile",
    and.endwhile);

const iceC_and__for_ids = [
    "::Ice::Object",
    "::and::for"
];

and._for = class extends Ice.Object
{
};

and.forPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("and.forPrx", and.forPrx);

Ice.defineOperations(
    and._for,
    and.forPrx,
    iceC_and__for_ids,
    "::and::for",
    {
        "foreach": [, , , [and.array._helper], [["and.breakPrx"], ["and.echo", true], ["and.functionPrx"], ["and.diePrx"], ["and.enddeclarePrx"], [3], [3]], ,
        [
            and.endwhile,
            and.endif
        ], true, ]
    });

Object.defineProperty(and, 'or', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, 'print', {
    enumerable: true,
    value: 0
});

Object.defineProperty(and, 'require_once', {
    enumerable: true,
    value: 0
});
