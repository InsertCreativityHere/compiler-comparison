//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let and = _ModuleRegistry.module("and");

    and.array = Slice.defineEnum([
        ['as', 0]]);

    and.xor = class
    {
        constructor(abstract = 0, clone = 0, _private = 0, _protected = 0, _public = 0, _this = 0, _throw = 0, use = 0, _var = 0)
        {
            this.abstract = abstract;
            this.clone = clone;
            this._private = _private;
            this._protected = _protected;
            this._public = _public;
            this._this = _this;
            this._throw = _throw;
            this.use = use;
            this._var = _var;
        }

        _write(ostr)
        {
            ostr.writeInt(this.abstract);
            ostr.writeInt(this.clone);
            ostr.writeInt(this._private);
            ostr.writeInt(this._protected);
            ostr.writeInt(this._public);
            ostr.writeInt(this._this);
            ostr.writeInt(this._throw);
            ostr.writeInt(this.use);
            ostr.writeInt(this._var);
        }

        _read(istr)
        {
            this.abstract = istr.readInt();
            this.clone = istr.readInt();
            this._private = istr.readInt();
            this._protected = istr.readInt();
            this._public = istr.readInt();
            this._this = istr.readInt();
            this._throw = istr.readInt();
            this.use = istr.readInt();
            this._var = istr.readInt();
        }

        static get minWireSize()
        {
            return  36;
        }
    };

    Slice.defineStruct(and.xor, true, false);

    const iceC_and__break_ids = [
        "::Ice::Object",
        "::and::break"
    ];

    and.break = class extends Ice.Object
    {
    };

    and.breakPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.break, and.breakPrx, iceC_and__break_ids, 1,
    {
        "case": ["_case", , , , , [[3]], [[3]], , , ]
    });

    const iceC_and__function_ids = [
        "::Ice::Object",
        "::and::function"
    ];

    and.function = class extends Ice.Object
    {
    };

    and.functionPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.function, and.functionPrx, iceC_and__function_ids, 1,
    {
        "continue": ["_continue", , , , , [[3], [3]], , , , ]
    });

    const iceC_and_die_ids = [
        "::Ice::Object",
        "::and::die"
    ];

    and.die = class extends Ice.Object
    {
    };

    and.diePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(and.die, and.diePrx, iceC_and_die_ids, 1,
    {
        "do": ["_do", , , , , , , , , ]
    });

    const iceC_and_echo_ids = [
        "::Ice::Object",
        "::and::echo"
    ];

    and.echo = class extends Ice.Value
    {
        constructor(_if = 0, _else = 0, elseif = null, empty = 0)
        {
            super();
            this._if = _if;
            this._else = _else;
            this.elseif = elseif;
            this.empty = empty;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeInt(this._if);
            ostr.writeInt(this._else);
            and.diePrx.write(ostr, this.elseif);
            ostr.writeInt(this.empty);
        }

        _iceReadMemberImpl(istr)
        {
            this._if = istr.readInt();
            this._else = istr.readInt();
            this.elseif = and.diePrx.read(istr, this.elseif);
            this.empty = istr.readInt();
        }
    };

    Slice.defineValue(and.echo, iceC_and_echo_ids[1], false);

    const iceC_and_enddeclare_ids = [
        "::Ice::Object",
        "::and::die",
        "::and::enddeclare",
        "::and::function"
    ];

    and.enddeclare = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                and.die,
                and.function
            ];
        }
    };

    and.enddeclarePrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                and.diePrx,
                and.functionPrx];
        }
    };

    Slice.defineOperations(and.enddeclare, and.enddeclarePrx, iceC_and_enddeclare_ids, 2);

    Slice.defineSequence(and, "endforHelper", "and.array._helper", false);

    Slice.defineDictionary(and, "endforeach", "endforeachHelper", "Ice.StringHelper", "and.array._helper", false, undefined, undefined);

    and.endif = class extends Ice.UserException
    {
        constructor(endswitch = 0, _cause = "")
        {
            super(_cause);
            this.endswitch = endswitch;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::and::endif";
        }

        _mostDerivedType()
        {
            return and.endif;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.endswitch);
        }

        _readMemberImpl(istr)
        {
            this.endswitch = istr.readInt();
        }
    };

    and.endwhile = class extends and.endif
    {
        constructor(endswitch, eval = 0, exit = 0, _cause = "")
        {
            super(endswitch, _cause);
            this.eval = eval;
            this.exit = exit;
        }

        static get _parent()
        {
            return and.endif;
        }

        static get _id()
        {
            return "::and::endwhile";
        }

        _mostDerivedType()
        {
            return and.endwhile;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.eval);
            ostr.writeInt(this.exit);
        }

        _readMemberImpl(istr)
        {
            this.eval = istr.readInt();
            this.exit = istr.readInt();
        }
    };

    Object.defineProperty(and, 'or', {
        value: 0
    });

    Object.defineProperty(and, 'print', {
        value: 0
    });

    Object.defineProperty(and, 'require_once', {
        value: 0
    });
    exports.and = and;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
