// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Object.defineProperty(Test, 'ByteConst1', {
    enumerable: true,
    value: 10
});

Object.defineProperty(Test, 'ShortConst1', {
    enumerable: true,
    value: 20
});

Object.defineProperty(Test, 'IntConst1', {
    enumerable: true,
    value: 30
});

Object.defineProperty(Test, 'LongConst1', {
    enumerable: true,
    value: new Ice.Long(0, 40)
});

Object.defineProperty(Test, 'ByteConst2', {
    enumerable: true,
    value: 126
});

Object.defineProperty(Test, 'ShortConst2', {
    enumerable: true,
    value: 32766
});

Object.defineProperty(Test, 'IntConst2', {
    enumerable: true,
    value: 2147483647
});

Object.defineProperty(Test, 'LongConst2', {
    enumerable: true,
    value: new Ice.Long(0, 2147483646)
});

Test.ByteEnum = Ice.defineEnum([
    ['benum1', 0], ['benum2', 1], ['benum3', 10], ['benum4', 11], ['benum5', 20],
    ['benum6', 21], ['benum7', 30], ['benum8', 31], ['benum9', 40], ['benum10', 41],
    ['benum11', 126]]);

Test.ByteEnumSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.ByteEnum._helper, false);

Test.ShortEnum = Ice.defineEnum([
    ['senum1', 3], ['senum2', 4], ['senum3', 10], ['senum4', 11], ['senum5', 20],
    ['senum6', 21], ['senum7', 30], ['senum8', 31], ['senum9', 40], ['senum10', 41],
    ['senum11', 32766]]);

Test.ShortEnumSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.ShortEnum._helper, false);

Test.IntEnum = Ice.defineEnum([
    ['ienum1', 0], ['ienum2', 1], ['ienum3', 10], ['ienum4', 11], ['ienum5', 20],
    ['ienum6', 21], ['ienum7', 30], ['ienum8', 31], ['ienum9', 40], ['ienum10', 41],
    ['ienum11', 2147483647], ['ienum12', 2147483646]]);

Test.IntEnumSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.IntEnum._helper, false);

Test.SimpleEnum = Ice.defineEnum([
    ['red', 0], ['green', 1], ['blue', 2]]);

Test.SimpleEnumSeqHelper = Ice.StreamHelpers.generateSeqHelper(Test.SimpleEnum._helper, false);

const iceC_Test_TestIntf_ids = [
    "::Ice::Object",
    "::Test::TestIntf"
];

Test.TestIntf = class extends Ice.Object
{
};

Test.TestIntfPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.TestIntfPrx", Test.TestIntfPrx);

Ice.defineOperations(
    Test.TestIntf,
    Test.TestIntfPrx,
    iceC_Test_TestIntf_ids,
    "::Test::TestIntf",
    {
        "opByte": [, , , [Test.ByteEnum._helper], [[Test.ByteEnum._helper]], [[Test.ByteEnum._helper]], , , ],
        "opShort": [, , , [Test.ShortEnum._helper], [[Test.ShortEnum._helper]], [[Test.ShortEnum._helper]], , , ],
        "opInt": [, , , [Test.IntEnum._helper], [[Test.IntEnum._helper]], [[Test.IntEnum._helper]], , , ],
        "opSimple": [, , , [Test.SimpleEnum._helper], [[Test.SimpleEnum._helper]], [[Test.SimpleEnum._helper]], , , ],
        "opByteSeq": [, , , [Test.ByteEnumSeqHelper], [[Test.ByteEnumSeqHelper]], [[Test.ByteEnumSeqHelper]], , , ],
        "opShortSeq": [, , , [Test.ShortEnumSeqHelper], [[Test.ShortEnumSeqHelper]], [[Test.ShortEnumSeqHelper]], , , ],
        "opIntSeq": [, , , [Test.IntEnumSeqHelper], [[Test.IntEnumSeqHelper]], [[Test.IntEnumSeqHelper]], , , ],
        "opSimpleSeq": [, , , [Test.SimpleEnumSeqHelper], [[Test.SimpleEnumSeqHelper]], [[Test.SimpleEnumSeqHelper]], , , ],
        "shutdown": [, , , , , , , , ]
    });
