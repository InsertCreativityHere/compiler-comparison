//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.SerialSmallHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ByteHelper, true);

Test.SerialLargeHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ByteHelper, true);

Test.SerialStructHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ByteHelper, true);

const iceC_Test_MyClass_ids = [
    "::Ice::Object",
    "::Test::MyClass"
];

Test.MyClass = class extends Ice.Object
{
};

Test.MyClassPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.MyClassPrx", Test.MyClassPrx);

Ice.defineOperations(
    Test.MyClass,
    Test.MyClassPrx,
    iceC_Test_MyClass_ids,
    "::Test::MyClass",
    {
        "shutdown": [, , , , , , , , ],
        "opSerialSmallJava": [, , , [Test.SerialSmallHelper], [[Test.SerialSmallHelper]], [[Test.SerialSmallHelper]], , , ],
        "opSerialLargeJava": [, , , [Test.SerialLargeHelper], [[Test.SerialLargeHelper]], [[Test.SerialLargeHelper]], , , ],
        "opSerialStructJava": [, , , [Test.SerialStructHelper], [[Test.SerialStructHelper]], [[Test.SerialStructHelper]], , , ]
    });

Test.SLSHelper = Ice.StreamHelpers.generateSeqHelper(Test.SerialLargeHelper, false);

Test.SLSSHelper = Ice.StreamHelpers.generateSeqHelper(Test.SLSHelper, false);

[Test.SLD, Test.SLDHelper] = Ice.defineDictionary(Ice.IntHelper, Test.SerialLargeHelper, false, undefined);

[Test.SLSD, Test.SLSDHelper] = Ice.defineDictionary(Ice.IntHelper, Test.SLSHelper, false, undefined);

Test.Foo = class
{
    constructor(SLmem = null, SLSmem = null)
    {
        this.SLmem = SLmem;
        this.SLSmem = SLSmem;
    }

    _write(ostr)
    {
        Test.SerialLargeHelper.write(ostr, this.SLmem);
        Test.SLSHelper.write(ostr, this.SLSmem);
    }

    _read(istr)
    {
        this.SLmem = Test.SerialLargeHelper.read(istr);
        this.SLSmem = Test.SLSHelper.read(istr);
    }

    static get minWireSize()
    {
        return  2;
    }
};

Ice.defineStruct(Test.Foo, false, true);

Test.Bar = class extends Ice.UserException
{
    constructor(SLmem = null, SLSmem = null, _cause = "")
    {
        super(_cause);
        this.SLmem = SLmem;
        this.SLSmem = SLSmem;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::Bar";
    }

    _mostDerivedType()
    {
        return Test.Bar;
    }

    _writeMemberImpl(ostr)
    {
        Test.SerialLargeHelper.write(ostr, this.SLmem);
        Test.SLSHelper.write(ostr, this.SLSmem);
    }

    _readMemberImpl(istr)
    {
        this.SLmem = Test.SerialLargeHelper.read(istr);
        this.SLSmem = Test.SLSHelper.read(istr);
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.Bar",
    Test.Bar);

Test.Baz = class extends Ice.Value
{
    constructor(SLmem = null, SLSmem = null)
    {
        super();
        this.SLmem = SLmem;
        this.SLSmem = SLSmem;
    }

    _iceWriteMemberImpl(ostr)
    {
        Test.SerialLargeHelper.write(ostr, this.SLmem);
        Test.SLSHelper.write(ostr, this.SLSmem);
    }

    _iceReadMemberImpl(istr)
    {
        this.SLmem = Test.SerialLargeHelper.read(istr);
        this.SLSmem = Test.SLSHelper.read(istr);
    }
};

Ice.defineValue(Test.Baz, "::Test::Baz");
Ice.TypeRegistry.declareValueType("Test.Baz", Test.Baz);
