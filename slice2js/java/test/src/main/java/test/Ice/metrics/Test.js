//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.UserEx = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _ice_id()
    {
        return "::Test::UserEx";
    }

    _mostDerivedType()
    {
        return Test.UserEx;
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "Test.UserEx",
    Test.UserEx);

Test.ByteSeqHelper = Ice.StreamHelpers.generateSeqHelper(Ice.ByteHelper, true);

const iceC_Test_Metrics_ids = [
    "::Ice::Object",
    "::Test::Metrics"
];

Test.Metrics = class extends Ice.Object
{
};

Test.MetricsPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.MetricsPrx", Test.MetricsPrx);

Ice.defineOperations(
    Test.Metrics,
    Test.MetricsPrx,
    iceC_Test_Metrics_ids,
    "::Test::Metrics",
    {
        "op": [, , , , , , , , ],
        "fail": [, 2, , , , , , , ],
        "opWithUserException": [, , , , , ,
        [
            Test.UserEx
        ], , ],
        "opWithRequestFailedException": [, , , , , , , , ],
        "opWithLocalException": [, , , , , , , , ],
        "opWithUnknownException": [, , , , , , , , ],
        "opByteS": [, , , , [[Test.ByteSeqHelper]], , , , ],
        "getAdmin": [, , , [9], , , , , ],
        "shutdown": [, , , , , , , , ]
    });

const iceC_Test_Controller_ids = [
    "::Ice::Object",
    "::Test::Controller"
];

Test.Controller = class extends Ice.Object
{
};

Test.ControllerPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.ControllerPrx", Test.ControllerPrx);

Ice.defineOperations(
    Test.Controller,
    Test.ControllerPrx,
    iceC_Test_Controller_ids,
    "::Test::Controller",
    {
        "hold": [, , , , , , , , ],
        "resume": [, , , , , , , , ]
    });
