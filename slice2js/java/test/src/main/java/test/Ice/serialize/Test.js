//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Test = _ModuleRegistry.module("Test");

    Test.MyEnum = Slice.defineEnum([
        ['enum1', 0], ['enum2', 1], ['enum3', 2]]);

    Test.Struct1 = class
    {
        constructor(bo = false, by = 0, sh = 0, i = 0, l = new Ice.Long(0, 0), f = 0.0, d = 0.0, str = "", e = Test.MyEnum.enum1, p = null)
        {
            this.bo = bo;
            this.by = by;
            this.sh = sh;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            this.str = str;
            this.e = e;
            this.p = p;
        }

        _write(ostr)
        {
            ostr.writeBool(this.bo);
            ostr.writeByte(this.by);
            ostr.writeShort(this.sh);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            Test.MyEnum._write(ostr, this.e);
            Test.InitialPrx.write(ostr, this.p);
        }

        _read(istr)
        {
            this.bo = istr.readBool();
            this.by = istr.readByte();
            this.sh = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.e = Test.MyEnum._read(istr);
            this.p = Test.InitialPrx.read(istr, this.p);
        }

        static get minWireSize()
        {
            return  32;
        }
    };

    Slice.defineStruct(Test.Struct1, false, true);

    Slice.defineSequence(Test, "ByteSHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(Test, "IntSHelper", "Ice.IntHelper", true);

    Slice.defineSequence(Test, "MyEnumSHelper", "Test.MyEnum._helper", false);

    Slice.defineSequence(Test, "BaseSHelper", "Ice.ObjectHelper", false, "Test.Base");

    Slice.defineDictionary(Test, "ByteBoolD", "ByteBoolDHelper", "Ice.ByteHelper", "Ice.BoolHelper", true, undefined, undefined);

    Slice.defineDictionary(Test, "ShortIntD", "ShortIntDHelper", "Ice.ShortHelper", "Ice.IntHelper", true, undefined, undefined);

    Slice.defineDictionary(Test, "StringMyEnumD", "StringMyEnumDHelper", "Ice.StringHelper", "Test.MyEnum._helper", false, undefined, undefined);

    Slice.defineDictionary(Test, "StringBaseD", "StringBaseDHelper", "Ice.StringHelper", "Ice.ObjectHelper", false, undefined, "Test.Base");

    const iceC_Test_Base_ids = [
        "::Ice::Object",
        "::Test::Base"
    ];

    Test.Base = class extends Ice.Value
    {
        constructor(b = null, o = null, s = new Test.Struct1(), seq1 = null, seq2 = null, seq3 = null, seq4 = null, d1 = null, d2 = null, d3 = null, d4 = null)
        {
            super();
            this.b = b;
            this.o = o;
            this.s = s;
            this.seq1 = seq1;
            this.seq2 = seq2;
            this.seq3 = seq3;
            this.seq4 = seq4;
            this.d1 = d1;
            this.d2 = d2;
            this.d3 = d3;
            this.d4 = d4;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeValue(this.b);
            ostr.writeValue(this.o);
            Test.Struct1.write(ostr, this.s);
            Test.ByteSHelper.write(ostr, this.seq1);
            Test.IntSHelper.write(ostr, this.seq2);
            Test.MyEnumSHelper.write(ostr, this.seq3);
            Test.BaseSHelper.write(ostr, this.seq4);
            Test.ByteBoolDHelper.write(ostr, this.d1);
            Test.ShortIntDHelper.write(ostr, this.d2);
            Test.StringMyEnumDHelper.write(ostr, this.d3);
            Test.StringBaseDHelper.write(ostr, this.d4);
        }

        _iceReadMemberImpl(istr)
        {
            istr.readValue(obj => this.b = obj, Test.Base);
            istr.readValue(obj => this.o = obj, Ice.Value);
            this.s = Test.Struct1.read(istr, this.s);
            this.seq1 = Test.ByteSHelper.read(istr);
            this.seq2 = Test.IntSHelper.read(istr);
            this.seq3 = Test.MyEnumSHelper.read(istr);
            this.seq4 = Test.BaseSHelper.read(istr);
            this.d1 = Test.ByteBoolDHelper.read(istr);
            this.d2 = Test.ShortIntDHelper.read(istr);
            this.d3 = Test.StringMyEnumDHelper.read(istr);
            this.d4 = Test.StringBaseDHelper.read(istr);
        }
    };

    Slice.defineValue(Test.Base, iceC_Test_Base_ids[1], false);

    const iceC_Test_Derived_ids = [
        "::Ice::Object",
        "::Test::Base",
        "::Test::Derived"
    ];

    Test.Derived = class extends Test.Base
    {
        constructor(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4, p = null)
        {
            super(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4);
            this.p = p;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeProxy(this.p);
        }

        _iceReadMemberImpl(istr)
        {
            this.p = istr.readProxy();
        }
    };

    Slice.defineValue(Test.Derived, iceC_Test_Derived_ids[2], false);

    Test.Ex = class extends Ice.UserException
    {
        constructor(s = new Test.Struct1(), b = null, _cause = "")
        {
            super(_cause);
            this.s = s;
            this.b = b;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Test::Ex";
        }

        _mostDerivedType()
        {
            return Test.Ex;
        }

        _writeMemberImpl(ostr)
        {
            Test.Struct1.write(ostr, this.s);
            ostr.writeValue(this.b);
        }

        _readMemberImpl(istr)
        {
            this.s = Test.Struct1.read(istr, this.s);
            istr.readValue(obj => this.b = obj, Test.Base);
        }

        _usesClasses()
        {
            return true;
        }
    };

    const iceC_Test_Initial_ids = [
        "::Ice::Object",
        "::Test::Initial"
    ];

    Test.Initial = class extends Ice.Object
    {
    };

    Test.InitialPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Test.Initial, Test.InitialPrx, iceC_Test_Initial_ids, 1,
    {
        "getStruct1": [, , , , ["Test.ByteSHelper"], , , , , ],
        "getBase": [, , , , ["Test.ByteSHelper"], , , , , ],
        "getEx": [, , , , ["Test.ByteSHelper"], , , , , ],
        "shutdown": [, , , , , , , , , ]
    });
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
