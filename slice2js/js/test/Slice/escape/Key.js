//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const _await = {};

_await.System = _await.System || {};

export const System = {};

_await._var = Ice.defineEnum([
    ['base', 0]]);

_await._break = class
{
    constructor(_while = 0, clone = "", equals = "", hashCode = "", constructor = "")
    {
        this._while = _while;
        this._clone = clone;
        this._equals = equals;
        this._hashCode = hashCode;
        this._constructor = constructor;
    }

    _write(ostr)
    {
        ostr.writeInt(this._while);
        ostr.writeString(this._clone);
        ostr.writeString(this._equals);
        ostr.writeString(this._hashCode);
        ostr.writeString(this._constructor);
    }

    _read(istr)
    {
        this._while = istr.readInt();
        this._clone = istr.readString();
        this._equals = istr.readString();
        this._hashCode = istr.readString();
        this._constructor = istr.readString();
    }

    static get minWireSize()
    {
        return  8;
    }
};

Ice.defineStruct(_await._break, true, true);

const iceC__await__case_ids = [
    "::Ice::Object",
    "::await::case"
];

_await._case = class extends Ice.Object
{
};

_await.casePrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("_await.casePrx", _await.casePrx);

Ice.defineOperations(
    _await._case,
    _await.casePrx,
    iceC__await__case_ids,
    "::await::case",
    {
        "catch": ["_catch", , , , [[3]], [[3]], , , ]
    });

const iceC__await__typeof_ids = [
    "::Ice::Object",
    "::await::typeof"
];

_await._typeof = class extends Ice.Object
{
};

_await.typeofPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("_await.typeofPrx", _await.typeofPrx);

Ice.defineOperations(
    _await._typeof,
    _await.typeofPrx,
    iceC__await__typeof_ids,
    "::await::typeof",
    {
        "default": ["_default", , , , , , , , ]
    });

_await._delete = class extends Ice.Value
{
    constructor(_if = 0, _else = null, _export = 0, clone = "", equals = "", hashCode = "", constructor = "")
    {
        super();
        this._if = _if;
        this._else = _else;
        this._export = _export;
        this.clone = clone;
        this.equals = equals;
        this.hashCode = hashCode;
        this._constructor = constructor;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this._if);
        ostr.writeProxy(this._else);
        ostr.writeInt(this._export);
        ostr.writeString(this.clone);
        ostr.writeString(this.equals);
        ostr.writeString(this.hashCode);
        ostr.writeString(this._constructor);
    }

    _iceReadMemberImpl(istr)
    {
        this._if = istr.readInt();
        this._else = istr.readProxy();
        this._export = istr.readInt();
        this.clone = istr.readString();
        this.equals = istr.readString();
        this.hashCode = istr.readString();
        this._constructor = istr.readString();
    }
};

Ice.defineValue(_await._delete, "::await::delete");
Ice.TypeRegistry.declareValueType("_await._delete", _await._delete);

const iceC__await_explicit_ids = [
    "::Ice::Object",
    "::await::case",
    "::await::explicit",
    "::await::typeof"
];

_await.explicit = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            _await.typeof,
            _await.case
        ];
    }
};

_await.explicitPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            _await.typeofPrx,
            _await.casePrx];
    }
};
Ice.TypeRegistry.declareProxyType("_await.explicitPrx", _await.explicitPrx);

Ice.defineOperations(
    _await.explicit,
    _await.explicitPrx,
    iceC__await_explicit_ids,
    "::await::explicit");

[_await._while, _await._whileHelper] = Ice.defineDictionary(Ice.StringHelper, _await._break, false, undefined);

_await._package = class extends Ice.Value
{
    constructor(_for = undefined, goto = undefined, _if = undefined, internal = undefined, _debugger = undefined, _null = undefined)
    {
        super();
        this._for = _for;
        this.goto = goto;
        this._if = _if;
        this.internal = internal;
        this._debugger = _debugger;
        this._null = _null;
    }

    _iceWriteMemberImpl(ostr)
    {
        _await._break.writeOptional(ostr, 1, this._for);
        _await._var._writeOpt(ostr, 2, this.goto);
        _await.explicitPrx.writeOptional(ostr, 3, this._if);
        _await._whileHelper.writeOptional(ostr, 5, this.internal);
        Ice.StringHelper.writeOptional(ostr, 7, this._debugger);
        _await.explicitPrx.writeOptional(ostr, 8, this._null);
    }

    _iceReadMemberImpl(istr)
    {
        this._for = _await._break.readOptional(istr, 1);
        this.goto = _await._var._readOpt(istr, 2);
        this._if = _await.explicitPrx.readOptional(istr, 3);
        this.internal = _await._whileHelper.readOptional(istr, 5);
        this._debugger = Ice.StringHelper.readOptional(istr, 7);
        this._null = _await.explicitPrx.readOptional(istr, 8);
    }
};

Ice.defineValue(_await._package, "::await::package");
Ice.TypeRegistry.declareValueType("_await._package", _await._package);

const iceC__await_optionalParams_ids = [
    "::Ice::Object",
    "::await::optionalParams"
];

_await.optionalParams = class extends Ice.Object
{
};

_await.optionalParamsPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("_await.optionalParamsPrx", _await.optionalParamsPrx);

Ice.defineOperations(
    _await.optionalParams,
    _await.optionalParamsPrx,
    iceC__await_optionalParams_ids,
    "::await::optionalParams",
    {
        "for": ["_for", , , [_await._break, , 1], [[_await._var._helper, , 2], ["_await.explicitPrx", , 3], [_await.whileHelper, , 5], [7, , 7], ["_await.explicitPrx", , 8]], , , , ],
        "continue": ["_continue", , , [_await._break, , 1], [[_await._var._helper, , 2], ["_await.explicitPrx", , 3], [_await.whileHelper, , 5], [7, , 7], ["_await.explicitPrx", , 8]], , , , ],
        "in": ["_in", , , [_await._break, , 1], , [[_await._var._helper, , 2], ["_await.explicitPrx", , 3], [_await.whileHelper, , 5], [7, , 7], ["_await.explicitPrx", , 8]], , , ],
        "foreach": [, , , [_await._break, , 1], , [[_await._var._helper, , 2], ["_await.explicitPrx", , 3], [_await.whileHelper, , 5], [7, , 7], ["_await.explicitPrx", , 8]], , , ]
    });

_await.fixed = class extends Ice.UserException
{
    constructor(_for = 0, _cause = "")
    {
        super(_cause);
        this._for = _for;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::await::fixed";
    }

    _mostDerivedType()
    {
        return _await.fixed;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this._for);
    }

    _readMemberImpl(istr)
    {
        this._for = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "_await.fixed",
    _await.fixed);

_await.foreach = class extends _await.fixed
{
    constructor(_for, goto = 0, _if = 0, _cause = "")
    {
        super(_for, _cause);
        this.goto = goto;
        this._if = _if;
    }

    static get _parent()
    {
        return _await.fixed;
    }

    static get _id()
    {
        return "::await::foreach";
    }

    _mostDerivedType()
    {
        return _await.foreach;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this.goto);
        ostr.writeInt(this._if);
    }

    _readMemberImpl(istr)
    {
        this.goto = istr.readInt();
        this._if = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "_await.foreach",
    _await.foreach);

_await.BaseMethods = class extends Ice.UserException
{
    constructor(Data = 0, HelpLink = 0, InnerException = 0, Message = 0, Source = 0, StackTrace = 0, TargetSite = 0, HResult = 0, Equals = 0, GetBaseException = 0, GetHashCode = 0, GetObjectData = 0, GetType = 0, ReferenceEquals = 0, ToString = 0, _cause = "")
    {
        super(_cause);
        this.Data = Data;
        this.HelpLink = HelpLink;
        this.InnerException = InnerException;
        this.Message = Message;
        this.Source = Source;
        this.StackTrace = StackTrace;
        this.TargetSite = TargetSite;
        this.HResult = HResult;
        this.Equals = Equals;
        this.GetBaseException = GetBaseException;
        this.GetHashCode = GetHashCode;
        this.GetObjectData = GetObjectData;
        this.GetType = GetType;
        this.ReferenceEquals = ReferenceEquals;
        this.ToString = ToString;
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::await::BaseMethods";
    }

    _mostDerivedType()
    {
        return _await.BaseMethods;
    }

    _writeMemberImpl(ostr)
    {
        ostr.writeInt(this.Data);
        ostr.writeInt(this.HelpLink);
        ostr.writeInt(this.InnerException);
        ostr.writeInt(this.Message);
        ostr.writeInt(this.Source);
        ostr.writeInt(this.StackTrace);
        ostr.writeInt(this.TargetSite);
        ostr.writeInt(this.HResult);
        ostr.writeInt(this.Equals);
        ostr.writeInt(this.GetBaseException);
        ostr.writeInt(this.GetHashCode);
        ostr.writeInt(this.GetObjectData);
        ostr.writeInt(this.GetType);
        ostr.writeInt(this.ReferenceEquals);
        ostr.writeInt(this.ToString);
    }

    _readMemberImpl(istr)
    {
        this.Data = istr.readInt();
        this.HelpLink = istr.readInt();
        this.InnerException = istr.readInt();
        this.Message = istr.readInt();
        this.Source = istr.readInt();
        this.StackTrace = istr.readInt();
        this.TargetSite = istr.readInt();
        this.HResult = istr.readInt();
        this.Equals = istr.readInt();
        this.GetBaseException = istr.readInt();
        this.GetHashCode = istr.readInt();
        this.GetObjectData = istr.readInt();
        this.GetType = istr.readInt();
        this.ReferenceEquals = istr.readInt();
        this.ToString = istr.readInt();
    }
};
Ice.TypeRegistry.declareUserExceptionType(
    "_await.BaseMethods",
    _await.BaseMethods);

const iceC__await_implicit_ids = [
    "::Ice::Object",
    "::await::implicit"
];

_await.implicit = class extends Ice.Object
{
};

_await.implicitPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("_await.implicitPrx", _await.implicitPrx);

Ice.defineOperations(
    _await.implicit,
    _await.implicitPrx,
    iceC__await_implicit_ids,
    "::await::implicit",
    {
        "in": ["_in", , , [_await._var._helper], [[_await._break], ["_await._delete", true], ["_await.explicitPrx"], ["_await.casePrx"], ["_await.typeofPrx"], ["_await._delete", true], ["_await.explicitPrx"], [3], [3], [3]], ,
        [
            _await.foreach,
            _await.fixed
        ], true, ]
    });

Object.defineProperty(_await, '_protected', {
    enumerable: true,
    value: 0
});

Object.defineProperty(_await, '_public', {
    enumerable: true,
    value: 0
});

const iceC__await_System_Test_ids = [
    "::Ice::Object",
    "::await::System::Test"
];

_await.System.Test = class extends Ice.Object
{
};

_await.System.TestPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("_await.System.TestPrx", _await.System.TestPrx);

Ice.defineOperations(
    _await.System.Test,
    _await.System.TestPrx,
    iceC__await_System_Test_ids,
    "::await::System::Test",
    {
        "op": [, , , , , , , , ]
    });

const iceC_System_Test_ids = [
    "::Ice::Object",
    "::System::Test"
];

System.Test = class extends Ice.Object
{
};

System.TestPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("System.TestPrx", System.TestPrx);

Ice.defineOperations(
    System.Test,
    System.TestPrx,
    iceC_System_Test_ids,
    "::System::Test",
    {
        "op": [, , , , , , , , ]
    });
