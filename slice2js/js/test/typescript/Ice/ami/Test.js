//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";
const _ModuleRegistry = Ice._ModuleRegistry;
const Slice = Ice.Slice;

let Test = _ModuleRegistry.module("Test");

Test.TestIntfException = class extends Ice.UserException
{
    constructor(_cause = "")
    {
        super(_cause);
    }

    static get _parent()
    {
        return Ice.UserException;
    }

    static get _id()
    {
        return "::Test::TestIntfException";
    }

    _mostDerivedType()
    {
        return Test.TestIntfException;
    }
};

Test.CloseMode = Slice.defineEnum([
    ['Forcefully', 0], ['Gracefully', 1], ['GracefullyWithWait', 2]]);

const iceC_Test_PingReply_ids = [
    "::Ice::Object",
    "::Test::PingReply"
];

Test.PingReply = class extends Ice.Object
{
};

Test.PingReplyPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(Test.PingReply, Test.PingReplyPrx, iceC_Test_PingReply_ids, 1,
{
    "reply": [, , , , , , , , , ]
});

const iceC_Test_TestIntf_ids = [
    "::Ice::Object",
    "::Test::TestIntf"
];

Test.TestIntf = class extends Ice.Object
{
};

Test.TestIntfPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(Test.TestIntf, Test.TestIntfPrx, iceC_Test_TestIntf_ids, 1,
{
    "op": [, , , , , , , , , ],
    "opWithPayload": [, , , , , [["Ice.ByteSeqHelper"]], , , , ],
    "opWithResult": [, , , , [3], , , , , ],
    "opWithUE": [, , , , , , ,
    [
        Test.TestIntfException
    ], , ],
    "opBatch": [, , , , , , , , , ],
    "opBatchCount": [, , , , [3], , , , , ],
    "waitForBatch": [, , , , [1], [[3]], , , , ],
    "close": [, , , , , [[Test.CloseMode._helper]], , , , ],
    "sleep": [, , , , , [[3]], , , , ],
    "startDispatch": [, , , , , , , , , ],
    "finishDispatch": [, , , , , , , , , ],
    "shutdown": [, , , , , , , , , ],
    "supportsAMD": [, , , , [1], , , , , ],
    "supportsFunctionalTests": [, , , , [1], , , , , ],
    "pingBidDir": [, , , , , [[Ice.Identity]], , , , ]
});

const iceC_Test_TestIntfController_ids = [
    "::Ice::Object",
    "::Test::TestIntfController"
];

Test.TestIntfController = class extends Ice.Object
{
};

Test.TestIntfControllerPrx = class extends Ice.ObjectPrx
{
};

Slice.defineOperations(Test.TestIntfController, Test.TestIntfControllerPrx, iceC_Test_TestIntfController_ids, 1,
{
    "holdAdapter": [, , , , , , , , , ],
    "resumeAdapter": [, , , , , , , , , ]
});
export { Test };
