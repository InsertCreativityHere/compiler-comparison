// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

/* eslint-disable */
/* jshint ignore: start */

import { Ice } from "ice";


export const Test = {};

Test.MA = Test.MA || {};

Test.MB = Test.MB || {};

Test.MC = Test.MC || {};

Test.MD = Test.MD || {};

Test.ME = Test.ME || {};

Test.MF = Test.MF || {};

Test.MG = Test.MG || {};

Test.MH = Test.MH || {};

const iceC_Test_MA_IA_ids = [
    "::Ice::Object",
    "::Test::MA::IA"
];

Test.MA.IA = class extends Ice.Object
{
};

Test.MA.IAPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.MA.IAPrx", Test.MA.IAPrx);

Ice.defineOperations(
    Test.MA.IA,
    Test.MA.IAPrx,
    iceC_Test_MA_IA_ids,
    "::Test::MA::IA",
    {
        "iaop": [, , , ["Test.MA.IAPrx"], [["Test.MA.IAPrx"]], , , , ]
    });

const iceC_Test_MB_IB1_ids = [
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB1"
];

Test.MB.IB1 = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Test.MA.IA
        ];
    }
};

Test.MB.IB1Prx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Test.MA.IAPrx];
    }
};
Ice.TypeRegistry.declareProxyType("Test.MB.IB1Prx", Test.MB.IB1Prx);

Ice.defineOperations(
    Test.MB.IB1,
    Test.MB.IB1Prx,
    iceC_Test_MB_IB1_ids,
    "::Test::MB::IB1",
    {
        "ib1op": [, , , ["Test.MB.IB1Prx"], [["Test.MB.IB1Prx"]], , , , ]
    });

const iceC_Test_MB_IB2_ids = [
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB2"
];

Test.MB.IB2 = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Test.MA.IA
        ];
    }
};

Test.MB.IB2Prx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Test.MA.IAPrx];
    }
};
Ice.TypeRegistry.declareProxyType("Test.MB.IB2Prx", Test.MB.IB2Prx);

Ice.defineOperations(
    Test.MB.IB2,
    Test.MB.IB2Prx,
    iceC_Test_MB_IB2_ids,
    "::Test::MB::IB2",
    {
        "ib2op": [, , , ["Test.MB.IB2Prx"], [["Test.MB.IB2Prx"]], , , , ]
    });

const iceC_Test_MA_IC_ids = [
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MA::IC",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
];

Test.MA.IC = class extends Ice.Object
{
    static get _iceImplements()
    {
        return [
            Test.MB.IB1,
            Test.MB.IB2
        ];
    }
};

Test.MA.ICPrx = class extends Ice.ObjectPrx
{
    static get _implements()
    {
        return [
            Test.MB.IB1Prx,
            Test.MB.IB2Prx];
    }
};
Ice.TypeRegistry.declareProxyType("Test.MA.ICPrx", Test.MA.ICPrx);

Ice.defineOperations(
    Test.MA.IC,
    Test.MA.ICPrx,
    iceC_Test_MA_IC_ids,
    "::Test::MA::IC",
    {
        "icop": [, , , ["Test.MA.ICPrx"], [["Test.MA.ICPrx"]], , , , ]
    });

const iceC_Test_Initial_ids = [
    "::Ice::Object",
    "::Test::Initial"
];

Test.Initial = class extends Ice.Object
{
};

Test.InitialPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.InitialPrx", Test.InitialPrx);

Ice.defineOperations(
    Test.Initial,
    Test.InitialPrx,
    iceC_Test_Initial_ids,
    "::Test::Initial",
    {
        "shutdown": [, , , , , , , , ],
        "iaop": [, , , ["Test.MA.IAPrx"], , , , , ],
        "ib1op": [, , , ["Test.MB.IB1Prx"], , , , , ],
        "ib2op": [, , , ["Test.MB.IB2Prx"], , , , , ],
        "icop": [, , , ["Test.MA.ICPrx"], , , , , ]
    });

Test.MC.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.MC.A, "::Test::MC::A");
Ice.TypeRegistry.declareValueType("Test.MC.A", Test.MC.A);

Test.MC.B = class extends Test.MC.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.MC.B, "::Test::MC::B");
Ice.TypeRegistry.declareValueType("Test.MC.B", Test.MC.B);

Test.MC.C = class extends Test.MC.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.MC.C, "::Test::MC::C");
Ice.TypeRegistry.declareValueType("Test.MC.C", Test.MC.C);

Test.MC.D = class extends Test.MC.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.MC.D, "::Test::MC::D");
Ice.TypeRegistry.declareValueType("Test.MC.D", Test.MC.D);

Test.MD.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.MD.A, "::Test::MD::A");
Ice.TypeRegistry.declareValueType("Test.MD.A", Test.MD.A);

Test.MD.B = class extends Test.MD.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.MD.B, "::Test::MD::B");
Ice.TypeRegistry.declareValueType("Test.MD.B", Test.MD.B);

Test.MD.C = class extends Test.MD.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.MD.C, "::Test::MD::C");
Ice.TypeRegistry.declareValueType("Test.MD.C", Test.MD.C);

Test.MD.D = class extends Test.MD.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.MD.D, "::Test::MD::D");
Ice.TypeRegistry.declareValueType("Test.MD.D", Test.MD.D);

Test.ME.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.ME.A, "::Test::ME::A");
Ice.TypeRegistry.declareValueType("Test.ME.A", Test.ME.A);

Test.ME.B = class extends Test.ME.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.ME.B, "::Test::ME::B");
Ice.TypeRegistry.declareValueType("Test.ME.B", Test.ME.B);

Test.ME.C = class extends Test.ME.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.ME.C, "::Test::ME::C");
Ice.TypeRegistry.declareValueType("Test.ME.C", Test.ME.C);

Test.ME.D = class extends Test.ME.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.ME.D, "::Test::ME::D");
Ice.TypeRegistry.declareValueType("Test.ME.D", Test.ME.D);

Test.MF.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.MF.A, "::Test::MF::A");
Ice.TypeRegistry.declareValueType("Test.MF.A", Test.MF.A);

Test.MF.B = class extends Test.MF.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.MF.B, "::Test::MF::B");
Ice.TypeRegistry.declareValueType("Test.MF.B", Test.MF.B);

Test.MF.C = class extends Test.MF.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.MF.C, "::Test::MF::C");
Ice.TypeRegistry.declareValueType("Test.MF.C", Test.MF.C);

Test.MF.D = class extends Test.MF.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.MF.D, "::Test::MF::D");
Ice.TypeRegistry.declareValueType("Test.MF.D", Test.MF.D);

Test.MG.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.MG.A, "::Test::MG::A");
Ice.TypeRegistry.declareValueType("Test.MG.A", Test.MG.A);

Test.MG.B = class extends Test.MG.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.MG.B, "::Test::MG::B");
Ice.TypeRegistry.declareValueType("Test.MG.B", Test.MG.B);

Test.MG.C = class extends Test.MG.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.MG.C, "::Test::MG::C");
Ice.TypeRegistry.declareValueType("Test.MG.C", Test.MG.C);

Test.MG.D = class extends Test.MG.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.MG.D, "::Test::MG::D");
Ice.TypeRegistry.declareValueType("Test.MG.D", Test.MG.D);

Test.MH.A = class extends Ice.Value
{
    constructor(aA = 0)
    {
        super();
        this.aA = aA;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.aA);
    }

    _iceReadMemberImpl(istr)
    {
        this.aA = istr.readInt();
    }
};

Ice.defineValue(Test.MH.A, "::Test::MH::A");
Ice.TypeRegistry.declareValueType("Test.MH.A", Test.MH.A);

Test.MH.B = class extends Test.MH.A
{
    constructor(aA, bB = 0)
    {
        super(aA);
        this.bB = bB;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.bB);
    }

    _iceReadMemberImpl(istr)
    {
        this.bB = istr.readInt();
    }
};

Ice.defineValue(Test.MH.B, "::Test::MH::B");
Ice.TypeRegistry.declareValueType("Test.MH.B", Test.MH.B);

Test.MH.C = class extends Test.MH.B
{
    constructor(aA, bB, cC = 0)
    {
        super(aA, bB);
        this.cC = cC;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.cC);
    }

    _iceReadMemberImpl(istr)
    {
        this.cC = istr.readInt();
    }
};

Ice.defineValue(Test.MH.C, "::Test::MH::C");
Ice.TypeRegistry.declareValueType("Test.MH.C", Test.MH.C);

Test.MH.D = class extends Test.MH.C
{
    constructor(aA, bB, cC, dD = 0)
    {
        super(aA, bB, cC);
        this.dD = dD;
    }

    _iceWriteMemberImpl(ostr)
    {
        ostr.writeInt(this.dD);
    }

    _iceReadMemberImpl(istr)
    {
        this.dD = istr.readInt();
    }
};

Ice.defineValue(Test.MH.D, "::Test::MH::D");
Ice.TypeRegistry.declareValueType("Test.MH.D", Test.MH.D);

const iceC_Test_Echo_ids = [
    "::Ice::Object",
    "::Test::Echo"
];

Test.Echo = class extends Ice.Object
{
};

Test.EchoPrx = class extends Ice.ObjectPrx
{
};
Ice.TypeRegistry.declareProxyType("Test.EchoPrx", Test.EchoPrx);

Ice.defineOperations(
    Test.Echo,
    Test.EchoPrx,
    iceC_Test_Echo_ids,
    "::Test::Echo",
    {
        "setConnection": [, , , , , , , , ],
        "startBatch": [, , , , , , , , ],
        "flushBatch": [, , , , , , , , ],
        "shutdown": [, , , , , , , , ]
    });
