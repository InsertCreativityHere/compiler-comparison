//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package and;

public interface printPrx extends com.zeroc.Ice.ObjectPrx
{
    default _assert raise(_continue _else, _for _return, delPrx _while, execPrx yield, ifPrx or, int global)
        throws is
    {
        return raise(_else, _return, _while, yield, or, global, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default _assert raise(_continue _else, _for _return, delPrx _while, execPrx yield, ifPrx or, int global, java.util.Map<String, String> context)
        throws is
    {
        try
        {
            return _iceI_raiseAsync(_else, _return, _while, yield, or, global, context, true).waitForResponseOrUserEx();
        }
        catch(is ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<_assert> raiseAsync(_continue _else, _for _return, delPrx _while, execPrx yield, ifPrx or, int global)
    {
        return _iceI_raiseAsync(_else, _return, _while, yield, or, global, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<_assert> raiseAsync(_continue _else, _for _return, delPrx _while, execPrx yield, ifPrx or, int global, java.util.Map<String, String> context)
    {
        return _iceI_raiseAsync(_else, _return, _while, yield, or, global, context, false);
    }

    /**
     * @hidden
     * @param iceP_else -
     * @param iceP_return -
     * @param iceP_while -
     * @param iceP_yield -
     * @param iceP_or -
     * @param iceP_global -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<_assert> _iceI_raiseAsync(_continue iceP_else, _for iceP_return, delPrx iceP_while, execPrx iceP_yield, ifPrx iceP_or, int iceP_global, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<_assert> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "raise", null, sync, _iceE_raise);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     _continue.ice_write(ostr, iceP_else);
                     ostr.writeValue(iceP_return);
                     ostr.writeProxy(iceP_while);
                     ostr.writeProxy(iceP_yield);
                     ostr.writeProxy(iceP_or);
                     ostr.writeInt(iceP_global);
                     ostr.writePendingValues();
                 }, istr -> {
                     _assert ret;
                     ret = _assert.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_raise =
    {
        is.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static printPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), printPrx.class, _printPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static printPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), printPrx.class, _printPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static printPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), printPrx.class, _printPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static printPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), printPrx.class, _printPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static printPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, printPrx.class, _printPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static printPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, printPrx.class, _printPrxI.class);
    }

    @Override
    printPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    printPrx ice_adapterId(String newAdapterId);

    @Override
    printPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    printPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    printPrx ice_invocationTimeout(int newTimeout);

    @Override
    printPrx ice_connectionCached(boolean newCache);

    @Override
    printPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    printPrx ice_secure(boolean b);

    @Override
    printPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    printPrx ice_preferSecure(boolean b);

    @Override
    printPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    printPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    printPrx ice_collocationOptimized(boolean b);

    @Override
    printPrx ice_twoway();

    @Override
    printPrx ice_oneway();

    @Override
    printPrx ice_batchOneway();

    @Override
    printPrx ice_datagram();

    @Override
    printPrx ice_batchDatagram();

    @Override
    printPrx ice_compress(boolean co);

    @Override
    printPrx ice_timeout(int t);

    @Override
    printPrx ice_connectionId(String connectionId);

    @Override
    printPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::and::print";
    }
}
