//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package and;

public interface print extends com.zeroc.Ice.Object
{
    _assert raise(_continue _else, _for _return, com.zeroc.Ice.Value _try, delPrx _while, execPrx yield, com.zeroc.Ice.ObjectPrx lambda, ifPrx or, int global, com.zeroc.Ice.Current current)
        throws is;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::and::print"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::and::print";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_raise(print obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        _continue iceP_else;
        final com.zeroc.IceInternal.Holder<_for> icePP_return = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_try = new com.zeroc.IceInternal.Holder<>();
        delPrx iceP_while;
        execPrx iceP_yield;
        com.zeroc.Ice.ObjectPrx iceP_lambda;
        ifPrx iceP_or;
        int iceP_global;
        iceP_else = _continue.ice_read(istr);
        istr.readValue(v -> icePP_return.value = v, _for.class);
        istr.readValue(v -> icePP_try.value = v, com.zeroc.Ice.Value.class);
        iceP_while = delPrx.uncheckedCast(istr.readProxy());
        iceP_yield = execPrx.uncheckedCast(istr.readProxy());
        iceP_lambda = com.zeroc.Ice.ObjectPrx.uncheckedCast(istr.readProxy());
        iceP_or = ifPrx.uncheckedCast(istr.readProxy());
        iceP_global = istr.readInt();
        istr.readPendingValues();
        inS.endReadParams();
        _for iceP_return = icePP_return.value;
        com.zeroc.Ice.Value iceP_try = icePP_try.value;
        _assert ret = obj.raise(iceP_else, iceP_return, iceP_try, iceP_while, iceP_yield, iceP_lambda, iceP_or, iceP_global, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        _assert.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "raise"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_raise(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
