// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package and;

public interface delPrx extends com.zeroc.Ice.ObjectPrx
{
    default int elif(int _else)
    {
        return elif(_else, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int elif(int _else, java.util.Map<String, String> context)
    {
        return _iceI_elifAsync(_else, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> elifAsync(int _else)
    {
        return _iceI_elifAsync(_else, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> elifAsync(int _else, java.util.Map<String, String> context)
    {
        return _iceI_elifAsync(_else, context, false);
    }

    /**
     * @hidden
     * @param iceP_else -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_elifAsync(int iceP_else, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "elif", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_else);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link delPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static delPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _delPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static delPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static delPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _delPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static delPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static delPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static delPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _delPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static delPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _delPrxI(obj.ice_facet(facet));
    }

    @Override
    delPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    delPrx ice_adapterId(String newAdapterId);

    @Override
    delPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    delPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    delPrx ice_invocationTimeout(int newTimeout);

    @Override
    delPrx ice_connectionCached(boolean newCache);

    @Override
    delPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    delPrx ice_secure(boolean b);

    @Override
    delPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    delPrx ice_preferSecure(boolean b);

    @Override
    delPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    delPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    delPrx ice_collocationOptimized(boolean b);

    @Override
    delPrx ice_twoway();

    @Override
    delPrx ice_oneway();

    @Override
    delPrx ice_batchOneway();

    @Override
    delPrx ice_datagram();

    @Override
    delPrx ice_batchDatagram();

    @Override
    delPrx ice_compress(boolean co);

    @Override
    delPrx ice_connectionId(String connectionId);

    @Override
    delPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::and::del";
    }

    /**
     * @hidden
     **/
    @Override
    default delPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _delPrxI(ref);
    }
}
