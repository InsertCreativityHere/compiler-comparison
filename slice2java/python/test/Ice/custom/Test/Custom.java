//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Custom extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByteString1.
     **/
    public static class OpByteString1Result
    {
        /**
         * Default constructor.
         **/
        public OpByteString1Result()
        {
        }

        public OpByteString1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteString2.
     **/
    public static class OpByteString2Result
    {
        /**
         * Default constructor.
         **/
        public OpByteString2Result()
        {
        }

        public OpByteString2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteList1.
     **/
    public static class OpByteList1Result
    {
        /**
         * Default constructor.
         **/
        public OpByteList1Result()
        {
        }

        public OpByteList1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteList2.
     **/
    public static class OpByteList2Result
    {
        /**
         * Default constructor.
         **/
        public OpByteList2Result()
        {
        }

        public OpByteList2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opStringList1.
     **/
    public static class OpStringList1Result
    {
        /**
         * Default constructor.
         **/
        public OpStringList1Result()
        {
        }

        public OpStringList1Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringList2.
     **/
    public static class OpStringList2Result
    {
        /**
         * Default constructor.
         **/
        public OpStringList2Result()
        {
        }

        public OpStringList2Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringTuple1.
     **/
    public static class OpStringTuple1Result
    {
        /**
         * Default constructor.
         **/
        public OpStringTuple1Result()
        {
        }

        public OpStringTuple1Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringTuple2.
     **/
    public static class OpStringTuple2Result
    {
        /**
         * Default constructor.
         **/
        public OpStringTuple2Result()
        {
        }

        public OpStringTuple2Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public boolean[] returnValue;
        public boolean[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.v2);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(byte[] returnValue, byte[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public byte[] returnValue;
        public byte[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.v2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(short[] returnValue, short[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public short[] returnValue;
        public short[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.v2);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(int[] returnValue, int[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public int[] returnValue;
        public int[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.v2);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(long[] returnValue, long[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public long[] returnValue;
        public long[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.v2);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(float[] returnValue, float[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public float[] returnValue;
        public float[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.v2);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(double[] returnValue, double[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public double[] returnValue;
        public double[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.v2);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    Custom.OpByteString1Result opByteString1(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteString2Result opByteString2(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteList1Result opByteList1(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteList2Result opByteList2(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpStringList1Result opStringList1(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringList2Result opStringList2(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringTuple1Result opStringTuple1(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringTuple2Result opStringTuple2(String[] s1, com.zeroc.Ice.Current current);

    void sendS(S val, com.zeroc.Ice.Current current);

    void sendC(C val, com.zeroc.Ice.Current current);

    Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, com.zeroc.Ice.Current current);

    Custom.OpByteSeqResult opByteSeq(byte[] v1, com.zeroc.Ice.Current current);

    Custom.OpShortSeqResult opShortSeq(short[] v1, com.zeroc.Ice.Current current);

    Custom.OpIntSeqResult opIntSeq(int[] v1, com.zeroc.Ice.Current current);

    Custom.OpLongSeqResult opLongSeq(long[] v1, com.zeroc.Ice.Current current);

    Custom.OpFloatSeqResult opFloatSeq(float[] v1, com.zeroc.Ice.Current current);

    Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNotExistsFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayThrowFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayType(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNoneFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArraySignatureFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNoCallableFactory(com.zeroc.Ice.Current current);

    D opD(D d, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Custom"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Custom";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteString1(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteString1Result ret = obj.opByteString1(iceP_b1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteString2(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteString2Result ret = obj.opByteString2(iceP_b1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteList1(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteList1Result ret = obj.opByteList1(iceP_b1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteList2(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteList2Result ret = obj.opByteList2(iceP_b1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringList1(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        istr.endEncapsulation();
        Custom.OpStringList1Result ret = obj.opStringList1(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringList2(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        istr.endEncapsulation();
        Custom.OpStringList2Result ret = obj.opStringList2(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringTuple1(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        istr.endEncapsulation();
        Custom.OpStringTuple1Result ret = obj.opStringTuple1(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringTuple2(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        istr.endEncapsulation();
        Custom.OpStringTuple2Result ret = obj.opStringTuple2(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sendS(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S iceP_val;
        iceP_val = S.ice_read(istr);
        istr.endEncapsulation();
        obj.sendS(iceP_val, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sendC(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<C> icePP_val = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_val.value = v, C.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        C iceP_val = icePP_val.value;
        obj.sendC(iceP_val, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_v1;
        iceP_v1 = istr.readBoolSeq();
        istr.endEncapsulation();
        Custom.OpBoolSeqResult ret = obj.opBoolSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteSeqResult ret = obj.opByteSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_v1;
        iceP_v1 = istr.readShortSeq();
        istr.endEncapsulation();
        Custom.OpShortSeqResult ret = obj.opShortSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_v1;
        iceP_v1 = istr.readIntSeq();
        istr.endEncapsulation();
        Custom.OpIntSeqResult ret = obj.opIntSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_v1;
        iceP_v1 = istr.readLongSeq();
        istr.endEncapsulation();
        Custom.OpLongSeqResult ret = obj.opLongSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_v1;
        iceP_v1 = istr.readFloatSeq();
        istr.endEncapsulation();
        Custom.OpFloatSeqResult ret = obj.opFloatSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_v1;
        iceP_v1 = istr.readDoubleSeq();
        istr.endEncapsulation();
        Custom.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArrayNotExistsFactory(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArrayNotExistsFactory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArrayThrowFactory(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArrayThrowFactory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArrayType(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArrayType(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArrayNoneFactory(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArrayNoneFactory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArraySignatureFactory(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArraySignatureFactory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusArrayNoCallableFactory(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusArrayNoCallableFactory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opD(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<D> icePP_d = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_d.value = v, D.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        D iceP_d = icePP_d.value;
        D ret = obj.opD(iceP_d, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeValue(ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opByteString1" -> Custom._iceD_opByteString1(this, request);
            case "opByteString2" -> Custom._iceD_opByteString2(this, request);
            case "opByteList1" -> Custom._iceD_opByteList1(this, request);
            case "opByteList2" -> Custom._iceD_opByteList2(this, request);
            case "opStringList1" -> Custom._iceD_opStringList1(this, request);
            case "opStringList2" -> Custom._iceD_opStringList2(this, request);
            case "opStringTuple1" -> Custom._iceD_opStringTuple1(this, request);
            case "opStringTuple2" -> Custom._iceD_opStringTuple2(this, request);
            case "sendS" -> Custom._iceD_sendS(this, request);
            case "sendC" -> Custom._iceD_sendC(this, request);
            case "opBoolSeq" -> Custom._iceD_opBoolSeq(this, request);
            case "opByteSeq" -> Custom._iceD_opByteSeq(this, request);
            case "opShortSeq" -> Custom._iceD_opShortSeq(this, request);
            case "opIntSeq" -> Custom._iceD_opIntSeq(this, request);
            case "opLongSeq" -> Custom._iceD_opLongSeq(this, request);
            case "opFloatSeq" -> Custom._iceD_opFloatSeq(this, request);
            case "opDoubleSeq" -> Custom._iceD_opDoubleSeq(this, request);
            case "opBogusArrayNotExistsFactory" -> Custom._iceD_opBogusArrayNotExistsFactory(this, request);
            case "opBogusArrayThrowFactory" -> Custom._iceD_opBogusArrayThrowFactory(this, request);
            case "opBogusArrayType" -> Custom._iceD_opBogusArrayType(this, request);
            case "opBogusArrayNoneFactory" -> Custom._iceD_opBogusArrayNoneFactory(this, request);
            case "opBogusArraySignatureFactory" -> Custom._iceD_opBogusArraySignatureFactory(this, request);
            case "opBogusArrayNoCallableFactory" -> Custom._iceD_opBogusArrayNoCallableFactory(this, request);
            case "opD" -> Custom._iceD_opD(this, request);
            case "shutdown" -> Custom._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
