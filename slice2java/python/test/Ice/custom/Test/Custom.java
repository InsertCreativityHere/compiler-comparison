//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Custom extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByteString1.
     **/
    public static class OpByteString1Result
    {
        /**
         * Default constructor.
         **/
        public OpByteString1Result()
        {
        }

        public OpByteString1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteString2.
     **/
    public static class OpByteString2Result
    {
        /**
         * Default constructor.
         **/
        public OpByteString2Result()
        {
        }

        public OpByteString2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteList1.
     **/
    public static class OpByteList1Result
    {
        /**
         * Default constructor.
         **/
        public OpByteList1Result()
        {
        }

        public OpByteList1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteList2.
     **/
    public static class OpByteList2Result
    {
        /**
         * Default constructor.
         **/
        public OpByteList2Result()
        {
        }

        public OpByteList2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.b2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opStringList1.
     **/
    public static class OpStringList1Result
    {
        /**
         * Default constructor.
         **/
        public OpStringList1Result()
        {
        }

        public OpStringList1Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringList2.
     **/
    public static class OpStringList2Result
    {
        /**
         * Default constructor.
         **/
        public OpStringList2Result()
        {
        }

        public OpStringList2Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringTuple1.
     **/
    public static class OpStringTuple1Result
    {
        /**
         * Default constructor.
         **/
        public OpStringTuple1Result()
        {
        }

        public OpStringTuple1Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringTuple2.
     **/
    public static class OpStringTuple2Result
    {
        /**
         * Default constructor.
         **/
        public OpStringTuple2Result()
        {
        }

        public OpStringTuple2Result(String[] returnValue, String[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String[] returnValue;
        public String[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.s2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public boolean[] returnValue;
        public boolean[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.v2);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(byte[] returnValue, byte[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public byte[] returnValue;
        public byte[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.v2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(short[] returnValue, short[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public short[] returnValue;
        public short[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.v2);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(int[] returnValue, int[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public int[] returnValue;
        public int[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.v2);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(long[] returnValue, long[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public long[] returnValue;
        public long[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.v2);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(float[] returnValue, float[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public float[] returnValue;
        public float[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.v2);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(double[] returnValue, double[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public double[] returnValue;
        public double[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.v2);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    Custom.OpByteString1Result opByteString1(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteString2Result opByteString2(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteList1Result opByteList1(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpByteList2Result opByteList2(byte[] b1, com.zeroc.Ice.Current current);

    Custom.OpStringList1Result opStringList1(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringList2Result opStringList2(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringTuple1Result opStringTuple1(String[] s1, com.zeroc.Ice.Current current);

    Custom.OpStringTuple2Result opStringTuple2(String[] s1, com.zeroc.Ice.Current current);

    void sendS(S val, com.zeroc.Ice.Current current);

    void sendC(C val, com.zeroc.Ice.Current current);

    Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, com.zeroc.Ice.Current current);

    Custom.OpByteSeqResult opByteSeq(byte[] v1, com.zeroc.Ice.Current current);

    Custom.OpShortSeqResult opShortSeq(short[] v1, com.zeroc.Ice.Current current);

    Custom.OpIntSeqResult opIntSeq(int[] v1, com.zeroc.Ice.Current current);

    Custom.OpLongSeqResult opLongSeq(long[] v1, com.zeroc.Ice.Current current);

    Custom.OpFloatSeqResult opFloatSeq(float[] v1, com.zeroc.Ice.Current current);

    Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNotExistsFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayThrowFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayType(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNoneFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArraySignatureFactory(com.zeroc.Ice.Current current);

    boolean[] opBogusArrayNoCallableFactory(com.zeroc.Ice.Current current);

    D opD(D d, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Custom"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Custom";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteString1(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteString1Result ret = obj.opByteString1(iceP_b1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteString2(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteString2Result ret = obj.opByteString2(iceP_b1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteList1(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteList1Result ret = obj.opByteList1(iceP_b1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteList2(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_b1;
        iceP_b1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteList2Result ret = obj.opByteList2(iceP_b1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringList1(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        inS.endReadParams();
        Custom.OpStringList1Result ret = obj.opStringList1(iceP_s1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringList2(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        inS.endReadParams();
        Custom.OpStringList2Result ret = obj.opStringList2(iceP_s1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringTuple1(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        inS.endReadParams();
        Custom.OpStringTuple1Result ret = obj.opStringTuple1(iceP_s1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringTuple2(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_s1;
        iceP_s1 = istr.readStringSeq();
        inS.endReadParams();
        Custom.OpStringTuple2Result ret = obj.opStringTuple2(iceP_s1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendS(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S iceP_val;
        iceP_val = S.ice_read(istr);
        inS.endReadParams();
        obj.sendS(iceP_val, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendC(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<C> icePP_val = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_val.value = v, C.class);
        istr.readPendingValues();
        inS.endReadParams();
        C iceP_val = icePP_val.value;
        obj.sendC(iceP_val, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_v1;
        iceP_v1 = istr.readBoolSeq();
        inS.endReadParams();
        Custom.OpBoolSeqResult ret = obj.opBoolSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteSeqResult ret = obj.opByteSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_v1;
        iceP_v1 = istr.readShortSeq();
        inS.endReadParams();
        Custom.OpShortSeqResult ret = obj.opShortSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_v1;
        iceP_v1 = istr.readIntSeq();
        inS.endReadParams();
        Custom.OpIntSeqResult ret = obj.opIntSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_v1;
        iceP_v1 = istr.readLongSeq();
        inS.endReadParams();
        Custom.OpLongSeqResult ret = obj.opLongSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_v1;
        iceP_v1 = istr.readFloatSeq();
        inS.endReadParams();
        Custom.OpFloatSeqResult ret = obj.opFloatSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_v1;
        iceP_v1 = istr.readDoubleSeq();
        inS.endReadParams();
        Custom.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArrayNotExistsFactory(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArrayNotExistsFactory(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArrayThrowFactory(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArrayThrowFactory(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArrayType(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArrayType(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArrayNoneFactory(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArrayNoneFactory(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArraySignatureFactory(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArraySignatureFactory(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusArrayNoCallableFactory(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusArrayNoCallableFactory(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opD(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<D> icePP_d = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_d.value = v, D.class);
        istr.readPendingValues();
        inS.endReadParams();
        D iceP_d = icePP_d.value;
        D ret = obj.opD(iceP_d, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBogusArrayNoCallableFactory",
        "opBogusArrayNoneFactory",
        "opBogusArrayNotExistsFactory",
        "opBogusArraySignatureFactory",
        "opBogusArrayThrowFactory",
        "opBogusArrayType",
        "opBoolSeq",
        "opByteList1",
        "opByteList2",
        "opByteSeq",
        "opByteString1",
        "opByteString2",
        "opD",
        "opDoubleSeq",
        "opFloatSeq",
        "opIntSeq",
        "opLongSeq",
        "opShortSeq",
        "opStringList1",
        "opStringList2",
        "opStringTuple1",
        "opStringTuple2",
        "sendC",
        "sendS",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opBogusArrayNoCallableFactory(this, in, current);
            }
            case 5:
            {
                return _iceD_opBogusArrayNoneFactory(this, in, current);
            }
            case 6:
            {
                return _iceD_opBogusArrayNotExistsFactory(this, in, current);
            }
            case 7:
            {
                return _iceD_opBogusArraySignatureFactory(this, in, current);
            }
            case 8:
            {
                return _iceD_opBogusArrayThrowFactory(this, in, current);
            }
            case 9:
            {
                return _iceD_opBogusArrayType(this, in, current);
            }
            case 10:
            {
                return _iceD_opBoolSeq(this, in, current);
            }
            case 11:
            {
                return _iceD_opByteList1(this, in, current);
            }
            case 12:
            {
                return _iceD_opByteList2(this, in, current);
            }
            case 13:
            {
                return _iceD_opByteSeq(this, in, current);
            }
            case 14:
            {
                return _iceD_opByteString1(this, in, current);
            }
            case 15:
            {
                return _iceD_opByteString2(this, in, current);
            }
            case 16:
            {
                return _iceD_opD(this, in, current);
            }
            case 17:
            {
                return _iceD_opDoubleSeq(this, in, current);
            }
            case 18:
            {
                return _iceD_opFloatSeq(this, in, current);
            }
            case 19:
            {
                return _iceD_opIntSeq(this, in, current);
            }
            case 20:
            {
                return _iceD_opLongSeq(this, in, current);
            }
            case 21:
            {
                return _iceD_opShortSeq(this, in, current);
            }
            case 22:
            {
                return _iceD_opStringList1(this, in, current);
            }
            case 23:
            {
                return _iceD_opStringList2(this, in, current);
            }
            case 24:
            {
                return _iceD_opStringTuple1(this, in, current);
            }
            case 25:
            {
                return _iceD_opStringTuple2(this, in, current);
            }
            case 26:
            {
                return _iceD_sendC(this, in, current);
            }
            case 27:
            {
                return _iceD_sendS(this, in, current);
            }
            case 28:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
