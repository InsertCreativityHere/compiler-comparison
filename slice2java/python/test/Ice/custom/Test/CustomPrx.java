//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface CustomPrx extends com.zeroc.Ice.ObjectPrx
{
    default Custom.OpByteString1Result opByteString1(byte[] b1)
    {
        return opByteString1(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteString1Result opByteString1(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteString1Async(b1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteString1Result> opByteString1Async(byte[] b1)
    {
        return _iceI_opByteString1Async(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteString1Result> opByteString1Async(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteString1Async(b1, context, false);
    }

    /**
     * @hidden
     * @param iceP_b1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteString1Result> _iceI_opByteString1Async(byte[] iceP_b1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteString1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteString1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_b1);
                 }, istr -> {
                     Custom.OpByteString1Result ret = new Custom.OpByteString1Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpByteString2Result opByteString2(byte[] b1)
    {
        return opByteString2(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteString2Result opByteString2(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteString2Async(b1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteString2Result> opByteString2Async(byte[] b1)
    {
        return _iceI_opByteString2Async(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteString2Result> opByteString2Async(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteString2Async(b1, context, false);
    }

    /**
     * @hidden
     * @param iceP_b1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteString2Result> _iceI_opByteString2Async(byte[] iceP_b1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteString2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteString2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_b1);
                 }, istr -> {
                     Custom.OpByteString2Result ret = new Custom.OpByteString2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpByteList1Result opByteList1(byte[] b1)
    {
        return opByteList1(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteList1Result opByteList1(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteList1Async(b1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteList1Result> opByteList1Async(byte[] b1)
    {
        return _iceI_opByteList1Async(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteList1Result> opByteList1Async(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteList1Async(b1, context, false);
    }

    /**
     * @hidden
     * @param iceP_b1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteList1Result> _iceI_opByteList1Async(byte[] iceP_b1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteList1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteList1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_b1);
                 }, istr -> {
                     Custom.OpByteList1Result ret = new Custom.OpByteList1Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpByteList2Result opByteList2(byte[] b1)
    {
        return opByteList2(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteList2Result opByteList2(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteList2Async(b1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteList2Result> opByteList2Async(byte[] b1)
    {
        return _iceI_opByteList2Async(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteList2Result> opByteList2Async(byte[] b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteList2Async(b1, context, false);
    }

    /**
     * @hidden
     * @param iceP_b1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteList2Result> _iceI_opByteList2Async(byte[] iceP_b1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteList2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteList2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_b1);
                 }, istr -> {
                     Custom.OpByteList2Result ret = new Custom.OpByteList2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpStringList1Result opStringList1(String[] s1)
    {
        return opStringList1(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpStringList1Result opStringList1(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringList1Async(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringList1Result> opStringList1Async(String[] s1)
    {
        return _iceI_opStringList1Async(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringList1Result> opStringList1Async(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringList1Async(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringList1Result> _iceI_opStringList1Async(String[] iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringList1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringList1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_s1);
                 }, istr -> {
                     Custom.OpStringList1Result ret = new Custom.OpStringList1Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpStringList2Result opStringList2(String[] s1)
    {
        return opStringList2(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpStringList2Result opStringList2(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringList2Async(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringList2Result> opStringList2Async(String[] s1)
    {
        return _iceI_opStringList2Async(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringList2Result> opStringList2Async(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringList2Async(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringList2Result> _iceI_opStringList2Async(String[] iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringList2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringList2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_s1);
                 }, istr -> {
                     Custom.OpStringList2Result ret = new Custom.OpStringList2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpStringTuple1Result opStringTuple1(String[] s1)
    {
        return opStringTuple1(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpStringTuple1Result opStringTuple1(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringTuple1Async(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringTuple1Result> opStringTuple1Async(String[] s1)
    {
        return _iceI_opStringTuple1Async(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringTuple1Result> opStringTuple1Async(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringTuple1Async(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringTuple1Result> _iceI_opStringTuple1Async(String[] iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringTuple1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringTuple1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_s1);
                 }, istr -> {
                     Custom.OpStringTuple1Result ret = new Custom.OpStringTuple1Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpStringTuple2Result opStringTuple2(String[] s1)
    {
        return opStringTuple2(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpStringTuple2Result opStringTuple2(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringTuple2Async(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringTuple2Result> opStringTuple2Async(String[] s1)
    {
        return _iceI_opStringTuple2Async(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpStringTuple2Result> opStringTuple2Async(String[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opStringTuple2Async(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringTuple2Result> _iceI_opStringTuple2Async(String[] iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpStringTuple2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringTuple2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_s1);
                 }, istr -> {
                     Custom.OpStringTuple2Result ret = new Custom.OpStringTuple2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default void sendS(S val)
    {
        sendS(val, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sendS(S val, java.util.Map<String, String> context)
    {
        _iceI_sendSAsync(val, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sendSAsync(S val)
    {
        return _iceI_sendSAsync(val, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sendSAsync(S val, java.util.Map<String, String> context)
    {
        return _iceI_sendSAsync(val, context, false);
    }

    /**
     * @hidden
     * @param iceP_val -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendSAsync(S iceP_val, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sendS", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     S.ice_write(ostr, iceP_val);
                 }, null);
        return f;
    }

    default void sendC(C val)
    {
        sendC(val, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sendC(C val, java.util.Map<String, String> context)
    {
        _iceI_sendCAsync(val, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sendCAsync(C val)
    {
        return _iceI_sendCAsync(val, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sendCAsync(C val, java.util.Map<String, String> context)
    {
        return _iceI_sendCAsync(val, context, false);
    }

    /**
     * @hidden
     * @param iceP_val -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendCAsync(C iceP_val, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sendC", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeValue(iceP_val);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default Custom.OpBoolSeqResult opBoolSeq(boolean[] v1)
    {
        return opBoolSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpBoolSeqResult> opBoolSeqAsync(boolean[] v1)
    {
        return _iceI_opBoolSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpBoolSeqResult> opBoolSeqAsync(boolean[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpBoolSeqResult> _iceI_opBoolSeqAsync(boolean[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpBoolSeqResult ret = new Custom.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpByteSeqResult opByteSeq(byte[] v1)
    {
        return opByteSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteSeqResult opByteSeq(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteSeqResult> opByteSeqAsync(byte[] v1)
    {
        return _iceI_opByteSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteSeqResult> opByteSeqAsync(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpByteSeqResult ret = new Custom.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpShortSeqResult opShortSeq(short[] v1)
    {
        return opShortSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpShortSeqResult opShortSeq(short[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpShortSeqResult> opShortSeqAsync(short[] v1)
    {
        return _iceI_opShortSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpShortSeqResult> opShortSeqAsync(short[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpShortSeqResult ret = new Custom.OpShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpIntSeqResult opIntSeq(int[] v1)
    {
        return opIntSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpIntSeqResult opIntSeq(int[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpIntSeqResult> opIntSeqAsync(int[] v1)
    {
        return _iceI_opIntSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpIntSeqResult> opIntSeqAsync(int[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpIntSeqResult ret = new Custom.OpIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpLongSeqResult opLongSeq(long[] v1)
    {
        return opLongSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpLongSeqResult opLongSeq(long[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpLongSeqResult> opLongSeqAsync(long[] v1)
    {
        return _iceI_opLongSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpLongSeqResult> opLongSeqAsync(long[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpLongSeqResult ret = new Custom.OpLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpFloatSeqResult opFloatSeq(float[] v1)
    {
        return opFloatSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpFloatSeqResult opFloatSeq(float[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpFloatSeqResult> opFloatSeqAsync(float[] v1)
    {
        return _iceI_opFloatSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpFloatSeqResult> opFloatSeqAsync(float[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpFloatSeqResult ret = new Custom.OpFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpDoubleSeqResult opDoubleSeq(double[] v1)
    {
        return opDoubleSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpDoubleSeqResult> opDoubleSeqAsync(double[] v1)
    {
        return _iceI_opDoubleSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleSeq", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpDoubleSeqResult ret = new Custom.OpDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArrayNotExistsFactory()
    {
        return opBogusArrayNotExistsFactory(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArrayNotExistsFactory(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNotExistsFactoryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNotExistsFactoryAsync()
    {
        return _iceI_opBogusArrayNotExistsFactoryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNotExistsFactoryAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNotExistsFactoryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArrayNotExistsFactoryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArrayNotExistsFactory", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArrayThrowFactory()
    {
        return opBogusArrayThrowFactory(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArrayThrowFactory(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayThrowFactoryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayThrowFactoryAsync()
    {
        return _iceI_opBogusArrayThrowFactoryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayThrowFactoryAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayThrowFactoryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArrayThrowFactoryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArrayThrowFactory", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArrayType()
    {
        return opBogusArrayType(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArrayType(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayTypeAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayTypeAsync()
    {
        return _iceI_opBogusArrayTypeAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayTypeAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayTypeAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArrayTypeAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArrayType", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArrayNoneFactory()
    {
        return opBogusArrayNoneFactory(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArrayNoneFactory(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNoneFactoryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNoneFactoryAsync()
    {
        return _iceI_opBogusArrayNoneFactoryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNoneFactoryAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNoneFactoryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArrayNoneFactoryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArrayNoneFactory", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArraySignatureFactory()
    {
        return opBogusArraySignatureFactory(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArraySignatureFactory(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArraySignatureFactoryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArraySignatureFactoryAsync()
    {
        return _iceI_opBogusArraySignatureFactoryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArraySignatureFactoryAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArraySignatureFactoryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArraySignatureFactoryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArraySignatureFactory", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusArrayNoCallableFactory()
    {
        return opBogusArrayNoCallableFactory(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusArrayNoCallableFactory(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNoCallableFactoryAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNoCallableFactoryAsync()
    {
        return _iceI_opBogusArrayNoCallableFactoryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusArrayNoCallableFactoryAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusArrayNoCallableFactoryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusArrayNoCallableFactoryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusArrayNoCallableFactory", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default D opD(D d)
    {
        return opD(d, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default D opD(D d, java.util.Map<String, String> context)
    {
        return _iceI_opDAsync(d, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<D> opDAsync(D d)
    {
        return _iceI_opDAsync(d, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<D> opDAsync(D d, java.util.Map<String, String> context)
    {
        return _iceI_opDAsync(d, context, false);
    }

    /**
     * @hidden
     * @param iceP_d -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<D> _iceI_opDAsync(D iceP_d, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<D> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeValue(iceP_d);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<D> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, D.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link CustomPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static CustomPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _CustomPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _CustomPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static CustomPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _CustomPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static CustomPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _CustomPrxI(obj.ice_facet(facet));
    }

    @Override
    CustomPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    CustomPrx ice_adapterId(String newAdapterId);

    @Override
    CustomPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    CustomPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    CustomPrx ice_invocationTimeout(int newTimeout);

    @Override
    CustomPrx ice_connectionCached(boolean newCache);

    @Override
    CustomPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    CustomPrx ice_secure(boolean b);

    @Override
    CustomPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    CustomPrx ice_preferSecure(boolean b);

    @Override
    CustomPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    CustomPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    CustomPrx ice_collocationOptimized(boolean b);

    @Override
    CustomPrx ice_twoway();

    @Override
    CustomPrx ice_oneway();

    @Override
    CustomPrx ice_batchOneway();

    @Override
    CustomPrx ice_datagram();

    @Override
    CustomPrx ice_batchDatagram();

    @Override
    CustomPrx ice_compress(boolean co);

    @Override
    CustomPrx ice_connectionId(String connectionId);

    @Override
    CustomPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Custom";
    }

    /**
     * @hidden
     **/
    @Override
    default CustomPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _CustomPrxI(ref);
    }
}
