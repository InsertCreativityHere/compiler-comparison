//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.NumPy;

public interface Custom extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public boolean[] returnValue;
        public boolean[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.v2);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(byte[] returnValue, byte[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public byte[] returnValue;
        public byte[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.v2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(short[] returnValue, short[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public short[] returnValue;
        public short[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.v2);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(int[] returnValue, int[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public int[] returnValue;
        public int[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.v2);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(long[] returnValue, long[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public long[] returnValue;
        public long[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.v2);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(float[] returnValue, float[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public float[] returnValue;
        public float[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.v2);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(double[] returnValue, double[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public double[] returnValue;
        public double[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.v2);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, com.zeroc.Ice.Current current);

    Custom.OpByteSeqResult opByteSeq(byte[] v1, com.zeroc.Ice.Current current);

    Custom.OpShortSeqResult opShortSeq(short[] v1, com.zeroc.Ice.Current current);

    Custom.OpIntSeqResult opIntSeq(int[] v1, com.zeroc.Ice.Current current);

    Custom.OpLongSeqResult opLongSeq(long[] v1, com.zeroc.Ice.Current current);

    Custom.OpFloatSeqResult opFloatSeq(float[] v1, com.zeroc.Ice.Current current);

    Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, com.zeroc.Ice.Current current);

    byte[] opComplex128Seq(byte[] v1, com.zeroc.Ice.Current current);

    boolean[] opBoolMatrix(com.zeroc.Ice.Current current);

    byte[] opByteMatrix(com.zeroc.Ice.Current current);

    short[] opShortMatrix(com.zeroc.Ice.Current current);

    int[] opIntMatrix(com.zeroc.Ice.Current current);

    long[] opLongMatrix(com.zeroc.Ice.Current current);

    float[] opFloatMatrix(com.zeroc.Ice.Current current);

    double[] opDoubleMatrix(com.zeroc.Ice.Current current);

    boolean[] opBogusNumpyArrayType(com.zeroc.Ice.Current current);

    D opD(D d, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::NumPy::Custom"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::NumPy::Custom";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_v1;
        iceP_v1 = istr.readBoolSeq();
        inS.endReadParams();
        Custom.OpBoolSeqResult ret = obj.opBoolSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        inS.endReadParams();
        Custom.OpByteSeqResult ret = obj.opByteSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_v1;
        iceP_v1 = istr.readShortSeq();
        inS.endReadParams();
        Custom.OpShortSeqResult ret = obj.opShortSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_v1;
        iceP_v1 = istr.readIntSeq();
        inS.endReadParams();
        Custom.OpIntSeqResult ret = obj.opIntSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_v1;
        iceP_v1 = istr.readLongSeq();
        inS.endReadParams();
        Custom.OpLongSeqResult ret = obj.opLongSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_v1;
        iceP_v1 = istr.readFloatSeq();
        inS.endReadParams();
        Custom.OpFloatSeqResult ret = obj.opFloatSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleSeq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_v1;
        iceP_v1 = istr.readDoubleSeq();
        inS.endReadParams();
        Custom.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opComplex128Seq(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        inS.endReadParams();
        byte[] ret = obj.opComplex128Seq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBoolMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        byte[] ret = obj.opByteMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        short[] ret = obj.opShortMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShortSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int[] ret = obj.opIntMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeIntSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        long[] ret = obj.opLongMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLongSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float[] ret = obj.opFloatMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloatSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleMatrix(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        double[] ret = obj.opDoubleMatrix(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDoubleSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBogusNumpyArrayType(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.opBogusNumpyArrayType(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opD(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<D> icePP_d = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_d.value = v, D.class);
        istr.readPendingValues();
        inS.endReadParams();
        D iceP_d = icePP_d.value;
        D ret = obj.opD(iceP_d, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(Custom obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBogusNumpyArrayType",
        "opBoolMatrix",
        "opBoolSeq",
        "opByteMatrix",
        "opByteSeq",
        "opComplex128Seq",
        "opD",
        "opDoubleMatrix",
        "opDoubleSeq",
        "opFloatMatrix",
        "opFloatSeq",
        "opIntMatrix",
        "opIntSeq",
        "opLongMatrix",
        "opLongSeq",
        "opShortMatrix",
        "opShortSeq",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opBogusNumpyArrayType(this, in, current);
            }
            case 5:
            {
                return _iceD_opBoolMatrix(this, in, current);
            }
            case 6:
            {
                return _iceD_opBoolSeq(this, in, current);
            }
            case 7:
            {
                return _iceD_opByteMatrix(this, in, current);
            }
            case 8:
            {
                return _iceD_opByteSeq(this, in, current);
            }
            case 9:
            {
                return _iceD_opComplex128Seq(this, in, current);
            }
            case 10:
            {
                return _iceD_opD(this, in, current);
            }
            case 11:
            {
                return _iceD_opDoubleMatrix(this, in, current);
            }
            case 12:
            {
                return _iceD_opDoubleSeq(this, in, current);
            }
            case 13:
            {
                return _iceD_opFloatMatrix(this, in, current);
            }
            case 14:
            {
                return _iceD_opFloatSeq(this, in, current);
            }
            case 15:
            {
                return _iceD_opIntMatrix(this, in, current);
            }
            case 16:
            {
                return _iceD_opIntSeq(this, in, current);
            }
            case 17:
            {
                return _iceD_opLongMatrix(this, in, current);
            }
            case 18:
            {
                return _iceD_opLongSeq(this, in, current);
            }
            case 19:
            {
                return _iceD_opShortMatrix(this, in, current);
            }
            case 20:
            {
                return _iceD_opShortSeq(this, in, current);
            }
            case 21:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
