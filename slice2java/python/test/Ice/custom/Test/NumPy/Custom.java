//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.NumPy;

public interface Custom extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public boolean[] returnValue;
        public boolean[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.v2);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(byte[] returnValue, byte[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public byte[] returnValue;
        public byte[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.v2);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(short[] returnValue, short[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public short[] returnValue;
        public short[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.v2);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(int[] returnValue, int[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public int[] returnValue;
        public int[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.v2);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(long[] returnValue, long[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public long[] returnValue;
        public long[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.v2);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(float[] returnValue, float[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public float[] returnValue;
        public float[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.v2);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(double[] returnValue, double[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public double[] returnValue;
        public double[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.v2);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, com.zeroc.Ice.Current current);

    Custom.OpByteSeqResult opByteSeq(byte[] v1, com.zeroc.Ice.Current current);

    Custom.OpShortSeqResult opShortSeq(short[] v1, com.zeroc.Ice.Current current);

    Custom.OpIntSeqResult opIntSeq(int[] v1, com.zeroc.Ice.Current current);

    Custom.OpLongSeqResult opLongSeq(long[] v1, com.zeroc.Ice.Current current);

    Custom.OpFloatSeqResult opFloatSeq(float[] v1, com.zeroc.Ice.Current current);

    Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, com.zeroc.Ice.Current current);

    byte[] opComplex128Seq(byte[] v1, com.zeroc.Ice.Current current);

    boolean[] opBoolMatrix(com.zeroc.Ice.Current current);

    byte[] opByteMatrix(com.zeroc.Ice.Current current);

    short[] opShortMatrix(com.zeroc.Ice.Current current);

    int[] opIntMatrix(com.zeroc.Ice.Current current);

    long[] opLongMatrix(com.zeroc.Ice.Current current);

    float[] opFloatMatrix(com.zeroc.Ice.Current current);

    double[] opDoubleMatrix(com.zeroc.Ice.Current current);

    boolean[] opBogusNumpyArrayType(com.zeroc.Ice.Current current);

    D opD(D d, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::NumPy::Custom"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::NumPy::Custom";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_v1;
        iceP_v1 = istr.readBoolSeq();
        istr.endEncapsulation();
        Custom.OpBoolSeqResult ret = obj.opBoolSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        istr.endEncapsulation();
        Custom.OpByteSeqResult ret = obj.opByteSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_v1;
        iceP_v1 = istr.readShortSeq();
        istr.endEncapsulation();
        Custom.OpShortSeqResult ret = obj.opShortSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_v1;
        iceP_v1 = istr.readIntSeq();
        istr.endEncapsulation();
        Custom.OpIntSeqResult ret = obj.opIntSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_v1;
        iceP_v1 = istr.readLongSeq();
        istr.endEncapsulation();
        Custom.OpLongSeqResult ret = obj.opLongSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_v1;
        iceP_v1 = istr.readFloatSeq();
        istr.endEncapsulation();
        Custom.OpFloatSeqResult ret = obj.opFloatSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleSeq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_v1;
        iceP_v1 = istr.readDoubleSeq();
        istr.endEncapsulation();
        Custom.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opComplex128Seq(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_v1;
        iceP_v1 = istr.readByteSeq();
        istr.endEncapsulation();
        byte[] ret = obj.opComplex128Seq(iceP_v1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeByteSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBoolMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        byte[] ret = obj.opByteMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeByteSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        short[] ret = obj.opShortMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeShortSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        int[] ret = obj.opIntMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeIntSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        long[] ret = obj.opLongMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeLongSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        float[] ret = obj.opFloatMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeFloatSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleMatrix(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        double[] ret = obj.opDoubleMatrix(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeDoubleSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBogusNumpyArrayType(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean[] ret = obj.opBogusNumpyArrayType(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBoolSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opD(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<D> icePP_d = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_d.value = v, D.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        D iceP_d = icePP_d.value;
        D ret = obj.opD(iceP_d, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeValue(ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Custom obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opBoolSeq" -> Custom._iceD_opBoolSeq(this, request);
            case "opByteSeq" -> Custom._iceD_opByteSeq(this, request);
            case "opShortSeq" -> Custom._iceD_opShortSeq(this, request);
            case "opIntSeq" -> Custom._iceD_opIntSeq(this, request);
            case "opLongSeq" -> Custom._iceD_opLongSeq(this, request);
            case "opFloatSeq" -> Custom._iceD_opFloatSeq(this, request);
            case "opDoubleSeq" -> Custom._iceD_opDoubleSeq(this, request);
            case "opComplex128Seq" -> Custom._iceD_opComplex128Seq(this, request);
            case "opBoolMatrix" -> Custom._iceD_opBoolMatrix(this, request);
            case "opByteMatrix" -> Custom._iceD_opByteMatrix(this, request);
            case "opShortMatrix" -> Custom._iceD_opShortMatrix(this, request);
            case "opIntMatrix" -> Custom._iceD_opIntMatrix(this, request);
            case "opLongMatrix" -> Custom._iceD_opLongMatrix(this, request);
            case "opFloatMatrix" -> Custom._iceD_opFloatMatrix(this, request);
            case "opDoubleMatrix" -> Custom._iceD_opDoubleMatrix(this, request);
            case "opBogusNumpyArrayType" -> Custom._iceD_opBogusNumpyArrayType(this, request);
            case "opD" -> Custom._iceD_opD(this, request);
            case "shutdown" -> Custom._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
