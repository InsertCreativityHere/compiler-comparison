//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.NumPy;

public interface CustomPrx extends com.zeroc.Ice.ObjectPrx
{
    default Custom.OpBoolSeqResult opBoolSeq(boolean[] v1)
    {
        return opBoolSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpBoolSeqResult opBoolSeq(boolean[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpBoolSeqResult> opBoolSeqAsync(boolean[] v1)
    {
        return _iceI_opBoolSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpBoolSeqResult> opBoolSeqAsync(boolean[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpBoolSeqResult> _iceI_opBoolSeqAsync(boolean[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpBoolSeqResult ret = new Custom.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpByteSeqResult opByteSeq(byte[] v1)
    {
        return opByteSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpByteSeqResult opByteSeq(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteSeqResult> opByteSeqAsync(byte[] v1)
    {
        return _iceI_opByteSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpByteSeqResult> opByteSeqAsync(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpByteSeqResult ret = new Custom.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpShortSeqResult opShortSeq(short[] v1)
    {
        return opShortSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpShortSeqResult opShortSeq(short[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpShortSeqResult> opShortSeqAsync(short[] v1)
    {
        return _iceI_opShortSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpShortSeqResult> opShortSeqAsync(short[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpShortSeqResult ret = new Custom.OpShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpIntSeqResult opIntSeq(int[] v1)
    {
        return opIntSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpIntSeqResult opIntSeq(int[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpIntSeqResult> opIntSeqAsync(int[] v1)
    {
        return _iceI_opIntSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpIntSeqResult> opIntSeqAsync(int[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeIntSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpIntSeqResult ret = new Custom.OpIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpLongSeqResult opLongSeq(long[] v1)
    {
        return opLongSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpLongSeqResult opLongSeq(long[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpLongSeqResult> opLongSeqAsync(long[] v1)
    {
        return _iceI_opLongSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpLongSeqResult> opLongSeqAsync(long[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLongSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpLongSeqResult ret = new Custom.OpLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpFloatSeqResult opFloatSeq(float[] v1)
    {
        return opFloatSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpFloatSeqResult opFloatSeq(float[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpFloatSeqResult> opFloatSeqAsync(float[] v1)
    {
        return _iceI_opFloatSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpFloatSeqResult> opFloatSeqAsync(float[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloatSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpFloatSeqResult ret = new Custom.OpFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Custom.OpDoubleSeqResult opDoubleSeq(double[] v1)
    {
        return opDoubleSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Custom.OpDoubleSeqResult opDoubleSeq(double[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Custom.OpDoubleSeqResult> opDoubleSeqAsync(double[] v1)
    {
        return _iceI_opDoubleSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Custom.OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Custom.OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Custom.OpDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleSeq(iceP_v1);
                 }, istr -> {
                     Custom.OpDoubleSeqResult ret = new Custom.OpDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default byte[] opComplex128Seq(byte[] v1)
    {
        return opComplex128Seq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] opComplex128Seq(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opComplex128SeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> opComplex128SeqAsync(byte[] v1)
    {
        return _iceI_opComplex128SeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> opComplex128SeqAsync(byte[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opComplex128SeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_opComplex128SeqAsync(byte[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opComplex128Seq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_v1);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBoolMatrix()
    {
        return opBoolMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBoolMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opBoolMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBoolMatrixAsync()
    {
        return _iceI_opBoolMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBoolMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBoolMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBoolMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default byte[] opByteMatrix()
    {
        return opByteMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] opByteMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opByteMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> opByteMatrixAsync()
    {
        return _iceI_opByteMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> opByteMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opByteMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_opByteMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default short[] opShortMatrix()
    {
        return opShortMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short[] opShortMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opShortMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<short[]> opShortMatrixAsync()
    {
        return _iceI_opShortMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<short[]> opShortMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opShortMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<short[]> _iceI_opShortMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<short[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     short[] ret;
                     ret = istr.readShortSeq();
                     return ret;
                 });
        return f;
    }

    default int[] opIntMatrix()
    {
        return opIntMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int[] opIntMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opIntMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<int[]> opIntMatrixAsync()
    {
        return _iceI_opIntMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<int[]> opIntMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opIntMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<int[]> _iceI_opIntMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<int[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int[] ret;
                     ret = istr.readIntSeq();
                     return ret;
                 });
        return f;
    }

    default long[] opLongMatrix()
    {
        return opLongMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long[] opLongMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opLongMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<long[]> opLongMatrixAsync()
    {
        return _iceI_opLongMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<long[]> opLongMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opLongMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<long[]> _iceI_opLongMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<long[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     long[] ret;
                     ret = istr.readLongSeq();
                     return ret;
                 });
        return f;
    }

    default float[] opFloatMatrix()
    {
        return opFloatMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float[] opFloatMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opFloatMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<float[]> opFloatMatrixAsync()
    {
        return _iceI_opFloatMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<float[]> opFloatMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opFloatMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<float[]> _iceI_opFloatMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<float[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     float[] ret;
                     ret = istr.readFloatSeq();
                     return ret;
                 });
        return f;
    }

    default double[] opDoubleMatrix()
    {
        return opDoubleMatrix(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double[] opDoubleMatrix(java.util.Map<String, String> context)
    {
        return _iceI_opDoubleMatrixAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<double[]> opDoubleMatrixAsync()
    {
        return _iceI_opDoubleMatrixAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<double[]> opDoubleMatrixAsync(java.util.Map<String, String> context)
    {
        return _iceI_opDoubleMatrixAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<double[]> _iceI_opDoubleMatrixAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<double[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleMatrix", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     double[] ret;
                     ret = istr.readDoubleSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] opBogusNumpyArrayType()
    {
        return opBogusNumpyArrayType(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] opBogusNumpyArrayType(java.util.Map<String, String> context)
    {
        return _iceI_opBogusNumpyArrayTypeAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusNumpyArrayTypeAsync()
    {
        return _iceI_opBogusNumpyArrayTypeAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> opBogusNumpyArrayTypeAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBogusNumpyArrayTypeAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_opBogusNumpyArrayTypeAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBogusNumpyArrayType", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default D opD(D d)
    {
        return opD(d, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default D opD(D d, java.util.Map<String, String> context)
    {
        return _iceI_opDAsync(d, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<D> opDAsync(D d)
    {
        return _iceI_opDAsync(d, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<D> opDAsync(D d, java.util.Map<String, String> context)
    {
        return _iceI_opDAsync(d, context, false);
    }

    /**
     * @hidden
     * @param iceP_d -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<D> _iceI_opDAsync(D iceP_d, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<D> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opD", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_d);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<D> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, D.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static CustomPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static CustomPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static CustomPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, CustomPrx.class, _CustomPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default CustomPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (CustomPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default CustomPrx ice_adapterId(String newAdapterId)
    {
        return (CustomPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default CustomPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (CustomPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default CustomPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (CustomPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default CustomPrx ice_invocationTimeout(int newTimeout)
    {
        return (CustomPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default CustomPrx ice_connectionCached(boolean newCache)
    {
        return (CustomPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default CustomPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (CustomPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default CustomPrx ice_secure(boolean b)
    {
        return (CustomPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default CustomPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (CustomPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default CustomPrx ice_preferSecure(boolean b)
    {
        return (CustomPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default CustomPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (CustomPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default CustomPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (CustomPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default CustomPrx ice_collocationOptimized(boolean b)
    {
        return (CustomPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default CustomPrx ice_twoway()
    {
        return (CustomPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default CustomPrx ice_oneway()
    {
        return (CustomPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default CustomPrx ice_batchOneway()
    {
        return (CustomPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default CustomPrx ice_datagram()
    {
        return (CustomPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default CustomPrx ice_batchDatagram()
    {
        return (CustomPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default CustomPrx ice_compress(boolean co)
    {
        return (CustomPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default CustomPrx ice_timeout(int t)
    {
        return (CustomPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default CustomPrx ice_connectionId(String connectionId)
    {
        return (CustomPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default CustomPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (CustomPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::NumPy::Custom";
    }
}
