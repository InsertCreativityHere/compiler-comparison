//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Initial2 extends com.zeroc.Ice.Object
{
    void opClassAndUnknownOptional(A p, java.util.Optional<VarStruct> ovs, com.zeroc.Ice.Current current);

    void opVoid(java.util.OptionalInt a, java.util.Optional<java.lang.String> v, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Initial2"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Initial2";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opClassAndUnknownOptional(Initial2 obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<A> icePP_p = new com.zeroc.Ice.Holder<>();
        java.util.Optional<VarStruct> iceP_ovs;
        istr.readValue(v -> icePP_p.value = v, A.class);
        iceP_ovs = VarStruct.ice_read(istr, 1);
        istr.readPendingValues();
        istr.endEncapsulation();
        A iceP_p = icePP_p.value;
        obj.opClassAndUnknownOptional(iceP_p, iceP_ovs, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVoid(Initial2 obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_v;
        iceP_a = istr.readInt(1);
        iceP_v = istr.readString(2);
        istr.endEncapsulation();
        obj.opVoid(iceP_a, iceP_v, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opClassAndUnknownOptional" -> Initial2._iceD_opClassAndUnknownOptional(this, request);
            case "opVoid" -> Initial2._iceD_opVoid(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
