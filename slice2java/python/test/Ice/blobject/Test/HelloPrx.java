//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface HelloPrx extends com.zeroc.Ice.ObjectPrx
{
    default void sayHello(int delay)
    {
        sayHello(delay, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sayHello(int delay, java.util.Map<String, String> context)
    {
        _iceI_sayHelloAsync(delay, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sayHelloAsync(int delay)
    {
        return _iceI_sayHelloAsync(delay, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sayHelloAsync(int delay, java.util.Map<String, String> context)
    {
        return _iceI_sayHelloAsync(delay, context, false);
    }

    /**
     * @hidden
     * @param iceP_delay -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_sayHelloAsync(int iceP_delay, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "sayHello", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_delay);
                 }, null);
        return f;
    }

    default int add(int s1, int s2)
    {
        return add(s1, s2, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int add(int s1, int s2, java.util.Map<String, String> context)
    {
        return _iceI_addAsync(s1, s2, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> addAsync(int s1, int s2)
    {
        return _iceI_addAsync(s1, s2, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> addAsync(int s1, int s2, java.util.Map<String, String> context)
    {
        return _iceI_addAsync(s1, s2, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param iceP_s2 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_addAsync(int iceP_s1, int iceP_s2, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "add", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_s1);
                     ostr.writeInt(iceP_s2);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default void raiseUE()
        throws UE
    {
        raiseUE(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void raiseUE(java.util.Map<String, String> context)
        throws UE
    {
        try
        {
            _iceI_raiseUEAsync(context, true).waitForResponseOrUserEx();
        }
        catch(UE ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> raiseUEAsync()
    {
        return _iceI_raiseUEAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> raiseUEAsync(java.util.Map<String, String> context)
    {
        return _iceI_raiseUEAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_raiseUEAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "raiseUE", null, sync, _iceE_raiseUE);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_raiseUE =
    {
        UE.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link HelloPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static HelloPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _HelloPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _HelloPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HelloPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static HelloPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _HelloPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static HelloPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _HelloPrxI(obj.ice_facet(facet));
    }

    @Override
    HelloPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    HelloPrx ice_adapterId(String newAdapterId);

    @Override
    HelloPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    HelloPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    HelloPrx ice_invocationTimeout(int newTimeout);

    @Override
    HelloPrx ice_connectionCached(boolean newCache);

    @Override
    HelloPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    HelloPrx ice_secure(boolean b);

    @Override
    HelloPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    HelloPrx ice_preferSecure(boolean b);

    @Override
    HelloPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    HelloPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    HelloPrx ice_collocationOptimized(boolean b);

    @Override
    HelloPrx ice_twoway();

    @Override
    HelloPrx ice_oneway();

    @Override
    HelloPrx ice_batchOneway();

    @Override
    HelloPrx ice_datagram();

    @Override
    HelloPrx ice_batchDatagram();

    @Override
    HelloPrx ice_compress(boolean co);

    @Override
    HelloPrx ice_connectionId(String connectionId);

    @Override
    HelloPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Hello";
    }

    /**
     * @hidden
     **/
    @Override
    default HelloPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _HelloPrxI(ref);
    }
}
