//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface InitialPrx extends com.zeroc.Ice.ObjectPrx
{
    default Test1.C1 getTest1C2AsC1()
    {
        return getTest1C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test1.C1 getTest1C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test1.C1> getTest1C2AsC1Async()
    {
        return _iceI_getTest1C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test1.C1> getTest1C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test1.C1> _iceI_getTest1C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test1.C1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest1C2AsC1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test1.C1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test1.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Test1.C2 getTest1C2AsC2()
    {
        return getTest1C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test1.C2 getTest1C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test1.C2> getTest1C2AsC2Async()
    {
        return _iceI_getTest1C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test1.C2> getTest1C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test1.C2> _iceI_getTest1C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test1.C2> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest1C2AsC2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test1.C2> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test1.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest1E2AsE1()
        throws Test1.E1
    {
        throwTest1E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1E2AsE1(java.util.Map<String, String> context)
        throws Test1.E1
    {
        try
        {
            _iceI_throwTest1E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test1.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE1Async()
    {
        return _iceI_throwTest1E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest1E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest1E2AsE1", null, sync, _iceE_throwTest1E2AsE1);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1E2AsE1 =
    {
        Test1.E1.class
    };

    default void throwTest1E2AsE2()
        throws Test1.E2
    {
        throwTest1E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1E2AsE2(java.util.Map<String, String> context)
        throws Test1.E2
    {
        try
        {
            _iceI_throwTest1E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test1.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE2Async()
    {
        return _iceI_throwTest1E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest1E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest1E2AsE2", null, sync, _iceE_throwTest1E2AsE2);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1E2AsE2 =
    {
        Test1.E2.class
    };

    default void throwTest1Def()
        throws Test1.def
    {
        throwTest1Def(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1Def(java.util.Map<String, String> context)
        throws Test1.def
    {
        try
        {
            _iceI_throwTest1DefAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Test1.def ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1DefAsync()
    {
        return _iceI_throwTest1DefAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1DefAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1DefAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest1DefAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest1Def", null, sync, _iceE_throwTest1Def);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1Def =
    {
        Test1.def.class
    };

    default Test2.C1 getTest2C2AsC1()
    {
        return getTest2C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test2.C1 getTest2C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test2.C1> getTest2C2AsC1Async()
    {
        return _iceI_getTest2C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test2.C1> getTest2C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test2.C1> _iceI_getTest2C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test2.C1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest2C2AsC1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test2.C1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test2.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Test2.C2 getTest2C2AsC2()
    {
        return getTest2C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test2.C2 getTest2C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test2.C2> getTest2C2AsC2Async()
    {
        return _iceI_getTest2C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test2.C2> getTest2C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test2.C2> _iceI_getTest2C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test2.C2> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest2C2AsC2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test2.C2> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test2.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest2E2AsE1()
        throws Test2.E1
    {
        throwTest2E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest2E2AsE1(java.util.Map<String, String> context)
        throws Test2.E1
    {
        try
        {
            _iceI_throwTest2E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test2.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE1Async()
    {
        return _iceI_throwTest2E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest2E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest2E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest2E2AsE1", null, sync, _iceE_throwTest2E2AsE1);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest2E2AsE1 =
    {
        Test2.E1.class
    };

    default void throwTest2E2AsE2()
        throws Test2.E2
    {
        throwTest2E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest2E2AsE2(java.util.Map<String, String> context)
        throws Test2.E2
    {
        try
        {
            _iceI_throwTest2E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test2.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE2Async()
    {
        return _iceI_throwTest2E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest2E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest2E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest2E2AsE2", null, sync, _iceE_throwTest2E2AsE2);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest2E2AsE2 =
    {
        Test2.E2.class
    };

    default Test3.C1 getTest3C2AsC1()
    {
        return getTest3C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test3.C1 getTest3C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test3.C1> getTest3C2AsC1Async()
    {
        return _iceI_getTest3C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test3.C1> getTest3C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test3.C1> _iceI_getTest3C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test3.C1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest3C2AsC1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test3.C1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test3.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Test3.C2 getTest3C2AsC2()
    {
        return getTest3C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Test3.C2 getTest3C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Test3.C2> getTest3C2AsC2Async()
    {
        return _iceI_getTest3C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Test3.C2> getTest3C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Test3.C2> _iceI_getTest3C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Test3.C2> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTest3C2AsC2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Test3.C2> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Test3.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest3E2AsE1()
        throws Test3.E1
    {
        throwTest3E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest3E2AsE1(java.util.Map<String, String> context)
        throws Test3.E1
    {
        try
        {
            _iceI_throwTest3E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test3.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE1Async()
    {
        return _iceI_throwTest3E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest3E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest3E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest3E2AsE1", null, sync, _iceE_throwTest3E2AsE1);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest3E2AsE1 =
    {
        Test3.E1.class
    };

    default void throwTest3E2AsE2()
        throws Test3.E2
    {
        throwTest3E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest3E2AsE2(java.util.Map<String, String> context)
        throws Test3.E2
    {
        try
        {
            _iceI_throwTest3E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(Test3.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE2Async()
    {
        return _iceI_throwTest3E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest3E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwTest3E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwTest3E2AsE2", null, sync, _iceE_throwTest3E2AsE2);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest3E2AsE2 =
    {
        Test3.E2.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, InitialPrx.class, _InitialPrxI.class);
    }

    @Override
    InitialPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    InitialPrx ice_adapterId(String newAdapterId);

    @Override
    InitialPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    InitialPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    InitialPrx ice_invocationTimeout(int newTimeout);

    @Override
    InitialPrx ice_connectionCached(boolean newCache);

    @Override
    InitialPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    InitialPrx ice_secure(boolean b);

    @Override
    InitialPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    InitialPrx ice_preferSecure(boolean b);

    @Override
    InitialPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    InitialPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    InitialPrx ice_collocationOptimized(boolean b);

    @Override
    InitialPrx ice_twoway();

    @Override
    InitialPrx ice_oneway();

    @Override
    InitialPrx ice_batchOneway();

    @Override
    InitialPrx ice_datagram();

    @Override
    InitialPrx ice_batchDatagram();

    @Override
    InitialPrx ice_compress(boolean co);

    @Override
    InitialPrx ice_connectionId(String connectionId);

    @Override
    InitialPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Initial";
    }
}
