//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.Common;

public interface ControllerPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestCasePrx runTestCase(String mapping, String testsuite, String testcase, String cross)
        throws TestCaseNotExistException
    {
        return runTestCase(mapping, testsuite, testcase, cross, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestCasePrx runTestCase(String mapping, String testsuite, String testcase, String cross, java.util.Map<String, String> context)
        throws TestCaseNotExistException
    {
        try
        {
            return _iceI_runTestCaseAsync(mapping, testsuite, testcase, cross, context, true).waitForResponseOrUserEx();
        }
        catch(TestCaseNotExistException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<TestCasePrx> runTestCaseAsync(String mapping, String testsuite, String testcase, String cross)
    {
        return _iceI_runTestCaseAsync(mapping, testsuite, testcase, cross, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestCasePrx> runTestCaseAsync(String mapping, String testsuite, String testcase, String cross, java.util.Map<String, String> context)
    {
        return _iceI_runTestCaseAsync(mapping, testsuite, testcase, cross, context, false);
    }

    /**
     * @hidden
     * @param iceP_mapping -
     * @param iceP_testsuite -
     * @param iceP_testcase -
     * @param iceP_cross -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestCasePrx> _iceI_runTestCaseAsync(String iceP_mapping, String iceP_testsuite, String iceP_testcase, String iceP_cross, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestCasePrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "runTestCase", null, sync, _iceE_runTestCase);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_mapping);
                     ostr.writeString(iceP_testsuite);
                     ostr.writeString(iceP_testcase);
                     ostr.writeString(iceP_cross);
                 }, istr -> {
                     TestCasePrx ret;
                     ret = TestCasePrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_runTestCase =
    {
        TestCaseNotExistException.class
    };

    default OptionOverrides getOptionOverrides()
    {
        return getOptionOverrides(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default OptionOverrides getOptionOverrides(java.util.Map<String, String> context)
    {
        return _iceI_getOptionOverridesAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<OptionOverrides> getOptionOverridesAsync()
    {
        return _iceI_getOptionOverridesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<OptionOverrides> getOptionOverridesAsync(java.util.Map<String, String> context)
    {
        return _iceI_getOptionOverridesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<OptionOverrides> _iceI_getOptionOverridesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<OptionOverrides> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getOptionOverrides", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.IceInternal.Holder<OptionOverrides> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, OptionOverrides.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default String[] getTestSuites(String mapping)
    {
        return getTestSuites(mapping, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] getTestSuites(String mapping, java.util.Map<String, String> context)
    {
        return _iceI_getTestSuitesAsync(mapping, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> getTestSuitesAsync(String mapping)
    {
        return _iceI_getTestSuitesAsync(mapping, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> getTestSuitesAsync(String mapping, java.util.Map<String, String> context)
    {
        return _iceI_getTestSuitesAsync(mapping, context, false);
    }

    /**
     * @hidden
     * @param iceP_mapping -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getTestSuitesAsync(String iceP_mapping, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTestSuites", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_mapping);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default String getHost(String protocol, boolean ipv6)
    {
        return getHost(protocol, ipv6, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getHost(String protocol, boolean ipv6, java.util.Map<String, String> context)
    {
        return _iceI_getHostAsync(protocol, ipv6, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getHostAsync(String protocol, boolean ipv6)
    {
        return _iceI_getHostAsync(protocol, ipv6, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getHostAsync(String protocol, boolean ipv6, java.util.Map<String, String> context)
    {
        return _iceI_getHostAsync(protocol, ipv6, context, false);
    }

    /**
     * @hidden
     * @param iceP_protocol -
     * @param iceP_ipv6 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getHostAsync(String iceP_protocol, boolean iceP_ipv6, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getHost", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_protocol);
                     ostr.writeBool(iceP_ipv6);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link ControllerPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static ControllerPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _ControllerPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _ControllerPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ControllerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ControllerPrxI(obj.ice_facet(facet));
    }

    @Override
    ControllerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ControllerPrx ice_adapterId(String newAdapterId);

    @Override
    ControllerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ControllerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ControllerPrx ice_invocationTimeout(int newTimeout);

    @Override
    ControllerPrx ice_connectionCached(boolean newCache);

    @Override
    ControllerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ControllerPrx ice_secure(boolean b);

    @Override
    ControllerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ControllerPrx ice_preferSecure(boolean b);

    @Override
    ControllerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ControllerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ControllerPrx ice_collocationOptimized(boolean b);

    @Override
    ControllerPrx ice_twoway();

    @Override
    ControllerPrx ice_oneway();

    @Override
    ControllerPrx ice_batchOneway();

    @Override
    ControllerPrx ice_datagram();

    @Override
    ControllerPrx ice_batchDatagram();

    @Override
    ControllerPrx ice_compress(boolean co);

    @Override
    ControllerPrx ice_connectionId(String connectionId);

    @Override
    ControllerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Common::Controller";
    }

    /**
     * @hidden
     **/
    @Override
    default ControllerPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _ControllerPrxI(ref);
    }
}
