//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.Common;

public interface TestCasePrx extends com.zeroc.Ice.ObjectPrx
{
    default String startServerSide(Config config)
        throws TestCaseFailedException
    {
        return startServerSide(config, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String startServerSide(Config config, java.util.Map<String, String> context)
        throws TestCaseFailedException
    {
        try
        {
            return _iceI_startServerSideAsync(config, context, true).waitForResponseOrUserEx();
        }
        catch(TestCaseFailedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startServerSideAsync(Config config)
    {
        return _iceI_startServerSideAsync(config, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> startServerSideAsync(Config config, java.util.Map<String, String> context)
    {
        return _iceI_startServerSideAsync(config, context, false);
    }

    /**
     * @hidden
     * @param iceP_config -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_startServerSideAsync(Config iceP_config, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "startServerSide", null, sync, _iceE_startServerSide);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeValue(iceP_config);
                     ostr.writePendingValues();
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_startServerSide =
    {
        TestCaseFailedException.class
    };

    default String stopServerSide(boolean success)
        throws TestCaseFailedException
    {
        return stopServerSide(success, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String stopServerSide(boolean success, java.util.Map<String, String> context)
        throws TestCaseFailedException
    {
        try
        {
            return _iceI_stopServerSideAsync(success, context, true).waitForResponseOrUserEx();
        }
        catch(TestCaseFailedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> stopServerSideAsync(boolean success)
    {
        return _iceI_stopServerSideAsync(success, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> stopServerSideAsync(boolean success, java.util.Map<String, String> context)
    {
        return _iceI_stopServerSideAsync(success, context, false);
    }

    /**
     * @hidden
     * @param iceP_success -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_stopServerSideAsync(boolean iceP_success, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "stopServerSide", null, sync, _iceE_stopServerSide);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_success);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_stopServerSide =
    {
        TestCaseFailedException.class
    };

    default String runClientSide(String host, Config config)
        throws TestCaseFailedException
    {
        return runClientSide(host, config, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String runClientSide(String host, Config config, java.util.Map<String, String> context)
        throws TestCaseFailedException
    {
        try
        {
            return _iceI_runClientSideAsync(host, config, context, true).waitForResponseOrUserEx();
        }
        catch(TestCaseFailedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> runClientSideAsync(String host, Config config)
    {
        return _iceI_runClientSideAsync(host, config, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> runClientSideAsync(String host, Config config, java.util.Map<String, String> context)
    {
        return _iceI_runClientSideAsync(host, config, context, false);
    }

    /**
     * @hidden
     * @param iceP_host -
     * @param iceP_config -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_runClientSideAsync(String iceP_host, Config iceP_config, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "runClientSide", null, sync, _iceE_runClientSide);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_host);
                     ostr.writeValue(iceP_config);
                     ostr.writePendingValues();
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_runClientSide =
    {
        TestCaseFailedException.class
    };

    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestCasePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestCasePrx.class, _TestCasePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestCasePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestCasePrx.class, _TestCasePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestCasePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestCasePrx.class, _TestCasePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestCasePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestCasePrx.class, _TestCasePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestCasePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestCasePrx.class, _TestCasePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestCasePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestCasePrx.class, _TestCasePrxI.class);
    }

    @Override
    TestCasePrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestCasePrx ice_adapterId(String newAdapterId);

    @Override
    TestCasePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestCasePrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestCasePrx ice_invocationTimeout(int newTimeout);

    @Override
    TestCasePrx ice_connectionCached(boolean newCache);

    @Override
    TestCasePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestCasePrx ice_secure(boolean b);

    @Override
    TestCasePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestCasePrx ice_preferSecure(boolean b);

    @Override
    TestCasePrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestCasePrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestCasePrx ice_collocationOptimized(boolean b);

    @Override
    TestCasePrx ice_twoway();

    @Override
    TestCasePrx ice_oneway();

    @Override
    TestCasePrx ice_batchOneway();

    @Override
    TestCasePrx ice_datagram();

    @Override
    TestCasePrx ice_batchDatagram();

    @Override
    TestCasePrx ice_compress(boolean co);

    @Override
    TestCasePrx ice_connectionId(String connectionId);

    @Override
    TestCasePrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Common::TestCase";
    }
}
