//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ObjectsTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public class Initial extends com.zeroc.Ice.Value
{
    /**
     * Holds the result of operation getAll.
     **/
    public static class GetAllResult
    {
        /**
         * Default constructor.
         **/
        public GetAllResult()
        {
        }

        public GetAllResult(B b1, B b2, C theC, D theD)
        {
            this.b1 = b1;
            this.b2 = b2;
            this.theC = theC;
            this.theD = theD;
        }

        public B b1;
        public B b2;
        public C theC;
        public D theD;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.b1);
            ostr.writeValue(this.b2);
            ostr.writeValue(this.theC);
            ostr.writeValue(this.theD);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.b1 = v, B.class);
            istr.readValue(v -> this.b2 = v, B.class);
            istr.readValue(v -> this.theC = v, C.class);
            istr.readValue(v -> this.theD = v, D.class);
        }
    }

    /**
     * Holds the result of operation opValue.
     **/
    public static class OpValueResult
    {
        /**
         * Default constructor.
         **/
        public OpValueResult()
        {
        }

        public OpValueResult(com.zeroc.Ice.Value returnValue, com.zeroc.Ice.Value v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public com.zeroc.Ice.Value returnValue;
        public com.zeroc.Ice.Value v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.v2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.v2 = v, com.zeroc.Ice.Value.class);
            istr.readValue(v -> returnValue = v, com.zeroc.Ice.Value.class);
        }
    }

    /**
     * Holds the result of operation opValueSeq.
     **/
    public static class OpValueSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpValueSeqResult()
        {
        }

        public OpValueSeqResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ValueSeqHelper.write(ostr, this.v2);
            ValueSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = ValueSeqHelper.read(istr);
            returnValue = ValueSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opValueMap.
     **/
    public static class OpValueMapResult
    {
        /**
         * Default constructor.
         **/
        public OpValueMapResult()
        {
        }

        public OpValueMapResult(java.util.Map<java.lang.String, com.zeroc.Ice.Value> returnValue, java.util.Map<java.lang.String, com.zeroc.Ice.Value> v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public java.util.Map<java.lang.String, com.zeroc.Ice.Value> returnValue;
        public java.util.Map<java.lang.String, com.zeroc.Ice.Value> v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ValueMapHelper.write(ostr, this.v2);
            ValueMapHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = ValueMapHelper.read(istr);
            returnValue = ValueMapHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBaseSeq.
     **/
    public static class OpBaseSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBaseSeqResult()
        {
        }

        public OpBaseSeqResult(Base[] returnValue, Base[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Base[] returnValue;
        public Base[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BaseSeqHelper.write(ostr, this.outSeq);
            BaseSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BaseSeqHelper.read(istr);
            returnValue = BaseSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opM.
     **/
    public static class OpMResult
    {
        /**
         * Default constructor.
         **/
        public OpMResult()
        {
        }

        public OpMResult(M returnValue, M v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public M returnValue;
        public M v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.v2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.v2 = v, M.class);
            istr.readValue(v -> returnValue = v, M.class);
        }
    }

    /**
     * Holds the result of operation opF1.
     **/
    public static class OpF1Result
    {
        /**
         * Default constructor.
         **/
        public OpF1Result()
        {
        }

        public OpF1Result(F1 returnValue, F1 f12)
        {
            this.returnValue = returnValue;
            this.f12 = f12;
        }

        public F1 returnValue;
        public F1 f12;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.f12);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.f12 = v, F1.class);
            istr.readValue(v -> returnValue = v, F1.class);
        }
    }

    /**
     * Holds the result of operation opF2.
     **/
    public static class OpF2Result
    {
        /**
         * Default constructor.
         **/
        public OpF2Result()
        {
        }

        public OpF2Result(F2Prx returnValue, F2Prx f22)
        {
            this.returnValue = returnValue;
            this.f22 = f22;
        }

        public F2Prx returnValue;
        public F2Prx f22;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(this.f22);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.f22 = F2Prx.uncheckedCast(istr.readProxy());
            returnValue = F2Prx.uncheckedCast(istr.readProxy());
        }
    }

    public Initial clone()
    {
        return (Initial)super.clone();
    }

    public static String ice_staticId()
    {
        return "::Test::Initial";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -2532808647244934635L;

    /** @hidden */
    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        istr_.endSlice();
    }
}
