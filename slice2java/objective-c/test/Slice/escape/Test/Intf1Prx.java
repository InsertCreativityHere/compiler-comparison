//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Intf1Prx extends com.zeroc.Ice.ObjectPrx
{
    default void isa()
    {
        isa(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void isa(java.util.Map<String, String> context)
    {
        _iceI_isaAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> isaAsync()
    {
        return _iceI_isaAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> isaAsync(java.util.Map<String, String> context)
    {
        return _iceI_isaAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_isaAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isa", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void reason()
    {
        reason(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void reason(java.util.Map<String, String> context)
    {
        _iceI_reasonAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> reasonAsync()
    {
        return _iceI_reasonAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> reasonAsync(java.util.Map<String, String> context)
    {
        return _iceI_reasonAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_reasonAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "reason", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void autorelease()
    {
        autorelease(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void autorelease(java.util.Map<String, String> context)
    {
        _iceI_autoreleaseAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> autoreleaseAsync()
    {
        return _iceI_autoreleaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> autoreleaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_autoreleaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_autoreleaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "autorelease", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void classForCoder()
    {
        classForCoder(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void classForCoder(java.util.Map<String, String> context)
    {
        _iceI_classForCoderAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> classForCoderAsync()
    {
        return _iceI_classForCoderAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> classForCoderAsync(java.util.Map<String, String> context)
    {
        return _iceI_classForCoderAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_classForCoderAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "classForCoder", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void copy()
    {
        copy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void copy(java.util.Map<String, String> context)
    {
        _iceI_copyAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> copyAsync()
    {
        return _iceI_copyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> copyAsync(java.util.Map<String, String> context)
    {
        return _iceI_copyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_copyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "copy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void dealloc()
    {
        dealloc(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void dealloc(java.util.Map<String, String> context)
    {
        _iceI_deallocAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> deallocAsync()
    {
        return _iceI_deallocAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> deallocAsync(java.util.Map<String, String> context)
    {
        return _iceI_deallocAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_deallocAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dealloc", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void description()
    {
        description(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void description(java.util.Map<String, String> context)
    {
        _iceI_descriptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> descriptionAsync()
    {
        return _iceI_descriptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> descriptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_descriptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_descriptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "description", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void hash()
    {
        hash(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void hash(java.util.Map<String, String> context)
    {
        _iceI_hashAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> hashAsync()
    {
        return _iceI_hashAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> hashAsync(java.util.Map<String, String> context)
    {
        return _iceI_hashAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_hashAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "hash", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void init()
    {
        init(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void init(java.util.Map<String, String> context)
    {
        _iceI_initAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> initAsync()
    {
        return _iceI_initAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> initAsync(java.util.Map<String, String> context)
    {
        return _iceI_initAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_initAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "init", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void isProxy()
    {
        isProxy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void isProxy(java.util.Map<String, String> context)
    {
        _iceI_isProxyAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> isProxyAsync()
    {
        return _iceI_isProxyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> isProxyAsync(java.util.Map<String, String> context)
    {
        return _iceI_isProxyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_isProxyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isProxy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void mutableCopy()
    {
        mutableCopy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void mutableCopy(java.util.Map<String, String> context)
    {
        _iceI_mutableCopyAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> mutableCopyAsync()
    {
        return _iceI_mutableCopyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> mutableCopyAsync(java.util.Map<String, String> context)
    {
        return _iceI_mutableCopyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_mutableCopyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "mutableCopy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void release()
    {
        release(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void release(java.util.Map<String, String> context)
    {
        _iceI_releaseAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> releaseAsync()
    {
        return _iceI_releaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> releaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_releaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_releaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "release", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void retain()
    {
        retain(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void retain(java.util.Map<String, String> context)
    {
        _iceI_retainAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> retainAsync()
    {
        return _iceI_retainAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> retainAsync(java.util.Map<String, String> context)
    {
        return _iceI_retainAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_retainAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "retain", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void retainCount()
    {
        retainCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void retainCount(java.util.Map<String, String> context)
    {
        _iceI_retainCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> retainCountAsync()
    {
        return _iceI_retainCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> retainCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_retainCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_retainCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "retainCount", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void self()
    {
        self(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void self(java.util.Map<String, String> context)
    {
        _iceI_selfAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> selfAsync()
    {
        return _iceI_selfAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> selfAsync(java.util.Map<String, String> context)
    {
        return _iceI_selfAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_selfAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "self", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void superclass()
    {
        superclass(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void superclass(java.util.Map<String, String> context)
    {
        _iceI_superclassAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> superclassAsync()
    {
        return _iceI_superclassAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> superclassAsync(java.util.Map<String, String> context)
    {
        return _iceI_superclassAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_superclassAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "superclass", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void zone()
    {
        zone(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void zone(java.util.Map<String, String> context)
    {
        _iceI_zoneAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> zoneAsync()
    {
        return _iceI_zoneAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> zoneAsync(java.util.Map<String, String> context)
    {
        return _iceI_zoneAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_zoneAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "zone", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Intf1Prx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Intf1Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Intf1Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Intf1Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static Intf1Prx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static Intf1Prx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, Intf1Prx.class, _Intf1PrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default Intf1Prx ice_context(java.util.Map<String, String> newContext)
    {
        return (Intf1Prx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default Intf1Prx ice_adapterId(String newAdapterId)
    {
        return (Intf1Prx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default Intf1Prx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (Intf1Prx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default Intf1Prx ice_locatorCacheTimeout(int newTimeout)
    {
        return (Intf1Prx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default Intf1Prx ice_invocationTimeout(int newTimeout)
    {
        return (Intf1Prx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default Intf1Prx ice_connectionCached(boolean newCache)
    {
        return (Intf1Prx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default Intf1Prx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (Intf1Prx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default Intf1Prx ice_secure(boolean b)
    {
        return (Intf1Prx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default Intf1Prx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (Intf1Prx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default Intf1Prx ice_preferSecure(boolean b)
    {
        return (Intf1Prx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default Intf1Prx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (Intf1Prx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default Intf1Prx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (Intf1Prx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default Intf1Prx ice_collocationOptimized(boolean b)
    {
        return (Intf1Prx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default Intf1Prx ice_twoway()
    {
        return (Intf1Prx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default Intf1Prx ice_oneway()
    {
        return (Intf1Prx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default Intf1Prx ice_batchOneway()
    {
        return (Intf1Prx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default Intf1Prx ice_datagram()
    {
        return (Intf1Prx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default Intf1Prx ice_batchDatagram()
    {
        return (Intf1Prx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default Intf1Prx ice_compress(boolean co)
    {
        return (Intf1Prx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default Intf1Prx ice_timeout(int t)
    {
        return (Intf1Prx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default Intf1Prx ice_connectionId(String connectionId)
    {
        return (Intf1Prx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default Intf1Prx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (Intf1Prx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::Intf1";
    }
}
