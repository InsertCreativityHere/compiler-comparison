//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package and;

public interface friend extends com.zeroc.Ice.Object
{
    auto _goto(_continue _if, auto d, delete inline, _do mutable, breakPrx namespace, charPrx _new, switchPrx not, int or, int _protected, int _public, int register, com.zeroc.Ice.Current current)
        throws _return,
               sizeof;

    void objc(int bycopy, int byref, int id, int IMP, int in, int inout, int nil, int NO, int oneway, int SEL, int _super, int YES, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::and::friend"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::and::friend";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_goto(friend obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        _continue iceP_if;
        auto iceP_d;
        delete iceP_inline;
        final com.zeroc.IceInternal.Holder<_do> icePP_mutable = new com.zeroc.IceInternal.Holder<>();
        breakPrx iceP_namespace;
        charPrx iceP_new;
        switchPrx iceP_not;
        int iceP_or;
        int iceP_protected;
        int iceP_public;
        int iceP_register;
        iceP_if = _continue.ice_read(istr);
        iceP_d = auto.ice_read(istr);
        iceP_inline = delete.ice_read(istr);
        istr.readValue(v -> icePP_mutable.value = v, _do.class);
        iceP_namespace = breakPrx.uncheckedCast(istr.readProxy());
        iceP_new = charPrx.uncheckedCast(istr.readProxy());
        iceP_not = switchPrx.uncheckedCast(istr.readProxy());
        iceP_or = istr.readInt();
        iceP_protected = istr.readInt();
        iceP_public = istr.readInt();
        iceP_register = istr.readInt();
        istr.readPendingValues();
        inS.endReadParams();
        _do iceP_mutable = icePP_mutable.value;
        auto ret = obj._goto(iceP_if, iceP_d, iceP_inline, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_or, iceP_protected, iceP_public, iceP_register, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        auto.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_objc(friend obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_bycopy;
        int iceP_byref;
        int iceP_id;
        int iceP_IMP;
        int iceP_in;
        int iceP_inout;
        int iceP_nil;
        int iceP_NO;
        int iceP_oneway;
        int iceP_SEL;
        int iceP_super;
        int iceP_YES;
        iceP_bycopy = istr.readInt();
        iceP_byref = istr.readInt();
        iceP_id = istr.readInt();
        iceP_IMP = istr.readInt();
        iceP_in = istr.readInt();
        iceP_inout = istr.readInt();
        iceP_nil = istr.readInt();
        iceP_NO = istr.readInt();
        iceP_oneway = istr.readInt();
        iceP_SEL = istr.readInt();
        iceP_super = istr.readInt();
        iceP_YES = istr.readInt();
        inS.endReadParams();
        obj.objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "goto",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "objc"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_goto(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_objc(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
