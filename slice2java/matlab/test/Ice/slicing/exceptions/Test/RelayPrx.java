//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface RelayPrx extends com.zeroc.Ice.ObjectPrx
{
    default void knownPreservedAsBase()
        throws Base
    {
        knownPreservedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownPreservedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownPreservedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsBaseAsync()
    {
        return _iceI_knownPreservedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownPreservedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownPreservedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownPreservedAsBase", null, sync, _iceE_knownPreservedAsBase);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownPreservedAsBase =
    {
        Base.class
    };

    default void knownPreservedAsKnownPreserved()
        throws KnownPreserved
    {
        knownPreservedAsKnownPreserved(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownPreservedAsKnownPreserved(java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_knownPreservedAsKnownPreservedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsKnownPreservedAsync()
    {
        return _iceI_knownPreservedAsKnownPreservedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownPreservedAsKnownPreservedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownPreservedAsKnownPreserved", null, sync, _iceE_knownPreservedAsKnownPreserved);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    default void unknownPreservedAsBase()
        throws Base
    {
        unknownPreservedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownPreservedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownPreservedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsBaseAsync()
    {
        return _iceI_unknownPreservedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownPreservedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownPreservedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownPreservedAsBase", null, sync, _iceE_unknownPreservedAsBase);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownPreservedAsBase =
    {
        Base.class
    };

    default void unknownPreservedAsKnownPreserved()
        throws KnownPreserved
    {
        unknownPreservedAsKnownPreserved(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownPreservedAsKnownPreserved(java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_unknownPreservedAsKnownPreservedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsKnownPreservedAsync()
    {
        return _iceI_unknownPreservedAsKnownPreservedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownPreservedAsKnownPreservedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownPreservedAsKnownPreserved", null, sync, _iceE_unknownPreservedAsKnownPreserved);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    /**
     * Creates a new proxy that implements {@link RelayPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static RelayPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _RelayPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RelayPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RelayPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _RelayPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RelayPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RelayPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RelayPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _RelayPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RelayPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _RelayPrxI(obj.ice_facet(facet));
    }

    @Override
    RelayPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    RelayPrx ice_adapterId(String newAdapterId);

    @Override
    RelayPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    RelayPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    RelayPrx ice_invocationTimeout(int newTimeout);

    @Override
    RelayPrx ice_connectionCached(boolean newCache);

    @Override
    RelayPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    RelayPrx ice_secure(boolean b);

    @Override
    RelayPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    RelayPrx ice_preferSecure(boolean b);

    @Override
    RelayPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    RelayPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    RelayPrx ice_collocationOptimized(boolean b);

    @Override
    RelayPrx ice_twoway();

    @Override
    RelayPrx ice_oneway();

    @Override
    RelayPrx ice_batchOneway();

    @Override
    RelayPrx ice_datagram();

    @Override
    RelayPrx ice_batchDatagram();

    @Override
    RelayPrx ice_compress(boolean co);

    @Override
    RelayPrx ice_connectionId(String connectionId);

    @Override
    RelayPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Relay";
    }

    /**
     * @hidden
     **/
    @Override
    default RelayPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _RelayPrxI(ref);
    }
}
