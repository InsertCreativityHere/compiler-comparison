//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default com.zeroc.Ice.Value SBaseAsObject()
    {
        return SBaseAsObject(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.zeroc.Ice.Value SBaseAsObject(java.util.Map<String, String> context)
    {
        return _iceI_SBaseAsObjectAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> SBaseAsObjectAsync()
    {
        return _iceI_SBaseAsObjectAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> SBaseAsObjectAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBaseAsObjectAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> _iceI_SBaseAsObjectAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBaseAsObject", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, com.zeroc.Ice.Value.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SBase SBaseAsSBase()
    {
        return SBaseAsSBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SBase SBaseAsSBase(java.util.Map<String, String> context)
    {
        return _iceI_SBaseAsSBaseAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SBase> SBaseAsSBaseAsync()
    {
        return _iceI_SBaseAsSBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SBase> SBaseAsSBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBaseAsSBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SBase> _iceI_SBaseAsSBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SBase> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBaseAsSBase", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<SBase> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, SBase.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SBase SBSKnownDerivedAsSBase()
    {
        return SBSKnownDerivedAsSBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SBase SBSKnownDerivedAsSBase(java.util.Map<String, String> context)
    {
        return _iceI_SBSKnownDerivedAsSBaseAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSKnownDerivedAsSBaseAsync()
    {
        return _iceI_SBSKnownDerivedAsSBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSKnownDerivedAsSBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBSKnownDerivedAsSBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SBase> _iceI_SBSKnownDerivedAsSBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SBase> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBSKnownDerivedAsSBase", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<SBase> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, SBase.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived()
    {
        return SBSKnownDerivedAsSBSKnownDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(java.util.Map<String, String> context)
    {
        return _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync()
    {
        return _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SBSKnownDerived> _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SBSKnownDerived> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBSKnownDerivedAsSBSKnownDerived", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<SBSKnownDerived> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, SBSKnownDerived.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SBase SBSUnknownDerivedAsSBase()
    {
        return SBSUnknownDerivedAsSBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SBase SBSUnknownDerivedAsSBase(java.util.Map<String, String> context)
    {
        return _iceI_SBSUnknownDerivedAsSBaseAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSUnknownDerivedAsSBaseAsync()
    {
        return _iceI_SBSUnknownDerivedAsSBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSUnknownDerivedAsSBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBSUnknownDerivedAsSBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SBase> _iceI_SBSUnknownDerivedAsSBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SBase> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBSUnknownDerivedAsSBase", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<SBase> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, SBase.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SBase SBSUnknownDerivedAsSBaseCompact()
    {
        return SBSUnknownDerivedAsSBaseCompact(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SBase SBSUnknownDerivedAsSBaseCompact(java.util.Map<String, String> context)
    {
        return _iceI_SBSUnknownDerivedAsSBaseCompactAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSUnknownDerivedAsSBaseCompactAsync()
    {
        return _iceI_SBSUnknownDerivedAsSBaseCompactAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SBase> SBSUnknownDerivedAsSBaseCompactAsync(java.util.Map<String, String> context)
    {
        return _iceI_SBSUnknownDerivedAsSBaseCompactAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SBase> _iceI_SBSUnknownDerivedAsSBaseCompactAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SBase> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SBSUnknownDerivedAsSBaseCompact", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.CompactFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<SBase> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, SBase.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default com.zeroc.Ice.Value SUnknownAsObject()
    {
        return SUnknownAsObject(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.zeroc.Ice.Value SUnknownAsObject(java.util.Map<String, String> context)
    {
        return _iceI_SUnknownAsObjectAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> SUnknownAsObjectAsync()
    {
        return _iceI_SUnknownAsObjectAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> SUnknownAsObjectAsync(java.util.Map<String, String> context)
    {
        return _iceI_SUnknownAsObjectAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> _iceI_SUnknownAsObjectAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "SUnknownAsObject", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, com.zeroc.Ice.Value.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void checkSUnknown(com.zeroc.Ice.Value o)
    {
        checkSUnknown(o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkSUnknown(com.zeroc.Ice.Value o, java.util.Map<String, String> context)
    {
        _iceI_checkSUnknownAsync(o, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkSUnknownAsync(com.zeroc.Ice.Value o)
    {
        return _iceI_checkSUnknownAsync(o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkSUnknownAsync(com.zeroc.Ice.Value o, java.util.Map<String, String> context)
    {
        return _iceI_checkSUnknownAsync(o, context, false);
    }

    /**
     * @hidden
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkSUnknownAsync(com.zeroc.Ice.Value iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkSUnknown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_o);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default B oneElementCycle()
    {
        return oneElementCycle(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B oneElementCycle(java.util.Map<String, String> context)
    {
        return _iceI_oneElementCycleAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> oneElementCycleAsync()
    {
        return _iceI_oneElementCycleAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> oneElementCycleAsync(java.util.Map<String, String> context)
    {
        return _iceI_oneElementCycleAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<B> _iceI_oneElementCycleAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<B> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "oneElementCycle", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<B> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default B twoElementCycle()
    {
        return twoElementCycle(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B twoElementCycle(java.util.Map<String, String> context)
    {
        return _iceI_twoElementCycleAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> twoElementCycleAsync()
    {
        return _iceI_twoElementCycleAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> twoElementCycleAsync(java.util.Map<String, String> context)
    {
        return _iceI_twoElementCycleAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<B> _iceI_twoElementCycleAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<B> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "twoElementCycle", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<B> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default B D1AsB()
    {
        return D1AsB(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B D1AsB(java.util.Map<String, String> context)
    {
        return _iceI_D1AsBAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> D1AsBAsync()
    {
        return _iceI_D1AsBAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> D1AsBAsync(java.util.Map<String, String> context)
    {
        return _iceI_D1AsBAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<B> _iceI_D1AsBAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<B> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "D1AsB", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<B> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default D1 D1AsD1()
    {
        return D1AsD1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default D1 D1AsD1(java.util.Map<String, String> context)
    {
        return _iceI_D1AsD1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<D1> D1AsD1Async()
    {
        return _iceI_D1AsD1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<D1> D1AsD1Async(java.util.Map<String, String> context)
    {
        return _iceI_D1AsD1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<D1> _iceI_D1AsD1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<D1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "D1AsD1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<D1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, D1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default B D2AsB()
    {
        return D2AsB(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B D2AsB(java.util.Map<String, String> context)
    {
        return _iceI_D2AsBAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> D2AsBAsync()
    {
        return _iceI_D2AsBAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> D2AsBAsync(java.util.Map<String, String> context)
    {
        return _iceI_D2AsBAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<B> _iceI_D2AsBAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<B> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "D2AsB", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<B> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default TestIntf.ParamTest1Result paramTest1()
    {
        return paramTest1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ParamTest1Result paramTest1(java.util.Map<String, String> context)
    {
        return _iceI_paramTest1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest1Result> paramTest1Async()
    {
        return _iceI_paramTest1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest1Result> paramTest1Async(java.util.Map<String, String> context)
    {
        return _iceI_paramTest1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest1Result> _iceI_paramTest1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "paramTest1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ParamTest1Result ret = new TestIntf.ParamTest1Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.ParamTest2Result paramTest2()
    {
        return paramTest2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ParamTest2Result paramTest2(java.util.Map<String, String> context)
    {
        return _iceI_paramTest2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest2Result> paramTest2Async()
    {
        return _iceI_paramTest2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest2Result> paramTest2Async(java.util.Map<String, String> context)
    {
        return _iceI_paramTest2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest2Result> _iceI_paramTest2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "paramTest2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ParamTest2Result ret = new TestIntf.ParamTest2Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.ParamTest3Result paramTest3()
    {
        return paramTest3(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ParamTest3Result paramTest3(java.util.Map<String, String> context)
    {
        return _iceI_paramTest3Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest3Result> paramTest3Async()
    {
        return _iceI_paramTest3Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest3Result> paramTest3Async(java.util.Map<String, String> context)
    {
        return _iceI_paramTest3Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest3Result> _iceI_paramTest3Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest3Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "paramTest3", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ParamTest3Result ret = new TestIntf.ParamTest3Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.ParamTest4Result paramTest4()
    {
        return paramTest4(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ParamTest4Result paramTest4(java.util.Map<String, String> context)
    {
        return _iceI_paramTest4Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest4Result> paramTest4Async()
    {
        return _iceI_paramTest4Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ParamTest4Result> paramTest4Async(java.util.Map<String, String> context)
    {
        return _iceI_paramTest4Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest4Result> _iceI_paramTest4Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ParamTest4Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "paramTest4", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ParamTest4Result ret = new TestIntf.ParamTest4Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.ReturnTest1Result returnTest1()
    {
        return returnTest1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ReturnTest1Result returnTest1(java.util.Map<String, String> context)
    {
        return _iceI_returnTest1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ReturnTest1Result> returnTest1Async()
    {
        return _iceI_returnTest1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ReturnTest1Result> returnTest1Async(java.util.Map<String, String> context)
    {
        return _iceI_returnTest1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ReturnTest1Result> _iceI_returnTest1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ReturnTest1Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "returnTest1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ReturnTest1Result ret = new TestIntf.ReturnTest1Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.ReturnTest2Result returnTest2()
    {
        return returnTest2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.ReturnTest2Result returnTest2(java.util.Map<String, String> context)
    {
        return _iceI_returnTest2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ReturnTest2Result> returnTest2Async()
    {
        return _iceI_returnTest2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.ReturnTest2Result> returnTest2Async(java.util.Map<String, String> context)
    {
        return _iceI_returnTest2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.ReturnTest2Result> _iceI_returnTest2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.ReturnTest2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "returnTest2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     TestIntf.ReturnTest2Result ret = new TestIntf.ReturnTest2Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default B returnTest3(B p1, B p2)
    {
        return returnTest3(p1, p2, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B returnTest3(B p1, B p2, java.util.Map<String, String> context)
    {
        return _iceI_returnTest3Async(p1, p2, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> returnTest3Async(B p1, B p2)
    {
        return _iceI_returnTest3Async(p1, p2, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> returnTest3Async(B p1, B p2, java.util.Map<String, String> context)
    {
        return _iceI_returnTest3Async(p1, p2, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param iceP_p2 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<B> _iceI_returnTest3Async(B iceP_p1, B iceP_p2, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<B> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "returnTest3", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_p1);
                     ostr.writeValue(iceP_p2);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<B> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default SS3 sequenceTest(SS1 p1, SS2 p2)
    {
        return sequenceTest(p1, p2, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SS3 sequenceTest(SS1 p1, SS2 p2, java.util.Map<String, String> context)
    {
        return _iceI_sequenceTestAsync(p1, p2, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SS3> sequenceTestAsync(SS1 p1, SS2 p2)
    {
        return _iceI_sequenceTestAsync(p1, p2, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SS3> sequenceTestAsync(SS1 p1, SS2 p2, java.util.Map<String, String> context)
    {
        return _iceI_sequenceTestAsync(p1, p2, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param iceP_p2 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SS3> _iceI_sequenceTestAsync(SS1 iceP_p1, SS2 iceP_p2, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SS3> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sequenceTest", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_p1);
                     ostr.writeValue(iceP_p2);
                     ostr.writePendingValues();
                 }, istr -> {
                     SS3 ret;
                     ret = SS3.ice_read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.DictionaryTestResult dictionaryTest(java.util.Map<java.lang.Integer, B> bin)
    {
        return dictionaryTest(bin, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.DictionaryTestResult dictionaryTest(java.util.Map<java.lang.Integer, B> bin, java.util.Map<String, String> context)
    {
        return _iceI_dictionaryTestAsync(bin, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.DictionaryTestResult> dictionaryTestAsync(java.util.Map<java.lang.Integer, B> bin)
    {
        return _iceI_dictionaryTestAsync(bin, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.DictionaryTestResult> dictionaryTestAsync(java.util.Map<java.lang.Integer, B> bin, java.util.Map<String, String> context)
    {
        return _iceI_dictionaryTestAsync(bin, context, false);
    }

    /**
     * @hidden
     * @param iceP_bin -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.DictionaryTestResult> _iceI_dictionaryTestAsync(java.util.Map<java.lang.Integer, B> iceP_bin, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.DictionaryTestResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dictionaryTest", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     BDictHelper.write(ostr, iceP_bin);
                     ostr.writePendingValues();
                 }, istr -> {
                     TestIntf.DictionaryTestResult ret = new TestIntf.DictionaryTestResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default PBase exchangePBase(PBase pb)
    {
        return exchangePBase(pb, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default PBase exchangePBase(PBase pb, java.util.Map<String, String> context)
    {
        return _iceI_exchangePBaseAsync(pb, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<PBase> exchangePBaseAsync(PBase pb)
    {
        return _iceI_exchangePBaseAsync(pb, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<PBase> exchangePBaseAsync(PBase pb, java.util.Map<String, String> context)
    {
        return _iceI_exchangePBaseAsync(pb, context, false);
    }

    /**
     * @hidden
     * @param iceP_pb -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<PBase> _iceI_exchangePBaseAsync(PBase iceP_pb, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<PBase> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "exchangePBase", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_pb);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<PBase> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, PBase.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Preserved PBSUnknownAsPreserved()
    {
        return PBSUnknownAsPreserved(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Preserved PBSUnknownAsPreserved(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknownAsPreservedAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknownAsPreservedAsync()
    {
        return _iceI_PBSUnknownAsPreservedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknownAsPreservedAsync(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknownAsPreservedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Preserved> _iceI_PBSUnknownAsPreservedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Preserved> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "PBSUnknownAsPreserved", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Preserved> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Preserved.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void checkPBSUnknown(Preserved p)
    {
        checkPBSUnknown(p, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkPBSUnknown(Preserved p, java.util.Map<String, String> context)
    {
        _iceI_checkPBSUnknownAsync(p, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknownAsync(Preserved p)
    {
        return _iceI_checkPBSUnknownAsync(p, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknownAsync(Preserved p, java.util.Map<String, String> context)
    {
        return _iceI_checkPBSUnknownAsync(p, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkPBSUnknownAsync(Preserved iceP_p, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkPBSUnknown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_p);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default Preserved PBSUnknownAsPreservedWithGraph()
    {
        return PBSUnknownAsPreservedWithGraph(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Preserved PBSUnknownAsPreservedWithGraph(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknownAsPreservedWithGraphAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknownAsPreservedWithGraphAsync()
    {
        return _iceI_PBSUnknownAsPreservedWithGraphAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknownAsPreservedWithGraphAsync(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknownAsPreservedWithGraphAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Preserved> _iceI_PBSUnknownAsPreservedWithGraphAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Preserved> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "PBSUnknownAsPreservedWithGraph", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Preserved> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Preserved.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void checkPBSUnknownWithGraph(Preserved p)
    {
        checkPBSUnknownWithGraph(p, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkPBSUnknownWithGraph(Preserved p, java.util.Map<String, String> context)
    {
        _iceI_checkPBSUnknownWithGraphAsync(p, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknownWithGraphAsync(Preserved p)
    {
        return _iceI_checkPBSUnknownWithGraphAsync(p, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknownWithGraphAsync(Preserved p, java.util.Map<String, String> context)
    {
        return _iceI_checkPBSUnknownWithGraphAsync(p, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkPBSUnknownWithGraphAsync(Preserved iceP_p, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkPBSUnknownWithGraph", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_p);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default Preserved PBSUnknown2AsPreservedWithGraph()
    {
        return PBSUnknown2AsPreservedWithGraph(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Preserved PBSUnknown2AsPreservedWithGraph(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknown2AsPreservedWithGraphAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknown2AsPreservedWithGraphAsync()
    {
        return _iceI_PBSUnknown2AsPreservedWithGraphAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Preserved> PBSUnknown2AsPreservedWithGraphAsync(java.util.Map<String, String> context)
    {
        return _iceI_PBSUnknown2AsPreservedWithGraphAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Preserved> _iceI_PBSUnknown2AsPreservedWithGraphAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Preserved> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "PBSUnknown2AsPreservedWithGraph", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Preserved> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Preserved.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void checkPBSUnknown2WithGraph(Preserved p)
    {
        checkPBSUnknown2WithGraph(p, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkPBSUnknown2WithGraph(Preserved p, java.util.Map<String, String> context)
    {
        _iceI_checkPBSUnknown2WithGraphAsync(p, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknown2WithGraphAsync(Preserved p)
    {
        return _iceI_checkPBSUnknown2WithGraphAsync(p, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkPBSUnknown2WithGraphAsync(Preserved p, java.util.Map<String, String> context)
    {
        return _iceI_checkPBSUnknown2WithGraphAsync(p, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkPBSUnknown2WithGraphAsync(Preserved iceP_p, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkPBSUnknown2WithGraph", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_p);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default PNode exchangePNode(PNode pn)
    {
        return exchangePNode(pn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default PNode exchangePNode(PNode pn, java.util.Map<String, String> context)
    {
        return _iceI_exchangePNodeAsync(pn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<PNode> exchangePNodeAsync(PNode pn)
    {
        return _iceI_exchangePNodeAsync(pn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<PNode> exchangePNodeAsync(PNode pn, java.util.Map<String, String> context)
    {
        return _iceI_exchangePNodeAsync(pn, context, false);
    }

    /**
     * @hidden
     * @param iceP_pn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<PNode> _iceI_exchangePNodeAsync(PNode iceP_pn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<PNode> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "exchangePNode", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeValue(iceP_pn);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<PNode> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, PNode.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwBaseAsBase()
        throws BaseException
    {
        throwBaseAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwBaseAsBase(java.util.Map<String, String> context)
        throws BaseException
    {
        try
        {
            _iceI_throwBaseAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(BaseException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwBaseAsBaseAsync()
    {
        return _iceI_throwBaseAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwBaseAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwBaseAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwBaseAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwBaseAsBase", null, sync, _iceE_throwBaseAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwBaseAsBase =
    {
        BaseException.class
    };

    default void throwDerivedAsBase()
        throws BaseException
    {
        throwDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwDerivedAsBase(java.util.Map<String, String> context)
        throws BaseException
    {
        try
        {
            _iceI_throwDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(BaseException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwDerivedAsBaseAsync()
    {
        return _iceI_throwDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwDerivedAsBase", null, sync, _iceE_throwDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwDerivedAsBase =
    {
        BaseException.class
    };

    default void throwDerivedAsDerived()
        throws DerivedException
    {
        throwDerivedAsDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwDerivedAsDerived(java.util.Map<String, String> context)
        throws DerivedException
    {
        try
        {
            _iceI_throwDerivedAsDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(DerivedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwDerivedAsDerivedAsync()
    {
        return _iceI_throwDerivedAsDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwDerivedAsDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwDerivedAsDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwDerivedAsDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwDerivedAsDerived", null, sync, _iceE_throwDerivedAsDerived);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwDerivedAsDerived =
    {
        DerivedException.class
    };

    default void throwUnknownDerivedAsBase()
        throws BaseException
    {
        throwUnknownDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwUnknownDerivedAsBase(java.util.Map<String, String> context)
        throws BaseException
    {
        try
        {
            _iceI_throwUnknownDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(BaseException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwUnknownDerivedAsBaseAsync()
    {
        return _iceI_throwUnknownDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwUnknownDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwUnknownDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwUnknownDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwUnknownDerivedAsBase", null, sync, _iceE_throwUnknownDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwUnknownDerivedAsBase =
    {
        BaseException.class
    };

    default void throwPreservedException()
        throws PreservedException
    {
        throwPreservedException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwPreservedException(java.util.Map<String, String> context)
        throws PreservedException
    {
        try
        {
            _iceI_throwPreservedExceptionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(PreservedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwPreservedExceptionAsync()
    {
        return _iceI_throwPreservedExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwPreservedExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwPreservedExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwPreservedExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwPreservedException", null, sync, _iceE_throwPreservedException);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwPreservedException =
    {
        PreservedException.class
    };

    default Forward useForward()
    {
        return useForward(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Forward useForward(java.util.Map<String, String> context)
    {
        return _iceI_useForwardAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Forward> useForwardAsync()
    {
        return _iceI_useForwardAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Forward> useForwardAsync(java.util.Map<String, String> context)
    {
        return _iceI_useForwardAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Forward> _iceI_useForwardAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Forward> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "useForward", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<Forward> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, Forward.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default TestIntfPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (TestIntfPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default TestIntfPrx ice_adapterId(String newAdapterId)
    {
        return (TestIntfPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (TestIntfPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default TestIntfPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default TestIntfPrx ice_invocationTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default TestIntfPrx ice_connectionCached(boolean newCache)
    {
        return (TestIntfPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (TestIntfPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_secure(boolean b)
    {
        return (TestIntfPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (TestIntfPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_preferSecure(boolean b)
    {
        return (TestIntfPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (TestIntfPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (TestIntfPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default TestIntfPrx ice_collocationOptimized(boolean b)
    {
        return (TestIntfPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default TestIntfPrx ice_twoway()
    {
        return (TestIntfPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_oneway()
    {
        return (TestIntfPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_batchOneway()
    {
        return (TestIntfPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_datagram()
    {
        return (TestIntfPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_batchDatagram()
    {
        return (TestIntfPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default TestIntfPrx ice_compress(boolean co)
    {
        return (TestIntfPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default TestIntfPrx ice_timeout(int t)
    {
        return (TestIntfPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default TestIntfPrx ice_connectionId(String connectionId)
    {
        return (TestIntfPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (TestIntfPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }
}
