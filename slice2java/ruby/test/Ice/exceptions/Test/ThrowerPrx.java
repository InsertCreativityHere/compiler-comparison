//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface ThrowerPrx extends com.zeroc.Ice.ObjectPrx
{
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default boolean supportsUndeclaredExceptions()
    {
        return supportsUndeclaredExceptions(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsUndeclaredExceptions(java.util.Map<String, String> context)
    {
        return _iceI_supportsUndeclaredExceptionsAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsUndeclaredExceptionsAsync()
    {
        return _iceI_supportsUndeclaredExceptionsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsUndeclaredExceptionsAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsUndeclaredExceptionsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsUndeclaredExceptionsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsUndeclaredExceptions", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean supportsAssertException()
    {
        return supportsAssertException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsAssertException(java.util.Map<String, String> context)
    {
        return _iceI_supportsAssertExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsAssertExceptionAsync()
    {
        return _iceI_supportsAssertExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsAssertExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsAssertExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsAssertExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsAssertException", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default void throwAasA(int a)
        throws A
    {
        throwAasA(a, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwAasA(int a, java.util.Map<String, String> context)
        throws A
    {
        try
        {
            _iceI_throwAasAAsync(a, context, true).waitForResponseOrUserEx();
        }
        catch(A ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwAasAAsync(int a)
    {
        return _iceI_throwAasAAsync(a, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwAasAAsync(int a, java.util.Map<String, String> context)
    {
        return _iceI_throwAasAAsync(a, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwAasAAsync(int iceP_a, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwAasA", null, sync, _iceE_throwAasA);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwAasA =
    {
        A.class
    };

    default void throwAorDasAorD(int a)
        throws A,
               D
    {
        throwAorDasAorD(a, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwAorDasAorD(int a, java.util.Map<String, String> context)
        throws A,
               D
    {
        try
        {
            _iceI_throwAorDasAorDAsync(a, context, true).waitForResponseOrUserEx();
        }
        catch(A ex)
        {
            throw ex;
        }
        catch(D ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwAorDasAorDAsync(int a)
    {
        return _iceI_throwAorDasAorDAsync(a, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwAorDasAorDAsync(int a, java.util.Map<String, String> context)
    {
        return _iceI_throwAorDasAorDAsync(a, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwAorDasAorDAsync(int iceP_a, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwAorDasAorD", null, sync, _iceE_throwAorDasAorD);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwAorDasAorD =
    {
        A.class,
        D.class
    };

    default void throwBasA(int a, int b)
        throws A
    {
        throwBasA(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwBasA(int a, int b, java.util.Map<String, String> context)
        throws A
    {
        try
        {
            _iceI_throwBasAAsync(a, b, context, true).waitForResponseOrUserEx();
        }
        catch(A ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwBasAAsync(int a, int b)
    {
        return _iceI_throwBasAAsync(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwBasAAsync(int a, int b, java.util.Map<String, String> context)
    {
        return _iceI_throwBasAAsync(a, b, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwBasAAsync(int iceP_a, int iceP_b, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwBasA", null, sync, _iceE_throwBasA);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwBasA =
    {
        A.class
    };

    default void throwCasA(int a, int b, int c)
        throws A
    {
        throwCasA(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwCasA(int a, int b, int c, java.util.Map<String, String> context)
        throws A
    {
        try
        {
            _iceI_throwCasAAsync(a, b, c, context, true).waitForResponseOrUserEx();
        }
        catch(A ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasAAsync(int a, int b, int c)
    {
        return _iceI_throwCasAAsync(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasAAsync(int a, int b, int c, java.util.Map<String, String> context)
    {
        return _iceI_throwCasAAsync(a, b, c, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_c -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwCasAAsync(int iceP_a, int iceP_b, int iceP_c, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwCasA", null, sync, _iceE_throwCasA);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                     ostr.writeInt(iceP_c);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwCasA =
    {
        A.class
    };

    default void throwBasB(int a, int b)
        throws B
    {
        throwBasB(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwBasB(int a, int b, java.util.Map<String, String> context)
        throws B
    {
        try
        {
            _iceI_throwBasBAsync(a, b, context, true).waitForResponseOrUserEx();
        }
        catch(B ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwBasBAsync(int a, int b)
    {
        return _iceI_throwBasBAsync(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwBasBAsync(int a, int b, java.util.Map<String, String> context)
    {
        return _iceI_throwBasBAsync(a, b, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwBasBAsync(int iceP_a, int iceP_b, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwBasB", null, sync, _iceE_throwBasB);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwBasB =
    {
        B.class
    };

    default void throwCasB(int a, int b, int c)
        throws B
    {
        throwCasB(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwCasB(int a, int b, int c, java.util.Map<String, String> context)
        throws B
    {
        try
        {
            _iceI_throwCasBAsync(a, b, c, context, true).waitForResponseOrUserEx();
        }
        catch(B ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasBAsync(int a, int b, int c)
    {
        return _iceI_throwCasBAsync(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasBAsync(int a, int b, int c, java.util.Map<String, String> context)
    {
        return _iceI_throwCasBAsync(a, b, c, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_c -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwCasBAsync(int iceP_a, int iceP_b, int iceP_c, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwCasB", null, sync, _iceE_throwCasB);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                     ostr.writeInt(iceP_c);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwCasB =
    {
        B.class
    };

    default void throwCasC(int a, int b, int c)
        throws C
    {
        throwCasC(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwCasC(int a, int b, int c, java.util.Map<String, String> context)
        throws C
    {
        try
        {
            _iceI_throwCasCAsync(a, b, c, context, true).waitForResponseOrUserEx();
        }
        catch(C ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasCAsync(int a, int b, int c)
    {
        return _iceI_throwCasCAsync(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwCasCAsync(int a, int b, int c, java.util.Map<String, String> context)
    {
        return _iceI_throwCasCAsync(a, b, c, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_c -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwCasCAsync(int iceP_a, int iceP_b, int iceP_c, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwCasC", null, sync, _iceE_throwCasC);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                     ostr.writeInt(iceP_c);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwCasC =
    {
        C.class
    };

    default void throwModA(int a, int a2)
        throws Test.Mod.A
    {
        throwModA(a, a2, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwModA(int a, int a2, java.util.Map<String, String> context)
        throws Test.Mod.A
    {
        try
        {
            _iceI_throwModAAsync(a, a2, context, true).waitForResponseOrUserEx();
        }
        catch(Test.Mod.A ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwModAAsync(int a, int a2)
    {
        return _iceI_throwModAAsync(a, a2, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwModAAsync(int a, int a2, java.util.Map<String, String> context)
    {
        return _iceI_throwModAAsync(a, a2, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_a2 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwModAAsync(int iceP_a, int iceP_a2, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwModA", null, sync, _iceE_throwModA);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_a2);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwModA =
    {
        Test.Mod.A.class
    };

    default void throwUndeclaredA(int a)
    {
        throwUndeclaredA(a, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwUndeclaredA(int a, java.util.Map<String, String> context)
    {
        _iceI_throwUndeclaredAAsync(a, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredAAsync(int a)
    {
        return _iceI_throwUndeclaredAAsync(a, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredAAsync(int a, java.util.Map<String, String> context)
    {
        return _iceI_throwUndeclaredAAsync(a, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwUndeclaredAAsync(int iceP_a, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwUndeclaredA", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                 }, null);
        return f;
    }

    default void throwUndeclaredB(int a, int b)
    {
        throwUndeclaredB(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwUndeclaredB(int a, int b, java.util.Map<String, String> context)
    {
        _iceI_throwUndeclaredBAsync(a, b, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredBAsync(int a, int b)
    {
        return _iceI_throwUndeclaredBAsync(a, b, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredBAsync(int a, int b, java.util.Map<String, String> context)
    {
        return _iceI_throwUndeclaredBAsync(a, b, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwUndeclaredBAsync(int iceP_a, int iceP_b, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwUndeclaredB", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                 }, null);
        return f;
    }

    default void throwUndeclaredC(int a, int b, int c)
    {
        throwUndeclaredC(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwUndeclaredC(int a, int b, int c, java.util.Map<String, String> context)
    {
        _iceI_throwUndeclaredCAsync(a, b, c, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredCAsync(int a, int b, int c)
    {
        return _iceI_throwUndeclaredCAsync(a, b, c, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwUndeclaredCAsync(int a, int b, int c, java.util.Map<String, String> context)
    {
        return _iceI_throwUndeclaredCAsync(a, b, c, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_c -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwUndeclaredC", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_a);
                     ostr.writeInt(iceP_b);
                     ostr.writeInt(iceP_c);
                 }, null);
        return f;
    }

    default void throwLocalException()
    {
        throwLocalException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwLocalException(java.util.Map<String, String> context)
    {
        _iceI_throwLocalExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwLocalExceptionAsync()
    {
        return _iceI_throwLocalExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwLocalExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwLocalExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwLocalExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwLocalException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void throwNonIceException()
    {
        throwNonIceException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwNonIceException(java.util.Map<String, String> context)
    {
        _iceI_throwNonIceExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwNonIceExceptionAsync()
    {
        return _iceI_throwNonIceExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwNonIceExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwNonIceExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwNonIceExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwNonIceException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void throwAssertException()
    {
        throwAssertException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwAssertException(java.util.Map<String, String> context)
    {
        _iceI_throwAssertExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwAssertExceptionAsync()
    {
        return _iceI_throwAssertExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwAssertExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwAssertExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwAssertExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwAssertException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default byte[] throwMemoryLimitException(byte[] seq)
    {
        return throwMemoryLimitException(seq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] throwMemoryLimitException(byte[] seq, java.util.Map<String, String> context)
    {
        return _iceI_throwMemoryLimitExceptionAsync(seq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> throwMemoryLimitExceptionAsync(byte[] seq)
    {
        return _iceI_throwMemoryLimitExceptionAsync(seq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, java.util.Map<String, String> context)
    {
        return _iceI_throwMemoryLimitExceptionAsync(seq, context, false);
    }

    /**
     * @hidden
     * @param iceP_seq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_throwMemoryLimitExceptionAsync(byte[] iceP_seq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwMemoryLimitException", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_seq);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default void throwLocalExceptionIdempotent()
    {
        throwLocalExceptionIdempotent(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwLocalExceptionIdempotent(java.util.Map<String, String> context)
    {
        _iceI_throwLocalExceptionIdempotentAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> throwLocalExceptionIdempotentAsync()
    {
        return _iceI_throwLocalExceptionIdempotentAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwLocalExceptionIdempotentAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwLocalExceptionIdempotentAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwLocalExceptionIdempotentAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwLocalExceptionIdempotent", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ThrowerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ThrowerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _ThrowerPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ThrowerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ThrowerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ThrowerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ThrowerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ThrowerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ThrowerPrxI(obj.ice_facet(facet));
    }

    @Override
    ThrowerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ThrowerPrx ice_adapterId(String newAdapterId);

    @Override
    ThrowerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ThrowerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ThrowerPrx ice_invocationTimeout(int newTimeout);

    @Override
    ThrowerPrx ice_connectionCached(boolean newCache);

    @Override
    ThrowerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ThrowerPrx ice_secure(boolean b);

    @Override
    ThrowerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ThrowerPrx ice_preferSecure(boolean b);

    @Override
    ThrowerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ThrowerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ThrowerPrx ice_collocationOptimized(boolean b);

    @Override
    ThrowerPrx ice_twoway();

    @Override
    ThrowerPrx ice_oneway();

    @Override
    ThrowerPrx ice_batchOneway();

    @Override
    ThrowerPrx ice_datagram();

    @Override
    ThrowerPrx ice_batchDatagram();

    @Override
    ThrowerPrx ice_compress(boolean co);

    @Override
    ThrowerPrx ice_connectionId(String connectionId);

    @Override
    ThrowerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Thrower";
    }
}
