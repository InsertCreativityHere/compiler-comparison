//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test2;

public interface MyDerivedClass extends Test.MyClass
{
    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test2::MyDerivedClass",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test2::MyDerivedClass";
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "shutdown" -> Test.MyClass._iceD_shutdown(this, request);
            case "supportsCompress" -> Test.MyClass._iceD_supportsCompress(this, request);
            case "opVoid" -> Test.MyClass._iceD_opVoid(this, request);
            case "opByte" -> Test.MyClass._iceD_opByte(this, request);
            case "opBool" -> Test.MyClass._iceD_opBool(this, request);
            case "opShortIntLong" -> Test.MyClass._iceD_opShortIntLong(this, request);
            case "opFloatDouble" -> Test.MyClass._iceD_opFloatDouble(this, request);
            case "opString" -> Test.MyClass._iceD_opString(this, request);
            case "opMyEnum" -> Test.MyClass._iceD_opMyEnum(this, request);
            case "opMyClass" -> Test.MyClass._iceD_opMyClass(this, request);
            case "opStruct" -> Test.MyClass._iceD_opStruct(this, request);
            case "opByteS" -> Test.MyClass._iceD_opByteS(this, request);
            case "opBoolS" -> Test.MyClass._iceD_opBoolS(this, request);
            case "opShortIntLongS" -> Test.MyClass._iceD_opShortIntLongS(this, request);
            case "opFloatDoubleS" -> Test.MyClass._iceD_opFloatDoubleS(this, request);
            case "opStringS" -> Test.MyClass._iceD_opStringS(this, request);
            case "opByteSS" -> Test.MyClass._iceD_opByteSS(this, request);
            case "opBoolSS" -> Test.MyClass._iceD_opBoolSS(this, request);
            case "opShortIntLongSS" -> Test.MyClass._iceD_opShortIntLongSS(this, request);
            case "opFloatDoubleSS" -> Test.MyClass._iceD_opFloatDoubleSS(this, request);
            case "opStringSS" -> Test.MyClass._iceD_opStringSS(this, request);
            case "opStringSSS" -> Test.MyClass._iceD_opStringSSS(this, request);
            case "opByteBoolD" -> Test.MyClass._iceD_opByteBoolD(this, request);
            case "opShortIntD" -> Test.MyClass._iceD_opShortIntD(this, request);
            case "opLongFloatD" -> Test.MyClass._iceD_opLongFloatD(this, request);
            case "opStringStringD" -> Test.MyClass._iceD_opStringStringD(this, request);
            case "opStringMyEnumD" -> Test.MyClass._iceD_opStringMyEnumD(this, request);
            case "opMyEnumStringD" -> Test.MyClass._iceD_opMyEnumStringD(this, request);
            case "opMyStructMyEnumD" -> Test.MyClass._iceD_opMyStructMyEnumD(this, request);
            case "opByteBoolDS" -> Test.MyClass._iceD_opByteBoolDS(this, request);
            case "opShortIntDS" -> Test.MyClass._iceD_opShortIntDS(this, request);
            case "opLongFloatDS" -> Test.MyClass._iceD_opLongFloatDS(this, request);
            case "opStringStringDS" -> Test.MyClass._iceD_opStringStringDS(this, request);
            case "opStringMyEnumDS" -> Test.MyClass._iceD_opStringMyEnumDS(this, request);
            case "opMyEnumStringDS" -> Test.MyClass._iceD_opMyEnumStringDS(this, request);
            case "opMyStructMyEnumDS" -> Test.MyClass._iceD_opMyStructMyEnumDS(this, request);
            case "opByteByteSD" -> Test.MyClass._iceD_opByteByteSD(this, request);
            case "opBoolBoolSD" -> Test.MyClass._iceD_opBoolBoolSD(this, request);
            case "opShortShortSD" -> Test.MyClass._iceD_opShortShortSD(this, request);
            case "opIntIntSD" -> Test.MyClass._iceD_opIntIntSD(this, request);
            case "opLongLongSD" -> Test.MyClass._iceD_opLongLongSD(this, request);
            case "opStringFloatSD" -> Test.MyClass._iceD_opStringFloatSD(this, request);
            case "opStringDoubleSD" -> Test.MyClass._iceD_opStringDoubleSD(this, request);
            case "opStringStringSD" -> Test.MyClass._iceD_opStringStringSD(this, request);
            case "opMyEnumMyEnumSD" -> Test.MyClass._iceD_opMyEnumMyEnumSD(this, request);
            case "opIntS" -> Test.MyClass._iceD_opIntS(this, request);
            case "opByteSOneway" -> Test.MyClass._iceD_opByteSOneway(this, request);
            case "opByteSOnewayCallCount" -> Test.MyClass._iceD_opByteSOnewayCallCount(this, request);
            case "opContext" -> Test.MyClass._iceD_opContext(this, request);
            case "opIdempotent" -> Test.MyClass._iceD_opIdempotent(this, request);
            case "opByte1" -> Test.MyClass._iceD_opByte1(this, request);
            case "opShort1" -> Test.MyClass._iceD_opShort1(this, request);
            case "opInt1" -> Test.MyClass._iceD_opInt1(this, request);
            case "opLong1" -> Test.MyClass._iceD_opLong1(this, request);
            case "opFloat1" -> Test.MyClass._iceD_opFloat1(this, request);
            case "opDouble1" -> Test.MyClass._iceD_opDouble1(this, request);
            case "opString1" -> Test.MyClass._iceD_opString1(this, request);
            case "opStringS1" -> Test.MyClass._iceD_opStringS1(this, request);
            case "opByteBoolD1" -> Test.MyClass._iceD_opByteBoolD1(this, request);
            case "opStringS2" -> Test.MyClass._iceD_opStringS2(this, request);
            case "opByteBoolD2" -> Test.MyClass._iceD_opByteBoolD2(this, request);
            case "opStringLiterals" -> Test.MyClass._iceD_opStringLiterals(this, request);
            case "opMStruct1" -> Test.MyClass._iceD_opMStruct1(this, request);
            case "opMStruct2" -> Test.MyClass._iceD_opMStruct2(this, request);
            case "opMSeq1" -> Test.MyClass._iceD_opMSeq1(this, request);
            case "opMSeq2" -> Test.MyClass._iceD_opMSeq2(this, request);
            case "opMDict1" -> Test.MyClass._iceD_opMDict1(this, request);
            case "opMDict2" -> Test.MyClass._iceD_opMDict2(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
