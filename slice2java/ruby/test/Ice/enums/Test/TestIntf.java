//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByte.
     **/
    public static class OpByteResult
    {
        /**
         * Default constructor.
         **/
        public OpByteResult()
        {
        }

        public OpByteResult(ByteEnum returnValue, ByteEnum b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public ByteEnum returnValue;
        public ByteEnum b2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteEnum.ice_write(ostr, this.b2);
            ByteEnum.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.b2 = ByteEnum.ice_read(istr);
            returnValue = ByteEnum.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opShort.
     **/
    public static class OpShortResult
    {
        /**
         * Default constructor.
         **/
        public OpShortResult()
        {
        }

        public OpShortResult(ShortEnum returnValue, ShortEnum s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public ShortEnum returnValue;
        public ShortEnum s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortEnum.ice_write(ostr, this.s2);
            ShortEnum.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = ShortEnum.ice_read(istr);
            returnValue = ShortEnum.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opInt.
     **/
    public static class OpIntResult
    {
        /**
         * Default constructor.
         **/
        public OpIntResult()
        {
        }

        public OpIntResult(IntEnum returnValue, IntEnum i2)
        {
            this.returnValue = returnValue;
            this.i2 = i2;
        }

        public IntEnum returnValue;
        public IntEnum i2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntEnum.ice_write(ostr, this.i2);
            IntEnum.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.i2 = IntEnum.ice_read(istr);
            returnValue = IntEnum.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opSimple.
     **/
    public static class OpSimpleResult
    {
        /**
         * Default constructor.
         **/
        public OpSimpleResult()
        {
        }

        public OpSimpleResult(SimpleEnum returnValue, SimpleEnum s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public SimpleEnum returnValue;
        public SimpleEnum s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SimpleEnum.ice_write(ostr, this.s2);
            SimpleEnum.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = SimpleEnum.ice_read(istr);
            returnValue = SimpleEnum.ice_read(istr);
        }
    }

    TestIntf.OpByteResult opByte(ByteEnum b1, com.zeroc.Ice.Current current);

    TestIntf.OpShortResult opShort(ShortEnum s1, com.zeroc.Ice.Current current);

    TestIntf.OpIntResult opInt(IntEnum i1, com.zeroc.Ice.Current current);

    TestIntf.OpSimpleResult opSimple(SimpleEnum s1, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByte(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ByteEnum iceP_b1;
        iceP_b1 = ByteEnum.ice_read(istr);
        istr.endEncapsulation();
        TestIntf.OpByteResult ret = obj.opByte(iceP_b1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShort(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ShortEnum iceP_s1;
        iceP_s1 = ShortEnum.ice_read(istr);
        istr.endEncapsulation();
        TestIntf.OpShortResult ret = obj.opShort(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opInt(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IntEnum iceP_i1;
        iceP_i1 = IntEnum.ice_read(istr);
        istr.endEncapsulation();
        TestIntf.OpIntResult ret = obj.opInt(iceP_i1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSimple(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SimpleEnum iceP_s1;
        iceP_s1 = SimpleEnum.ice_read(istr);
        istr.endEncapsulation();
        TestIntf.OpSimpleResult ret = obj.opSimple(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opByte" -> TestIntf._iceD_opByte(this, request);
            case "opShort" -> TestIntf._iceD_opShort(this, request);
            case "opInt" -> TestIntf._iceD_opInt(this, request);
            case "opSimple" -> TestIntf._iceD_opSimple(this, request);
            case "shutdown" -> TestIntf._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
