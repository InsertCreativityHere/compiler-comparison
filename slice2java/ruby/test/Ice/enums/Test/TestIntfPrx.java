//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestIntf.OpByteResult opByte(ByteEnum b1)
    {
        return opByte(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteResult opByte(ByteEnum b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(b1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteResult> opByteAsync(ByteEnum b1)
    {
        return _iceI_opByteAsync(b1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteResult> opByteAsync(ByteEnum b1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(b1, context, false);
    }

    /**
     * @hidden
     * @param iceP_b1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpByteResult> _iceI_opByteAsync(ByteEnum iceP_b1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpByteResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opByte", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ByteEnum.ice_write(ostr, iceP_b1);
                 }, istr -> {
                     TestIntf.OpByteResult ret = new TestIntf.OpByteResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpShortResult opShort(ShortEnum s1)
    {
        return opShort(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpShortResult opShort(ShortEnum s1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortResult> opShortAsync(ShortEnum s1)
    {
        return _iceI_opShortAsync(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortResult> opShortAsync(ShortEnum s1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpShortResult> _iceI_opShortAsync(ShortEnum iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpShortResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opShort", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ShortEnum.ice_write(ostr, iceP_s1);
                 }, istr -> {
                     TestIntf.OpShortResult ret = new TestIntf.OpShortResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpIntResult opInt(IntEnum i1)
    {
        return opInt(i1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpIntResult opInt(IntEnum i1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(i1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntResult> opIntAsync(IntEnum i1)
    {
        return _iceI_opIntAsync(i1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntResult> opIntAsync(IntEnum i1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(i1, context, false);
    }

    /**
     * @hidden
     * @param iceP_i1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpIntResult> _iceI_opIntAsync(IntEnum iceP_i1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpIntResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opInt", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntEnum.ice_write(ostr, iceP_i1);
                 }, istr -> {
                     TestIntf.OpIntResult ret = new TestIntf.OpIntResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpSimpleResult opSimple(SimpleEnum s1)
    {
        return opSimple(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpSimpleResult opSimple(SimpleEnum s1, java.util.Map<String, String> context)
    {
        return _iceI_opSimpleAsync(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpSimpleResult> opSimpleAsync(SimpleEnum s1)
    {
        return _iceI_opSimpleAsync(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpSimpleResult> opSimpleAsync(SimpleEnum s1, java.util.Map<String, String> context)
    {
        return _iceI_opSimpleAsync(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpSimpleResult> _iceI_opSimpleAsync(SimpleEnum iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpSimpleResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opSimple", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SimpleEnum.ice_write(ostr, iceP_s1);
                 }, istr -> {
                     TestIntf.OpSimpleResult ret = new TestIntf.OpSimpleResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
