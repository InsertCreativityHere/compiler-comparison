//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package BEGIN;

public interface extend extends com.zeroc.Ice.Object
{
    END _for(display freeze, com.zeroc.Ice.Value hash, breakPrx _if, display inspect, com.zeroc.Ice.Value method, int methods, com.zeroc.Ice.Current current)
        throws nil;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::BEGIN::extend",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::BEGIN::extend";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_for(extend obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<display> icePP_freeze = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_hash = new com.zeroc.IceInternal.Holder<>();
        breakPrx iceP_if;
        final com.zeroc.IceInternal.Holder<display> icePP_inspect = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_method = new com.zeroc.IceInternal.Holder<>();
        int iceP_methods;
        istr.readValue(v -> icePP_freeze.value = v, display.class);
        istr.readValue(v -> icePP_hash.value = v, com.zeroc.Ice.Value.class);
        iceP_if = breakPrx.uncheckedCast(istr.readProxy());
        istr.readValue(v -> icePP_inspect.value = v, display.class);
        istr.readValue(v -> icePP_method.value = v, com.zeroc.Ice.Value.class);
        iceP_methods = istr.readInt();
        istr.readPendingValues();
        inS.endReadParams();
        display iceP_freeze = icePP_freeze.value;
        com.zeroc.Ice.Value iceP_hash = icePP_hash.value;
        display iceP_inspect = icePP_inspect.value;
        com.zeroc.Ice.Value iceP_method = icePP_method.value;
        END ret = obj._for(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        END.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "for",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_for(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
