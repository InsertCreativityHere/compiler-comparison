//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package BEGIN;

public interface extend extends com.zeroc.Ice.Object
{
    END _for(display freeze, elsifPrx hash, breakPrx _if, display inspect, elsifPrx method, int methods, com.zeroc.Ice.Current current)
        throws nil;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::BEGIN::extend",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::BEGIN::extend";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_for(extend obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<display> icePP_freeze = new com.zeroc.Ice.Holder<>();
        elsifPrx iceP_hash;
        breakPrx iceP_if;
        final com.zeroc.Ice.Holder<display> icePP_inspect = new com.zeroc.Ice.Holder<>();
        elsifPrx iceP_method;
        int iceP_methods;
        istr.readValue(v -> icePP_freeze.value = v, display.class);
        iceP_hash = elsifPrx.uncheckedCast(istr.readProxy());
        iceP_if = breakPrx.uncheckedCast(istr.readProxy());
        istr.readValue(v -> icePP_inspect.value = v, display.class);
        iceP_method = elsifPrx.uncheckedCast(istr.readProxy());
        iceP_methods = istr.readInt();
        istr.readPendingValues();
        istr.endEncapsulation();
        display iceP_freeze = icePP_freeze.value;
        display iceP_inspect = icePP_inspect.value;
        END ret = obj._for(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        END.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "for" -> extend._iceD_for(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
