//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Clash;

public interface Intf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opOut.
     **/
    public static class OpOutResult
    {
        /**
         * Default constructor.
         **/
        public OpOutResult()
        {
        }

        public OpOutResult(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, java.util.Optional<java.lang.String> proxy)
        {
            this.context = context;
            this.current = current;
            this.response = response;
            this.ex = ex;
            this.sent = sent;
            this.cookie = cookie;
            this.sync = sync;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.proxy = proxy;
        }

        public OpOutResult(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, String proxy)
        {
            this.context = context;
            this.current = current;
            this.response = response;
            this.ex = ex;
            this.sent = sent;
            this.cookie = cookie;
            this.sync = sync;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.proxy = java.util.Optional.ofNullable(proxy);
        }

        public String context;
        public String current;
        public String response;
        public String ex;
        public String sent;
        public String cookie;
        public String sync;
        public String result;
        public String istr;
        public String ostr;
        public java.util.Optional<java.lang.String> proxy;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(this.context);
            ostr.writeString(this.current);
            ostr.writeString(this.response);
            ostr.writeString(this.ex);
            ostr.writeString(this.sent);
            ostr.writeString(this.cookie);
            ostr.writeString(this.sync);
            ostr.writeString(this.result);
            ostr.writeString(this.istr);
            ostr.writeString(this.ostr);
            ostr.writeString(1, this.proxy);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.context = istr.readString();
            this.current = istr.readString();
            this.response = istr.readString();
            this.ex = istr.readString();
            this.sent = istr.readString();
            this.cookie = istr.readString();
            this.sync = istr.readString();
            this.result = istr.readString();
            this.istr = istr.readString();
            this.ostr = istr.readString();
            this.proxy = istr.readString(1);
        }
    }

    void context(com.zeroc.Ice.Current current);

    void current(com.zeroc.Ice.Current current);

    void response(com.zeroc.Ice.Current current);

    void upCast(com.zeroc.Ice.Current current);

    void typeId(com.zeroc.Ice.Current current);

    void del(com.zeroc.Ice.Current current);

    void cookie(com.zeroc.Ice.Current current);

    void sync(com.zeroc.Ice.Current current);

    void inS(com.zeroc.Ice.Current current);

    void istr(com.zeroc.Ice.Current current);

    void op(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, java.util.Optional<java.lang.String> proxy, com.zeroc.Ice.Current current_);

    Intf.OpOutResult opOut(com.zeroc.Ice.Current current_);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Clash::Intf",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Clash::Intf";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_context(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.context(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_current(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.current(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_response(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.response(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_upCast(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.upCast(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_typeId(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.typeId(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_del(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.del(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_cookie(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.cookie(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sync(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.sync(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_inS(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.inS(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_istr(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.istr(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_op(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_context;
        String iceP_current;
        String iceP_response;
        String iceP_ex;
        String iceP_sent;
        String iceP_cookie;
        String iceP_sync;
        String iceP_result;
        String iceP_istr;
        String iceP_ostr;
        java.util.Optional<java.lang.String> iceP_proxy;
        iceP_context = istr.readString();
        iceP_current = istr.readString();
        iceP_response = istr.readString();
        iceP_ex = istr.readString();
        iceP_sent = istr.readString();
        iceP_cookie = istr.readString();
        iceP_sync = istr.readString();
        iceP_result = istr.readString();
        iceP_istr = istr.readString();
        iceP_ostr = istr.readString();
        iceP_proxy = istr.readString(1);
        istr.endEncapsulation();
        obj.op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOut(Intf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        Intf.OpOutResult ret = obj.opOut(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "context" -> Intf._iceD_context(this, request);
            case "current" -> Intf._iceD_current(this, request);
            case "response" -> Intf._iceD_response(this, request);
            case "upCast" -> Intf._iceD_upCast(this, request);
            case "typeId" -> Intf._iceD_typeId(this, request);
            case "del" -> Intf._iceD_del(this, request);
            case "cookie" -> Intf._iceD_cookie(this, request);
            case "sync" -> Intf._iceD_sync(this, request);
            case "inS" -> Intf._iceD_inS(this, request);
            case "istr" -> Intf._iceD_istr(this, request);
            case "op" -> Intf._iceD_op(this, request);
            case "opOut" -> Intf._iceD_opOut(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
