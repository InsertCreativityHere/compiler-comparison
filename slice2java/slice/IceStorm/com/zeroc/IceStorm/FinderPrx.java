//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceStorm;

/**
 * This interface is advertised by the IceStorm service through the Ice object with the identity `IceStorm/Finder'.
 * This allows clients to retrieve the topic manager with just the endpoint information of the IceStorm service.
 **/
public interface FinderPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Get the topic manager proxy. The proxy might point to several replicas.
     * @return The topic manager proxy. The returned proxy is never null.
     **/
    default TopicManagerPrx getTopicManager()
    {
        return getTopicManager(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the topic manager proxy. The proxy might point to several replicas.
     * @param context The Context map to send with the invocation.
     * @return The topic manager proxy. The returned proxy is never null.
     **/
    default TopicManagerPrx getTopicManager(java.util.Map<String, String> context)
    {
        return _iceI_getTopicManagerAsync(context, true).waitForResponse();
    }

    /**
     * Get the topic manager proxy. The proxy might point to several replicas.
     * @return The topic manager proxy. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicManagerPrx> getTopicManagerAsync()
    {
        return _iceI_getTopicManagerAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the topic manager proxy. The proxy might point to several replicas.
     * @param context The Context map to send with the invocation.
     * @return The topic manager proxy. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicManagerPrx> getTopicManagerAsync(java.util.Map<String, String> context)
    {
        return _iceI_getTopicManagerAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TopicManagerPrx> _iceI_getTopicManagerAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TopicManagerPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTopicManager", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     TopicManagerPrx ret;
                     ret = TopicManagerPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FinderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), FinderPrx.class, _FinderPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FinderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), FinderPrx.class, _FinderPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FinderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), FinderPrx.class, _FinderPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FinderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), FinderPrx.class, _FinderPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FinderPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, FinderPrx.class, _FinderPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FinderPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, FinderPrx.class, _FinderPrxI.class);
    }

    @Override
    FinderPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    FinderPrx ice_adapterId(String newAdapterId);

    @Override
    FinderPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    FinderPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    FinderPrx ice_invocationTimeout(int newTimeout);

    @Override
    FinderPrx ice_connectionCached(boolean newCache);

    @Override
    FinderPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    FinderPrx ice_secure(boolean b);

    @Override
    FinderPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    FinderPrx ice_preferSecure(boolean b);

    @Override
    FinderPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    FinderPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    FinderPrx ice_collocationOptimized(boolean b);

    @Override
    FinderPrx ice_twoway();

    @Override
    FinderPrx ice_oneway();

    @Override
    FinderPrx ice_batchOneway();

    @Override
    FinderPrx ice_datagram();

    @Override
    FinderPrx ice_batchDatagram();

    @Override
    FinderPrx ice_compress(boolean co);

    @Override
    FinderPrx ice_connectionId(String connectionId);

    @Override
    FinderPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStorm::Finder";
    }
}
