//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceStorm;

/**
 * A topic manager manages topics, and subscribers to topics.
 *
 * @see Topic
 **/
public interface TopicManagerPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Create a new topic. The topic name must be unique.
     * @param name The name of the topic.
     * @return A proxy to the topic instance. The returned proxy is never null.
     * @throws TopicExists Raised if a topic with the same name already exists.
     **/
    default TopicPrx create(String name)
        throws TopicExists
    {
        return create(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create a new topic. The topic name must be unique.
     * @param name The name of the topic.
     * @param context The Context map to send with the invocation.
     * @return A proxy to the topic instance. The returned proxy is never null.
     * @throws TopicExists Raised if a topic with the same name already exists.
     **/
    default TopicPrx create(String name, java.util.Map<String, String> context)
        throws TopicExists
    {
        try
        {
            return _iceI_createAsync(name, context, true).waitForResponseOrUserEx();
        }
        catch(TopicExists ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Create a new topic. The topic name must be unique.
     * @param name The name of the topic.
     * @return A proxy to the topic instance. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicPrx> createAsync(String name)
    {
        return _iceI_createAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create a new topic. The topic name must be unique.
     * @param name The name of the topic.
     * @param context The Context map to send with the invocation.
     * @return A proxy to the topic instance. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicPrx> createAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_createAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TopicPrx> _iceI_createAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TopicPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "create", null, sync, _iceE_create);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                 }, istr -> {
                     TopicPrx ret;
                     ret = TopicPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_create =
    {
        TopicExists.class
    };

    /**
     * Retrieve a topic by name.
     * @param name The name of the topic.
     * @return A proxy to the topic instance. The returned proxy is never null.
     * @throws NoSuchTopic Raised if the topic does not exist.
     **/
    default TopicPrx retrieve(String name)
        throws NoSuchTopic
    {
        return retrieve(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve a topic by name.
     * @param name The name of the topic.
     * @param context The Context map to send with the invocation.
     * @return A proxy to the topic instance. The returned proxy is never null.
     * @throws NoSuchTopic Raised if the topic does not exist.
     **/
    default TopicPrx retrieve(String name, java.util.Map<String, String> context)
        throws NoSuchTopic
    {
        try
        {
            return _iceI_retrieveAsync(name, context, true).waitForResponseOrUserEx();
        }
        catch(NoSuchTopic ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Retrieve a topic by name.
     * @param name The name of the topic.
     * @return A proxy to the topic instance. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicPrx> retrieveAsync(String name)
    {
        return _iceI_retrieveAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve a topic by name.
     * @param name The name of the topic.
     * @param context The Context map to send with the invocation.
     * @return A proxy to the topic instance. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<TopicPrx> retrieveAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_retrieveAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TopicPrx> _iceI_retrieveAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TopicPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "retrieve", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_retrieve);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                 }, istr -> {
                     TopicPrx ret;
                     ret = TopicPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_retrieve =
    {
        NoSuchTopic.class
    };

    /**
     * Retrieve all topics managed by this topic manager.
     * @return A dictionary of string, topic proxy pairs.
     **/
    default java.util.Map<java.lang.String, TopicPrx> retrieveAll()
    {
        return retrieveAll(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve all topics managed by this topic manager.
     * @param context The Context map to send with the invocation.
     * @return A dictionary of string, topic proxy pairs.
     **/
    default java.util.Map<java.lang.String, TopicPrx> retrieveAll(java.util.Map<String, String> context)
    {
        return _iceI_retrieveAllAsync(context, true).waitForResponse();
    }

    /**
     * Retrieve all topics managed by this topic manager.
     * @return A dictionary of string, topic proxy pairs.
     **/
    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, TopicPrx>> retrieveAllAsync()
    {
        return _iceI_retrieveAllAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve all topics managed by this topic manager.
     * @param context The Context map to send with the invocation.
     * @return A dictionary of string, topic proxy pairs.
     **/
    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, TopicPrx>> retrieveAllAsync(java.util.Map<String, String> context)
    {
        return _iceI_retrieveAllAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Map<java.lang.String, TopicPrx>> _iceI_retrieveAllAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Map<java.lang.String, TopicPrx>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "retrieveAll", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.Map<java.lang.String, TopicPrx> ret;
                     ret = TopicDictHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TopicManagerPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TopicManagerPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TopicManagerPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TopicManagerPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TopicManagerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TopicManagerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TopicManagerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TopicManagerPrxI(obj.ice_facet(facet));
    }

    @Override
    TopicManagerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TopicManagerPrx ice_adapterId(String newAdapterId);

    @Override
    TopicManagerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TopicManagerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TopicManagerPrx ice_invocationTimeout(int newTimeout);

    @Override
    TopicManagerPrx ice_connectionCached(boolean newCache);

    @Override
    TopicManagerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TopicManagerPrx ice_secure(boolean b);

    @Override
    TopicManagerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TopicManagerPrx ice_preferSecure(boolean b);

    @Override
    TopicManagerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TopicManagerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TopicManagerPrx ice_collocationOptimized(boolean b);

    @Override
    TopicManagerPrx ice_twoway();

    @Override
    TopicManagerPrx ice_oneway();

    @Override
    TopicManagerPrx ice_batchOneway();

    @Override
    TopicManagerPrx ice_datagram();

    @Override
    TopicManagerPrx ice_batchDatagram();

    @Override
    TopicManagerPrx ice_compress(boolean co);

    @Override
    TopicManagerPrx ice_connectionId(String connectionId);

    @Override
    TopicManagerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStorm::TopicManager";
    }

    /**
     * @hidden
     **/
    @Override
    default TopicManagerPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TopicManagerPrxI(ref);
    }
}
