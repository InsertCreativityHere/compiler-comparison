//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceStorm;

/**
 * Publishers publish information on a particular topic. A topic logically represents a type.
 *
 * @see TopicManager
 **/
public interface TopicPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Get the name of this topic.
     * @return The name of the topic.
     *
     * @see TopicManager#create
     **/
    default String getName()
    {
        return getName(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the name of this topic.
     * @param context The Context map to send with the invocation.
     * @return The name of the topic.
     *
     * @see TopicManager#create
     **/
    default String getName(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, true).waitForResponse();
    }

    /**
     * Get the name of this topic.
     * @return The name of the topic.
     *
     * @see TopicManager#create
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync()
    {
        return _iceI_getNameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the name of this topic.
     * @param context The Context map to send with the invocation.
     * @return The name of the topic.
     *
     * @see TopicManager#create
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_getNameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getName", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
     * and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
     * deployment is used this call may return a replicated proxy. The returned proxy is never null.
     * @return A proxy to publish data on this topic.
     **/
    default com.zeroc.Ice.ObjectPrx getPublisher()
    {
        return getPublisher(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
     * and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
     * deployment is used this call may return a replicated proxy. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A proxy to publish data on this topic.
     **/
    default com.zeroc.Ice.ObjectPrx getPublisher(java.util.Map<String, String> context)
    {
        return _iceI_getPublisherAsync(context, true).waitForResponse();
    }

    /**
     * Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
     * and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
     * deployment is used this call may return a replicated proxy. The returned proxy is never null.
     * @return A proxy to publish data on this topic.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getPublisherAsync()
    {
        return _iceI_getPublisherAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
     * and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
     * deployment is used this call may return a replicated proxy. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A proxy to publish data on this topic.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getPublisherAsync(java.util.Map<String, String> context)
    {
        return _iceI_getPublisherAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getPublisherAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getPublisher", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
     * calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
     * never null.
     * @return A proxy to publish data on this topic.
     **/
    default com.zeroc.Ice.ObjectPrx getNonReplicatedPublisher()
    {
        return getNonReplicatedPublisher(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
     * calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
     * never null.
     * @param context The Context map to send with the invocation.
     * @return A proxy to publish data on this topic.
     **/
    default com.zeroc.Ice.ObjectPrx getNonReplicatedPublisher(java.util.Map<String, String> context)
    {
        return _iceI_getNonReplicatedPublisherAsync(context, true).waitForResponse();
    }

    /**
     * Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
     * calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
     * never null.
     * @return A proxy to publish data on this topic.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getNonReplicatedPublisherAsync()
    {
        return _iceI_getNonReplicatedPublisherAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
     * calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
     * never null.
     * @param context The Context map to send with the invocation.
     * @return A proxy to publish data on this topic.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getNonReplicatedPublisherAsync(java.util.Map<String, String> context)
    {
        return _iceI_getNonReplicatedPublisherAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getNonReplicatedPublisherAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getNonReplicatedPublisher", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Subscribe with the given <code>qos</code> to this topic. A per-subscriber publisher object is returned.
     * @param theQoS The quality of service parameters for this subscription.
     * @param subscriber The subscriber's proxy. This proxy is never null.
     * @return The per-subscriber publisher object. The returned object is never null.
     * @throws AlreadySubscribed Raised if the subscriber object is already subscribed.
     * @throws BadQoS Raised if the requested quality of service is unavailable or invalid.
     * @throws InvalidSubscriber Raised if the subscriber object is null.
     *
     * @see #unsubscribe
     **/
    default com.zeroc.Ice.ObjectPrx subscribeAndGetPublisher(java.util.Map<java.lang.String, java.lang.String> theQoS, com.zeroc.Ice.ObjectPrx subscriber)
        throws BadQoS,
               InvalidSubscriber,
               AlreadySubscribed
    {
        return subscribeAndGetPublisher(theQoS, subscriber, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Subscribe with the given <code>qos</code> to this topic. A per-subscriber publisher object is returned.
     * @param theQoS The quality of service parameters for this subscription.
     * @param subscriber The subscriber's proxy. This proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return The per-subscriber publisher object. The returned object is never null.
     * @throws AlreadySubscribed Raised if the subscriber object is already subscribed.
     * @throws BadQoS Raised if the requested quality of service is unavailable or invalid.
     * @throws InvalidSubscriber Raised if the subscriber object is null.
     *
     * @see #unsubscribe
     **/
    default com.zeroc.Ice.ObjectPrx subscribeAndGetPublisher(java.util.Map<java.lang.String, java.lang.String> theQoS, com.zeroc.Ice.ObjectPrx subscriber, java.util.Map<String, String> context)
        throws BadQoS,
               InvalidSubscriber,
               AlreadySubscribed
    {
        try
        {
            return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, true).waitForResponseOrUserEx();
        }
        catch(BadQoS ex)
        {
            throw ex;
        }
        catch(InvalidSubscriber ex)
        {
            throw ex;
        }
        catch(AlreadySubscribed ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Subscribe with the given <code>qos</code> to this topic. A per-subscriber publisher object is returned.
     * @param theQoS The quality of service parameters for this subscription.
     * @param subscriber The subscriber's proxy. This proxy is never null.
     * @return The per-subscriber publisher object. The returned object is never null.
     *
     * @see #unsubscribe
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> subscribeAndGetPublisherAsync(java.util.Map<java.lang.String, java.lang.String> theQoS, com.zeroc.Ice.ObjectPrx subscriber)
    {
        return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Subscribe with the given <code>qos</code> to this topic. A per-subscriber publisher object is returned.
     * @param theQoS The quality of service parameters for this subscription.
     * @param subscriber The subscriber's proxy. This proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return The per-subscriber publisher object. The returned object is never null.
     *
     * @see #unsubscribe
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> subscribeAndGetPublisherAsync(java.util.Map<java.lang.String, java.lang.String> theQoS, com.zeroc.Ice.ObjectPrx subscriber, java.util.Map<String, String> context)
    {
        return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, false);
    }

    /**
     * @hidden
     * @param iceP_theQoS -
     * @param iceP_subscriber -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_subscribeAndGetPublisherAsync(java.util.Map<java.lang.String, java.lang.String> iceP_theQoS, com.zeroc.Ice.ObjectPrx iceP_subscriber, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "subscribeAndGetPublisher", null, sync, _iceE_subscribeAndGetPublisher);
        f.invoke(true, context, null, ostr -> {
                     QoSHelper.write(ostr, iceP_theQoS);
                     ostr.writeProxy(iceP_subscriber);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_subscribeAndGetPublisher =
    {
        BadQoS.class,
        InvalidSubscriber.class,
        AlreadySubscribed.class
    };

    /**
     * Unsubscribe the given <code>subscriber</code>.
     * @param subscriber The proxy of an existing subscriber. This proxy is never null.
     *
     * @see #subscribeAndGetPublisher
     **/
    default void unsubscribe(com.zeroc.Ice.ObjectPrx subscriber)
    {
        unsubscribe(subscriber, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Unsubscribe the given <code>subscriber</code>.
     * @param subscriber The proxy of an existing subscriber. This proxy is never null.
     * @param context The Context map to send with the invocation.
     *
     * @see #subscribeAndGetPublisher
     **/
    default void unsubscribe(com.zeroc.Ice.ObjectPrx subscriber, java.util.Map<String, String> context)
    {
        _iceI_unsubscribeAsync(subscriber, context, true).waitForResponse();
    }

    /**
     * Unsubscribe the given <code>subscriber</code>.
     * @param subscriber The proxy of an existing subscriber. This proxy is never null.
     * @return A future that will be completed when the invocation completes.
     *
     * @see #subscribeAndGetPublisher
     **/
    default java.util.concurrent.CompletableFuture<Void> unsubscribeAsync(com.zeroc.Ice.ObjectPrx subscriber)
    {
        return _iceI_unsubscribeAsync(subscriber, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Unsubscribe the given <code>subscriber</code>.
     * @param subscriber The proxy of an existing subscriber. This proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     *
     * @see #subscribeAndGetPublisher
     **/
    default java.util.concurrent.CompletableFuture<Void> unsubscribeAsync(com.zeroc.Ice.ObjectPrx subscriber, java.util.Map<String, String> context)
    {
        return _iceI_unsubscribeAsync(subscriber, context, false);
    }

    /**
     * @hidden
     * @param iceP_subscriber -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unsubscribeAsync(com.zeroc.Ice.ObjectPrx iceP_subscriber, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unsubscribe", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_subscriber);
                 }, null);
        return f;
    }

    /**
     * Create a link to the given topic. All events originating on this topic will also be sent to
     * <code>linkTo</code>.
     * @param linkTo The topic to link to. This proxy is never null.
     * @param cost The cost to the linked topic.
     * @throws LinkExists Raised if a link to the same topic already exists.
     **/
    default void link(TopicPrx linkTo, int cost)
        throws LinkExists
    {
        link(linkTo, cost, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create a link to the given topic. All events originating on this topic will also be sent to
     * <code>linkTo</code>.
     * @param linkTo The topic to link to. This proxy is never null.
     * @param cost The cost to the linked topic.
     * @param context The Context map to send with the invocation.
     * @throws LinkExists Raised if a link to the same topic already exists.
     **/
    default void link(TopicPrx linkTo, int cost, java.util.Map<String, String> context)
        throws LinkExists
    {
        try
        {
            _iceI_linkAsync(linkTo, cost, context, true).waitForResponseOrUserEx();
        }
        catch(LinkExists ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Create a link to the given topic. All events originating on this topic will also be sent to
     * <code>linkTo</code>.
     * @param linkTo The topic to link to. This proxy is never null.
     * @param cost The cost to the linked topic.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> linkAsync(TopicPrx linkTo, int cost)
    {
        return _iceI_linkAsync(linkTo, cost, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create a link to the given topic. All events originating on this topic will also be sent to
     * <code>linkTo</code>.
     * @param linkTo The topic to link to. This proxy is never null.
     * @param cost The cost to the linked topic.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> linkAsync(TopicPrx linkTo, int cost, java.util.Map<String, String> context)
    {
        return _iceI_linkAsync(linkTo, cost, context, false);
    }

    /**
     * @hidden
     * @param iceP_linkTo -
     * @param iceP_cost -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_linkAsync(TopicPrx iceP_linkTo, int iceP_cost, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "link", null, sync, _iceE_link);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_linkTo);
                     ostr.writeInt(iceP_cost);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_link =
    {
        LinkExists.class
    };

    /**
     * Destroy the link from this topic to the given topic <code>linkTo</code>.
     * @param linkTo The topic to destroy the link to. This proxy is never null.
     * @throws NoSuchLink Raised if a link to the topic does not exist.
     **/
    default void unlink(TopicPrx linkTo)
        throws NoSuchLink
    {
        unlink(linkTo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the link from this topic to the given topic <code>linkTo</code>.
     * @param linkTo The topic to destroy the link to. This proxy is never null.
     * @param context The Context map to send with the invocation.
     * @throws NoSuchLink Raised if a link to the topic does not exist.
     **/
    default void unlink(TopicPrx linkTo, java.util.Map<String, String> context)
        throws NoSuchLink
    {
        try
        {
            _iceI_unlinkAsync(linkTo, context, true).waitForResponseOrUserEx();
        }
        catch(NoSuchLink ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Destroy the link from this topic to the given topic <code>linkTo</code>.
     * @param linkTo The topic to destroy the link to. This proxy is never null.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> unlinkAsync(TopicPrx linkTo)
    {
        return _iceI_unlinkAsync(linkTo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the link from this topic to the given topic <code>linkTo</code>.
     * @param linkTo The topic to destroy the link to. This proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> unlinkAsync(TopicPrx linkTo, java.util.Map<String, String> context)
    {
        return _iceI_unlinkAsync(linkTo, context, false);
    }

    /**
     * @hidden
     * @param iceP_linkTo -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unlinkAsync(TopicPrx iceP_linkTo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unlink", null, sync, _iceE_unlink);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_linkTo);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unlink =
    {
        NoSuchLink.class
    };

    /**
     * Retrieve information on the current links.
     * @return A sequence of LinkInfo objects.
     **/
    default LinkInfo[] getLinkInfoSeq()
    {
        return getLinkInfoSeq(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve information on the current links.
     * @param context The Context map to send with the invocation.
     * @return A sequence of LinkInfo objects.
     **/
    default LinkInfo[] getLinkInfoSeq(java.util.Map<String, String> context)
    {
        return _iceI_getLinkInfoSeqAsync(context, true).waitForResponse();
    }

    /**
     * Retrieve information on the current links.
     * @return A sequence of LinkInfo objects.
     **/
    default java.util.concurrent.CompletableFuture<LinkInfo[]> getLinkInfoSeqAsync()
    {
        return _iceI_getLinkInfoSeqAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve information on the current links.
     * @param context The Context map to send with the invocation.
     * @return A sequence of LinkInfo objects.
     **/
    default java.util.concurrent.CompletableFuture<LinkInfo[]> getLinkInfoSeqAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLinkInfoSeqAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<LinkInfo[]> _iceI_getLinkInfoSeqAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<LinkInfo[]> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getLinkInfoSeq", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     LinkInfo[] ret;
                     ret = LinkInfoSeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Retrieve the list of subscribers for this topic.
     * @return The sequence of Ice identities for the subscriber objects.
     **/
    default com.zeroc.Ice.Identity[] getSubscribers()
    {
        return getSubscribers(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve the list of subscribers for this topic.
     * @param context The Context map to send with the invocation.
     * @return The sequence of Ice identities for the subscriber objects.
     **/
    default com.zeroc.Ice.Identity[] getSubscribers(java.util.Map<String, String> context)
    {
        return _iceI_getSubscribersAsync(context, true).waitForResponse();
    }

    /**
     * Retrieve the list of subscribers for this topic.
     * @return The sequence of Ice identities for the subscriber objects.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Identity[]> getSubscribersAsync()
    {
        return _iceI_getSubscribersAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve the list of subscribers for this topic.
     * @param context The Context map to send with the invocation.
     * @return The sequence of Ice identities for the subscriber objects.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Identity[]> getSubscribersAsync(java.util.Map<String, String> context)
    {
        return _iceI_getSubscribersAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.Identity[]> _iceI_getSubscribersAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.Identity[]> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getSubscribers", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.Ice.Identity[] ret;
                     ret = com.zeroc.Ice.IdentitySeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Destroy the topic.
     **/
    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the topic.
     * @param context The Context map to send with the invocation.
     **/
    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    /**
     * Destroy the topic.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the topic.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TopicPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TopicPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TopicPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TopicPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TopicPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TopicPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TopicPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TopicPrxI(obj.ice_facet(facet));
    }

    @Override
    TopicPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TopicPrx ice_adapterId(String newAdapterId);

    @Override
    TopicPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TopicPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TopicPrx ice_invocationTimeout(int newTimeout);

    @Override
    TopicPrx ice_connectionCached(boolean newCache);

    @Override
    TopicPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TopicPrx ice_secure(boolean b);

    @Override
    TopicPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TopicPrx ice_preferSecure(boolean b);

    @Override
    TopicPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TopicPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TopicPrx ice_collocationOptimized(boolean b);

    @Override
    TopicPrx ice_twoway();

    @Override
    TopicPrx ice_oneway();

    @Override
    TopicPrx ice_batchOneway();

    @Override
    TopicPrx ice_datagram();

    @Override
    TopicPrx ice_batchDatagram();

    @Override
    TopicPrx ice_compress(boolean co);

    @Override
    TopicPrx ice_connectionId(String connectionId);

    @Override
    TopicPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStorm::Topic";
    }

    /**
     * @hidden
     **/
    @Override
    default TopicPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _TopicPrxI(ref);
    }
}
