//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServiceManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceBox;

/**
 * Administers a set of IceBox Service instances.
 *
 * @see Service
 **/
public interface ServiceManagerPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Start an individual service.
     * @param service The service name.
     * @throws AlreadyStartedException If the service is already running.
     * @throws NoSuchServiceException If no service could be found with the given name.
     **/
    default void startService(String service)
        throws AlreadyStartedException,
               NoSuchServiceException
    {
        startService(service, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Start an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @throws AlreadyStartedException If the service is already running.
     * @throws NoSuchServiceException If no service could be found with the given name.
     **/
    default void startService(String service, java.util.Map<String, String> context)
        throws AlreadyStartedException,
               NoSuchServiceException
    {
        try
        {
            _iceI_startServiceAsync(service, context, true).waitForResponseOrUserEx();
        }
        catch(AlreadyStartedException ex)
        {
            throw ex;
        }
        catch(NoSuchServiceException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Start an individual service.
     * @param service The service name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> startServiceAsync(String service)
    {
        return _iceI_startServiceAsync(service, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Start an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> startServiceAsync(String service, java.util.Map<String, String> context)
    {
        return _iceI_startServiceAsync(service, context, false);
    }

    /**
     * @hidden
     * @param iceP_service -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_startServiceAsync(String iceP_service, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "startService", null, sync, _iceE_startService);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_service);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_startService =
    {
        AlreadyStartedException.class,
        NoSuchServiceException.class
    };

    /**
     * Stop an individual service.
     * @param service The service name.
     * @throws AlreadyStoppedException If the service is already stopped.
     * @throws NoSuchServiceException If no service could be found with the given name.
     **/
    default void stopService(String service)
        throws AlreadyStoppedException,
               NoSuchServiceException
    {
        stopService(service, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @throws AlreadyStoppedException If the service is already stopped.
     * @throws NoSuchServiceException If no service could be found with the given name.
     **/
    default void stopService(String service, java.util.Map<String, String> context)
        throws AlreadyStoppedException,
               NoSuchServiceException
    {
        try
        {
            _iceI_stopServiceAsync(service, context, true).waitForResponseOrUserEx();
        }
        catch(AlreadyStoppedException ex)
        {
            throw ex;
        }
        catch(NoSuchServiceException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Stop an individual service.
     * @param service The service name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> stopServiceAsync(String service)
    {
        return _iceI_stopServiceAsync(service, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Stop an individual service.
     * @param service The service name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> stopServiceAsync(String service, java.util.Map<String, String> context)
    {
        return _iceI_stopServiceAsync(service, context, false);
    }

    /**
     * @hidden
     * @param iceP_service -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_stopServiceAsync(String iceP_service, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "stopService", null, sync, _iceE_stopService);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_service);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_stopService =
    {
        AlreadyStoppedException.class,
        NoSuchServiceException.class
    };

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     **/
    default void addObserver(ServiceObserverPrx observer)
    {
        addObserver(observer, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param context The Context map to send with the invocation.
     **/
    default void addObserver(ServiceObserverPrx observer, java.util.Map<String, String> context)
    {
        _iceI_addObserverAsync(observer, context, true).waitForResponse();
    }

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> addObserverAsync(ServiceObserverPrx observer)
    {
        return _iceI_addObserverAsync(observer, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Registers a new observer with the ServiceManager.
     * @param observer The new observer
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> addObserverAsync(ServiceObserverPrx observer, java.util.Map<String, String> context)
    {
        return _iceI_addObserverAsync(observer, context, false);
    }

    /**
     * @hidden
     * @param iceP_observer -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_addObserverAsync(ServiceObserverPrx iceP_observer, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "addObserver", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeProxy(iceP_observer);
                 }, null);
        return f;
    }

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param context The Context map to send with the invocation.
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Shut down all services. This causes stop to be invoked on all configured services.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServiceManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServiceManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _ServiceManagerPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServiceManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServiceManagerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ServiceManagerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ServiceManagerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ServiceManagerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ServiceManagerPrxI(obj.ice_facet(facet));
    }

    @Override
    ServiceManagerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ServiceManagerPrx ice_adapterId(String newAdapterId);

    @Override
    ServiceManagerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ServiceManagerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ServiceManagerPrx ice_invocationTimeout(int newTimeout);

    @Override
    ServiceManagerPrx ice_connectionCached(boolean newCache);

    @Override
    ServiceManagerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ServiceManagerPrx ice_secure(boolean b);

    @Override
    ServiceManagerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ServiceManagerPrx ice_preferSecure(boolean b);

    @Override
    ServiceManagerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ServiceManagerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ServiceManagerPrx ice_collocationOptimized(boolean b);

    @Override
    ServiceManagerPrx ice_twoway();

    @Override
    ServiceManagerPrx ice_oneway();

    @Override
    ServiceManagerPrx ice_batchOneway();

    @Override
    ServiceManagerPrx ice_datagram();

    @Override
    ServiceManagerPrx ice_batchDatagram();

    @Override
    ServiceManagerPrx ice_compress(boolean co);

    @Override
    ServiceManagerPrx ice_connectionId(String connectionId);

    @Override
    ServiceManagerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceBox::ServiceManager";
    }
}
