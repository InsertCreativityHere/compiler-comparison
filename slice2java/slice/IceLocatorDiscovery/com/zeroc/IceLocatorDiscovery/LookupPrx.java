// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package com.zeroc.IceLocatorDiscovery;

/**
 * The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
 * available Ice locators on the network.
 * Ice locator implementations provide a well-known 'Ice/LocatorLookup' object accessible through UDP multicast.
 * Clients typically make a multicast findLocator request to find the locator proxy.
 *
 * @see LookupReply
 **/
public interface LookupPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Find a locator proxy with the given instance name.
     * @param instanceName Restrict the search to Ice registries configured with the given instance name. If
     * empty, all the available registries will reply.
     * @param reply The reply object to use to send the reply.
     **/
    default void findLocator(String instanceName, LookupReplyPrx reply)
    {
        findLocator(instanceName, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find a locator proxy with the given instance name.
     * @param instanceName Restrict the search to Ice registries configured with the given instance name. If
     * empty, all the available registries will reply.
     * @param reply The reply object to use to send the reply.
     * @param context The Context map to send with the invocation.
     **/
    default void findLocator(String instanceName, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        _iceI_findLocatorAsync(instanceName, reply, context, true).waitForResponse();
    }

    /**
     * Find a locator proxy with the given instance name.
     * @param instanceName Restrict the search to Ice registries configured with the given instance name. If
     * empty, all the available registries will reply.
     * @param reply The reply object to use to send the reply.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findLocatorAsync(String instanceName, LookupReplyPrx reply)
    {
        return _iceI_findLocatorAsync(instanceName, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find a locator proxy with the given instance name.
     * @param instanceName Restrict the search to Ice registries configured with the given instance name. If
     * empty, all the available registries will reply.
     * @param reply The reply object to use to send the reply.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findLocatorAsync(String instanceName, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        return _iceI_findLocatorAsync(instanceName, reply, context, false);
    }

    /**
     * @hidden
     * @param iceP_instanceName -
     * @param iceP_reply -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_findLocatorAsync(String iceP_instanceName, LookupReplyPrx iceP_reply, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "findLocator", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_instanceName);
                     ostr.writeProxy(iceP_reply);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link LookupPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static LookupPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _LookupPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _LookupPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static LookupPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _LookupPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static LookupPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _LookupPrxI(obj.ice_facet(facet));
    }

    @Override
    LookupPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    LookupPrx ice_adapterId(String newAdapterId);

    @Override
    LookupPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    LookupPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    LookupPrx ice_invocationTimeout(int newTimeout);

    @Override
    LookupPrx ice_connectionCached(boolean newCache);

    @Override
    LookupPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    LookupPrx ice_secure(boolean b);

    @Override
    LookupPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    LookupPrx ice_preferSecure(boolean b);

    @Override
    LookupPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    LookupPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    LookupPrx ice_collocationOptimized(boolean b);

    @Override
    LookupPrx ice_twoway();

    @Override
    LookupPrx ice_oneway();

    @Override
    LookupPrx ice_batchOneway();

    @Override
    LookupPrx ice_datagram();

    @Override
    LookupPrx ice_batchDatagram();

    @Override
    LookupPrx ice_compress(boolean co);

    @Override
    LookupPrx ice_connectionId(String connectionId);

    @Override
    LookupPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceLocatorDiscovery::Lookup";
    }

    /**
     * @hidden
     **/
    @Override
    default LookupPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _LookupPrxI(ref);
    }
}
