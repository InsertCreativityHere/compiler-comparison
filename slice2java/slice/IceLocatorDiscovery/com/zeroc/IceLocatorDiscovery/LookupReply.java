//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceLocatorDiscovery;

/**
 * The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
 * implementations invoke on this interface to provide their locator proxy.
 *
 * @see Lookup
 **/
public interface LookupReply extends com.zeroc.Ice.Object
{
    /**
     * This method is called by the implementation of the Lookup interface to reply to a findLocator request.
     * @param prx The proxy of the locator.
     * @param current The Current object for the invocation.
     **/
    void foundLocator(com.zeroc.Ice.LocatorPrx prx, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceLocatorDiscovery::LookupReply"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceLocatorDiscovery::LookupReply";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_foundLocator(LookupReply obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.LocatorPrx iceP_prx;
        iceP_prx = com.zeroc.Ice.LocatorPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.foundLocator(iceP_prx, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "foundLocator" -> LookupReply._iceD_foundLocator(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
