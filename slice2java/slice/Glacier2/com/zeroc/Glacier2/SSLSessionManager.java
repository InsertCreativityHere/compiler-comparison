//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Glacier2;

/**
 * The session manager for SSL authenticated users that is responsible for managing {@link Session}} objects. New
 * session objects are created by the {@link Router}} object calling on an application-provided session manager. If
 * no session manager is provided by the application, no client-visible sessions are passed to the client.
 *
 * @see Router
 * @see Session
 **/
public interface SSLSessionManager extends com.zeroc.Ice.Object
{
    /**
     * Create a new session.
     * @param info The SSL info.
     * @param control A proxy to the session control object.
     * @param current The Current object for the invocation.
     * @return A proxy to the newly created session.
     * @throws CannotCreateSessionException Raised if the session cannot be created.
     **/
    SessionPrx create(SSLInfo info, SessionControlPrx control, com.zeroc.Ice.Current current)
        throws CannotCreateSessionException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Glacier2::SSLSessionManager",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Glacier2::SSLSessionManager";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_create(SSLSessionManager obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SSLInfo iceP_info;
        SessionControlPrx iceP_control;
        iceP_info = SSLInfo.ice_read(istr);
        iceP_control = SessionControlPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        SessionPrx ret = obj.create(iceP_info, iceP_control, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "create" -> SSLSessionManager._iceD_create(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
