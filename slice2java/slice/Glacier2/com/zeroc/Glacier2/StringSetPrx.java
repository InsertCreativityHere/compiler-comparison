//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Glacier2;

/**
 * An object for managing the set of identity constraints for specific parts of object identity on a
 * {@link Session}.
 *
 * @see Session
 * @see SessionControl
 **/
public interface StringSetPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
     * removed.
     * @param additions The sequence of strings to be added.
     **/
    default void add(String[] additions)
    {
        add(additions, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
     * removed.
     * @param additions The sequence of strings to be added.
     * @param context The Context map to send with the invocation.
     **/
    default void add(String[] additions, java.util.Map<String, String> context)
    {
        _iceI_addAsync(additions, context, true).waitForResponse();
    }

    /**
     * Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
     * removed.
     * @param additions The sequence of strings to be added.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> addAsync(String[] additions)
    {
        return _iceI_addAsync(additions, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
     * removed.
     * @param additions The sequence of strings to be added.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> addAsync(String[] additions, java.util.Map<String, String> context)
    {
        return _iceI_addAsync(additions, context, false);
    }

    /**
     * @hidden
     * @param iceP_additions -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_addAsync(String[] iceP_additions, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "add", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_additions);
                 }, null);
        return f;
    }

    /**
     * Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
     * @param deletions The sequence of strings to be removed.
     **/
    default void remove(String[] deletions)
    {
        remove(deletions, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
     * @param deletions The sequence of strings to be removed.
     * @param context The Context map to send with the invocation.
     **/
    default void remove(String[] deletions, java.util.Map<String, String> context)
    {
        _iceI_removeAsync(deletions, context, true).waitForResponse();
    }

    /**
     * Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
     * @param deletions The sequence of strings to be removed.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> removeAsync(String[] deletions)
    {
        return _iceI_removeAsync(deletions, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
     * @param deletions The sequence of strings to be removed.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> removeAsync(String[] deletions, java.util.Map<String, String> context)
    {
        return _iceI_removeAsync(deletions, context, false);
    }

    /**
     * @hidden
     * @param iceP_deletions -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_removeAsync(String[] iceP_deletions, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "remove", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_deletions);
                 }, null);
        return f;
    }

    /**
     * Returns a sequence of strings describing the constraints in this set.
     * @return The sequence of strings for this set.
     **/
    default String[] get()
    {
        return get(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Returns a sequence of strings describing the constraints in this set.
     * @param context The Context map to send with the invocation.
     * @return The sequence of strings for this set.
     **/
    default String[] get(java.util.Map<String, String> context)
    {
        return _iceI_getAsync(context, true).waitForResponse();
    }

    /**
     * Returns a sequence of strings describing the constraints in this set.
     * @return The sequence of strings for this set.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getAsync()
    {
        return _iceI_getAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Returns a sequence of strings describing the constraints in this set.
     * @param context The Context map to send with the invocation.
     * @return The sequence of strings for this set.
     **/
    default java.util.concurrent.CompletableFuture<String[]> getAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "get", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link StringSetPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static StringSetPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _StringSetPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StringSetPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StringSetPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _StringSetPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StringSetPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StringSetPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static StringSetPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _StringSetPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static StringSetPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _StringSetPrxI(obj.ice_facet(facet));
    }

    @Override
    StringSetPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    StringSetPrx ice_adapterId(String newAdapterId);

    @Override
    StringSetPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    StringSetPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    StringSetPrx ice_invocationTimeout(int newTimeout);

    @Override
    StringSetPrx ice_connectionCached(boolean newCache);

    @Override
    StringSetPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    StringSetPrx ice_secure(boolean b);

    @Override
    StringSetPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    StringSetPrx ice_preferSecure(boolean b);

    @Override
    StringSetPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    StringSetPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    StringSetPrx ice_collocationOptimized(boolean b);

    @Override
    StringSetPrx ice_twoway();

    @Override
    StringSetPrx ice_oneway();

    @Override
    StringSetPrx ice_batchOneway();

    @Override
    StringSetPrx ice_datagram();

    @Override
    StringSetPrx ice_batchDatagram();

    @Override
    StringSetPrx ice_compress(boolean co);

    @Override
    StringSetPrx ice_connectionId(String connectionId);

    @Override
    StringSetPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Glacier2::StringSet";
    }

    /**
     * @hidden
     **/
    @Override
    default StringSetPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _StringSetPrxI(ref);
    }
}
