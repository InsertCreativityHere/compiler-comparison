//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Glacier2;

/**
 * An administrative session control object, which is tied to the lifecycle of a {@link Session}.
 *
 * @see Session
 **/
public interface SessionControlPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Access the object that manages the allowable categories for object identities for this session.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default StringSetPrx categories()
    {
        return categories(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Access the object that manages the allowable categories for object identities for this session.
     * @param context The Context map to send with the invocation.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default StringSetPrx categories(java.util.Map<String, String> context)
    {
        return _iceI_categoriesAsync(context, true).waitForResponse();
    }

    /**
     * Access the object that manages the allowable categories for object identities for this session.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<StringSetPrx> categoriesAsync()
    {
        return _iceI_categoriesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Access the object that manages the allowable categories for object identities for this session.
     * @param context The Context map to send with the invocation.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<StringSetPrx> categoriesAsync(java.util.Map<String, String> context)
    {
        return _iceI_categoriesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<StringSetPrx> _iceI_categoriesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<StringSetPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "categories", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     StringSetPrx ret;
                     ret = StringSetPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Access the object that manages the allowable adapter identities for objects for this session.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default StringSetPrx adapterIds()
    {
        return adapterIds(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Access the object that manages the allowable adapter identities for objects for this session.
     * @param context The Context map to send with the invocation.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default StringSetPrx adapterIds(java.util.Map<String, String> context)
    {
        return _iceI_adapterIdsAsync(context, true).waitForResponse();
    }

    /**
     * Access the object that manages the allowable adapter identities for objects for this session.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<StringSetPrx> adapterIdsAsync()
    {
        return _iceI_adapterIdsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Access the object that manages the allowable adapter identities for objects for this session.
     * @param context The Context map to send with the invocation.
     * @return A StringSet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<StringSetPrx> adapterIdsAsync(java.util.Map<String, String> context)
    {
        return _iceI_adapterIdsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<StringSetPrx> _iceI_adapterIdsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<StringSetPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "adapterIds", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     StringSetPrx ret;
                     ret = StringSetPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Access the object that manages the allowable object identities for this session.
     * @return An IdentitySet object. The returned proxy is never null.
     **/
    default IdentitySetPrx identities()
    {
        return identities(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Access the object that manages the allowable object identities for this session.
     * @param context The Context map to send with the invocation.
     * @return An IdentitySet object. The returned proxy is never null.
     **/
    default IdentitySetPrx identities(java.util.Map<String, String> context)
    {
        return _iceI_identitiesAsync(context, true).waitForResponse();
    }

    /**
     * Access the object that manages the allowable object identities for this session.
     * @return An IdentitySet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<IdentitySetPrx> identitiesAsync()
    {
        return _iceI_identitiesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Access the object that manages the allowable object identities for this session.
     * @param context The Context map to send with the invocation.
     * @return An IdentitySet object. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<IdentitySetPrx> identitiesAsync(java.util.Map<String, String> context)
    {
        return _iceI_identitiesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<IdentitySetPrx> _iceI_identitiesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<IdentitySetPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "identities", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     IdentitySetPrx ret;
                     ret = IdentitySetPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Get the session timeout.
     * @return The timeout.
     **/
    default int getSessionTimeout()
    {
        return getSessionTimeout(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the session timeout.
     * @param context The Context map to send with the invocation.
     * @return The timeout.
     **/
    default int getSessionTimeout(java.util.Map<String, String> context)
    {
        return _iceI_getSessionTimeoutAsync(context, true).waitForResponse();
    }

    /**
     * Get the session timeout.
     * @return The timeout.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getSessionTimeoutAsync()
    {
        return _iceI_getSessionTimeoutAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the session timeout.
     * @param context The Context map to send with the invocation.
     * @return The timeout.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getSessionTimeoutAsync(java.util.Map<String, String> context)
    {
        return _iceI_getSessionTimeoutAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getSessionTimeoutAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getSessionTimeout", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Destroy the associated session.
     **/
    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the associated session.
     * @param context The Context map to send with the invocation.
     **/
    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    /**
     * Destroy the associated session.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the associated session.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link SessionControlPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static SessionControlPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _SessionControlPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionControlPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionControlPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _SessionControlPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionControlPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionControlPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SessionControlPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _SessionControlPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SessionControlPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _SessionControlPrxI(obj.ice_facet(facet));
    }

    @Override
    SessionControlPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SessionControlPrx ice_adapterId(String newAdapterId);

    @Override
    SessionControlPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SessionControlPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SessionControlPrx ice_invocationTimeout(int newTimeout);

    @Override
    SessionControlPrx ice_connectionCached(boolean newCache);

    @Override
    SessionControlPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SessionControlPrx ice_secure(boolean b);

    @Override
    SessionControlPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SessionControlPrx ice_preferSecure(boolean b);

    @Override
    SessionControlPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SessionControlPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SessionControlPrx ice_collocationOptimized(boolean b);

    @Override
    SessionControlPrx ice_twoway();

    @Override
    SessionControlPrx ice_oneway();

    @Override
    SessionControlPrx ice_batchOneway();

    @Override
    SessionControlPrx ice_datagram();

    @Override
    SessionControlPrx ice_batchDatagram();

    @Override
    SessionControlPrx ice_compress(boolean co);

    @Override
    SessionControlPrx ice_connectionId(String connectionId);

    @Override
    SessionControlPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Glacier2::SessionControl";
    }

    /**
     * @hidden
     **/
    @Override
    default SessionControlPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _SessionControlPrxI(ref);
    }
}
