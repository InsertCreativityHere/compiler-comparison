//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Glacier2;

/**
 * The SSL Glacier2 permissions verifier. This is called through the process of establishing a session.
 *
 * @see Router
 **/
public interface SSLPermissionsVerifier extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation authorize.
     **/
    public static class AuthorizeResult
    {
        /**
         * Default constructor.
         **/
        public AuthorizeResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation Authorize.
         * @param returnValue True if access is granted, or false otherwise.
         * @param reason The reason why access was denied.
         **/
        public AuthorizeResult(boolean returnValue, String reason)
        {
            this.returnValue = returnValue;
            this.reason = reason;
        }

        /**
         * True if access is granted, or false otherwise.
         **/
        public boolean returnValue;
        /**
         * The reason why access was denied.
         **/
        public String reason;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(this.reason);
            ostr.writeBool(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.reason = istr.readString();
            returnValue = istr.readBool();
        }
    }

    /**
     * Check whether a user has permission to access the router.
     * @param info The SSL information.
     * @param current The Current object for the invocation.
     * @return An instance of SSLPermissionsVerifier.AuthorizeResult.
     * @throws PermissionDeniedException Raised if the user access is denied. This can be raised in place of
     * returning false with a reason set in the reason out parameter.
     *
     * @see SSLInfo
     **/
    SSLPermissionsVerifier.AuthorizeResult authorize(SSLInfo info, com.zeroc.Ice.Current current)
        throws PermissionDeniedException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Glacier2::SSLPermissionsVerifier",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Glacier2::SSLPermissionsVerifier";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_authorize(SSLPermissionsVerifier obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SSLInfo iceP_info;
        iceP_info = SSLInfo.ice_read(istr);
        istr.endEncapsulation();
        SSLPermissionsVerifier.AuthorizeResult ret = obj.authorize(iceP_info, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.SlicedFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "authorize" -> SSLPermissionsVerifier._iceD_authorize(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
