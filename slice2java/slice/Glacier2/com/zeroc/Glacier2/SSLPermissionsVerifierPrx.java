//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Glacier2;

/**
 * The SSL Glacier2 permissions verifier. This is called through the process of establishing a session.
 *
 * @see Router
 **/
public interface SSLPermissionsVerifierPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Check whether a user has permission to access the router.
     * @param info The SSL information.
     * @return An instance of SSLPermissionsVerifier.AuthorizeResult.
     * @throws PermissionDeniedException Raised if the user access is denied. This can be raised in place of
     * returning false with a reason set in the reason out parameter.
     *
     * @see SSLInfo
     **/
    default SSLPermissionsVerifier.AuthorizeResult authorize(SSLInfo info)
        throws PermissionDeniedException
    {
        return authorize(info, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Check whether a user has permission to access the router.
     * @param info The SSL information.
     * @param context The Context map to send with the invocation.
     * @return An instance of SSLPermissionsVerifier.AuthorizeResult.
     * @throws PermissionDeniedException Raised if the user access is denied. This can be raised in place of
     * returning false with a reason set in the reason out parameter.
     *
     * @see SSLInfo
     **/
    default SSLPermissionsVerifier.AuthorizeResult authorize(SSLInfo info, java.util.Map<String, String> context)
        throws PermissionDeniedException
    {
        try
        {
            return _iceI_authorizeAsync(info, context, true).waitForResponseOrUserEx();
        }
        catch(PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Check whether a user has permission to access the router.
     * @param info The SSL information.
     * @return A future that will be completed with an instance of SSLPermissionsVerifier.AuthorizeResult.
     *
     * @see SSLInfo
     **/
    default java.util.concurrent.CompletableFuture<SSLPermissionsVerifier.AuthorizeResult> authorizeAsync(SSLInfo info)
    {
        return _iceI_authorizeAsync(info, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Check whether a user has permission to access the router.
     * @param info The SSL information.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of SSLPermissionsVerifier.AuthorizeResult.
     *
     * @see SSLInfo
     **/
    default java.util.concurrent.CompletableFuture<SSLPermissionsVerifier.AuthorizeResult> authorizeAsync(SSLInfo info, java.util.Map<String, String> context)
    {
        return _iceI_authorizeAsync(info, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SSLPermissionsVerifier.AuthorizeResult> _iceI_authorizeAsync(SSLInfo iceP_info, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SSLPermissionsVerifier.AuthorizeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "authorize", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_authorize);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     SSLInfo.ice_write(ostr, iceP_info);
                 }, istr -> {
                     SSLPermissionsVerifier.AuthorizeResult ret = new SSLPermissionsVerifier.AuthorizeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_authorize =
    {
        PermissionDeniedException.class
    };

    /**
     * Creates a new proxy that implements {@link SSLPermissionsVerifierPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static SSLPermissionsVerifierPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _SSLPermissionsVerifierPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SSLPermissionsVerifierPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SSLPermissionsVerifierPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _SSLPermissionsVerifierPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SSLPermissionsVerifierPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SSLPermissionsVerifierPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SSLPermissionsVerifierPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _SSLPermissionsVerifierPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SSLPermissionsVerifierPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _SSLPermissionsVerifierPrxI(obj.ice_facet(facet));
    }

    @Override
    SSLPermissionsVerifierPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SSLPermissionsVerifierPrx ice_adapterId(String newAdapterId);

    @Override
    SSLPermissionsVerifierPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SSLPermissionsVerifierPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SSLPermissionsVerifierPrx ice_invocationTimeout(int newTimeout);

    @Override
    SSLPermissionsVerifierPrx ice_connectionCached(boolean newCache);

    @Override
    SSLPermissionsVerifierPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SSLPermissionsVerifierPrx ice_secure(boolean b);

    @Override
    SSLPermissionsVerifierPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SSLPermissionsVerifierPrx ice_preferSecure(boolean b);

    @Override
    SSLPermissionsVerifierPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SSLPermissionsVerifierPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SSLPermissionsVerifierPrx ice_collocationOptimized(boolean b);

    @Override
    SSLPermissionsVerifierPrx ice_twoway();

    @Override
    SSLPermissionsVerifierPrx ice_oneway();

    @Override
    SSLPermissionsVerifierPrx ice_batchOneway();

    @Override
    SSLPermissionsVerifierPrx ice_datagram();

    @Override
    SSLPermissionsVerifierPrx ice_batchDatagram();

    @Override
    SSLPermissionsVerifierPrx ice_compress(boolean co);

    @Override
    SSLPermissionsVerifierPrx ice_connectionId(String connectionId);

    @Override
    SSLPermissionsVerifierPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Glacier2::SSLPermissionsVerifier";
    }

    /**
     * @hidden
     **/
    @Override
    default SSLPermissionsVerifierPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _SSLPermissionsVerifierPrxI(ref);
    }
}
