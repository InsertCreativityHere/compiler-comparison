//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The interface of the admin object that allows an Ice application the attach its
 * {@link RemoteLogger} to the {@link RemoteLogger} of this admin object's Ice communicator.
 **/
public interface LoggerAdminPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Attaches a RemoteLogger object to the local logger. attachRemoteLogger calls init on the provided
     * RemoteLogger proxy.
     * @param prx A proxy to the remote logger.
     * @param messageTypes The list of message types that the remote logger wishes to receive. An empty list means
     * no filtering (send all message types).
     * @param traceCategories The categories of traces that the remote logger wishes to receive. This parameter is
     * ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
     * trace categories).
     * @param messageMax The maximum number of log messages (of all types) to be provided to init. A negative
     * value requests all messages available.
     * @throws RemoteLoggerAlreadyAttachedException Raised if this remote logger is already attached to this admin
     * object.
     **/
    default void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
        throws RemoteLoggerAlreadyAttachedException
    {
        attachRemoteLogger(prx, messageTypes, traceCategories, messageMax, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Attaches a RemoteLogger object to the local logger. attachRemoteLogger calls init on the provided
     * RemoteLogger proxy.
     * @param prx A proxy to the remote logger.
     * @param messageTypes The list of message types that the remote logger wishes to receive. An empty list means
     * no filtering (send all message types).
     * @param traceCategories The categories of traces that the remote logger wishes to receive. This parameter is
     * ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
     * trace categories).
     * @param messageMax The maximum number of log messages (of all types) to be provided to init. A negative
     * value requests all messages available.
     * @param context The Context map to send with the invocation.
     * @throws RemoteLoggerAlreadyAttachedException Raised if this remote logger is already attached to this admin
     * object.
     **/
    default void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> context)
        throws RemoteLoggerAlreadyAttachedException
    {
        try
        {
            _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, true).waitForResponseOrUserEx();
        }
        catch(RemoteLoggerAlreadyAttachedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Attaches a RemoteLogger object to the local logger. attachRemoteLogger calls init on the provided
     * RemoteLogger proxy.
     * @param prx A proxy to the remote logger.
     * @param messageTypes The list of message types that the remote logger wishes to receive. An empty list means
     * no filtering (send all message types).
     * @param traceCategories The categories of traces that the remote logger wishes to receive. This parameter is
     * ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
     * trace categories).
     * @param messageMax The maximum number of log messages (of all types) to be provided to init. A negative
     * value requests all messages available.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachRemoteLoggerAsync(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
    {
        return _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Attaches a RemoteLogger object to the local logger. attachRemoteLogger calls init on the provided
     * RemoteLogger proxy.
     * @param prx A proxy to the remote logger.
     * @param messageTypes The list of message types that the remote logger wishes to receive. An empty list means
     * no filtering (send all message types).
     * @param traceCategories The categories of traces that the remote logger wishes to receive. This parameter is
     * ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
     * trace categories).
     * @param messageMax The maximum number of log messages (of all types) to be provided to init. A negative
     * value requests all messages available.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachRemoteLoggerAsync(RemoteLoggerPrx prx, LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> context)
    {
        return _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, false);
    }

    /**
     * @hidden
     * @param iceP_prx -
     * @param iceP_messageTypes -
     * @param iceP_traceCategories -
     * @param iceP_messageMax -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_attachRemoteLoggerAsync(RemoteLoggerPrx iceP_prx, LogMessageType[] iceP_messageTypes, String[] iceP_traceCategories, int iceP_messageMax, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "attachRemoteLogger", null, sync, _iceE_attachRemoteLogger);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeProxy(iceP_prx);
                     LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                     ostr.writeStringSeq(iceP_traceCategories);
                     ostr.writeInt(iceP_messageMax);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_attachRemoteLogger =
    {
        RemoteLoggerAlreadyAttachedException.class
    };

    /**
     * Detaches a RemoteLogger object from the local logger.
     * @param prx A proxy to the remote logger.
     * @return True if the provided remote logger proxy was detached, and false otherwise.
     **/
    default boolean detachRemoteLogger(RemoteLoggerPrx prx)
    {
        return detachRemoteLogger(prx, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Detaches a RemoteLogger object from the local logger.
     * @param prx A proxy to the remote logger.
     * @param context The Context map to send with the invocation.
     * @return True if the provided remote logger proxy was detached, and false otherwise.
     **/
    default boolean detachRemoteLogger(RemoteLoggerPrx prx, java.util.Map<String, String> context)
    {
        return _iceI_detachRemoteLoggerAsync(prx, context, true).waitForResponse();
    }

    /**
     * Detaches a RemoteLogger object from the local logger.
     * @param prx A proxy to the remote logger.
     * @return True if the provided remote logger proxy was detached, and false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> detachRemoteLoggerAsync(RemoteLoggerPrx prx)
    {
        return _iceI_detachRemoteLoggerAsync(prx, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Detaches a RemoteLogger object from the local logger.
     * @param prx A proxy to the remote logger.
     * @param context The Context map to send with the invocation.
     * @return True if the provided remote logger proxy was detached, and false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> detachRemoteLoggerAsync(RemoteLoggerPrx prx, java.util.Map<String, String> context)
    {
        return _iceI_detachRemoteLoggerAsync(prx, context, false);
    }

    /**
     * @hidden
     * @param iceP_prx -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_detachRemoteLoggerAsync(RemoteLoggerPrx iceP_prx, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "detachRemoteLogger", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeProxy(iceP_prx);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Retrieves log messages recently logged.
     * @param messageTypes The list of message types that the caller wishes to receive. An empty list means no
     * filtering (send all message types).
     * @param traceCategories The categories of traces that caller wish to receive. This parameter is ignored if
     * messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
     * categories).
     * @param messageMax The maximum number of log messages (of all types) to be returned. A negative value
     * requests all messages available.
     * @return An instance of LoggerAdmin.GetLogResult.
     **/
    default LoggerAdmin.GetLogResult getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
    {
        return getLog(messageTypes, traceCategories, messageMax, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieves log messages recently logged.
     * @param messageTypes The list of message types that the caller wishes to receive. An empty list means no
     * filtering (send all message types).
     * @param traceCategories The categories of traces that caller wish to receive. This parameter is ignored if
     * messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
     * categories).
     * @param messageMax The maximum number of log messages (of all types) to be returned. A negative value
     * requests all messages available.
     * @param context The Context map to send with the invocation.
     * @return An instance of LoggerAdmin.GetLogResult.
     **/
    default LoggerAdmin.GetLogResult getLog(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> context)
    {
        return _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, true).waitForResponse();
    }

    /**
     * Retrieves log messages recently logged.
     * @param messageTypes The list of message types that the caller wishes to receive. An empty list means no
     * filtering (send all message types).
     * @param traceCategories The categories of traces that caller wish to receive. This parameter is ignored if
     * messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
     * categories).
     * @param messageMax The maximum number of log messages (of all types) to be returned. A negative value
     * requests all messages available.
     * @return A future that will be completed with an instance of LoggerAdmin.GetLogResult.
     **/
    default java.util.concurrent.CompletableFuture<LoggerAdmin.GetLogResult> getLogAsync(LogMessageType[] messageTypes, String[] traceCategories, int messageMax)
    {
        return _iceI_getLogAsync(messageTypes, traceCategories, messageMax, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieves log messages recently logged.
     * @param messageTypes The list of message types that the caller wishes to receive. An empty list means no
     * filtering (send all message types).
     * @param traceCategories The categories of traces that caller wish to receive. This parameter is ignored if
     * messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
     * categories).
     * @param messageMax The maximum number of log messages (of all types) to be returned. A negative value
     * requests all messages available.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of LoggerAdmin.GetLogResult.
     **/
    default java.util.concurrent.CompletableFuture<LoggerAdmin.GetLogResult> getLogAsync(LogMessageType[] messageTypes, String[] traceCategories, int messageMax, java.util.Map<String, String> context)
    {
        return _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, false);
    }

    /**
     * @hidden
     * @param iceP_messageTypes -
     * @param iceP_traceCategories -
     * @param iceP_messageMax -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<LoggerAdmin.GetLogResult> _iceI_getLogAsync(LogMessageType[] iceP_messageTypes, String[] iceP_traceCategories, int iceP_messageMax, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<LoggerAdmin.GetLogResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLog", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                     ostr.writeStringSeq(iceP_traceCategories);
                     ostr.writeInt(iceP_messageMax);
                 }, istr -> {
                     LoggerAdmin.GetLogResult ret = new LoggerAdmin.GetLogResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link LoggerAdminPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static LoggerAdminPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _LoggerAdminPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LoggerAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LoggerAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _LoggerAdminPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LoggerAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LoggerAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static LoggerAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _LoggerAdminPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static LoggerAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _LoggerAdminPrxI(obj.ice_facet(facet));
    }

    @Override
    LoggerAdminPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    LoggerAdminPrx ice_adapterId(String newAdapterId);

    @Override
    LoggerAdminPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    LoggerAdminPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    LoggerAdminPrx ice_invocationTimeout(int newTimeout);

    @Override
    LoggerAdminPrx ice_connectionCached(boolean newCache);

    @Override
    LoggerAdminPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    LoggerAdminPrx ice_secure(boolean b);

    @Override
    LoggerAdminPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    LoggerAdminPrx ice_preferSecure(boolean b);

    @Override
    LoggerAdminPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    LoggerAdminPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    LoggerAdminPrx ice_collocationOptimized(boolean b);

    @Override
    LoggerAdminPrx ice_twoway();

    @Override
    LoggerAdminPrx ice_oneway();

    @Override
    LoggerAdminPrx ice_batchOneway();

    @Override
    LoggerAdminPrx ice_datagram();

    @Override
    LoggerAdminPrx ice_batchDatagram();

    @Override
    LoggerAdminPrx ice_compress(boolean co);

    @Override
    LoggerAdminPrx ice_connectionId(String connectionId);

    @Override
    LoggerAdminPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::LoggerAdmin";
    }

    /**
     * @hidden
     **/
    @Override
    default LoggerAdminPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _LoggerAdminPrxI(ref);
    }
}
