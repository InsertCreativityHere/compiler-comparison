// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package com.zeroc.Ice;

/**
 * The Ice locator interface. This interface is used by clients to lookup adapters and objects. It is also used by
 * servers to get the locator registry proxy. <p class="Note">The {@link Locator} interface is intended to be used
 * by Ice internals and by locator implementations. Regular user code should not attempt to use any functionality
 * of this interface directly.
 **/
public interface LocatorPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @return The proxy, or null if the object is not active.
     * @throws ObjectNotFoundException Raised if the object cannot be found.
     **/
    default ObjectPrx findObjectById(Identity id)
        throws ObjectNotFoundException
    {
        return findObjectById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The proxy, or null if the object is not active.
     * @throws ObjectNotFoundException Raised if the object cannot be found.
     **/
    default ObjectPrx findObjectById(Identity id, java.util.Map<String, String> context)
        throws ObjectNotFoundException
    {
        try
        {
            return _iceI_findObjectByIdAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(ObjectNotFoundException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @return The proxy, or null if the object is not active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByIdAsync(Identity id)
    {
        return _iceI_findObjectByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The proxy, or null if the object is not active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByIdAsync(Identity id, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByIdAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_findObjectByIdAsync(Identity iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "findObjectById", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_findObjectById);
        f.invoke(true, context, null, ostr -> {
                     Identity.ice_write(ostr, iceP_id);
                 }, istr -> {
                     ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_findObjectById =
    {
        ObjectNotFoundException.class
    };

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @return The adapter proxy, or null if the adapter is not active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found.
     **/
    default ObjectPrx findAdapterById(String id)
        throws AdapterNotFoundException
    {
        return findAdapterById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param context The Context map to send with the invocation.
     * @return The adapter proxy, or null if the adapter is not active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found.
     **/
    default ObjectPrx findAdapterById(String id, java.util.Map<String, String> context)
        throws AdapterNotFoundException
    {
        try
        {
            return _iceI_findAdapterByIdAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(AdapterNotFoundException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @return The adapter proxy, or null if the adapter is not active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findAdapterByIdAsync(String id)
    {
        return _iceI_findAdapterByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param context The Context map to send with the invocation.
     * @return The adapter proxy, or null if the adapter is not active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findAdapterByIdAsync(String id, java.util.Map<String, String> context)
    {
        return _iceI_findAdapterByIdAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_findAdapterByIdAsync(String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "findAdapterById", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_findAdapterById);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_findAdapterById =
    {
        AdapterNotFoundException.class
    };

    /**
     * Get the locator registry.
     * @return The locator registry.
     **/
    default LocatorRegistryPrx getRegistry()
    {
        return getRegistry(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the locator registry.
     * @param context The Context map to send with the invocation.
     * @return The locator registry.
     **/
    default LocatorRegistryPrx getRegistry(java.util.Map<String, String> context)
    {
        return _iceI_getRegistryAsync(context, true).waitForResponse();
    }

    /**
     * Get the locator registry.
     * @return The locator registry.
     **/
    default java.util.concurrent.CompletableFuture<LocatorRegistryPrx> getRegistryAsync()
    {
        return _iceI_getRegistryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the locator registry.
     * @param context The Context map to send with the invocation.
     * @return The locator registry.
     **/
    default java.util.concurrent.CompletableFuture<LocatorRegistryPrx> getRegistryAsync(java.util.Map<String, String> context)
    {
        return _iceI_getRegistryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<LocatorRegistryPrx> _iceI_getRegistryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<LocatorRegistryPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getRegistry", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     LocatorRegistryPrx ret;
                     ret = LocatorRegistryPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link LocatorPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static LocatorPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _LocatorPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _LocatorPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static LocatorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _LocatorPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static LocatorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _LocatorPrxI(obj.ice_facet(facet));
    }

    @Override
    LocatorPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    LocatorPrx ice_adapterId(String newAdapterId);

    @Override
    LocatorPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    LocatorPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    LocatorPrx ice_invocationTimeout(int newTimeout);

    @Override
    LocatorPrx ice_connectionCached(boolean newCache);

    @Override
    LocatorPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    LocatorPrx ice_secure(boolean b);

    @Override
    LocatorPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    LocatorPrx ice_preferSecure(boolean b);

    @Override
    LocatorPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    LocatorPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    LocatorPrx ice_collocationOptimized(boolean b);

    @Override
    LocatorPrx ice_twoway();

    @Override
    LocatorPrx ice_oneway();

    @Override
    LocatorPrx ice_batchOneway();

    @Override
    LocatorPrx ice_datagram();

    @Override
    LocatorPrx ice_batchDatagram();

    @Override
    LocatorPrx ice_compress(boolean co);

    @Override
    LocatorPrx ice_connectionId(String connectionId);

    @Override
    LocatorPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::Locator";
    }

    /**
     * @hidden
     **/
    @Override
    default LocatorPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _LocatorPrxI(ref);
    }
}
