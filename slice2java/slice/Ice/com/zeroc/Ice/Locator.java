//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The Ice locator interface. This interface is used by clients to lookup adapters and objects. It is also used by
 * servers to get the locator registry proxy. <p class="Note">The {@link Locator} interface is intended to be used
 * by Ice internals and by locator implementations. Regular user code should not attempt to use any functionality
 * of this interface directly.
 **/
public interface Locator extends com.zeroc.Ice.Object
{
    /**
     * Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
     * access the object.
     * @param id The identity.
     * @param current The Current object for the invocation.
     * @return The proxy, or null if the object is not active.
     * @throws ObjectNotFoundException Raised if the object cannot be found.
     **/
    java.util.concurrent.CompletionStage<com.zeroc.Ice.ObjectPrx> findObjectByIdAsync(Identity id, com.zeroc.Ice.Current current)
        throws ObjectNotFoundException;

    /**
     * Find an adapter by id and return a proxy that contains its endpoints.
     * @param id The adapter id.
     * @param current The Current object for the invocation.
     * @return The adapter proxy, or null if the adapter is not active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found.
     **/
    java.util.concurrent.CompletionStage<com.zeroc.Ice.ObjectPrx> findAdapterByIdAsync(String id, com.zeroc.Ice.Current current)
        throws AdapterNotFoundException;

    /**
     * Get the locator registry.
     * @param current The Current object for the invocation.
     * @return The locator registry.
     **/
    LocatorRegistryPrx getRegistry(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Locator",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::Locator";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findObjectById(Locator obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Identity iceP_id;
        iceP_id = Identity.ice_read(istr);
        istr.endEncapsulation();
        var result = obj.findObjectByIdAsync(iceP_id, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeProxy(value);
            },
            com.zeroc.Ice.FormatType.DefaultFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findAdapterById(Locator obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        var result = obj.findAdapterByIdAsync(iceP_id, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeProxy(value);
            },
            com.zeroc.Ice.FormatType.DefaultFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getRegistry(Locator obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        LocatorRegistryPrx ret = obj.getRegistry(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "findObjectById" -> Locator._iceD_findObjectById(this, request);
            case "findAdapterById" -> Locator._iceD_findAdapterById(this, request);
            case "getRegistry" -> Locator._iceD_getRegistry(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
