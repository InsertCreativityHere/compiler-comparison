//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * This interface should be implemented by services implementing the <code>Ice::Locator interface</code>. It should
 * be advertised through an Ice object with the identity <code>`Ice/LocatorFinder'</code>. This allows clients to
 * retrieve the locator proxy with just the endpoint information of the service.
 **/
public interface LocatorFinder extends Object
{
    /**
     * Get the locator proxy implemented by the process hosting this finder object. The proxy might point to
     * several replicas. This proxy is never null.
     * @param current The Current object for the invocation.
     * @return The locator proxy.
     **/
    LocatorPrx getLocator(Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::LocatorFinder",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::LocatorFinder";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<OutputStream> _iceD_getLocator(LocatorFinder obj, final com.zeroc.IceInternal.Incoming inS, Current current)
    {
        Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        LocatorPrx ret = obj.getLocator(current);
        OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, Current current)
        throws UserException
    {
        return switch (current.operation)
        {
            case "getLocator" -> LocatorFinder._iceD_getLocator(this, in, current);
            case "ice_id" -> Object._iceD_ice_id(this, in, current);
            case "ice_ids" -> Object._iceD_ice_ids(this, in, current);
            case "ice_isA" -> Object._iceD_ice_isA(this, in, current);
            case "ice_ping" -> Object._iceD_ice_ping(this, in, current);
            default -> throw new OperationNotExistException();
        };
    }
}
