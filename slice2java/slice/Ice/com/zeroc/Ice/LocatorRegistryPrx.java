//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The Ice locator registry interface. This interface is used by servers to register adapter endpoints with the
 * locator. <p class="Note"> The {@link LocatorRegistry} interface is intended to be used by Ice internals and by
 * locator implementations. Regular user code should not attempt to use any functionality of this interface
 * directly.
 **/
public interface LocatorRegistryPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     **/
    default void setAdapterDirectProxy(String id, ObjectPrx proxy)
        throws AdapterNotFoundException,
               AdapterAlreadyActiveException
    {
        setAdapterDirectProxy(id, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param context The Context map to send with the invocation.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     **/
    default void setAdapterDirectProxy(String id, ObjectPrx proxy, java.util.Map<String, String> context)
        throws AdapterNotFoundException,
               AdapterAlreadyActiveException
    {
        try
        {
            _iceI_setAdapterDirectProxyAsync(id, proxy, context, true).waitForResponseOrUserEx();
        }
        catch(AdapterNotFoundException ex)
        {
            throw ex;
        }
        catch(AdapterAlreadyActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAdapterDirectProxyAsync(String id, ObjectPrx proxy)
    {
        return _iceI_setAdapterDirectProxyAsync(id, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAdapterDirectProxyAsync(String id, ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_setAdapterDirectProxyAsync(id, proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setAdapterDirectProxyAsync(String iceP_id, ObjectPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setAdapterDirectProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setAdapterDirectProxy);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_proxy);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setAdapterDirectProxy =
    {
        AdapterNotFoundException.class,
        AdapterAlreadyActiveException.class
    };

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     * @throws InvalidReplicaGroupIdException Raised if the given replica group doesn't match the one registered
     * with the locator registry for this object adapter.
     **/
    default void setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, ObjectPrx proxy)
        throws AdapterNotFoundException,
               InvalidReplicaGroupIdException,
               AdapterAlreadyActiveException
    {
        setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param context The Context map to send with the invocation.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     * @throws InvalidReplicaGroupIdException Raised if the given replica group doesn't match the one registered
     * with the locator registry for this object adapter.
     **/
    default void setReplicatedAdapterDirectProxy(String adapterId, String replicaGroupId, ObjectPrx proxy, java.util.Map<String, String> context)
        throws AdapterNotFoundException,
               InvalidReplicaGroupIdException,
               AdapterAlreadyActiveException
    {
        try
        {
            _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, true).waitForResponseOrUserEx();
        }
        catch(AdapterNotFoundException ex)
        {
            throw ex;
        }
        catch(InvalidReplicaGroupIdException ex)
        {
            throw ex;
        }
        catch(AdapterAlreadyActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setReplicatedAdapterDirectProxyAsync(String adapterId, String replicaGroupId, ObjectPrx proxy)
    {
        return _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setReplicatedAdapterDirectProxyAsync(String adapterId, String replicaGroupId, ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_adapterId -
     * @param iceP_replicaGroupId -
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setReplicatedAdapterDirectProxyAsync(String iceP_adapterId, String iceP_replicaGroupId, ObjectPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setReplicatedAdapterDirectProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setReplicatedAdapterDirectProxy);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_adapterId);
                     ostr.writeString(iceP_replicaGroupId);
                     ostr.writeProxy(iceP_proxy);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setReplicatedAdapterDirectProxy =
    {
        AdapterNotFoundException.class,
        InvalidReplicaGroupIdException.class,
        AdapterAlreadyActiveException.class
    };

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy. The proxy is never null.
     * @throws ServerNotFoundException Raised if the server cannot be found.
     **/
    default void setServerProcessProxy(String id, ProcessPrx proxy)
        throws ServerNotFoundException
    {
        setServerProcessProxy(id, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy. The proxy is never null.
     * @param context The Context map to send with the invocation.
     * @throws ServerNotFoundException Raised if the server cannot be found.
     **/
    default void setServerProcessProxy(String id, ProcessPrx proxy, java.util.Map<String, String> context)
        throws ServerNotFoundException
    {
        try
        {
            _iceI_setServerProcessProxyAsync(id, proxy, context, true).waitForResponseOrUserEx();
        }
        catch(ServerNotFoundException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy. The proxy is never null.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setServerProcessProxyAsync(String id, ProcessPrx proxy)
    {
        return _iceI_setServerProcessProxyAsync(id, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy. The proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setServerProcessProxyAsync(String id, ProcessPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_setServerProcessProxyAsync(id, proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setServerProcessProxyAsync(String iceP_id, ProcessPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setServerProcessProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setServerProcessProxy);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_proxy);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setServerProcessProxy =
    {
        ServerNotFoundException.class
    };

    /**
     * Creates a new proxy that implements {@link LocatorRegistryPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static LocatorRegistryPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _LocatorRegistryPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _LocatorRegistryPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LocatorRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static LocatorRegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _LocatorRegistryPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static LocatorRegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _LocatorRegistryPrxI(obj.ice_facet(facet));
    }

    @Override
    LocatorRegistryPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    LocatorRegistryPrx ice_adapterId(String newAdapterId);

    @Override
    LocatorRegistryPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    LocatorRegistryPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    LocatorRegistryPrx ice_invocationTimeout(int newTimeout);

    @Override
    LocatorRegistryPrx ice_connectionCached(boolean newCache);

    @Override
    LocatorRegistryPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    LocatorRegistryPrx ice_secure(boolean b);

    @Override
    LocatorRegistryPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    LocatorRegistryPrx ice_preferSecure(boolean b);

    @Override
    LocatorRegistryPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    LocatorRegistryPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    LocatorRegistryPrx ice_collocationOptimized(boolean b);

    @Override
    LocatorRegistryPrx ice_twoway();

    @Override
    LocatorRegistryPrx ice_oneway();

    @Override
    LocatorRegistryPrx ice_batchOneway();

    @Override
    LocatorRegistryPrx ice_datagram();

    @Override
    LocatorRegistryPrx ice_batchDatagram();

    @Override
    LocatorRegistryPrx ice_compress(boolean co);

    @Override
    LocatorRegistryPrx ice_connectionId(String connectionId);

    @Override
    LocatorRegistryPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::LocatorRegistry";
    }

    /**
     * @hidden
     **/
    @Override
    default LocatorRegistryPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _LocatorRegistryPrxI(ref);
    }
}
