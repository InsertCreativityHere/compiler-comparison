//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * An administrative interface for process management. Managed servers must implement this interface.
 * <p class="Note">A servant implementing this interface is a potential target for denial-of-service attacks,
 * therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
 * identity harder to guess, and be registered in an object adapter with a secured endpoint.
 **/
public interface Process extends Object
{
    /**
     * Initiate a graceful shut-down.
     * @param current The Current object for the invocation.
     *
     * @see Communicator#shutdown
     **/
    void shutdown(Current current);

    /**
     * Write a message on the process' stdout or stderr.
     * @param message The message.
     * @param fd 1 for stdout, 2 for stderr.
     * @param current The Current object for the invocation.
     **/
    void writeMessage(String message, int fd, Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Ice::Process"
    };

    @Override
    default String[] ice_ids(Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::Process";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<OutgoingResponse> _iceD_shutdown(Process obj, IncomingRequest request)
    {
        Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<OutgoingResponse> _iceD_writeMessage(Process obj, IncomingRequest request)
    {
        Object._iceCheckMode(null, request.current.mode);
        InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_message;
        int iceP_fd;
        iceP_message = istr.readString();
        iceP_fd = istr.readInt();
        istr.endEncapsulation();
        obj.writeMessage(iceP_message, iceP_fd, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "shutdown" -> Process._iceD_shutdown(this, request);
            case "writeMessage" -> Process._iceD_writeMessage(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
