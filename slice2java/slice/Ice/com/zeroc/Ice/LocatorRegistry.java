//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The Ice locator registry interface. This interface is used by servers to register adapter endpoints with the
 * locator. <p class="Note"> The {@link LocatorRegistry}} interface is intended to be used by Ice internals and by
 * locator implementations. Regular user code should not attempt to use any functionality of this interface
 * directly.
 **/
public interface LocatorRegistry extends com.zeroc.Ice.Object
{
    /**
     * Set the adapter endpoints with the locator registry.
     * @param id The adapter id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     **/
    java.util.concurrent.CompletionStage<Void> setAdapterDirectProxyAsync(String id, ObjectPrx proxy, com.zeroc.Ice.Current current)
        throws AdapterNotFoundException,
               AdapterAlreadyActiveException;

    /**
     * Set the adapter endpoints with the locator registry.
     * @param adapterId The adapter id.
     * @param replicaGroupId The replica group id.
     * @param proxy The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
     * adapter endpoints. The proxy can be null, typically during adapter deactivation.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @throws AdapterAlreadyActiveException Raised if an adapter with the same id is already active.
     * @throws AdapterNotFoundException Raised if the adapter cannot be found, or if the locator only allows
     * registered adapters to set their active proxy and the adapter is not registered with the locator.
     * @throws InvalidReplicaGroupIdException Raised if the given replica group doesn't match the one registered
     * with the locator registry for this object adapter.
     **/
    java.util.concurrent.CompletionStage<Void> setReplicatedAdapterDirectProxyAsync(String adapterId, String replicaGroupId, ObjectPrx proxy, com.zeroc.Ice.Current current)
        throws AdapterNotFoundException,
               InvalidReplicaGroupIdException,
               AdapterAlreadyActiveException;

    /**
     * Set the process proxy for a server.
     * @param id The server id.
     * @param proxy The process proxy. The proxy is never null.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @throws ServerNotFoundException Raised if the server cannot be found.
     **/
    java.util.concurrent.CompletionStage<Void> setServerProcessProxyAsync(String id, ProcessPrx proxy, com.zeroc.Ice.Current current)
        throws ServerNotFoundException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::LocatorRegistry",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::LocatorRegistry";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setAdapterDirectProxy(LocatorRegistry obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        ObjectPrx iceP_proxy;
        iceP_id = istr.readString();
        iceP_proxy = istr.readProxy();
        istr.endEncapsulation();
        var result = obj.setAdapterDirectProxyAsync(iceP_id, iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setReplicatedAdapterDirectProxy(LocatorRegistry obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_adapterId;
        String iceP_replicaGroupId;
        ObjectPrx iceP_proxy;
        iceP_adapterId = istr.readString();
        iceP_replicaGroupId = istr.readString();
        iceP_proxy = istr.readProxy();
        istr.endEncapsulation();
        var result = obj.setReplicatedAdapterDirectProxyAsync(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setServerProcessProxy(LocatorRegistry obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        ProcessPrx iceP_proxy;
        iceP_id = istr.readString();
        iceP_proxy = ProcessPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.setServerProcessProxyAsync(iceP_id, iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "setAdapterDirectProxy" -> LocatorRegistry._iceD_setAdapterDirectProxy(this, request);
            case "setReplicatedAdapterDirectProxy" -> LocatorRegistry._iceD_setReplicatedAdapterDirectProxy(this, request);
            case "setServerProcessProxy" -> LocatorRegistry._iceD_setServerProcessProxy(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
