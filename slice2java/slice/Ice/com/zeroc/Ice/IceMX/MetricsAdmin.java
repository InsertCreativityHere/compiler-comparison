//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice.IceMX;

/**
 * The metrics administrative facet interface. This interface allows remote administrative clients to access
 * metrics of an application that enabled the Ice administrative facility and configured some metrics views.
 **/
public interface MetricsAdmin extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation getMetricsViewNames.
     **/
    public static class GetMetricsViewNamesResult
    {
        /**
         * Default constructor.
         **/
        public GetMetricsViewNamesResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetMetricsViewNames.
         * @param returnValue The name of the enabled views.
         * @param disabledViews The names of the disabled views.
         **/
        public GetMetricsViewNamesResult(String[] returnValue, String[] disabledViews)
        {
            this.returnValue = returnValue;
            this.disabledViews = disabledViews;
        }

        /**
         * The name of the enabled views.
         **/
        public String[] returnValue;
        /**
         * The names of the disabled views.
         **/
        public String[] disabledViews;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.disabledViews);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.disabledViews = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation getMetricsView.
     **/
    public static class GetMetricsViewResult
    {
        /**
         * Default constructor.
         **/
        public GetMetricsViewResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetMetricsView.
         * @param returnValue The metrics view data.
         * @param timestamp The local time of the process when the metrics object were retrieved.
         **/
        public GetMetricsViewResult(java.util.Map<java.lang.String, Metrics[]> returnValue, long timestamp)
        {
            this.returnValue = returnValue;
            this.timestamp = timestamp;
        }

        /**
         * The metrics view data.
         **/
        public java.util.Map<java.lang.String, Metrics[]> returnValue;
        /**
         * The local time of the process when the metrics object were retrieved.
         **/
        public long timestamp;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(this.timestamp);
            MetricsViewHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.timestamp = istr.readLong();
            returnValue = MetricsViewHelper.read(istr);
        }
    }

    /**
     * Get the names of enabled and disabled metrics.
     * @param current The Current object for the invocation.
     * @return An instance of MetricsAdmin.GetMetricsViewNamesResult.
     **/
    MetricsAdmin.GetMetricsViewNamesResult getMetricsViewNames(com.zeroc.Ice.Current current);

    /**
     * Enables a metrics view.
     * @param name The metrics view name.
     * @param current The Current object for the invocation.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    void enableMetricsView(String name, com.zeroc.Ice.Current current)
        throws UnknownMetricsView;

    /**
     * Disable a metrics view.
     * @param name The metrics view name.
     * @param current The Current object for the invocation.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    void disableMetricsView(String name, com.zeroc.Ice.Current current)
        throws UnknownMetricsView;

    /**
     * Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
     * metrics class configured with the view. The timestamp allows the client to compute averages which are not
     * dependent of the invocation latency for this operation.
     * @param view The name of the metrics view.
     * @param current The Current object for the invocation.
     * @return An instance of MetricsAdmin.GetMetricsViewResult.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    MetricsAdmin.GetMetricsViewResult getMetricsView(String view, com.zeroc.Ice.Current current)
        throws UnknownMetricsView;

    /**
     * Get the metrics failures associated with the given view and map.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param current The Current object for the invocation.
     * @return The metrics failures associated with the map.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    MetricsFailures[] getMapMetricsFailures(String view, String map, com.zeroc.Ice.Current current)
        throws UnknownMetricsView;

    /**
     * Get the metrics failure associated for the given metrics.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param id The ID of the metrics.
     * @param current The Current object for the invocation.
     * @return The metrics failures associated with the metrics.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    MetricsFailures getMetricsFailures(String view, String map, String id, com.zeroc.Ice.Current current)
        throws UnknownMetricsView;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceMX::MetricsAdmin"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceMX::MetricsAdmin";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getMetricsViewNames(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        MetricsAdmin.GetMetricsViewNamesResult ret = obj.getMetricsViewNames(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_enableMetricsView(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.enableMetricsView(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_disableMetricsView(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.disableMetricsView(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getMetricsView(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_view;
        iceP_view = istr.readString();
        istr.endEncapsulation();
        MetricsAdmin.GetMetricsViewResult ret = obj.getMetricsView(iceP_view, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.SlicedFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getMapMetricsFailures(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_view;
        String iceP_map;
        iceP_view = istr.readString();
        iceP_map = istr.readString();
        istr.endEncapsulation();
        MetricsFailures[] ret = obj.getMapMetricsFailures(iceP_view, iceP_map, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        MetricsFailuresSeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getMetricsFailures(MetricsAdmin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_view;
        String iceP_map;
        String iceP_id;
        iceP_view = istr.readString();
        iceP_map = istr.readString();
        iceP_id = istr.readString();
        istr.endEncapsulation();
        MetricsFailures ret = obj.getMetricsFailures(iceP_view, iceP_map, iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        MetricsFailures.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getMetricsViewNames" -> MetricsAdmin._iceD_getMetricsViewNames(this, request);
            case "enableMetricsView" -> MetricsAdmin._iceD_enableMetricsView(this, request);
            case "disableMetricsView" -> MetricsAdmin._iceD_disableMetricsView(this, request);
            case "getMetricsView" -> MetricsAdmin._iceD_getMetricsView(this, request);
            case "getMapMetricsFailures" -> MetricsAdmin._iceD_getMapMetricsFailures(this, request);
            case "getMetricsFailures" -> MetricsAdmin._iceD_getMetricsFailures(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
