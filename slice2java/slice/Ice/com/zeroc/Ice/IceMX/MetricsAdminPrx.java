//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice.IceMX;

/**
 * The metrics administrative facet interface. This interface allows remote administrative clients to access
 * metrics of an application that enabled the Ice administrative facility and configured some metrics views.
 **/
public interface MetricsAdminPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Get the names of enabled and disabled metrics.
     * @return An instance of MetricsAdmin.GetMetricsViewNamesResult.
     **/
    default MetricsAdmin.GetMetricsViewNamesResult getMetricsViewNames()
    {
        return getMetricsViewNames(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the names of enabled and disabled metrics.
     * @param context The Context map to send with the invocation.
     * @return An instance of MetricsAdmin.GetMetricsViewNamesResult.
     **/
    default MetricsAdmin.GetMetricsViewNamesResult getMetricsViewNames(java.util.Map<String, String> context)
    {
        return _iceI_getMetricsViewNamesAsync(context, true).waitForResponse();
    }

    /**
     * Get the names of enabled and disabled metrics.
     * @return A future that will be completed with an instance of MetricsAdmin.GetMetricsViewNamesResult.
     **/
    default java.util.concurrent.CompletableFuture<MetricsAdmin.GetMetricsViewNamesResult> getMetricsViewNamesAsync()
    {
        return _iceI_getMetricsViewNamesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the names of enabled and disabled metrics.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of MetricsAdmin.GetMetricsViewNamesResult.
     **/
    default java.util.concurrent.CompletableFuture<MetricsAdmin.GetMetricsViewNamesResult> getMetricsViewNamesAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMetricsViewNamesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MetricsAdmin.GetMetricsViewNamesResult> _iceI_getMetricsViewNamesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MetricsAdmin.GetMetricsViewNamesResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMetricsViewNames", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, istr -> {
                     MetricsAdmin.GetMetricsViewNamesResult ret = new MetricsAdmin.GetMetricsViewNamesResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Enables a metrics view.
     * @param name The metrics view name.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default void enableMetricsView(String name)
        throws UnknownMetricsView
    {
        enableMetricsView(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Enables a metrics view.
     * @param name The metrics view name.
     * @param context The Context map to send with the invocation.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default void enableMetricsView(String name, java.util.Map<String, String> context)
        throws UnknownMetricsView
    {
        try
        {
            _iceI_enableMetricsViewAsync(name, context, true).waitForResponseOrUserEx();
        }
        catch(UnknownMetricsView ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Enables a metrics view.
     * @param name The metrics view name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> enableMetricsViewAsync(String name)
    {
        return _iceI_enableMetricsViewAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Enables a metrics view.
     * @param name The metrics view name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> enableMetricsViewAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_enableMetricsViewAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_enableMetricsViewAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "enableMetricsView", null, sync, _iceE_enableMetricsView);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeString(iceP_name);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_enableMetricsView =
    {
        UnknownMetricsView.class
    };

    /**
     * Disable a metrics view.
     * @param name The metrics view name.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default void disableMetricsView(String name)
        throws UnknownMetricsView
    {
        disableMetricsView(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Disable a metrics view.
     * @param name The metrics view name.
     * @param context The Context map to send with the invocation.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default void disableMetricsView(String name, java.util.Map<String, String> context)
        throws UnknownMetricsView
    {
        try
        {
            _iceI_disableMetricsViewAsync(name, context, true).waitForResponseOrUserEx();
        }
        catch(UnknownMetricsView ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Disable a metrics view.
     * @param name The metrics view name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> disableMetricsViewAsync(String name)
    {
        return _iceI_disableMetricsViewAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Disable a metrics view.
     * @param name The metrics view name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> disableMetricsViewAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_disableMetricsViewAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_disableMetricsViewAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "disableMetricsView", null, sync, _iceE_disableMetricsView);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeString(iceP_name);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_disableMetricsView =
    {
        UnknownMetricsView.class
    };

    /**
     * Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
     * metrics class configured with the view. The timestamp allows the client to compute averages which are not
     * dependent of the invocation latency for this operation.
     * @param view The name of the metrics view.
     * @return An instance of MetricsAdmin.GetMetricsViewResult.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsAdmin.GetMetricsViewResult getMetricsView(String view)
        throws UnknownMetricsView
    {
        return getMetricsView(view, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
     * metrics class configured with the view. The timestamp allows the client to compute averages which are not
     * dependent of the invocation latency for this operation.
     * @param view The name of the metrics view.
     * @param context The Context map to send with the invocation.
     * @return An instance of MetricsAdmin.GetMetricsViewResult.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsAdmin.GetMetricsViewResult getMetricsView(String view, java.util.Map<String, String> context)
        throws UnknownMetricsView
    {
        try
        {
            return _iceI_getMetricsViewAsync(view, context, true).waitForResponseOrUserEx();
        }
        catch(UnknownMetricsView ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
     * metrics class configured with the view. The timestamp allows the client to compute averages which are not
     * dependent of the invocation latency for this operation.
     * @param view The name of the metrics view.
     * @return A future that will be completed with an instance of MetricsAdmin.GetMetricsViewResult.
     **/
    default java.util.concurrent.CompletableFuture<MetricsAdmin.GetMetricsViewResult> getMetricsViewAsync(String view)
    {
        return _iceI_getMetricsViewAsync(view, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the metrics objects for the given metrics view. This returns a dictionary of metric maps for each
     * metrics class configured with the view. The timestamp allows the client to compute averages which are not
     * dependent of the invocation latency for this operation.
     * @param view The name of the metrics view.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of MetricsAdmin.GetMetricsViewResult.
     **/
    default java.util.concurrent.CompletableFuture<MetricsAdmin.GetMetricsViewResult> getMetricsViewAsync(String view, java.util.Map<String, String> context)
    {
        return _iceI_getMetricsViewAsync(view, context, false);
    }

    /**
     * @hidden
     * @param iceP_view -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MetricsAdmin.GetMetricsViewResult> _iceI_getMetricsViewAsync(String iceP_view, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MetricsAdmin.GetMetricsViewResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMetricsView", null, sync, _iceE_getMetricsView);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeString(iceP_view);
                 }, istr -> {
                     MetricsAdmin.GetMetricsViewResult ret = new MetricsAdmin.GetMetricsViewResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMetricsView =
    {
        UnknownMetricsView.class
    };

    /**
     * Get the metrics failures associated with the given view and map.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @return The metrics failures associated with the map.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsFailures[] getMapMetricsFailures(String view, String map)
        throws UnknownMetricsView
    {
        return getMapMetricsFailures(view, map, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the metrics failures associated with the given view and map.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param context The Context map to send with the invocation.
     * @return The metrics failures associated with the map.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsFailures[] getMapMetricsFailures(String view, String map, java.util.Map<String, String> context)
        throws UnknownMetricsView
    {
        try
        {
            return _iceI_getMapMetricsFailuresAsync(view, map, context, true).waitForResponseOrUserEx();
        }
        catch(UnknownMetricsView ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Get the metrics failures associated with the given view and map.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @return The metrics failures associated with the map.
     **/
    default java.util.concurrent.CompletableFuture<MetricsFailures[]> getMapMetricsFailuresAsync(String view, String map)
    {
        return _iceI_getMapMetricsFailuresAsync(view, map, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the metrics failures associated with the given view and map.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param context The Context map to send with the invocation.
     * @return The metrics failures associated with the map.
     **/
    default java.util.concurrent.CompletableFuture<MetricsFailures[]> getMapMetricsFailuresAsync(String view, String map, java.util.Map<String, String> context)
    {
        return _iceI_getMapMetricsFailuresAsync(view, map, context, false);
    }

    /**
     * @hidden
     * @param iceP_view -
     * @param iceP_map -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MetricsFailures[]> _iceI_getMapMetricsFailuresAsync(String iceP_view, String iceP_map, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MetricsFailures[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMapMetricsFailures", null, sync, _iceE_getMapMetricsFailures);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeString(iceP_view);
                     ostr.writeString(iceP_map);
                 }, istr -> {
                     MetricsFailures[] ret;
                     ret = MetricsFailuresSeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMapMetricsFailures =
    {
        UnknownMetricsView.class
    };

    /**
     * Get the metrics failure associated for the given metrics.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param id The ID of the metrics.
     * @return The metrics failures associated with the metrics.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsFailures getMetricsFailures(String view, String map, String id)
        throws UnknownMetricsView
    {
        return getMetricsFailures(view, map, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the metrics failure associated for the given metrics.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param id The ID of the metrics.
     * @param context The Context map to send with the invocation.
     * @return The metrics failures associated with the metrics.
     * @throws UnknownMetricsView Raised if the metrics view cannot be found.
     **/
    default MetricsFailures getMetricsFailures(String view, String map, String id, java.util.Map<String, String> context)
        throws UnknownMetricsView
    {
        try
        {
            return _iceI_getMetricsFailuresAsync(view, map, id, context, true).waitForResponseOrUserEx();
        }
        catch(UnknownMetricsView ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Get the metrics failure associated for the given metrics.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param id The ID of the metrics.
     * @return The metrics failures associated with the metrics.
     **/
    default java.util.concurrent.CompletableFuture<MetricsFailures> getMetricsFailuresAsync(String view, String map, String id)
    {
        return _iceI_getMetricsFailuresAsync(view, map, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the metrics failure associated for the given metrics.
     * @param view The name of the metrics view.
     * @param map The name of the metrics map.
     * @param id The ID of the metrics.
     * @param context The Context map to send with the invocation.
     * @return The metrics failures associated with the metrics.
     **/
    default java.util.concurrent.CompletableFuture<MetricsFailures> getMetricsFailuresAsync(String view, String map, String id, java.util.Map<String, String> context)
    {
        return _iceI_getMetricsFailuresAsync(view, map, id, context, false);
    }

    /**
     * @hidden
     * @param iceP_view -
     * @param iceP_map -
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MetricsFailures> _iceI_getMetricsFailuresAsync(String iceP_view, String iceP_map, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MetricsFailures> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getMetricsFailures", null, sync, _iceE_getMetricsFailures);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeString(iceP_view);
                     ostr.writeString(iceP_map);
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     MetricsFailures ret;
                     ret = MetricsFailures.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getMetricsFailures =
    {
        UnknownMetricsView.class
    };

    /**
     * Creates a new proxy that implements {@link MetricsAdminPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static MetricsAdminPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _MetricsAdminPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _MetricsAdminPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static MetricsAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _MetricsAdminPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static MetricsAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _MetricsAdminPrxI(obj.ice_facet(facet));
    }

    @Override
    MetricsAdminPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    MetricsAdminPrx ice_adapterId(String newAdapterId);

    @Override
    MetricsAdminPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    MetricsAdminPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    MetricsAdminPrx ice_invocationTimeout(int newTimeout);

    @Override
    MetricsAdminPrx ice_connectionCached(boolean newCache);

    @Override
    MetricsAdminPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    MetricsAdminPrx ice_secure(boolean b);

    @Override
    MetricsAdminPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    MetricsAdminPrx ice_preferSecure(boolean b);

    @Override
    MetricsAdminPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    MetricsAdminPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    MetricsAdminPrx ice_collocationOptimized(boolean b);

    @Override
    MetricsAdminPrx ice_twoway();

    @Override
    MetricsAdminPrx ice_oneway();

    @Override
    MetricsAdminPrx ice_batchOneway();

    @Override
    MetricsAdminPrx ice_datagram();

    @Override
    MetricsAdminPrx ice_batchDatagram();

    @Override
    MetricsAdminPrx ice_compress(boolean co);

    @Override
    MetricsAdminPrx ice_connectionId(String connectionId);

    @Override
    MetricsAdminPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceMX::MetricsAdmin";
    }

    /**
     * @hidden
     **/
    @Override
    default MetricsAdminPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _MetricsAdminPrxI(ref);
    }
}
