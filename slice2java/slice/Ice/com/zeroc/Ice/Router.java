//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The Ice router interface. Routers can be set either globally though the <code>Communicator</code>, or with
 * <code>ice_router</code> on specific proxies.
 **/
public interface Router extends Object
{
    /**
     * Holds the result of operation getClientProxy.
     **/
    public static class GetClientProxyResult
    {
        /**
         * Default constructor.
         **/
        public GetClientProxyResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetClientProxy.
         * @param returnValue The router's client proxy.
         * @param hasRoutingTable Indicates whether or not the router supports a routing table. If it is supported, the
         * Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
         * starting with Ice 3.7.
         * The Ice runtime assumes the router has a routing table if the <code>hasRoutingTable</code> is not set.
         **/
        public GetClientProxyResult(ObjectPrx returnValue, java.util.Optional<java.lang.Boolean> hasRoutingTable)
        {
            this.returnValue = returnValue;
            this.hasRoutingTable = hasRoutingTable;
        }

        /**
         * This constructor makes shallow copies of the results for operation GetClientProxy (overload without Optional parameters).
         * @param returnValue The router's client proxy.
         * @param hasRoutingTable Indicates whether or not the router supports a routing table. If it is supported, the
         * Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
         * starting with Ice 3.7.
         * The Ice runtime assumes the router has a routing table if the <code>hasRoutingTable</code> is not set.
         **/
        public GetClientProxyResult(ObjectPrx returnValue, boolean hasRoutingTable)
        {
            this.returnValue = returnValue;
            this.hasRoutingTable = java.util.Optional.of(hasRoutingTable);
        }

        /**
         * The router's client proxy.
         **/
        public ObjectPrx returnValue;
        /**
         * Indicates whether or not the router supports a routing table. If it is supported, the
         * Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
         * starting with Ice 3.7.
         * The Ice runtime assumes the router has a routing table if the <code>hasRoutingTable</code> is not set.
         **/
        public java.util.Optional<java.lang.Boolean> hasRoutingTable;

        public void write(OutputStream ostr)
        {
            ostr.writeProxy(returnValue);
            ostr.writeBool(1, this.hasRoutingTable);
        }

        public void read(InputStream istr)
        {
            returnValue = istr.readProxy();
            this.hasRoutingTable = istr.readBool(1);
        }
    }

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param current The Current object for the invocation.
     * @return An instance of Router.GetClientProxyResult.
     **/
    Router.GetClientProxyResult getClientProxy(Current current);

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param current The Current object for the invocation.
     * @return The router's server proxy.
     **/
    ObjectPrx getServerProxy(Current current);

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add. Adding a null proxy is an error.
     * @param current The Current object for the invocation.
     * @return Proxies discarded by the router. These proxies are all non-null.
     **/
    ObjectPrx[] addProxies(ObjectPrx[] proxies, Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Ice::Router"
    };

    @Override
    default String[] ice_ids(Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::Router";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<OutgoingResponse> _iceD_getClientProxy(Router obj, IncomingRequest request)
    {
        Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        Router.GetClientProxyResult ret = obj.getClientProxy(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<OutgoingResponse> _iceD_getServerProxy(Router obj, IncomingRequest request)
    {
        Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        ObjectPrx ret = obj.getServerProxy(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<OutgoingResponse> _iceD_addProxies(Router obj, IncomingRequest request)
    {
        Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ObjectPrx[] iceP_proxies;
        iceP_proxies = ObjectProxySeqHelper.read(istr);
        istr.endEncapsulation();
        ObjectPrx[] ret = obj.addProxies(iceP_proxies, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ObjectProxySeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getClientProxy" -> Router._iceD_getClientProxy(this, request);
            case "getServerProxy" -> Router._iceD_getServerProxy(this, request);
            case "addProxies" -> Router._iceD_addProxies(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
