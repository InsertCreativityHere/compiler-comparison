// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package com.zeroc.Ice;

/**
 * The Ice remote logger interface. An application can implement a RemoteLogger to receive the log messages sent
 * to the local {@link RemoteLogger} of another Ice application.
 **/
public interface RemoteLogger extends com.zeroc.Ice.Object
{
    /**
     * init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
     * @param prefix The prefix of the associated local Logger.
     * @param logMessages Old log messages generated before "now".
     * @param current The Current object for the invocation.
     **/
    void init(String prefix, LogMessage[] logMessages, com.zeroc.Ice.Current current);

    /**
     * Log a LogMessage. Note that log may be called by LoggerAdmin before init.
     * @param message The message to log.
     * @param current The Current object for the invocation.
     **/
    void log(LogMessage message, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Ice::RemoteLogger"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Ice::RemoteLogger";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_init(RemoteLogger obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_prefix;
        LogMessage[] iceP_logMessages;
        iceP_prefix = istr.readString();
        iceP_logMessages = LogMessageSeqHelper.read(istr);
        istr.endEncapsulation();
        obj.init(iceP_prefix, iceP_logMessages, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_log(RemoteLogger obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        LogMessage iceP_message;
        iceP_message = LogMessage.ice_read(istr);
        istr.endEncapsulation();
        obj.log(iceP_message, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "init" -> RemoteLogger._iceD_init(this, request);
            case "log" -> RemoteLogger._iceD_log(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
