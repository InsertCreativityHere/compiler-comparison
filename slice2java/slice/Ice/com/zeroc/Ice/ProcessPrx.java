//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * An administrative interface for process management. Managed servers must implement this interface.
 * <p class="Note">A servant implementing this interface is a potential target for denial-of-service attacks,
 * therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
 * identity harder to guess, and be registered in an object adapter with a secured endpoint.
 **/
public interface ProcessPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Initiate a graceful shut-down.
     *
     * @see Communicator#shutdown
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Initiate a graceful shut-down.
     * @param context The Context map to send with the invocation.
     *
     * @see Communicator#shutdown
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Initiate a graceful shut-down.
     * @return A future that will be completed when the invocation completes.
     *
     * @see Communicator#shutdown
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Initiate a graceful shut-down.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     *
     * @see Communicator#shutdown
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Write a message on the process' stdout or stderr.
     * @param message The message.
     * @param fd 1 for stdout, 2 for stderr.
     **/
    default void writeMessage(String message, int fd)
    {
        writeMessage(message, fd, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Write a message on the process' stdout or stderr.
     * @param message The message.
     * @param fd 1 for stdout, 2 for stderr.
     * @param context The Context map to send with the invocation.
     **/
    default void writeMessage(String message, int fd, java.util.Map<String, String> context)
    {
        _iceI_writeMessageAsync(message, fd, context, true).waitForResponse();
    }

    /**
     * Write a message on the process' stdout or stderr.
     * @param message The message.
     * @param fd 1 for stdout, 2 for stderr.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> writeMessageAsync(String message, int fd)
    {
        return _iceI_writeMessageAsync(message, fd, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Write a message on the process' stdout or stderr.
     * @param message The message.
     * @param fd 1 for stdout, 2 for stderr.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> writeMessageAsync(String message, int fd, java.util.Map<String, String> context)
    {
        return _iceI_writeMessageAsync(message, fd, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param iceP_fd -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_writeMessageAsync(String iceP_message, int iceP_fd, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeMessage", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_message);
                     ostr.writeInt(iceP_fd);
                 }, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ProcessPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), ProcessPrx.class, _ProcessPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ProcessPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), ProcessPrx.class, _ProcessPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ProcessPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), ProcessPrx.class, _ProcessPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ProcessPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), ProcessPrx.class, _ProcessPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ProcessPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, ProcessPrx.class, _ProcessPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ProcessPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, ProcessPrx.class, _ProcessPrxI.class);
    }

    @Override
    ProcessPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ProcessPrx ice_adapterId(String newAdapterId);

    @Override
    ProcessPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ProcessPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ProcessPrx ice_invocationTimeout(int newTimeout);

    @Override
    ProcessPrx ice_connectionCached(boolean newCache);

    @Override
    ProcessPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ProcessPrx ice_secure(boolean b);

    @Override
    ProcessPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ProcessPrx ice_preferSecure(boolean b);

    @Override
    ProcessPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ProcessPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ProcessPrx ice_collocationOptimized(boolean b);

    @Override
    ProcessPrx ice_twoway();

    @Override
    ProcessPrx ice_oneway();

    @Override
    ProcessPrx ice_batchOneway();

    @Override
    ProcessPrx ice_datagram();

    @Override
    ProcessPrx ice_batchDatagram();

    @Override
    ProcessPrx ice_compress(boolean co);

    @Override
    ProcessPrx ice_timeout(int t);

    @Override
    ProcessPrx ice_connectionId(String connectionId);

    @Override
    ProcessPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::Process";
    }
}
