//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The Ice router interface. Routers can be set either globally though the <code>Communicator</code>, or with
 * <code>ice_router</code> on specific proxies.
 **/
public interface RouterPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @return An instance of Router.GetClientProxyResult.
     **/
    default Router.GetClientProxyResult getClientProxy()
    {
        return getClientProxy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param context The Context map to send with the invocation.
     * @return An instance of Router.GetClientProxyResult.
     **/
    default Router.GetClientProxyResult getClientProxy(java.util.Map<String, String> context)
    {
        return _iceI_getClientProxyAsync(context, true).waitForResponse();
    }

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @return A future that will be completed with an instance of Router.GetClientProxyResult.
     **/
    default java.util.concurrent.CompletableFuture<Router.GetClientProxyResult> getClientProxyAsync()
    {
        return _iceI_getClientProxyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
     * If a null proxy is returned, the client will forward requests to the router's endpoints.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of Router.GetClientProxyResult.
     **/
    default java.util.concurrent.CompletableFuture<Router.GetClientProxyResult> getClientProxyAsync(java.util.Map<String, String> context)
    {
        return _iceI_getClientProxyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Router.GetClientProxyResult> _iceI_getClientProxyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Router.GetClientProxyResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getClientProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     Router.GetClientProxyResult ret = new Router.GetClientProxyResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @return The router's server proxy.
     **/
    default ObjectPrx getServerProxy()
    {
        return getServerProxy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param context The Context map to send with the invocation.
     * @return The router's server proxy.
     **/
    default ObjectPrx getServerProxy(java.util.Map<String, String> context)
    {
        return _iceI_getServerProxyAsync(context, true).waitForResponse();
    }

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @return The router's server proxy.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getServerProxyAsync()
    {
        return _iceI_getServerProxyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
     * @param context The Context map to send with the invocation.
     * @return The router's server proxy.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getServerProxyAsync(java.util.Map<String, String> context)
    {
        return _iceI_getServerProxyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getServerProxyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getServerProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add. Adding a null proxy is an error.
     * @return Proxies discarded by the router. These proxies are all non-null.
     **/
    default ObjectPrx[] addProxies(ObjectPrx[] proxies)
    {
        return addProxies(proxies, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add. Adding a null proxy is an error.
     * @param context The Context map to send with the invocation.
     * @return Proxies discarded by the router. These proxies are all non-null.
     **/
    default ObjectPrx[] addProxies(ObjectPrx[] proxies, java.util.Map<String, String> context)
    {
        return _iceI_addProxiesAsync(proxies, context, true).waitForResponse();
    }

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add. Adding a null proxy is an error.
     * @return Proxies discarded by the router. These proxies are all non-null.
     **/
    default java.util.concurrent.CompletableFuture<ObjectPrx[]> addProxiesAsync(ObjectPrx[] proxies)
    {
        return _iceI_addProxiesAsync(proxies, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Add new proxy information to the router's routing table.
     * @param proxies The proxies to add. Adding a null proxy is an error.
     * @param context The Context map to send with the invocation.
     * @return Proxies discarded by the router. These proxies are all non-null.
     **/
    default java.util.concurrent.CompletableFuture<ObjectPrx[]> addProxiesAsync(ObjectPrx[] proxies, java.util.Map<String, String> context)
    {
        return _iceI_addProxiesAsync(proxies, context, false);
    }

    /**
     * @hidden
     * @param iceP_proxies -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<ObjectPrx[]> _iceI_addProxiesAsync(ObjectPrx[] iceP_proxies, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<ObjectPrx[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "addProxies", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ObjectProxySeqHelper.write(ostr, iceP_proxies);
                 }, istr -> {
                     ObjectPrx[] ret;
                     ret = ObjectProxySeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RouterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), RouterPrx.class, _RouterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RouterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), RouterPrx.class, _RouterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RouterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), RouterPrx.class, _RouterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RouterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), RouterPrx.class, _RouterPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RouterPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, RouterPrx.class, _RouterPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RouterPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, RouterPrx.class, _RouterPrxI.class);
    }

    @Override
    RouterPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    RouterPrx ice_adapterId(String newAdapterId);

    @Override
    RouterPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    RouterPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    RouterPrx ice_invocationTimeout(int newTimeout);

    @Override
    RouterPrx ice_connectionCached(boolean newCache);

    @Override
    RouterPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    RouterPrx ice_secure(boolean b);

    @Override
    RouterPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    RouterPrx ice_preferSecure(boolean b);

    @Override
    RouterPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    RouterPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    RouterPrx ice_collocationOptimized(boolean b);

    @Override
    RouterPrx ice_twoway();

    @Override
    RouterPrx ice_oneway();

    @Override
    RouterPrx ice_batchOneway();

    @Override
    RouterPrx ice_datagram();

    @Override
    RouterPrx ice_batchDatagram();

    @Override
    RouterPrx ice_compress(boolean co);

    @Override
    RouterPrx ice_timeout(int t);

    @Override
    RouterPrx ice_connectionId(String connectionId);

    @Override
    RouterPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::Router";
    }
}
