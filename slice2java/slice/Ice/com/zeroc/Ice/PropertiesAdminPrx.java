//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.Ice;

/**
 * The PropertiesAdmin interface provides remote access to the properties of a communicator.
 **/
public interface PropertiesAdminPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Get a property by key. If the property is not set, an empty string is returned.
     * @param key The property key.
     * @return The property value.
     **/
    default String getProperty(String key)
    {
        return getProperty(key, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get a property by key. If the property is not set, an empty string is returned.
     * @param key The property key.
     * @param context The Context map to send with the invocation.
     * @return The property value.
     **/
    default String getProperty(String key, java.util.Map<String, String> context)
    {
        return _iceI_getPropertyAsync(key, context, true).waitForResponse();
    }

    /**
     * Get a property by key. If the property is not set, an empty string is returned.
     * @param key The property key.
     * @return The property value.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getPropertyAsync(String key)
    {
        return _iceI_getPropertyAsync(key, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get a property by key. If the property is not set, an empty string is returned.
     * @param key The property key.
     * @param context The Context map to send with the invocation.
     * @return The property value.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getPropertyAsync(String key, java.util.Map<String, String> context)
    {
        return _iceI_getPropertyAsync(key, context, false);
    }

    /**
     * @hidden
     * @param iceP_key -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getPropertyAsync(String iceP_key, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProperty", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_key);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If <em>prefix</em> is an empty string then all
     * properties are returned.
     * @param prefix The prefix to search for (empty string if none).
     * @return The matching property set.
     **/
    default java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix)
    {
        return getPropertiesForPrefix(prefix, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If <em>prefix</em> is an empty string then all
     * properties are returned.
     * @param prefix The prefix to search for (empty string if none).
     * @param context The Context map to send with the invocation.
     * @return The matching property set.
     **/
    default java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix, java.util.Map<String, String> context)
    {
        return _iceI_getPropertiesForPrefixAsync(prefix, context, true).waitForResponse();
    }

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If <em>prefix</em> is an empty string then all
     * properties are returned.
     * @param prefix The prefix to search for (empty string if none).
     * @return The matching property set.
     **/
    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, java.lang.String>> getPropertiesForPrefixAsync(String prefix)
    {
        return _iceI_getPropertiesForPrefixAsync(prefix, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get all properties whose keys begin with <em>prefix</em>. If <em>prefix</em> is an empty string then all
     * properties are returned.
     * @param prefix The prefix to search for (empty string if none).
     * @param context The Context map to send with the invocation.
     * @return The matching property set.
     **/
    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, java.lang.String>> getPropertiesForPrefixAsync(String prefix, java.util.Map<String, String> context)
    {
        return _iceI_getPropertiesForPrefixAsync(prefix, context, false);
    }

    /**
     * @hidden
     * @param iceP_prefix -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Map<java.lang.String, java.lang.String>> _iceI_getPropertiesForPrefixAsync(String iceP_prefix, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Map<java.lang.String, java.lang.String>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getPropertiesForPrefix", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_prefix);
                 }, istr -> {
                     java.util.Map<java.lang.String, java.lang.String> ret;
                     ret = new java.util.TreeMap<String, String>();
                     int sz0 = istr.readSize();
                     for(int i0 = 0; i0 < sz0; i0++)
                     {
                         String key;
                         key = istr.readString();
                         String value;
                         value = istr.readString();
                         ret.put(key, value);
                     }
                     return ret;
                 });
        return f;
    }

    /**
     * Update the communicator's properties with the given property set. If an entry in <em>newProperties</em>
     * matches the name of an existing property, that property's value is replaced with the new value. If the new
     * value is an empty string, the property is removed. Any existing properties that are not modified or removed
     * by the entries in newProperties are retained with their original values.
     * @param newProperties Properties to be added, changed, or removed.
     **/
    default void setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties)
    {
        setProperties(newProperties, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Update the communicator's properties with the given property set. If an entry in <em>newProperties</em>
     * matches the name of an existing property, that property's value is replaced with the new value. If the new
     * value is an empty string, the property is removed. Any existing properties that are not modified or removed
     * by the entries in newProperties are retained with their original values.
     * @param newProperties Properties to be added, changed, or removed.
     * @param context The Context map to send with the invocation.
     **/
    default void setProperties(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> context)
    {
        _iceI_setPropertiesAsync(newProperties, context, true).waitForResponse();
    }

    /**
     * Update the communicator's properties with the given property set. If an entry in <em>newProperties</em>
     * matches the name of an existing property, that property's value is replaced with the new value. If the new
     * value is an empty string, the property is removed. Any existing properties that are not modified or removed
     * by the entries in newProperties are retained with their original values.
     * @param newProperties Properties to be added, changed, or removed.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setPropertiesAsync(java.util.Map<java.lang.String, java.lang.String> newProperties)
    {
        return _iceI_setPropertiesAsync(newProperties, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Update the communicator's properties with the given property set. If an entry in <em>newProperties</em>
     * matches the name of an existing property, that property's value is replaced with the new value. If the new
     * value is an empty string, the property is removed. Any existing properties that are not modified or removed
     * by the entries in newProperties are retained with their original values.
     * @param newProperties Properties to be added, changed, or removed.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setPropertiesAsync(java.util.Map<java.lang.String, java.lang.String> newProperties, java.util.Map<String, String> context)
    {
        return _iceI_setPropertiesAsync(newProperties, context, false);
    }

    /**
     * @hidden
     * @param iceP_newProperties -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setPropertiesAsync(java.util.Map<java.lang.String, java.lang.String> iceP_newProperties, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setProperties", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     PropertyDictHelper.write(ostr, iceP_newProperties);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link PropertiesAdminPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static PropertiesAdminPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _PropertiesAdminPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static PropertiesAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static PropertiesAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _PropertiesAdminPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static PropertiesAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static PropertiesAdminPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static PropertiesAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _PropertiesAdminPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static PropertiesAdminPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _PropertiesAdminPrxI(obj.ice_facet(facet));
    }

    @Override
    PropertiesAdminPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    PropertiesAdminPrx ice_adapterId(String newAdapterId);

    @Override
    PropertiesAdminPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    PropertiesAdminPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    PropertiesAdminPrx ice_invocationTimeout(int newTimeout);

    @Override
    PropertiesAdminPrx ice_connectionCached(boolean newCache);

    @Override
    PropertiesAdminPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    PropertiesAdminPrx ice_secure(boolean b);

    @Override
    PropertiesAdminPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    PropertiesAdminPrx ice_preferSecure(boolean b);

    @Override
    PropertiesAdminPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    PropertiesAdminPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    PropertiesAdminPrx ice_collocationOptimized(boolean b);

    @Override
    PropertiesAdminPrx ice_twoway();

    @Override
    PropertiesAdminPrx ice_oneway();

    @Override
    PropertiesAdminPrx ice_batchOneway();

    @Override
    PropertiesAdminPrx ice_datagram();

    @Override
    PropertiesAdminPrx ice_batchDatagram();

    @Override
    PropertiesAdminPrx ice_compress(boolean co);

    @Override
    PropertiesAdminPrx ice_connectionId(String connectionId);

    @Override
    PropertiesAdminPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Ice::PropertiesAdmin";
    }

    /**
     * @hidden
     **/
    @Override
    default PropertiesAdminPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _PropertiesAdminPrxI(ref);
    }
}
