//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface provides access to IceGrid log file contents.
 **/
public interface FileIteratorPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Read lines from the log file.
     * @param size Specifies the maximum number of bytes to be received. The server will ensure that the returned
     * message doesn't exceed the given size.
     * @return An instance of FileIterator.ReadResult.
     * @throws FileNotAvailableException Raised if there was a problem to read lines from the file.
     **/
    default FileIterator.ReadResult read(int size)
        throws FileNotAvailableException
    {
        return read(size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Read lines from the log file.
     * @param size Specifies the maximum number of bytes to be received. The server will ensure that the returned
     * message doesn't exceed the given size.
     * @param context The Context map to send with the invocation.
     * @return An instance of FileIterator.ReadResult.
     * @throws FileNotAvailableException Raised if there was a problem to read lines from the file.
     **/
    default FileIterator.ReadResult read(int size, java.util.Map<String, String> context)
        throws FileNotAvailableException
    {
        try
        {
            return _iceI_readAsync(size, context, true).waitForResponseOrUserEx();
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Read lines from the log file.
     * @param size Specifies the maximum number of bytes to be received. The server will ensure that the returned
     * message doesn't exceed the given size.
     * @return A future that will be completed with an instance of FileIterator.ReadResult.
     **/
    default java.util.concurrent.CompletableFuture<FileIterator.ReadResult> readAsync(int size)
    {
        return _iceI_readAsync(size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Read lines from the log file.
     * @param size Specifies the maximum number of bytes to be received. The server will ensure that the returned
     * message doesn't exceed the given size.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of FileIterator.ReadResult.
     **/
    default java.util.concurrent.CompletableFuture<FileIterator.ReadResult> readAsync(int size, java.util.Map<String, String> context)
    {
        return _iceI_readAsync(size, context, false);
    }

    /**
     * @hidden
     * @param iceP_size -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<FileIterator.ReadResult> _iceI_readAsync(int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileIterator.ReadResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "read", null, sync, _iceE_read);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileIterator.ReadResult ret = new FileIterator.ReadResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_read =
    {
        FileNotAvailableException.class
    };

    /**
     * Destroy the iterator.
     **/
    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the iterator.
     * @param context The Context map to send with the invocation.
     **/
    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    /**
     * Destroy the iterator.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the iterator.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link FileIteratorPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static FileIteratorPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _FileIteratorPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileIteratorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileIteratorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _FileIteratorPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileIteratorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileIteratorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FileIteratorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _FileIteratorPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FileIteratorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _FileIteratorPrxI(obj.ice_facet(facet));
    }

    @Override
    FileIteratorPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    FileIteratorPrx ice_adapterId(String newAdapterId);

    @Override
    FileIteratorPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    FileIteratorPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    FileIteratorPrx ice_invocationTimeout(int newTimeout);

    @Override
    FileIteratorPrx ice_connectionCached(boolean newCache);

    @Override
    FileIteratorPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    FileIteratorPrx ice_secure(boolean b);

    @Override
    FileIteratorPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    FileIteratorPrx ice_preferSecure(boolean b);

    @Override
    FileIteratorPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    FileIteratorPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    FileIteratorPrx ice_collocationOptimized(boolean b);

    @Override
    FileIteratorPrx ice_twoway();

    @Override
    FileIteratorPrx ice_oneway();

    @Override
    FileIteratorPrx ice_batchOneway();

    @Override
    FileIteratorPrx ice_datagram();

    @Override
    FileIteratorPrx ice_batchDatagram();

    @Override
    FileIteratorPrx ice_compress(boolean co);

    @Override
    FileIteratorPrx ice_connectionId(String connectionId);

    @Override
    FileIteratorPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::FileIterator";
    }

    /**
     * @hidden
     **/
    @Override
    default FileIteratorPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _FileIteratorPrxI(ref);
    }
}
