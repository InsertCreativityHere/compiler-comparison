//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The IceGrid locator interface provides access to the {@link Query} and {@link Registry} object of the IceGrid
 * registry.
 *
 * @see Query
 * @see Registry
 **/
public interface Locator extends com.zeroc.Ice.Locator
{
    /**
     * Get the proxy of the registry object hosted by this IceGrid registry.
     * @param current The Current object for the invocation.
     * @return The proxy of the registry object. The returned proxy is never null.
     **/
    RegistryPrx getLocalRegistry(com.zeroc.Ice.Current current);

    /**
     * Get the proxy of the query object hosted by this IceGrid registry.
     * @param current The Current object for the invocation.
     * @return The proxy of the query object. The returned proxy is never null.
     **/
    QueryPrx getLocalQuery(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Locator",
        "::Ice::Object",
        "::IceGrid::Locator"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Locator";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLocalRegistry(Locator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        RegistryPrx ret = obj.getLocalRegistry(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLocalQuery(Locator obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        QueryPrx ret = obj.getLocalQuery(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        return switch (current.operation)
        {
            case "findObjectById" -> com.zeroc.Ice.Locator._iceD_findObjectById(this, in, current);
            case "findAdapterById" -> com.zeroc.Ice.Locator._iceD_findAdapterById(this, in, current);
            case "getRegistry" -> com.zeroc.Ice.Locator._iceD_getRegistry(this, in, current);
            case "getLocalRegistry" -> Locator._iceD_getLocalRegistry(this, in, current);
            case "getLocalQuery" -> Locator._iceD_getLocalQuery(this, in, current);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
