//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
 * via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
 *
 * @see Registry
 **/
public interface SessionPrx extends com.zeroc.Glacier2.SessionPrx
{
    /**
     * Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
     * need to call this operation and its implementation does nothing.
     **/
    default void keepAlive()
    {
        keepAlive(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
     * need to call this operation and its implementation does nothing.
     * @param context The Context map to send with the invocation.
     **/
    default void keepAlive(java.util.Map<String, String> context)
    {
        _iceI_keepAliveAsync(context, true).waitForResponse();
    }

    /**
     * Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
     * need to call this operation and its implementation does nothing.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync()
    {
        return _iceI_keepAliveAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
     * need to call this operation and its implementation does nothing.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync(java.util.Map<String, String> context)
    {
        return _iceI_keepAliveAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_keepAliveAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "keepAlive", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object can't be allocated.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default com.zeroc.Ice.ObjectPrx allocateObjectById(com.zeroc.Ice.Identity id)
        throws ObjectNotRegisteredException,
               AllocationException
    {
        return allocateObjectById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object can't be allocated.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default com.zeroc.Ice.ObjectPrx allocateObjectById(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
        throws ObjectNotRegisteredException,
               AllocationException
    {
        try
        {
            return _iceI_allocateObjectByIdAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(ObjectNotRegisteredException ex)
        {
            throw ex;
        }
        catch(AllocationException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @return The proxy of the allocated object. The returned proxy is never null.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> allocateObjectByIdAsync(com.zeroc.Ice.Identity id)
    {
        return _iceI_allocateObjectByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> allocateObjectByIdAsync(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        return _iceI_allocateObjectByIdAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_allocateObjectByIdAsync(com.zeroc.Ice.Identity iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "allocateObjectById", null, sync, _iceE_allocateObjectById);
        f.invoke(true, context, null, ostr -> {
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_id);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_allocateObjectById =
    {
        ObjectNotRegisteredException.class,
        AllocationException.class
    };

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object could not be allocated.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default com.zeroc.Ice.ObjectPrx allocateObjectByType(String type)
        throws AllocationException
    {
        return allocateObjectByType(type, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object could not be allocated.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default com.zeroc.Ice.ObjectPrx allocateObjectByType(String type, java.util.Map<String, String> context)
        throws AllocationException
    {
        try
        {
            return _iceI_allocateObjectByTypeAsync(type, context, true).waitForResponseOrUserEx();
        }
        catch(AllocationException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @return The proxy of the allocated object. The returned proxy is never null.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> allocateObjectByTypeAsync(String type)
    {
        return _iceI_allocateObjectByTypeAsync(type, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param context The Context map to send with the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> allocateObjectByTypeAsync(String type, java.util.Map<String, String> context)
    {
        return _iceI_allocateObjectByTypeAsync(type, context, false);
    }

    /**
     * @hidden
     * @param iceP_type -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_allocateObjectByTypeAsync(String iceP_type, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "allocateObjectByType", null, sync, _iceE_allocateObjectByType);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_type);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_allocateObjectByType =
    {
        AllocationException.class
    };

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @throws AllocationException Raised if the given object can't be released. This might happen if the object
     * isn't allocatable or isn't allocated by the session.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     **/
    default void releaseObject(com.zeroc.Ice.Identity id)
        throws ObjectNotRegisteredException,
               AllocationException
    {
        releaseObject(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param context The Context map to send with the invocation.
     * @throws AllocationException Raised if the given object can't be released. This might happen if the object
     * isn't allocatable or isn't allocated by the session.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     **/
    default void releaseObject(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
        throws ObjectNotRegisteredException,
               AllocationException
    {
        try
        {
            _iceI_releaseObjectAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(ObjectNotRegisteredException ex)
        {
            throw ex;
        }
        catch(AllocationException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> releaseObjectAsync(com.zeroc.Ice.Identity id)
    {
        return _iceI_releaseObjectAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> releaseObjectAsync(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        return _iceI_releaseObjectAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_releaseObjectAsync(com.zeroc.Ice.Identity iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "releaseObject", null, sync, _iceE_releaseObject);
        f.invoke(true, context, null, ostr -> {
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_id);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_releaseObject =
    {
        ObjectNotRegisteredException.class,
        AllocationException.class
    };

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     **/
    default void setAllocationTimeout(int timeout)
    {
        setAllocationTimeout(timeout, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param context The Context map to send with the invocation.
     **/
    default void setAllocationTimeout(int timeout, java.util.Map<String, String> context)
    {
        _iceI_setAllocationTimeoutAsync(timeout, context, true).waitForResponse();
    }

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAllocationTimeoutAsync(int timeout)
    {
        return _iceI_setAllocationTimeoutAsync(timeout, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAllocationTimeoutAsync(int timeout, java.util.Map<String, String> context)
    {
        return _iceI_setAllocationTimeoutAsync(timeout, context, false);
    }

    /**
     * @hidden
     * @param iceP_timeout -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setAllocationTimeoutAsync(int iceP_timeout, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setAllocationTimeout", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_timeout);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link SessionPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static SessionPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _SessionPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _SessionPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _SessionPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _SessionPrxI(obj.ice_facet(facet));
    }

    @Override
    SessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SessionPrx ice_adapterId(String newAdapterId);

    @Override
    SessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    SessionPrx ice_connectionCached(boolean newCache);

    @Override
    SessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SessionPrx ice_secure(boolean b);

    @Override
    SessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SessionPrx ice_preferSecure(boolean b);

    @Override
    SessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SessionPrx ice_collocationOptimized(boolean b);

    @Override
    SessionPrx ice_twoway();

    @Override
    SessionPrx ice_oneway();

    @Override
    SessionPrx ice_batchOneway();

    @Override
    SessionPrx ice_datagram();

    @Override
    SessionPrx ice_batchDatagram();

    @Override
    SessionPrx ice_compress(boolean co);

    @Override
    SessionPrx ice_connectionId(String connectionId);

    @Override
    SessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::Session";
    }

    /**
     * @hidden
     **/
    @Override
    default SessionPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _SessionPrxI(ref);
    }
}
