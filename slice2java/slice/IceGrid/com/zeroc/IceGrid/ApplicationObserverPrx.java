//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The database observer interface. Observers should implement this interface to receive information about the
 * state of the IceGrid registry database.
 **/
public interface ApplicationObserverPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * <code>applicationInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param serial The current serial number of the registry database. This serial number allows observers to
     * make sure that their internal state is synchronized with the registry.
     * @param applications The applications currently registered with the registry.
     **/
    default void applicationInit(int serial, java.util.List<ApplicationInfo> applications)
    {
        applicationInit(serial, applications, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * <code>applicationInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param serial The current serial number of the registry database. This serial number allows observers to
     * make sure that their internal state is synchronized with the registry.
     * @param applications The applications currently registered with the registry.
     * @param context The Context map to send with the invocation.
     **/
    default void applicationInit(int serial, java.util.List<ApplicationInfo> applications, java.util.Map<String, String> context)
    {
        _iceI_applicationInitAsync(serial, applications, context, true).waitForResponse();
    }

    /**
     * <code>applicationInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param serial The current serial number of the registry database. This serial number allows observers to
     * make sure that their internal state is synchronized with the registry.
     * @param applications The applications currently registered with the registry.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationInitAsync(int serial, java.util.List<ApplicationInfo> applications)
    {
        return _iceI_applicationInitAsync(serial, applications, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * <code>applicationInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param serial The current serial number of the registry database. This serial number allows observers to
     * make sure that their internal state is synchronized with the registry.
     * @param applications The applications currently registered with the registry.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationInitAsync(int serial, java.util.List<ApplicationInfo> applications, java.util.Map<String, String> context)
    {
        return _iceI_applicationInitAsync(serial, applications, context, false);
    }

    /**
     * @hidden
     * @param iceP_serial -
     * @param iceP_applications -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_applicationInitAsync(int iceP_serial, java.util.List<ApplicationInfo> iceP_applications, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "applicationInit", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_serial);
                     ApplicationInfoSeqHelper.write(ostr, iceP_applications);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * The <code>applicationAdded</code> operation is called to notify an observer that an application was added.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the new application.
     **/
    default void applicationAdded(int serial, ApplicationInfo desc)
    {
        applicationAdded(serial, desc, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>applicationAdded</code> operation is called to notify an observer that an application was added.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the new application.
     * @param context The Context map to send with the invocation.
     **/
    default void applicationAdded(int serial, ApplicationInfo desc, java.util.Map<String, String> context)
    {
        _iceI_applicationAddedAsync(serial, desc, context, true).waitForResponse();
    }

    /**
     * The <code>applicationAdded</code> operation is called to notify an observer that an application was added.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the new application.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationAddedAsync(int serial, ApplicationInfo desc)
    {
        return _iceI_applicationAddedAsync(serial, desc, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>applicationAdded</code> operation is called to notify an observer that an application was added.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the new application.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationAddedAsync(int serial, ApplicationInfo desc, java.util.Map<String, String> context)
    {
        return _iceI_applicationAddedAsync(serial, desc, context, false);
    }

    /**
     * @hidden
     * @param iceP_serial -
     * @param iceP_desc -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_applicationAddedAsync(int iceP_serial, ApplicationInfo iceP_desc, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "applicationAdded", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_serial);
                     ApplicationInfo.ice_write(ostr, iceP_desc);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * The <code>applicationRemoved</code> operation is called to notify an observer that an application was
     * removed.
     * @param serial The new serial number of the registry database.
     * @param name The name of the application that was removed.
     **/
    default void applicationRemoved(int serial, String name)
    {
        applicationRemoved(serial, name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>applicationRemoved</code> operation is called to notify an observer that an application was
     * removed.
     * @param serial The new serial number of the registry database.
     * @param name The name of the application that was removed.
     * @param context The Context map to send with the invocation.
     **/
    default void applicationRemoved(int serial, String name, java.util.Map<String, String> context)
    {
        _iceI_applicationRemovedAsync(serial, name, context, true).waitForResponse();
    }

    /**
     * The <code>applicationRemoved</code> operation is called to notify an observer that an application was
     * removed.
     * @param serial The new serial number of the registry database.
     * @param name The name of the application that was removed.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationRemovedAsync(int serial, String name)
    {
        return _iceI_applicationRemovedAsync(serial, name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>applicationRemoved</code> operation is called to notify an observer that an application was
     * removed.
     * @param serial The new serial number of the registry database.
     * @param name The name of the application that was removed.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationRemovedAsync(int serial, String name, java.util.Map<String, String> context)
    {
        return _iceI_applicationRemovedAsync(serial, name, context, false);
    }

    /**
     * @hidden
     * @param iceP_serial -
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_applicationRemovedAsync(int iceP_serial, String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "applicationRemoved", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_serial);
                     ostr.writeString(iceP_name);
                 }, null);
        return f;
    }

    /**
     * The <code>applicationUpdated</code> operation is called to notify an observer that an application was
     * updated.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the update.
     **/
    default void applicationUpdated(int serial, ApplicationUpdateInfo desc)
    {
        applicationUpdated(serial, desc, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>applicationUpdated</code> operation is called to notify an observer that an application was
     * updated.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the update.
     * @param context The Context map to send with the invocation.
     **/
    default void applicationUpdated(int serial, ApplicationUpdateInfo desc, java.util.Map<String, String> context)
    {
        _iceI_applicationUpdatedAsync(serial, desc, context, true).waitForResponse();
    }

    /**
     * The <code>applicationUpdated</code> operation is called to notify an observer that an application was
     * updated.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the update.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationUpdatedAsync(int serial, ApplicationUpdateInfo desc)
    {
        return _iceI_applicationUpdatedAsync(serial, desc, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>applicationUpdated</code> operation is called to notify an observer that an application was
     * updated.
     * @param serial The new serial number of the registry database.
     * @param desc The descriptor of the update.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> applicationUpdatedAsync(int serial, ApplicationUpdateInfo desc, java.util.Map<String, String> context)
    {
        return _iceI_applicationUpdatedAsync(serial, desc, context, false);
    }

    /**
     * @hidden
     * @param iceP_serial -
     * @param iceP_desc -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_applicationUpdatedAsync(int iceP_serial, ApplicationUpdateInfo iceP_desc, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "applicationUpdated", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_serial);
                     ApplicationUpdateInfo.ice_write(ostr, iceP_desc);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link ApplicationObserverPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static ApplicationObserverPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _ApplicationObserverPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ApplicationObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ApplicationObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _ApplicationObserverPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ApplicationObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ApplicationObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ApplicationObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ApplicationObserverPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ApplicationObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ApplicationObserverPrxI(obj.ice_facet(facet));
    }

    @Override
    ApplicationObserverPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ApplicationObserverPrx ice_adapterId(String newAdapterId);

    @Override
    ApplicationObserverPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ApplicationObserverPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ApplicationObserverPrx ice_invocationTimeout(int newTimeout);

    @Override
    ApplicationObserverPrx ice_connectionCached(boolean newCache);

    @Override
    ApplicationObserverPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ApplicationObserverPrx ice_secure(boolean b);

    @Override
    ApplicationObserverPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ApplicationObserverPrx ice_preferSecure(boolean b);

    @Override
    ApplicationObserverPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ApplicationObserverPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ApplicationObserverPrx ice_collocationOptimized(boolean b);

    @Override
    ApplicationObserverPrx ice_twoway();

    @Override
    ApplicationObserverPrx ice_oneway();

    @Override
    ApplicationObserverPrx ice_batchOneway();

    @Override
    ApplicationObserverPrx ice_datagram();

    @Override
    ApplicationObserverPrx ice_batchDatagram();

    @Override
    ApplicationObserverPrx ice_compress(boolean co);

    @Override
    ApplicationObserverPrx ice_connectionId(String connectionId);

    @Override
    ApplicationObserverPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::ApplicationObserver";
    }

    /**
     * @hidden
     **/
    @Override
    default ApplicationObserverPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _ApplicationObserverPrxI(ref);
    }
}
