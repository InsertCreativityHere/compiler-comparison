//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The IceGrid query interface. This interface is accessible to Ice clients who wish to look up well-known
 * objects.
 **/
public interface QueryPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Find a well-known object by identity.
     * @param id The identity.
     * @return The proxy or null if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectById(com.zeroc.Ice.Identity id)
    {
        return findObjectById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find a well-known object by identity.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectById(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByIdAsync(id, context, true).waitForResponse();
    }

    /**
     * Find a well-known object by identity.
     * @param id The identity.
     * @return The proxy or null if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByIdAsync(com.zeroc.Ice.Identity id)
    {
        return _iceI_findObjectByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find a well-known object by identity.
     * @param id The identity.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByIdAsync(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByIdAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_findObjectByIdAsync(com.zeroc.Ice.Identity iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findObjectById", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_id);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Find a well-known object by type. If there are several objects registered for the given type, the object is
     * randomly selected.
     * @param type The object type.
     * @return The proxy or null, if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectByType(String type)
    {
        return findObjectByType(type, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find a well-known object by type. If there are several objects registered for the given type, the object is
     * randomly selected.
     * @param type The object type.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectByType(String type, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByTypeAsync(type, context, true).waitForResponse();
    }

    /**
     * Find a well-known object by type. If there are several objects registered for the given type, the object is
     * randomly selected.
     * @param type The object type.
     * @return The proxy or null, if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByTypeAsync(String type)
    {
        return _iceI_findObjectByTypeAsync(type, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find a well-known object by type. If there are several objects registered for the given type, the object is
     * randomly selected.
     * @param type The object type.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByTypeAsync(String type, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByTypeAsync(type, context, false);
    }

    /**
     * @hidden
     * @param iceP_type -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_findObjectByTypeAsync(String iceP_type, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findObjectByType", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_type);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
     * the object (for example, because the object was registered with a direct proxy), the registry assumes the
     * object is hosted on a node that has a load average of 1.0.
     * @param type The object type.
     * @param sample The sampling interval.
     * @return The proxy or null, if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(String type, LoadSample sample)
    {
        return findObjectByTypeOnLeastLoadedNode(type, sample, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
     * the object (for example, because the object was registered with a direct proxy), the registry assumes the
     * object is hosted on a node that has a load average of 1.0.
     * @param type The object type.
     * @param sample The sampling interval.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    default com.zeroc.Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(String type, LoadSample sample, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, true).waitForResponse();
    }

    /**
     * Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
     * the object (for example, because the object was registered with a direct proxy), the registry assumes the
     * object is hosted on a node that has a load average of 1.0.
     * @param type The object type.
     * @param sample The sampling interval.
     * @return The proxy or null, if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByTypeOnLeastLoadedNodeAsync(String type, LoadSample sample)
    {
        return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
     * the object (for example, because the object was registered with a direct proxy), the registry assumes the
     * object is hosted on a node that has a load average of 1.0.
     * @param type The object type.
     * @param sample The sampling interval.
     * @param context The Context map to send with the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> findObjectByTypeOnLeastLoadedNodeAsync(String type, LoadSample sample, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, false);
    }

    /**
     * @hidden
     * @param iceP_type -
     * @param iceP_sample -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_findObjectByTypeOnLeastLoadedNodeAsync(String iceP_type, LoadSample iceP_sample, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findObjectByTypeOnLeastLoadedNode", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_type);
                     LoadSample.ice_write(ostr, iceP_sample);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Find all the well-known objects with the given type.
     * @param type The object type.
     * @return The proxies or an empty sequence, if no such objects have been found.
     **/
    default com.zeroc.Ice.ObjectPrx[] findAllObjectsByType(String type)
    {
        return findAllObjectsByType(type, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find all the well-known objects with the given type.
     * @param type The object type.
     * @param context The Context map to send with the invocation.
     * @return The proxies or an empty sequence, if no such objects have been found.
     **/
    default com.zeroc.Ice.ObjectPrx[] findAllObjectsByType(String type, java.util.Map<String, String> context)
    {
        return _iceI_findAllObjectsByTypeAsync(type, context, true).waitForResponse();
    }

    /**
     * Find all the well-known objects with the given type.
     * @param type The object type.
     * @return The proxies or an empty sequence, if no such objects have been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx[]> findAllObjectsByTypeAsync(String type)
    {
        return _iceI_findAllObjectsByTypeAsync(type, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find all the well-known objects with the given type.
     * @param type The object type.
     * @param context The Context map to send with the invocation.
     * @return The proxies or an empty sequence, if no such objects have been found.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx[]> findAllObjectsByTypeAsync(String type, java.util.Map<String, String> context)
    {
        return _iceI_findAllObjectsByTypeAsync(type, context, false);
    }

    /**
     * @hidden
     * @param iceP_type -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx[]> _iceI_findAllObjectsByTypeAsync(String iceP_type, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findAllObjectsByType", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_type);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx[] ret;
                     ret = com.zeroc.Ice.ObjectProxySeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
     * from a replica group, an empty sequence is returned.
     * @param proxy The object proxy.
     * @return The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
     * group.
     **/
    default com.zeroc.Ice.ObjectPrx[] findAllReplicas(com.zeroc.Ice.ObjectPrx proxy)
    {
        return findAllReplicas(proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
     * from a replica group, an empty sequence is returned.
     * @param proxy The object proxy.
     * @param context The Context map to send with the invocation.
     * @return The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
     * group.
     **/
    default com.zeroc.Ice.ObjectPrx[] findAllReplicas(com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_findAllReplicasAsync(proxy, context, true).waitForResponse();
    }

    /**
     * Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
     * from a replica group, an empty sequence is returned.
     * @param proxy The object proxy.
     * @return The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
     * group.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx[]> findAllReplicasAsync(com.zeroc.Ice.ObjectPrx proxy)
    {
        return _iceI_findAllReplicasAsync(proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
     * from a replica group, an empty sequence is returned.
     * @param proxy The object proxy.
     * @param context The Context map to send with the invocation.
     * @return The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
     * group.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx[]> findAllReplicasAsync(com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_findAllReplicasAsync(proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx[]> _iceI_findAllReplicasAsync(com.zeroc.Ice.ObjectPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findAllReplicas", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_proxy);
                 }, istr -> {
                     com.zeroc.Ice.ObjectPrx[] ret;
                     ret = com.zeroc.Ice.ObjectProxySeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link QueryPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static QueryPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _QueryPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static QueryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static QueryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _QueryPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static QueryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static QueryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static QueryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _QueryPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static QueryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _QueryPrxI(obj.ice_facet(facet));
    }

    @Override
    QueryPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    QueryPrx ice_adapterId(String newAdapterId);

    @Override
    QueryPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    QueryPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    QueryPrx ice_invocationTimeout(int newTimeout);

    @Override
    QueryPrx ice_connectionCached(boolean newCache);

    @Override
    QueryPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    QueryPrx ice_secure(boolean b);

    @Override
    QueryPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    QueryPrx ice_preferSecure(boolean b);

    @Override
    QueryPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    QueryPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    QueryPrx ice_collocationOptimized(boolean b);

    @Override
    QueryPrx ice_twoway();

    @Override
    QueryPrx ice_oneway();

    @Override
    QueryPrx ice_batchOneway();

    @Override
    QueryPrx ice_datagram();

    @Override
    QueryPrx ice_batchDatagram();

    @Override
    QueryPrx ice_compress(boolean co);

    @Override
    QueryPrx ice_connectionId(String connectionId);

    @Override
    QueryPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::Query";
    }

    /**
     * @hidden
     **/
    @Override
    default QueryPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _QueryPrxI(ref);
    }
}
