//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface allows applications to monitor the state of object adapters that are registered with IceGrid.
 **/
public interface AdapterObserverPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * <code>adapterInit</code> is called after registration of an observer to indicate the state of the registry.
     * @param adpts The adapters that were dynamically registered with the registry (not through the deployment
     * mechanism).
     **/
    default void adapterInit(AdapterInfo[] adpts)
    {
        adapterInit(adpts, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * <code>adapterInit</code> is called after registration of an observer to indicate the state of the registry.
     * @param adpts The adapters that were dynamically registered with the registry (not through the deployment
     * mechanism).
     * @param context The Context map to send with the invocation.
     **/
    default void adapterInit(AdapterInfo[] adpts, java.util.Map<String, String> context)
    {
        _iceI_adapterInitAsync(adpts, context, true).waitForResponse();
    }

    /**
     * <code>adapterInit</code> is called after registration of an observer to indicate the state of the registry.
     * @param adpts The adapters that were dynamically registered with the registry (not through the deployment
     * mechanism).
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterInitAsync(AdapterInfo[] adpts)
    {
        return _iceI_adapterInitAsync(adpts, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * <code>adapterInit</code> is called after registration of an observer to indicate the state of the registry.
     * @param adpts The adapters that were dynamically registered with the registry (not through the deployment
     * mechanism).
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterInitAsync(AdapterInfo[] adpts, java.util.Map<String, String> context)
    {
        return _iceI_adapterInitAsync(adpts, context, false);
    }

    /**
     * @hidden
     * @param iceP_adpts -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_adapterInitAsync(AdapterInfo[] iceP_adpts, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "adapterInit", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AdapterInfoSeqHelper.write(ostr, iceP_adpts);
                 }, null);
        return f;
    }

    /**
     * The <code>adapterAdded</code> operation is called to notify an observer when a dynamically-registered
     * adapter was added.
     * @param info The details of the new adapter.
     **/
    default void adapterAdded(AdapterInfo info)
    {
        adapterAdded(info, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>adapterAdded</code> operation is called to notify an observer when a dynamically-registered
     * adapter was added.
     * @param info The details of the new adapter.
     * @param context The Context map to send with the invocation.
     **/
    default void adapterAdded(AdapterInfo info, java.util.Map<String, String> context)
    {
        _iceI_adapterAddedAsync(info, context, true).waitForResponse();
    }

    /**
     * The <code>adapterAdded</code> operation is called to notify an observer when a dynamically-registered
     * adapter was added.
     * @param info The details of the new adapter.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterAddedAsync(AdapterInfo info)
    {
        return _iceI_adapterAddedAsync(info, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>adapterAdded</code> operation is called to notify an observer when a dynamically-registered
     * adapter was added.
     * @param info The details of the new adapter.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterAddedAsync(AdapterInfo info, java.util.Map<String, String> context)
    {
        return _iceI_adapterAddedAsync(info, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_adapterAddedAsync(AdapterInfo iceP_info, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "adapterAdded", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AdapterInfo.ice_write(ostr, iceP_info);
                 }, null);
        return f;
    }

    /**
     * The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
     * updated.
     * @param info The details of the updated adapter.
     **/
    default void adapterUpdated(AdapterInfo info)
    {
        adapterUpdated(info, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
     * updated.
     * @param info The details of the updated adapter.
     * @param context The Context map to send with the invocation.
     **/
    default void adapterUpdated(AdapterInfo info, java.util.Map<String, String> context)
    {
        _iceI_adapterUpdatedAsync(info, context, true).waitForResponse();
    }

    /**
     * The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
     * updated.
     * @param info The details of the updated adapter.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterUpdatedAsync(AdapterInfo info)
    {
        return _iceI_adapterUpdatedAsync(info, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
     * updated.
     * @param info The details of the updated adapter.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterUpdatedAsync(AdapterInfo info, java.util.Map<String, String> context)
    {
        return _iceI_adapterUpdatedAsync(info, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_adapterUpdatedAsync(AdapterInfo iceP_info, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "adapterUpdated", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AdapterInfo.ice_write(ostr, iceP_info);
                 }, null);
        return f;
    }

    /**
     * The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
     * removed.
     * @param id The ID of the removed adapter.
     **/
    default void adapterRemoved(String id)
    {
        adapterRemoved(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
     * removed.
     * @param id The ID of the removed adapter.
     * @param context The Context map to send with the invocation.
     **/
    default void adapterRemoved(String id, java.util.Map<String, String> context)
    {
        _iceI_adapterRemovedAsync(id, context, true).waitForResponse();
    }

    /**
     * The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
     * removed.
     * @param id The ID of the removed adapter.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterRemovedAsync(String id)
    {
        return _iceI_adapterRemovedAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
     * removed.
     * @param id The ID of the removed adapter.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> adapterRemovedAsync(String id, java.util.Map<String, String> context)
    {
        return _iceI_adapterRemovedAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_adapterRemovedAsync(String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "adapterRemoved", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _AdapterObserverPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static AdapterObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _AdapterObserverPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static AdapterObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _AdapterObserverPrxI(obj.ice_facet(facet));
    }

    @Override
    AdapterObserverPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    AdapterObserverPrx ice_adapterId(String newAdapterId);

    @Override
    AdapterObserverPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    AdapterObserverPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    AdapterObserverPrx ice_invocationTimeout(int newTimeout);

    @Override
    AdapterObserverPrx ice_connectionCached(boolean newCache);

    @Override
    AdapterObserverPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    AdapterObserverPrx ice_secure(boolean b);

    @Override
    AdapterObserverPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    AdapterObserverPrx ice_preferSecure(boolean b);

    @Override
    AdapterObserverPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    AdapterObserverPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    AdapterObserverPrx ice_collocationOptimized(boolean b);

    @Override
    AdapterObserverPrx ice_twoway();

    @Override
    AdapterObserverPrx ice_oneway();

    @Override
    AdapterObserverPrx ice_batchOneway();

    @Override
    AdapterObserverPrx ice_datagram();

    @Override
    AdapterObserverPrx ice_batchDatagram();

    @Override
    AdapterObserverPrx ice_compress(boolean co);

    @Override
    AdapterObserverPrx ice_connectionId(String connectionId);

    @Override
    AdapterObserverPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::AdapterObserver";
    }
}
