//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface allows applications to monitor IceGrid well-known objects.
 **/
public interface ObjectObserver extends com.zeroc.Ice.Object
{
    /**
     * <code>objectInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param objects The objects registered with the {@link Admin}} interface (not through the deployment
     * mechanism).
     * @param current The Current object for the invocation.
     **/
    void objectInit(ObjectInfo[] objects, com.zeroc.Ice.Current current);

    /**
     * The <code>objectAdded</code> operation is called to notify an observer when an object was added to the
     * {@link Admin}} interface.
     * @param info The details of the added object.
     * @param current The Current object for the invocation.
     **/
    void objectAdded(ObjectInfo info, com.zeroc.Ice.Current current);

    /**
     * <code>objectUpdated</code> is called to notify an observer when an object registered with the {@link Admin}}
     * interface was updated.
     * @param info The details of the updated object.
     * @param current The Current object for the invocation.
     **/
    void objectUpdated(ObjectInfo info, com.zeroc.Ice.Current current);

    /**
     * <code>objectRemoved</code> is called to notify an observer when an object registered with the {@link Admin}}
     * interface was removed.
     * @param id The identity of the removed object.
     * @param current The Current object for the invocation.
     **/
    void objectRemoved(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::ObjectObserver"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::ObjectObserver";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_objectInit(ObjectObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ObjectInfo[] iceP_objects;
        iceP_objects = ObjectInfoSeqHelper.read(istr);
        istr.endEncapsulation();
        obj.objectInit(iceP_objects, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_objectAdded(ObjectObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ObjectInfo iceP_info;
        iceP_info = ObjectInfo.ice_read(istr);
        istr.endEncapsulation();
        obj.objectAdded(iceP_info, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_objectUpdated(ObjectObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ObjectInfo iceP_info;
        iceP_info = ObjectInfo.ice_read(istr);
        istr.endEncapsulation();
        obj.objectUpdated(iceP_info, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_objectRemoved(ObjectObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        obj.objectRemoved(iceP_id, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "objectInit" -> ObjectObserver._iceD_objectInit(this, request);
            case "objectAdded" -> ObjectObserver._iceD_objectAdded(this, request);
            case "objectUpdated" -> ObjectObserver._iceD_objectUpdated(this, request);
            case "objectRemoved" -> ObjectObserver._iceD_objectRemoved(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
