//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The IceGrid query interface. This interface is accessible to Ice clients who wish to look up well-known
 * objects.
 **/
public interface Query extends com.zeroc.Ice.Object
{
    /**
     * Find a well-known object by identity.
     * @param id The identity.
     * @param current The Current object for the invocation.
     * @return The proxy or null if no such object has been found.
     **/
    com.zeroc.Ice.ObjectPrx findObjectById(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current);

    /**
     * Find a well-known object by type. If there are several objects registered for the given type, the object is
     * randomly selected.
     * @param type The object type.
     * @param current The Current object for the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    com.zeroc.Ice.ObjectPrx findObjectByType(String type, com.zeroc.Ice.Current current);

    /**
     * Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
     * the object (for example, because the object was registered with a direct proxy), the registry assumes the
     * object is hosted on a node that has a load average of 1.0.
     * @param type The object type.
     * @param sample The sampling interval.
     * @param current The Current object for the invocation.
     * @return The proxy or null, if no such object has been found.
     **/
    com.zeroc.Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(String type, LoadSample sample, com.zeroc.Ice.Current current);

    /**
     * Find all the well-known objects with the given type.
     * @param type The object type.
     * @param current The Current object for the invocation.
     * @return The proxies or an empty sequence, if no such objects have been found.
     **/
    com.zeroc.Ice.ObjectPrx[] findAllObjectsByType(String type, com.zeroc.Ice.Current current);

    /**
     * Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
     * from a replica group, an empty sequence is returned.
     * @param proxy The object proxy.
     * @param current The Current object for the invocation.
     * @return The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
     * group.
     **/
    com.zeroc.Ice.ObjectPrx[] findAllReplicas(com.zeroc.Ice.ObjectPrx proxy, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::Query"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Query";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findObjectById(Query obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.findObjectById(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findObjectByType(Query obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_type;
        iceP_type = istr.readString();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.findObjectByType(iceP_type, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findObjectByTypeOnLeastLoadedNode(Query obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_type;
        LoadSample iceP_sample;
        iceP_type = istr.readString();
        iceP_sample = LoadSample.ice_read(istr);
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findAllObjectsByType(Query obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_type;
        iceP_type = istr.readString();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx[] ret = obj.findAllObjectsByType(iceP_type, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        com.zeroc.Ice.ObjectProxySeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_findAllReplicas(Query obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx iceP_proxy;
        iceP_proxy = istr.readProxy();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx[] ret = obj.findAllReplicas(iceP_proxy, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        com.zeroc.Ice.ObjectProxySeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "findObjectById" -> Query._iceD_findObjectById(this, request);
            case "findObjectByType" -> Query._iceD_findObjectByType(this, request);
            case "findObjectByTypeOnLeastLoadedNode" -> Query._iceD_findObjectByTypeOnLeastLoadedNode(this, request);
            case "findAllObjectsByType" -> Query._iceD_findAllObjectsByType(this, request);
            case "findAllReplicas" -> Query._iceD_findAllReplicas(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
