//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface allows applications to monitor changes the state of the registry.
 **/
public interface RegistryObserver extends com.zeroc.Ice.Object
{
    /**
     * The <code>registryInit</code> operation is called after registration of an observer to indicate the state of
     * the registries.
     * @param registries The current state of the registries.
     * @param current The Current object for the invocation.
     **/
    void registryInit(RegistryInfo[] registries, com.zeroc.Ice.Current current);

    /**
     * The <code>registryUp</code> operation is called to notify an observer that a registry replica came up.
     * @param registryReplica The registry state.
     * @param current The Current object for the invocation.
     **/
    void registryUp(RegistryInfo registryReplica, com.zeroc.Ice.Current current);

    /**
     * The <code>registryDown</code> operation is called to notify an observer that a registry replica went down.
     * @param name The registry name.
     * @param current The Current object for the invocation.
     **/
    void registryDown(String name, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::RegistryObserver"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::RegistryObserver";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_registryInit(RegistryObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        RegistryInfo[] iceP_registries;
        iceP_registries = RegistryInfoSeqHelper.read(istr);
        istr.endEncapsulation();
        obj.registryInit(iceP_registries, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_registryUp(RegistryObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        RegistryInfo iceP_registryReplica;
        iceP_registryReplica = RegistryInfo.ice_read(istr);
        istr.endEncapsulation();
        obj.registryUp(iceP_registryReplica, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_registryDown(RegistryObserver obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.registryDown(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "registryInit" -> RegistryObserver._iceD_registryInit(this, request);
            case "registryUp" -> RegistryObserver._iceD_registryUp(this, request);
            case "registryDown" -> RegistryObserver._iceD_registryDown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
