//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface allows applications to monitor changes the state of the registry.
 **/
public interface RegistryObserverPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * The <code>registryInit</code> operation is called after registration of an observer to indicate the state of
     * the registries.
     * @param registries The current state of the registries.
     **/
    default void registryInit(RegistryInfo[] registries)
    {
        registryInit(registries, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>registryInit</code> operation is called after registration of an observer to indicate the state of
     * the registries.
     * @param registries The current state of the registries.
     * @param context The Context map to send with the invocation.
     **/
    default void registryInit(RegistryInfo[] registries, java.util.Map<String, String> context)
    {
        _iceI_registryInitAsync(registries, context, true).waitForResponse();
    }

    /**
     * The <code>registryInit</code> operation is called after registration of an observer to indicate the state of
     * the registries.
     * @param registries The current state of the registries.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryInitAsync(RegistryInfo[] registries)
    {
        return _iceI_registryInitAsync(registries, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>registryInit</code> operation is called after registration of an observer to indicate the state of
     * the registries.
     * @param registries The current state of the registries.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryInitAsync(RegistryInfo[] registries, java.util.Map<String, String> context)
    {
        return _iceI_registryInitAsync(registries, context, false);
    }

    /**
     * @hidden
     * @param iceP_registries -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registryInitAsync(RegistryInfo[] iceP_registries, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registryInit", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     RegistryInfoSeqHelper.write(ostr, iceP_registries);
                 }, null);
        return f;
    }

    /**
     * The <code>registryUp</code> operation is called to notify an observer that a registry replica came up.
     * @param registryReplica The registry state.
     **/
    default void registryUp(RegistryInfo registryReplica)
    {
        registryUp(registryReplica, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>registryUp</code> operation is called to notify an observer that a registry replica came up.
     * @param registryReplica The registry state.
     * @param context The Context map to send with the invocation.
     **/
    default void registryUp(RegistryInfo registryReplica, java.util.Map<String, String> context)
    {
        _iceI_registryUpAsync(registryReplica, context, true).waitForResponse();
    }

    /**
     * The <code>registryUp</code> operation is called to notify an observer that a registry replica came up.
     * @param registryReplica The registry state.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryUpAsync(RegistryInfo registryReplica)
    {
        return _iceI_registryUpAsync(registryReplica, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>registryUp</code> operation is called to notify an observer that a registry replica came up.
     * @param registryReplica The registry state.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryUpAsync(RegistryInfo registryReplica, java.util.Map<String, String> context)
    {
        return _iceI_registryUpAsync(registryReplica, context, false);
    }

    /**
     * @hidden
     * @param iceP_registryReplica -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registryUpAsync(RegistryInfo iceP_registryReplica, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registryUp", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     RegistryInfo.ice_write(ostr, iceP_registryReplica);
                 }, null);
        return f;
    }

    /**
     * The <code>registryDown</code> operation is called to notify an observer that a registry replica went down.
     * @param name The registry name.
     **/
    default void registryDown(String name)
    {
        registryDown(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>registryDown</code> operation is called to notify an observer that a registry replica went down.
     * @param name The registry name.
     * @param context The Context map to send with the invocation.
     **/
    default void registryDown(String name, java.util.Map<String, String> context)
    {
        _iceI_registryDownAsync(name, context, true).waitForResponse();
    }

    /**
     * The <code>registryDown</code> operation is called to notify an observer that a registry replica went down.
     * @param name The registry name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryDownAsync(String name)
    {
        return _iceI_registryDownAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>registryDown</code> operation is called to notify an observer that a registry replica went down.
     * @param name The registry name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registryDownAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_registryDownAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registryDownAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registryDown", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link RegistryObserverPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static RegistryObserverPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _RegistryObserverPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _RegistryObserverPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RegistryObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _RegistryObserverPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RegistryObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _RegistryObserverPrxI(obj.ice_facet(facet));
    }

    @Override
    RegistryObserverPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    RegistryObserverPrx ice_adapterId(String newAdapterId);

    @Override
    RegistryObserverPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    RegistryObserverPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    RegistryObserverPrx ice_invocationTimeout(int newTimeout);

    @Override
    RegistryObserverPrx ice_connectionCached(boolean newCache);

    @Override
    RegistryObserverPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    RegistryObserverPrx ice_secure(boolean b);

    @Override
    RegistryObserverPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    RegistryObserverPrx ice_preferSecure(boolean b);

    @Override
    RegistryObserverPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    RegistryObserverPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    RegistryObserverPrx ice_collocationOptimized(boolean b);

    @Override
    RegistryObserverPrx ice_twoway();

    @Override
    RegistryObserverPrx ice_oneway();

    @Override
    RegistryObserverPrx ice_batchOneway();

    @Override
    RegistryObserverPrx ice_datagram();

    @Override
    RegistryObserverPrx ice_batchDatagram();

    @Override
    RegistryObserverPrx ice_compress(boolean co);

    @Override
    RegistryObserverPrx ice_connectionId(String connectionId);

    @Override
    RegistryObserverPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::RegistryObserver";
    }

    /**
     * @hidden
     **/
    @Override
    default RegistryObserverPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _RegistryObserverPrxI(ref);
    }
}
