//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The IceGrid registry allows clients create sessions directly with the registry.
 *
 * @see Session
 * @see AdminSession
 **/
public interface RegistryPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Create a client session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default SessionPrx createSession(String userId, String password)
        throws PermissionDeniedException
    {
        return createSession(userId, password, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create a client session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default SessionPrx createSession(String userId, String password, java.util.Map<String, String> context)
        throws PermissionDeniedException
    {
        try
        {
            return _iceI_createSessionAsync(userId, password, context, true).waitForResponseOrUserEx();
        }
        catch(PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Create a client session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<SessionPrx> createSessionAsync(String userId, String password)
    {
        return _iceI_createSessionAsync(userId, password, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create a client session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<SessionPrx> createSessionAsync(String userId, String password, java.util.Map<String, String> context)
    {
        return _iceI_createSessionAsync(userId, password, context, false);
    }

    /**
     * @hidden
     * @param iceP_userId -
     * @param iceP_password -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SessionPrx> _iceI_createSessionAsync(String iceP_userId, String iceP_password, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createSession", null, sync, _iceE_createSession);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_userId);
                     ostr.writeString(iceP_password);
                 }, istr -> {
                     SessionPrx ret;
                     ret = SessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_createSession =
    {
        PermissionDeniedException.class
    };

    /**
     * Create an administrative session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default AdminSessionPrx createAdminSession(String userId, String password)
        throws PermissionDeniedException
    {
        return createAdminSession(userId, password, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create an administrative session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default AdminSessionPrx createAdminSession(String userId, String password, java.util.Map<String, String> context)
        throws PermissionDeniedException
    {
        try
        {
            return _iceI_createAdminSessionAsync(userId, password, context, true).waitForResponseOrUserEx();
        }
        catch(PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Create an administrative session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminSessionPrx> createAdminSessionAsync(String userId, String password)
    {
        return _iceI_createAdminSessionAsync(userId, password, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create an administrative session.
     * @param userId The user id.
     * @param password The password for the given user id.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminSessionPrx> createAdminSessionAsync(String userId, String password, java.util.Map<String, String> context)
    {
        return _iceI_createAdminSessionAsync(userId, password, context, false);
    }

    /**
     * @hidden
     * @param iceP_userId -
     * @param iceP_password -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<AdminSessionPrx> _iceI_createAdminSessionAsync(String iceP_userId, String iceP_password, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<AdminSessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createAdminSession", null, sync, _iceE_createAdminSession);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_userId);
                     ostr.writeString(iceP_password);
                 }, istr -> {
                     AdminSessionPrx ret;
                     ret = AdminSessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_createAdminSession =
    {
        PermissionDeniedException.class
    };

    /**
     * Create a client session from a secure connection.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default SessionPrx createSessionFromSecureConnection()
        throws PermissionDeniedException
    {
        return createSessionFromSecureConnection(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create a client session from a secure connection.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default SessionPrx createSessionFromSecureConnection(java.util.Map<String, String> context)
        throws PermissionDeniedException
    {
        try
        {
            return _iceI_createSessionFromSecureConnectionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Create a client session from a secure connection.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<SessionPrx> createSessionFromSecureConnectionAsync()
    {
        return _iceI_createSessionFromSecureConnectionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create a client session from a secure connection.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<SessionPrx> createSessionFromSecureConnectionAsync(java.util.Map<String, String> context)
    {
        return _iceI_createSessionFromSecureConnectionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<SessionPrx> _iceI_createSessionFromSecureConnectionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createSessionFromSecureConnection", null, sync, _iceE_createSessionFromSecureConnection);
        f.invoke(true, context, null, null, istr -> {
                     SessionPrx ret;
                     ret = SessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_createSessionFromSecureConnection =
    {
        PermissionDeniedException.class
    };

    /**
     * Create an administrative session from a secure connection.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default AdminSessionPrx createAdminSessionFromSecureConnection()
        throws PermissionDeniedException
    {
        return createAdminSessionFromSecureConnection(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create an administrative session from a secure connection.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     * @throws PermissionDeniedException Raised if the password for the given user id is not correct, or if the
     * user is not allowed access.
     **/
    default AdminSessionPrx createAdminSessionFromSecureConnection(java.util.Map<String, String> context)
        throws PermissionDeniedException
    {
        try
        {
            return _iceI_createAdminSessionFromSecureConnectionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Create an administrative session from a secure connection.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminSessionPrx> createAdminSessionFromSecureConnectionAsync()
    {
        return _iceI_createAdminSessionFromSecureConnectionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create an administrative session from a secure connection.
     * @param context The Context map to send with the invocation.
     * @return A proxy for the newly created session. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminSessionPrx> createAdminSessionFromSecureConnectionAsync(java.util.Map<String, String> context)
    {
        return _iceI_createAdminSessionFromSecureConnectionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<AdminSessionPrx> _iceI_createAdminSessionFromSecureConnectionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<AdminSessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createAdminSessionFromSecureConnection", null, sync, _iceE_createAdminSessionFromSecureConnection);
        f.invoke(true, context, null, null, istr -> {
                     AdminSessionPrx ret;
                     ret = AdminSessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_createAdminSessionFromSecureConnection =
    {
        PermissionDeniedException.class
    };

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @return The idle timeout (in seconds).
     **/
    default int getSessionTimeout()
    {
        return getSessionTimeout(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @param context The Context map to send with the invocation.
     * @return The idle timeout (in seconds).
     **/
    default int getSessionTimeout(java.util.Map<String, String> context)
    {
        return _iceI_getSessionTimeoutAsync(context, true).waitForResponse();
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @return The idle timeout (in seconds).
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getSessionTimeoutAsync()
    {
        return _iceI_getSessionTimeoutAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @param context The Context map to send with the invocation.
     * @return The idle timeout (in seconds).
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getSessionTimeoutAsync(java.util.Map<String, String> context)
    {
        return _iceI_getSessionTimeoutAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getSessionTimeoutAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getSessionTimeout", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @return The idle timeout (in seconds).
     **/
    default int getACMTimeout()
    {
        return getACMTimeout(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @param context The Context map to send with the invocation.
     * @return The idle timeout (in seconds).
     **/
    default int getACMTimeout(java.util.Map<String, String> context)
    {
        return _iceI_getACMTimeoutAsync(context, true).waitForResponse();
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @return The idle timeout (in seconds).
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getACMTimeoutAsync()
    {
        return _iceI_getACMTimeoutAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the idle timeout used by IceGrid for its side of the connection.
     * @param context The Context map to send with the invocation.
     * @return The idle timeout (in seconds).
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getACMTimeoutAsync(java.util.Map<String, String> context)
    {
        return _iceI_getACMTimeoutAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getACMTimeoutAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getACMTimeout", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link RegistryPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static RegistryPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _RegistryPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _RegistryPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _RegistryPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _RegistryPrxI(obj.ice_facet(facet));
    }

    @Override
    RegistryPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    RegistryPrx ice_adapterId(String newAdapterId);

    @Override
    RegistryPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    RegistryPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    RegistryPrx ice_invocationTimeout(int newTimeout);

    @Override
    RegistryPrx ice_connectionCached(boolean newCache);

    @Override
    RegistryPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    RegistryPrx ice_secure(boolean b);

    @Override
    RegistryPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    RegistryPrx ice_preferSecure(boolean b);

    @Override
    RegistryPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    RegistryPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    RegistryPrx ice_collocationOptimized(boolean b);

    @Override
    RegistryPrx ice_twoway();

    @Override
    RegistryPrx ice_oneway();

    @Override
    RegistryPrx ice_batchOneway();

    @Override
    RegistryPrx ice_datagram();

    @Override
    RegistryPrx ice_batchDatagram();

    @Override
    RegistryPrx ice_compress(boolean co);

    @Override
    RegistryPrx ice_connectionId(String connectionId);

    @Override
    RegistryPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::Registry";
    }

    /**
     * @hidden
     **/
    @Override
    default RegistryPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _RegistryPrxI(ref);
    }
}
