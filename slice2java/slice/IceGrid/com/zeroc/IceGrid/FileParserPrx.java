//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * <code>icegridadmin</code> provides a {@link FileParser} object to transform XML files into
 * {@link ApplicationDescriptor} objects.
 **/
public interface FileParserPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @return The application descriptor.
     * @throws ParseException Raised if an error occurred during parsing.
     **/
    default ApplicationDescriptor parse(String xmlFile, AdminPrx adminProxy)
        throws ParseException
    {
        return parse(xmlFile, adminProxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param context The Context map to send with the invocation.
     * @return The application descriptor.
     * @throws ParseException Raised if an error occurred during parsing.
     **/
    default ApplicationDescriptor parse(String xmlFile, AdminPrx adminProxy, java.util.Map<String, String> context)
        throws ParseException
    {
        try
        {
            return _iceI_parseAsync(xmlFile, adminProxy, context, true).waitForResponseOrUserEx();
        }
        catch(ParseException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @return The application descriptor.
     **/
    default java.util.concurrent.CompletableFuture<ApplicationDescriptor> parseAsync(String xmlFile, AdminPrx adminProxy)
    {
        return _iceI_parseAsync(xmlFile, adminProxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param context The Context map to send with the invocation.
     * @return The application descriptor.
     **/
    default java.util.concurrent.CompletableFuture<ApplicationDescriptor> parseAsync(String xmlFile, AdminPrx adminProxy, java.util.Map<String, String> context)
    {
        return _iceI_parseAsync(xmlFile, adminProxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_xmlFile -
     * @param iceP_adminProxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<ApplicationDescriptor> _iceI_parseAsync(String iceP_xmlFile, AdminPrx iceP_adminProxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<ApplicationDescriptor> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "parse", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_parse);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_xmlFile);
                     ostr.writeProxy(iceP_adminProxy);
                 }, istr -> {
                     ApplicationDescriptor ret;
                     ret = ApplicationDescriptor.ice_read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_parse =
    {
        ParseException.class
    };

    /**
     * Creates a new proxy that implements {@link FileParserPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static FileParserPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _FileParserPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileParserPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileParserPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _FileParserPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileParserPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileParserPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FileParserPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _FileParserPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FileParserPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _FileParserPrxI(obj.ice_facet(facet));
    }

    @Override
    FileParserPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    FileParserPrx ice_adapterId(String newAdapterId);

    @Override
    FileParserPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    FileParserPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    FileParserPrx ice_invocationTimeout(int newTimeout);

    @Override
    FileParserPrx ice_connectionCached(boolean newCache);

    @Override
    FileParserPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    FileParserPrx ice_secure(boolean b);

    @Override
    FileParserPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    FileParserPrx ice_preferSecure(boolean b);

    @Override
    FileParserPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    FileParserPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    FileParserPrx ice_collocationOptimized(boolean b);

    @Override
    FileParserPrx ice_twoway();

    @Override
    FileParserPrx ice_oneway();

    @Override
    FileParserPrx ice_batchOneway();

    @Override
    FileParserPrx ice_datagram();

    @Override
    FileParserPrx ice_batchDatagram();

    @Override
    FileParserPrx ice_compress(boolean co);

    @Override
    FileParserPrx ice_connectionId(String connectionId);

    @Override
    FileParserPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::FileParser";
    }

    /**
     * @hidden
     **/
    @Override
    default FileParserPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _FileParserPrxI(ref);
    }
}
