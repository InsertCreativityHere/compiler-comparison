//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The node observer interface. Observers should implement this interface to receive information about the state of
 * the IceGrid nodes.
 **/
public interface NodeObserverPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * The <code>nodeInit</code> operation indicates the current state of nodes. It is called after the
     * registration of an observer.
     * @param nodes The current state of the nodes.
     **/
    default void nodeInit(NodeDynamicInfo[] nodes)
    {
        nodeInit(nodes, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>nodeInit</code> operation indicates the current state of nodes. It is called after the
     * registration of an observer.
     * @param nodes The current state of the nodes.
     * @param context The Context map to send with the invocation.
     **/
    default void nodeInit(NodeDynamicInfo[] nodes, java.util.Map<String, String> context)
    {
        _iceI_nodeInitAsync(nodes, context, true).waitForResponse();
    }

    /**
     * The <code>nodeInit</code> operation indicates the current state of nodes. It is called after the
     * registration of an observer.
     * @param nodes The current state of the nodes.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeInitAsync(NodeDynamicInfo[] nodes)
    {
        return _iceI_nodeInitAsync(nodes, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>nodeInit</code> operation indicates the current state of nodes. It is called after the
     * registration of an observer.
     * @param nodes The current state of the nodes.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeInitAsync(NodeDynamicInfo[] nodes, java.util.Map<String, String> context)
    {
        return _iceI_nodeInitAsync(nodes, context, false);
    }

    /**
     * @hidden
     * @param iceP_nodes -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_nodeInitAsync(NodeDynamicInfo[] iceP_nodes, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "nodeInit", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     NodeDynamicInfoSeqHelper.write(ostr, iceP_nodes);
                 }, null);
        return f;
    }

    /**
     * The <code>nodeUp</code> operation is called to notify an observer that a node came up.
     * @param node The node state.
     **/
    default void nodeUp(NodeDynamicInfo node)
    {
        nodeUp(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>nodeUp</code> operation is called to notify an observer that a node came up.
     * @param node The node state.
     * @param context The Context map to send with the invocation.
     **/
    default void nodeUp(NodeDynamicInfo node, java.util.Map<String, String> context)
    {
        _iceI_nodeUpAsync(node, context, true).waitForResponse();
    }

    /**
     * The <code>nodeUp</code> operation is called to notify an observer that a node came up.
     * @param node The node state.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeUpAsync(NodeDynamicInfo node)
    {
        return _iceI_nodeUpAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>nodeUp</code> operation is called to notify an observer that a node came up.
     * @param node The node state.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeUpAsync(NodeDynamicInfo node, java.util.Map<String, String> context)
    {
        return _iceI_nodeUpAsync(node, context, false);
    }

    /**
     * @hidden
     * @param iceP_node -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_nodeUpAsync(NodeDynamicInfo iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "nodeUp", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     NodeDynamicInfo.ice_write(ostr, iceP_node);
                 }, null);
        return f;
    }

    /**
     * The <code>nodeDown</code> operation is called to notify an observer that a node went down.
     * @param name The node name.
     **/
    default void nodeDown(String name)
    {
        nodeDown(name, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>nodeDown</code> operation is called to notify an observer that a node went down.
     * @param name The node name.
     * @param context The Context map to send with the invocation.
     **/
    default void nodeDown(String name, java.util.Map<String, String> context)
    {
        _iceI_nodeDownAsync(name, context, true).waitForResponse();
    }

    /**
     * The <code>nodeDown</code> operation is called to notify an observer that a node went down.
     * @param name The node name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeDownAsync(String name)
    {
        return _iceI_nodeDownAsync(name, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>nodeDown</code> operation is called to notify an observer that a node went down.
     * @param name The node name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> nodeDownAsync(String name, java.util.Map<String, String> context)
    {
        return _iceI_nodeDownAsync(name, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_nodeDownAsync(String iceP_name, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "nodeDown", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                 }, null);
        return f;
    }

    /**
     * The <code>updateServer</code> operation is called to notify an observer that the state of a server changed.
     * @param node The node hosting the server.
     * @param updatedInfo The new server state.
     **/
    default void updateServer(String node, ServerDynamicInfo updatedInfo)
    {
        updateServer(node, updatedInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>updateServer</code> operation is called to notify an observer that the state of a server changed.
     * @param node The node hosting the server.
     * @param updatedInfo The new server state.
     * @param context The Context map to send with the invocation.
     **/
    default void updateServer(String node, ServerDynamicInfo updatedInfo, java.util.Map<String, String> context)
    {
        _iceI_updateServerAsync(node, updatedInfo, context, true).waitForResponse();
    }

    /**
     * The <code>updateServer</code> operation is called to notify an observer that the state of a server changed.
     * @param node The node hosting the server.
     * @param updatedInfo The new server state.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> updateServerAsync(String node, ServerDynamicInfo updatedInfo)
    {
        return _iceI_updateServerAsync(node, updatedInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>updateServer</code> operation is called to notify an observer that the state of a server changed.
     * @param node The node hosting the server.
     * @param updatedInfo The new server state.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> updateServerAsync(String node, ServerDynamicInfo updatedInfo, java.util.Map<String, String> context)
    {
        return _iceI_updateServerAsync(node, updatedInfo, context, false);
    }

    /**
     * @hidden
     * @param iceP_node -
     * @param iceP_updatedInfo -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_updateServerAsync(String iceP_node, ServerDynamicInfo iceP_updatedInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "updateServer", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_node);
                     ServerDynamicInfo.ice_write(ostr, iceP_updatedInfo);
                 }, null);
        return f;
    }

    /**
     * The <code>updateAdapter</code> operation is called to notify an observer that the state of an adapter
     * changed.
     * @param node The node hosting the adapter.
     * @param updatedInfo The new adapter state.
     **/
    default void updateAdapter(String node, AdapterDynamicInfo updatedInfo)
    {
        updateAdapter(node, updatedInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>updateAdapter</code> operation is called to notify an observer that the state of an adapter
     * changed.
     * @param node The node hosting the adapter.
     * @param updatedInfo The new adapter state.
     * @param context The Context map to send with the invocation.
     **/
    default void updateAdapter(String node, AdapterDynamicInfo updatedInfo, java.util.Map<String, String> context)
    {
        _iceI_updateAdapterAsync(node, updatedInfo, context, true).waitForResponse();
    }

    /**
     * The <code>updateAdapter</code> operation is called to notify an observer that the state of an adapter
     * changed.
     * @param node The node hosting the adapter.
     * @param updatedInfo The new adapter state.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> updateAdapterAsync(String node, AdapterDynamicInfo updatedInfo)
    {
        return _iceI_updateAdapterAsync(node, updatedInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>updateAdapter</code> operation is called to notify an observer that the state of an adapter
     * changed.
     * @param node The node hosting the adapter.
     * @param updatedInfo The new adapter state.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> updateAdapterAsync(String node, AdapterDynamicInfo updatedInfo, java.util.Map<String, String> context)
    {
        return _iceI_updateAdapterAsync(node, updatedInfo, context, false);
    }

    /**
     * @hidden
     * @param iceP_node -
     * @param iceP_updatedInfo -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_updateAdapterAsync(String iceP_node, AdapterDynamicInfo iceP_updatedInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "updateAdapter", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_node);
                     AdapterDynamicInfo.ice_write(ostr, iceP_updatedInfo);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link NodeObserverPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static NodeObserverPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _NodeObserverPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodeObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodeObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _NodeObserverPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodeObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodeObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NodeObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _NodeObserverPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NodeObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _NodeObserverPrxI(obj.ice_facet(facet));
    }

    @Override
    NodeObserverPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    NodeObserverPrx ice_adapterId(String newAdapterId);

    @Override
    NodeObserverPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    NodeObserverPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    NodeObserverPrx ice_invocationTimeout(int newTimeout);

    @Override
    NodeObserverPrx ice_connectionCached(boolean newCache);

    @Override
    NodeObserverPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    NodeObserverPrx ice_secure(boolean b);

    @Override
    NodeObserverPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    NodeObserverPrx ice_preferSecure(boolean b);

    @Override
    NodeObserverPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    NodeObserverPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    NodeObserverPrx ice_collocationOptimized(boolean b);

    @Override
    NodeObserverPrx ice_twoway();

    @Override
    NodeObserverPrx ice_oneway();

    @Override
    NodeObserverPrx ice_batchOneway();

    @Override
    NodeObserverPrx ice_datagram();

    @Override
    NodeObserverPrx ice_batchDatagram();

    @Override
    NodeObserverPrx ice_compress(boolean co);

    @Override
    NodeObserverPrx ice_connectionId(String connectionId);

    @Override
    NodeObserverPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::NodeObserver";
    }

    /**
     * @hidden
     **/
    @Override
    default NodeObserverPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _NodeObserverPrxI(ref);
    }
}
