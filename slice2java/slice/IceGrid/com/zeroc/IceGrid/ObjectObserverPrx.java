//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface allows applications to monitor IceGrid well-known objects.
 **/
public interface ObjectObserverPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * <code>objectInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param objects The objects registered with the {@link Admin} interface (not through the deployment
     * mechanism).
     **/
    default void objectInit(ObjectInfo[] objects)
    {
        objectInit(objects, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * <code>objectInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param objects The objects registered with the {@link Admin} interface (not through the deployment
     * mechanism).
     * @param context The Context map to send with the invocation.
     **/
    default void objectInit(ObjectInfo[] objects, java.util.Map<String, String> context)
    {
        _iceI_objectInitAsync(objects, context, true).waitForResponse();
    }

    /**
     * <code>objectInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param objects The objects registered with the {@link Admin} interface (not through the deployment
     * mechanism).
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectInitAsync(ObjectInfo[] objects)
    {
        return _iceI_objectInitAsync(objects, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * <code>objectInit</code> is called after the registration of an observer to indicate the state of the
     * registry.
     * @param objects The objects registered with the {@link Admin} interface (not through the deployment
     * mechanism).
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectInitAsync(ObjectInfo[] objects, java.util.Map<String, String> context)
    {
        return _iceI_objectInitAsync(objects, context, false);
    }

    /**
     * @hidden
     * @param iceP_objects -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_objectInitAsync(ObjectInfo[] iceP_objects, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "objectInit", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ObjectInfoSeqHelper.write(ostr, iceP_objects);
                 }, null);
        return f;
    }

    /**
     * The <code>objectAdded</code> operation is called to notify an observer when an object was added to the
     * {@link Admin} interface.
     * @param info The details of the added object.
     **/
    default void objectAdded(ObjectInfo info)
    {
        objectAdded(info, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The <code>objectAdded</code> operation is called to notify an observer when an object was added to the
     * {@link Admin} interface.
     * @param info The details of the added object.
     * @param context The Context map to send with the invocation.
     **/
    default void objectAdded(ObjectInfo info, java.util.Map<String, String> context)
    {
        _iceI_objectAddedAsync(info, context, true).waitForResponse();
    }

    /**
     * The <code>objectAdded</code> operation is called to notify an observer when an object was added to the
     * {@link Admin} interface.
     * @param info The details of the added object.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectAddedAsync(ObjectInfo info)
    {
        return _iceI_objectAddedAsync(info, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The <code>objectAdded</code> operation is called to notify an observer when an object was added to the
     * {@link Admin} interface.
     * @param info The details of the added object.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectAddedAsync(ObjectInfo info, java.util.Map<String, String> context)
    {
        return _iceI_objectAddedAsync(info, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_objectAddedAsync(ObjectInfo iceP_info, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "objectAdded", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ObjectInfo.ice_write(ostr, iceP_info);
                 }, null);
        return f;
    }

    /**
     * <code>objectUpdated</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was updated.
     * @param info The details of the updated object.
     **/
    default void objectUpdated(ObjectInfo info)
    {
        objectUpdated(info, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * <code>objectUpdated</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was updated.
     * @param info The details of the updated object.
     * @param context The Context map to send with the invocation.
     **/
    default void objectUpdated(ObjectInfo info, java.util.Map<String, String> context)
    {
        _iceI_objectUpdatedAsync(info, context, true).waitForResponse();
    }

    /**
     * <code>objectUpdated</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was updated.
     * @param info The details of the updated object.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectUpdatedAsync(ObjectInfo info)
    {
        return _iceI_objectUpdatedAsync(info, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * <code>objectUpdated</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was updated.
     * @param info The details of the updated object.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectUpdatedAsync(ObjectInfo info, java.util.Map<String, String> context)
    {
        return _iceI_objectUpdatedAsync(info, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_objectUpdatedAsync(ObjectInfo iceP_info, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "objectUpdated", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ObjectInfo.ice_write(ostr, iceP_info);
                 }, null);
        return f;
    }

    /**
     * <code>objectRemoved</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was removed.
     * @param id The identity of the removed object.
     **/
    default void objectRemoved(com.zeroc.Ice.Identity id)
    {
        objectRemoved(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * <code>objectRemoved</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was removed.
     * @param id The identity of the removed object.
     * @param context The Context map to send with the invocation.
     **/
    default void objectRemoved(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        _iceI_objectRemovedAsync(id, context, true).waitForResponse();
    }

    /**
     * <code>objectRemoved</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was removed.
     * @param id The identity of the removed object.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectRemovedAsync(com.zeroc.Ice.Identity id)
    {
        return _iceI_objectRemovedAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * <code>objectRemoved</code> is called to notify an observer when an object registered with the {@link Admin}
     * interface was removed.
     * @param id The identity of the removed object.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> objectRemovedAsync(com.zeroc.Ice.Identity id, java.util.Map<String, String> context)
    {
        return _iceI_objectRemovedAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_objectRemovedAsync(com.zeroc.Ice.Identity iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "objectRemoved", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_id);
                 }, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ObjectObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ObjectObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ObjectObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ObjectObserverPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ObjectObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ObjectObserverPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, ObjectObserverPrx.class, _ObjectObserverPrxI.class);
    }

    @Override
    ObjectObserverPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ObjectObserverPrx ice_adapterId(String newAdapterId);

    @Override
    ObjectObserverPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ObjectObserverPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ObjectObserverPrx ice_invocationTimeout(int newTimeout);

    @Override
    ObjectObserverPrx ice_connectionCached(boolean newCache);

    @Override
    ObjectObserverPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ObjectObserverPrx ice_secure(boolean b);

    @Override
    ObjectObserverPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ObjectObserverPrx ice_preferSecure(boolean b);

    @Override
    ObjectObserverPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ObjectObserverPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ObjectObserverPrx ice_collocationOptimized(boolean b);

    @Override
    ObjectObserverPrx ice_twoway();

    @Override
    ObjectObserverPrx ice_oneway();

    @Override
    ObjectObserverPrx ice_batchOneway();

    @Override
    ObjectObserverPrx ice_datagram();

    @Override
    ObjectObserverPrx ice_batchDatagram();

    @Override
    ObjectObserverPrx ice_compress(boolean co);

    @Override
    ObjectObserverPrx ice_timeout(int t);

    @Override
    ObjectObserverPrx ice_connectionId(String connectionId);

    @Override
    ObjectObserverPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::ObjectObserver";
    }
}
