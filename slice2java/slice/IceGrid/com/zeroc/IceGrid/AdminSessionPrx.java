//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * Used by administrative clients to view, update, and receive observer updates from the IceGrid registry. Admin
 * sessions are created either via the {@link Registry} object or via the registry admin
 * <code>SessionManager</code> object.
 *
 * @see Registry
 **/
public interface AdminSessionPrx extends com.zeroc.Glacier2.SessionPrx
{
    /**
     * Keep the session alive.
     * As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
     **/
    default void keepAlive()
    {
        keepAlive(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Keep the session alive.
     * As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
     * @param context The Context map to send with the invocation.
     **/
    default void keepAlive(java.util.Map<String, String> context)
    {
        _iceI_keepAliveAsync(context, true).waitForResponse();
    }

    /**
     * Keep the session alive.
     * As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync()
    {
        return _iceI_keepAliveAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Keep the session alive.
     * As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync(java.util.Map<String, String> context)
    {
        return _iceI_keepAliveAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_keepAliveAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "keepAlive", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Get the admin interface. The admin object returned by this operation can only be accessed by the session.
     * @return The admin interface proxy. The returned proxy is never null.
     **/
    default AdminPrx getAdmin()
    {
        return getAdmin(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the admin interface. The admin object returned by this operation can only be accessed by the session.
     * @param context The Context map to send with the invocation.
     * @return The admin interface proxy. The returned proxy is never null.
     **/
    default AdminPrx getAdmin(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, true).waitForResponse();
    }

    /**
     * Get the admin interface. The admin object returned by this operation can only be accessed by the session.
     * @return The admin interface proxy. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminPrx> getAdminAsync()
    {
        return _iceI_getAdminAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the admin interface. The admin object returned by this operation can only be accessed by the session.
     * @param context The Context map to send with the invocation.
     * @return The admin interface proxy. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<AdminPrx> getAdminAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<AdminPrx> _iceI_getAdminAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<AdminPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getAdmin", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     AdminPrx ret;
                     ret = AdminPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
     * its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
     * @return A template proxy. The returned proxy is null when the Admin session was established using Glacier2.
     **/
    default com.zeroc.Ice.ObjectPrx getAdminCallbackTemplate()
    {
        return getAdminCallbackTemplate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
     * its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
     * @param context The Context map to send with the invocation.
     * @return A template proxy. The returned proxy is null when the Admin session was established using Glacier2.
     **/
    default com.zeroc.Ice.ObjectPrx getAdminCallbackTemplate(java.util.Map<String, String> context)
    {
        return _iceI_getAdminCallbackTemplateAsync(context, true).waitForResponse();
    }

    /**
     * Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
     * its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
     * @return A template proxy. The returned proxy is null when the Admin session was established using Glacier2.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminCallbackTemplateAsync()
    {
        return _iceI_getAdminCallbackTemplateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
     * its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
     * @param context The Context map to send with the invocation.
     * @return A template proxy. The returned proxy is null when the Admin session was established using Glacier2.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminCallbackTemplateAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAdminCallbackTemplateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getAdminCallbackTemplateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getAdminCallbackTemplate", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Set the observer proxies that receive notifications when the state of the registry or nodes changes.
     * @param registryObs The registry observer.
     * @param nodeObs The node observer.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @throws ObserverAlreadyRegisteredException Raised if an observer is already registered with this registry.
     **/
    default void setObservers(RegistryObserverPrx registryObs, NodeObserverPrx nodeObs, ApplicationObserverPrx appObs, AdapterObserverPrx adptObs, ObjectObserverPrx objObs)
        throws ObserverAlreadyRegisteredException
    {
        setObservers(registryObs, nodeObs, appObs, adptObs, objObs, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the observer proxies that receive notifications when the state of the registry or nodes changes.
     * @param registryObs The registry observer.
     * @param nodeObs The node observer.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @param context The Context map to send with the invocation.
     * @throws ObserverAlreadyRegisteredException Raised if an observer is already registered with this registry.
     **/
    default void setObservers(RegistryObserverPrx registryObs, NodeObserverPrx nodeObs, ApplicationObserverPrx appObs, AdapterObserverPrx adptObs, ObjectObserverPrx objObs, java.util.Map<String, String> context)
        throws ObserverAlreadyRegisteredException
    {
        try
        {
            _iceI_setObserversAsync(registryObs, nodeObs, appObs, adptObs, objObs, context, true).waitForResponseOrUserEx();
        }
        catch(ObserverAlreadyRegisteredException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Set the observer proxies that receive notifications when the state of the registry or nodes changes.
     * @param registryObs The registry observer.
     * @param nodeObs The node observer.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setObserversAsync(RegistryObserverPrx registryObs, NodeObserverPrx nodeObs, ApplicationObserverPrx appObs, AdapterObserverPrx adptObs, ObjectObserverPrx objObs)
    {
        return _iceI_setObserversAsync(registryObs, nodeObs, appObs, adptObs, objObs, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the observer proxies that receive notifications when the state of the registry or nodes changes.
     * @param registryObs The registry observer.
     * @param nodeObs The node observer.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setObserversAsync(RegistryObserverPrx registryObs, NodeObserverPrx nodeObs, ApplicationObserverPrx appObs, AdapterObserverPrx adptObs, ObjectObserverPrx objObs, java.util.Map<String, String> context)
    {
        return _iceI_setObserversAsync(registryObs, nodeObs, appObs, adptObs, objObs, context, false);
    }

    /**
     * @hidden
     * @param iceP_registryObs -
     * @param iceP_nodeObs -
     * @param iceP_appObs -
     * @param iceP_adptObs -
     * @param iceP_objObs -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setObserversAsync(RegistryObserverPrx iceP_registryObs, NodeObserverPrx iceP_nodeObs, ApplicationObserverPrx iceP_appObs, AdapterObserverPrx iceP_adptObs, ObjectObserverPrx iceP_objObs, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setObservers", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setObservers);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_registryObs);
                     ostr.writeProxy(iceP_nodeObs);
                     ostr.writeProxy(iceP_appObs);
                     ostr.writeProxy(iceP_adptObs);
                     ostr.writeProxy(iceP_objObs);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setObservers =
    {
        ObserverAlreadyRegisteredException.class
    };

    /**
     * Set the observer identities that receive notifications the state of the registry or nodes changes. This
     * operation should be used by clients that are using a bidirectional connection to communicate with the
     * session.
     * @param registryObs The registry observer identity.
     * @param nodeObs The node observer identity.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @throws ObserverAlreadyRegisteredException Raised if an observer is already registered with this registry.
     **/
    default void setObserversByIdentity(com.zeroc.Ice.Identity registryObs, com.zeroc.Ice.Identity nodeObs, com.zeroc.Ice.Identity appObs, com.zeroc.Ice.Identity adptObs, com.zeroc.Ice.Identity objObs)
        throws ObserverAlreadyRegisteredException
    {
        setObserversByIdentity(registryObs, nodeObs, appObs, adptObs, objObs, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the observer identities that receive notifications the state of the registry or nodes changes. This
     * operation should be used by clients that are using a bidirectional connection to communicate with the
     * session.
     * @param registryObs The registry observer identity.
     * @param nodeObs The node observer identity.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @param context The Context map to send with the invocation.
     * @throws ObserverAlreadyRegisteredException Raised if an observer is already registered with this registry.
     **/
    default void setObserversByIdentity(com.zeroc.Ice.Identity registryObs, com.zeroc.Ice.Identity nodeObs, com.zeroc.Ice.Identity appObs, com.zeroc.Ice.Identity adptObs, com.zeroc.Ice.Identity objObs, java.util.Map<String, String> context)
        throws ObserverAlreadyRegisteredException
    {
        try
        {
            _iceI_setObserversByIdentityAsync(registryObs, nodeObs, appObs, adptObs, objObs, context, true).waitForResponseOrUserEx();
        }
        catch(ObserverAlreadyRegisteredException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Set the observer identities that receive notifications the state of the registry or nodes changes. This
     * operation should be used by clients that are using a bidirectional connection to communicate with the
     * session.
     * @param registryObs The registry observer identity.
     * @param nodeObs The node observer identity.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setObserversByIdentityAsync(com.zeroc.Ice.Identity registryObs, com.zeroc.Ice.Identity nodeObs, com.zeroc.Ice.Identity appObs, com.zeroc.Ice.Identity adptObs, com.zeroc.Ice.Identity objObs)
    {
        return _iceI_setObserversByIdentityAsync(registryObs, nodeObs, appObs, adptObs, objObs, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the observer identities that receive notifications the state of the registry or nodes changes. This
     * operation should be used by clients that are using a bidirectional connection to communicate with the
     * session.
     * @param registryObs The registry observer identity.
     * @param nodeObs The node observer identity.
     * @param appObs The application observer.
     * @param adptObs The adapter observer.
     * @param objObs The object observer.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setObserversByIdentityAsync(com.zeroc.Ice.Identity registryObs, com.zeroc.Ice.Identity nodeObs, com.zeroc.Ice.Identity appObs, com.zeroc.Ice.Identity adptObs, com.zeroc.Ice.Identity objObs, java.util.Map<String, String> context)
    {
        return _iceI_setObserversByIdentityAsync(registryObs, nodeObs, appObs, adptObs, objObs, context, false);
    }

    /**
     * @hidden
     * @param iceP_registryObs -
     * @param iceP_nodeObs -
     * @param iceP_appObs -
     * @param iceP_adptObs -
     * @param iceP_objObs -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setObserversByIdentityAsync(com.zeroc.Ice.Identity iceP_registryObs, com.zeroc.Ice.Identity iceP_nodeObs, com.zeroc.Ice.Identity iceP_appObs, com.zeroc.Ice.Identity iceP_adptObs, com.zeroc.Ice.Identity iceP_objObs, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setObserversByIdentity", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setObserversByIdentity);
        f.invoke(true, context, null, ostr -> {
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_registryObs);
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_nodeObs);
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_appObs);
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_adptObs);
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_objObs);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setObserversByIdentity =
    {
        ObserverAlreadyRegisteredException.class
    };

    /**
     * Acquires an exclusive lock to start updating the registry applications.
     * @return The current serial.
     * @throws AccessDeniedException Raised if the exclusive lock can't be acquired. This might happen if the lock
     * is currently acquired by another session.
     **/
    default int startUpdate()
        throws AccessDeniedException
    {
        return startUpdate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Acquires an exclusive lock to start updating the registry applications.
     * @param context The Context map to send with the invocation.
     * @return The current serial.
     * @throws AccessDeniedException Raised if the exclusive lock can't be acquired. This might happen if the lock
     * is currently acquired by another session.
     **/
    default int startUpdate(java.util.Map<String, String> context)
        throws AccessDeniedException
    {
        try
        {
            return _iceI_startUpdateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(AccessDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Acquires an exclusive lock to start updating the registry applications.
     * @return The current serial.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> startUpdateAsync()
    {
        return _iceI_startUpdateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Acquires an exclusive lock to start updating the registry applications.
     * @param context The Context map to send with the invocation.
     * @return The current serial.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> startUpdateAsync(java.util.Map<String, String> context)
    {
        return _iceI_startUpdateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_startUpdateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "startUpdate", null, sync, _iceE_startUpdate);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_startUpdate =
    {
        AccessDeniedException.class
    };

    /**
     * Finish updating the registry and release the exclusive lock.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock.
     **/
    default void finishUpdate()
        throws AccessDeniedException
    {
        finishUpdate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Finish updating the registry and release the exclusive lock.
     * @param context The Context map to send with the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock.
     **/
    default void finishUpdate(java.util.Map<String, String> context)
        throws AccessDeniedException
    {
        try
        {
            _iceI_finishUpdateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(AccessDeniedException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Finish updating the registry and release the exclusive lock.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> finishUpdateAsync()
    {
        return _iceI_finishUpdateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Finish updating the registry and release the exclusive lock.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> finishUpdateAsync(java.util.Map<String, String> context)
    {
        return _iceI_finishUpdateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_finishUpdateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "finishUpdate", null, sync, _iceE_finishUpdate);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_finishUpdate =
    {
        AccessDeniedException.class
    };

    /**
     * Get the name of the registry replica hosting this session.
     * @return The replica name of the registry.
     **/
    default String getReplicaName()
    {
        return getReplicaName(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the name of the registry replica hosting this session.
     * @param context The Context map to send with the invocation.
     * @return The replica name of the registry.
     **/
    default String getReplicaName(java.util.Map<String, String> context)
    {
        return _iceI_getReplicaNameAsync(context, true).waitForResponse();
    }

    /**
     * Get the name of the registry replica hosting this session.
     * @return The replica name of the registry.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getReplicaNameAsync()
    {
        return _iceI_getReplicaNameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the name of the registry replica hosting this session.
     * @param context The Context map to send with the invocation.
     * @return The replica name of the registry.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getReplicaNameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getReplicaNameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_getReplicaNameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getReplicaName", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Open the given server log file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param path The path of the log file. A log file can be opened only if it's declared in the server or
     * service deployment descriptor.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerLog(String id, String path, int count)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        return openServerLog(id, path, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given server log file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param path The path of the log file. A log file can be opened only if it's declared in the server or
     * service deployment descriptor.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerLog(String id, String path, int count, java.util.Map<String, String> context)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openServerLogAsync(id, path, count, context, true).waitForResponseOrUserEx();
        }
        catch(ServerNotExistException ex)
        {
            throw ex;
        }
        catch(NodeUnreachableException ex)
        {
            throw ex;
        }
        catch(DeploymentException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given server log file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param path The path of the log file. A log file can be opened only if it's declared in the server or
     * service deployment descriptor.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerLogAsync(String id, String path, int count)
    {
        return _iceI_openServerLogAsync(id, path, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given server log file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param path The path of the log file. A log file can be opened only if it's declared in the server or
     * service deployment descriptor.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerLogAsync(String id, String path, int count, java.util.Map<String, String> context)
    {
        return _iceI_openServerLogAsync(id, path, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_path -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openServerLogAsync(String iceP_id, String iceP_path, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openServerLog", null, sync, _iceE_openServerLog);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeString(iceP_path);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openServerLog =
    {
        ServerNotExistException.class,
        NodeUnreachableException.class,
        DeploymentException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given server stderr file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerStdErr(String id, int count)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        return openServerStdErr(id, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given server stderr file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerStdErr(String id, int count, java.util.Map<String, String> context)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openServerStdErrAsync(id, count, context, true).waitForResponseOrUserEx();
        }
        catch(ServerNotExistException ex)
        {
            throw ex;
        }
        catch(NodeUnreachableException ex)
        {
            throw ex;
        }
        catch(DeploymentException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given server stderr file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerStdErrAsync(String id, int count)
    {
        return _iceI_openServerStdErrAsync(id, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given server stderr file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerStdErrAsync(String id, int count, java.util.Map<String, String> context)
    {
        return _iceI_openServerStdErrAsync(id, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openServerStdErrAsync(String iceP_id, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openServerStdErr", null, sync, _iceE_openServerStdErr);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openServerStdErr =
    {
        ServerNotExistException.class,
        NodeUnreachableException.class,
        DeploymentException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given server stdout file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining.
     * If 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerStdOut(String id, int count)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        return openServerStdOut(id, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given server stdout file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining.
     * If 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    default FileIteratorPrx openServerStdOut(String id, int count, java.util.Map<String, String> context)
        throws ServerNotExistException,
               NodeUnreachableException,
               DeploymentException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openServerStdOutAsync(id, count, context, true).waitForResponseOrUserEx();
        }
        catch(ServerNotExistException ex)
        {
            throw ex;
        }
        catch(NodeUnreachableException ex)
        {
            throw ex;
        }
        catch(DeploymentException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given server stdout file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining.
     * If 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerStdOutAsync(String id, int count)
    {
        return _iceI_openServerStdOutAsync(id, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given server stdout file for reading. The file can be read with the returned file iterator.
     * @param id The server id.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining.
     * If 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openServerStdOutAsync(String id, int count, java.util.Map<String, String> context)
    {
        return _iceI_openServerStdOutAsync(id, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openServerStdOutAsync(String iceP_id, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openServerStdOut", null, sync, _iceE_openServerStdOut);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openServerStdOut =
    {
        ServerNotExistException.class,
        NodeUnreachableException.class,
        DeploymentException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given node stderr file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    default FileIteratorPrx openNodeStdErr(String name, int count)
        throws NodeUnreachableException,
               NodeNotExistException,
               FileNotAvailableException
    {
        return openNodeStdErr(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given node stderr file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    default FileIteratorPrx openNodeStdErr(String name, int count, java.util.Map<String, String> context)
        throws NodeUnreachableException,
               NodeNotExistException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openNodeStdErrAsync(name, count, context, true).waitForResponseOrUserEx();
        }
        catch(NodeUnreachableException ex)
        {
            throw ex;
        }
        catch(NodeNotExistException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given node stderr file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openNodeStdErrAsync(String name, int count)
    {
        return _iceI_openNodeStdErrAsync(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given node stderr file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openNodeStdErrAsync(String name, int count, java.util.Map<String, String> context)
    {
        return _iceI_openNodeStdErrAsync(name, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openNodeStdErrAsync(String iceP_name, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openNodeStdErr", null, sync, _iceE_openNodeStdErr);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openNodeStdErr =
    {
        NodeUnreachableException.class,
        NodeNotExistException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given node stdout file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    default FileIteratorPrx openNodeStdOut(String name, int count)
        throws NodeUnreachableException,
               NodeNotExistException,
               FileNotAvailableException
    {
        return openNodeStdOut(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given node stdout file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    default FileIteratorPrx openNodeStdOut(String name, int count, java.util.Map<String, String> context)
        throws NodeUnreachableException,
               NodeNotExistException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openNodeStdOutAsync(name, count, context, true).waitForResponseOrUserEx();
        }
        catch(NodeUnreachableException ex)
        {
            throw ex;
        }
        catch(NodeNotExistException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given node stdout file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openNodeStdOutAsync(String name, int count)
    {
        return _iceI_openNodeStdOutAsync(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given node stdout file for reading. The file can be read with the returned file iterator.
     * @param name The node name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openNodeStdOutAsync(String name, int count, java.util.Map<String, String> context)
    {
        return _iceI_openNodeStdOutAsync(name, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openNodeStdOutAsync(String iceP_name, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openNodeStdOut", null, sync, _iceE_openNodeStdOut);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openNodeStdOut =
    {
        NodeUnreachableException.class,
        NodeNotExistException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given registry stderr file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    default FileIteratorPrx openRegistryStdErr(String name, int count)
        throws RegistryNotExistException,
               RegistryUnreachableException,
               FileNotAvailableException
    {
        return openRegistryStdErr(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given registry stderr file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    default FileIteratorPrx openRegistryStdErr(String name, int count, java.util.Map<String, String> context)
        throws RegistryNotExistException,
               RegistryUnreachableException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openRegistryStdErrAsync(name, count, context, true).waitForResponseOrUserEx();
        }
        catch(RegistryNotExistException ex)
        {
            throw ex;
        }
        catch(RegistryUnreachableException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given registry stderr file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openRegistryStdErrAsync(String name, int count)
    {
        return _iceI_openRegistryStdErrAsync(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given registry stderr file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openRegistryStdErrAsync(String name, int count, java.util.Map<String, String> context)
    {
        return _iceI_openRegistryStdErrAsync(name, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openRegistryStdErrAsync(String iceP_name, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openRegistryStdErr", null, sync, _iceE_openRegistryStdErr);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openRegistryStdErr =
    {
        RegistryNotExistException.class,
        RegistryUnreachableException.class,
        FileNotAvailableException.class
    };

    /**
     * Open the given registry stdout file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    default FileIteratorPrx openRegistryStdOut(String name, int count)
        throws RegistryNotExistException,
               RegistryUnreachableException,
               FileNotAvailableException
    {
        return openRegistryStdOut(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Open the given registry stdout file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     * @throws FileNotAvailableException Raised if the file can't be read.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    default FileIteratorPrx openRegistryStdOut(String name, int count, java.util.Map<String, String> context)
        throws RegistryNotExistException,
               RegistryUnreachableException,
               FileNotAvailableException
    {
        try
        {
            return _iceI_openRegistryStdOutAsync(name, count, context, true).waitForResponseOrUserEx();
        }
        catch(RegistryNotExistException ex)
        {
            throw ex;
        }
        catch(RegistryUnreachableException ex)
        {
            throw ex;
        }
        catch(FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Open the given registry stdout file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openRegistryStdOutAsync(String name, int count)
    {
        return _iceI_openRegistryStdOutAsync(name, count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Open the given registry stdout file for reading. The file can be read with the returned file iterator.
     * @param name The registry name.
     * @param count Specifies where to start reading the file. If negative, the file is read from the begining. If
     * 0 or positive, the file is read from the last <code>count</code> lines.
     * @param context The Context map to send with the invocation.
     * @return An iterator to read the file. The returned proxy is never null.
     **/
    default java.util.concurrent.CompletableFuture<FileIteratorPrx> openRegistryStdOutAsync(String name, int count, java.util.Map<String, String> context)
    {
        return _iceI_openRegistryStdOutAsync(name, count, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> _iceI_openRegistryStdOutAsync(String iceP_name, int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileIteratorPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "openRegistryStdOut", null, sync, _iceE_openRegistryStdOut);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     FileIteratorPrx ret;
                     ret = FileIteratorPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_openRegistryStdOut =
    {
        RegistryNotExistException.class,
        RegistryUnreachableException.class,
        FileNotAvailableException.class
    };

    /**
     * Creates a new proxy that implements {@link AdminSessionPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static AdminSessionPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _AdminSessionPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _AdminSessionPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static AdminSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _AdminSessionPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static AdminSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _AdminSessionPrxI(obj.ice_facet(facet));
    }

    @Override
    AdminSessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    AdminSessionPrx ice_adapterId(String newAdapterId);

    @Override
    AdminSessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    AdminSessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    AdminSessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    AdminSessionPrx ice_connectionCached(boolean newCache);

    @Override
    AdminSessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    AdminSessionPrx ice_secure(boolean b);

    @Override
    AdminSessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    AdminSessionPrx ice_preferSecure(boolean b);

    @Override
    AdminSessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    AdminSessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    AdminSessionPrx ice_collocationOptimized(boolean b);

    @Override
    AdminSessionPrx ice_twoway();

    @Override
    AdminSessionPrx ice_oneway();

    @Override
    AdminSessionPrx ice_batchOneway();

    @Override
    AdminSessionPrx ice_datagram();

    @Override
    AdminSessionPrx ice_batchDatagram();

    @Override
    AdminSessionPrx ice_compress(boolean co);

    @Override
    AdminSessionPrx ice_connectionId(String connectionId);

    @Override
    AdminSessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::AdminSession";
    }

    /**
     * @hidden
     **/
    @Override
    default AdminSessionPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _AdminSessionPrxI(ref);
    }
}
