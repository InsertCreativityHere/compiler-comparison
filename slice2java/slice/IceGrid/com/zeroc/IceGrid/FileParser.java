//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * <code>icegridadmin</code> provides a {@link FileParser} object to transform XML files into
 * {@link ApplicationDescriptor} objects.
 **/
public interface FileParser extends com.zeroc.Ice.Object
{
    /**
     * Parse a file.
     * @param xmlFile Full pathname to the file.
     * @param adminProxy An Admin proxy, used only to retrieve default templates when needed. May be null.
     * @param current The Current object for the invocation.
     * @return The application descriptor.
     * @throws ParseException Raised if an error occurred during parsing.
     **/
    ApplicationDescriptor parse(String xmlFile, AdminPrx adminProxy, com.zeroc.Ice.Current current)
        throws ParseException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileParser"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::FileParser";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_parse(FileParser obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_xmlFile;
        AdminPrx iceP_adminProxy;
        iceP_xmlFile = istr.readString();
        iceP_adminProxy = AdminPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        ApplicationDescriptor ret = obj.parse(iceP_xmlFile, iceP_adminProxy, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ApplicationDescriptor.ice_write(ostr, ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "parse" -> FileParser._iceD_parse(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
