//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * This interface provides access to IceGrid log file contents.
 **/
public interface FileIterator extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation read.
     **/
    public static class ReadResult
    {
        /**
         * Default constructor.
         **/
        public ReadResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation Read.
         * @param returnValue True if EOF is encountered.
         * @param lines The lines read from the file. If there was nothing to read from the file since the last call to
         * read, an empty sequence is returned. The last line of the sequence is always incomplete (and therefore no
         * '\n' should be added when writing the last line to the to the output device).
         **/
        public ReadResult(boolean returnValue, String[] lines)
        {
            this.returnValue = returnValue;
            this.lines = lines;
        }

        /**
         * True if EOF is encountered.
         **/
        public boolean returnValue;
        /**
         * The lines read from the file. If there was nothing to read from the file since the last call to
         * read, an empty sequence is returned. The last line of the sequence is always incomplete (and therefore no
         * '\n' should be added when writing the last line to the to the output device).
         **/
        public String[] lines;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.lines);
            ostr.writeBool(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.lines = istr.readStringSeq();
            returnValue = istr.readBool();
        }
    }

    /**
     * Read lines from the log file.
     * @param size Specifies the maximum number of bytes to be received. The server will ensure that the returned
     * message doesn't exceed the given size.
     * @param current The Current object for the invocation.
     * @return An instance of FileIterator.ReadResult.
     * @throws FileNotAvailableException Raised if there was a problem to read lines from the file.
     **/
    FileIterator.ReadResult read(int size, com.zeroc.Ice.Current current)
        throws FileNotAvailableException;

    /**
     * Destroy the iterator.
     * @param current The Current object for the invocation.
     **/
    void destroy(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileIterator"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::FileIterator";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_read(FileIterator obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_size;
        iceP_size = istr.readInt();
        istr.endEncapsulation();
        FileIterator.ReadResult ret = obj.read(iceP_size, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_destroy(FileIterator obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.destroy(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "read" -> FileIterator._iceD_read(this, request);
            case "destroy" -> FileIterator._iceD_destroy(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
