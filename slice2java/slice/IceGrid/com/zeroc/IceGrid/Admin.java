//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * The IceGrid administrative interface. <p class="Warning">Allowing access to this interface is a security risk!
 * Please see the IceGrid documentation for further information.
 **/
public interface Admin extends com.zeroc.Ice.Object
{
    /**
     * Add an application to IceGrid.
     * @param descriptor The application descriptor.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void addApplication(ApplicationDescriptor descriptor, com.zeroc.Ice.Current current)
        throws DeploymentException,
               AccessDeniedException;

    /**
     * Synchronize a deployed application with the given application descriptor. This operation will replace the
     * current descriptor with this new descriptor.
     * @param descriptor The application descriptor.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void syncApplication(ApplicationDescriptor descriptor, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Update a deployed application with the given update application descriptor.
     * @param descriptor The update descriptor.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void updateApplication(ApplicationUpdateDescriptor descriptor, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Synchronize a deployed application with the given application descriptor. This operation will replace the
     * current descriptor with this new descriptor only if no server restarts are necessary for the update of the
     * application. If some servers need to be restarted, the synchronization is rejected with a
     * DeploymentException.
     * @param descriptor The application descriptor.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void syncApplicationWithoutRestart(ApplicationDescriptor descriptor, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Update a deployed application with the given update application descriptor only if no server restarts are
     * necessary for the update of the application. If some servers need to be restarted, the synchronization is
     * rejected with a DeploymentException.
     * @param descriptor The update descriptor.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void updateApplicationWithoutRestart(ApplicationUpdateDescriptor descriptor, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Remove an application from IceGrid.
     * @param name The application name.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void removeApplication(String name, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Instantiate a server template from an application on the given node.
     * @param application The application name.
     * @param node The name of the node where the server will be deployed.
     * @param desc The descriptor of the server instance to deploy.
     * @param current The Current object for the invocation.
     * @throws AccessDeniedException Raised if the session doesn't hold the exclusive lock or if another session is
     * holding the lock.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     * @throws DeploymentException Raised if server instantiation failed.
     **/
    void instantiateServer(String application, String node, ServerInstanceDescriptor desc, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException,
               DeploymentException,
               AccessDeniedException;

    /**
     * Get an application descriptor.
     * @param name The application name.
     * @param current The Current object for the invocation.
     * @return The application descriptor.
     * @throws ApplicationNotExistException Raised if the application doesn't exist.
     **/
    ApplicationInfo getApplicationInfo(String name, com.zeroc.Ice.Current current)
        throws ApplicationNotExistException;

    /**
     * Get the default application descriptor.
     * @param current The Current object for the invocation.
     * @return The default application descriptor.
     * @throws DeploymentException Raised if the default application descriptor can't be accessed or is invalid.
     **/
    ApplicationDescriptor getDefaultApplicationDescriptor(com.zeroc.Ice.Current current)
        throws DeploymentException;

    /**
     * Get all the IceGrid applications currently registered.
     * @param current The Current object for the invocation.
     * @return The application names.
     **/
    String[] getAllApplicationNames(com.zeroc.Ice.Current current);

    /**
     * Get the server information for the server with the given id.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return The server information.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    ServerInfo getServerInfo(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException;

    /**
     * Get a server's state.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return The server state.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    ServerState getServerState(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Get a server's system process id. The process id is operating system dependent.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return The server's process id.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    int getServerPid(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Get the category for server admin objects. You can manufacture a server admin proxy from the admin proxy by
     * changing its identity: use the server ID as name and the returned category as category.
     * @param current The Current object for the invocation.
     * @return The category for server admin objects.
     **/
    String getServerAdminCategory(com.zeroc.Ice.Current current);

    /**
     * Get a proxy to the server's admin object.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return A proxy to the server's admin object. The returned proxy is never null.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    com.zeroc.Ice.ObjectPrx getServerAdmin(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Enable or disable a server. A disabled server can't be started on demand or administratively. The enable
     * state of the server is not persistent: if the node is shut down and restarted, the server will be enabled by
     * default.
     * @param id The server id.
     * @param enabled True to enable the server, false to disable it.
     * @param current The Current object for the invocation.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    void enableServer(String id, boolean enabled, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Check if the server is enabled or disabled.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return True if the server is enabled.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    boolean isServerEnabled(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Start a server and wait for its activation.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     * @throws ServerStartException Raised if the server couldn't be started.
     **/
    java.util.concurrent.CompletionStage<Void> startServerAsync(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               ServerStartException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Stop a server.
     * @param id The server id.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     * @throws ServerStopException Raised if the server couldn't be stopped.
     **/
    java.util.concurrent.CompletionStage<Void> stopServerAsync(String id, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               ServerStopException,
               DeploymentException,
               NodeUnreachableException;

    /**
     * Send signal to a server.
     * @param id The server id.
     * @param signal The signal, for example SIGTERM or 15.
     * @param current The Current object for the invocation.
     * @throws BadSignalException Raised if the signal is not recognized by the target server.
     * @throws DeploymentException Raised if the server couldn't be deployed on the node.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     * @throws ServerNotExistException Raised if the server doesn't exist.
     **/
    void sendSignal(String id, String signal, com.zeroc.Ice.Current current)
        throws ServerNotExistException,
               DeploymentException,
               NodeUnreachableException,
               BadSignalException;

    /**
     * Get all the server ids registered with IceGrid.
     * @param current The Current object for the invocation.
     * @return The server ids.
     **/
    String[] getAllServerIds(com.zeroc.Ice.Current current);

    /**
     * Get the adapter information for the replica group or adapter with the given id.
     * @param id The adapter id.
     * @param current The Current object for the invocation.
     * @return A sequence of adapter information structures. If the given id refers to an adapter, this sequence
     * will contain only one element. If the given id refers to a replica group, the sequence will contain the
     * adapter information of each member of the replica group.
     * @throws AdapterNotExistException Raised if the adapter or replica group doesn't exist.
     **/
    AdapterInfo[] getAdapterInfo(String id, com.zeroc.Ice.Current current)
        throws AdapterNotExistException;

    /**
     * Remove the adapter with the given id.
     * @param id The adapter id.
     * @param current The Current object for the invocation.
     * @throws AdapterNotExistException Raised if the adapter doesn't exist.
     * @throws DeploymentException Raised if application deployment failed.
     **/
    void removeAdapter(String id, com.zeroc.Ice.Current current)
        throws DeploymentException,
               AdapterNotExistException;

    /**
     * Get all the adapter ids registered with IceGrid.
     * @param current The Current object for the invocation.
     * @return The adapter ids.
     **/
    String[] getAllAdapterIds(com.zeroc.Ice.Current current);

    /**
     * Add an object to the object registry. IceGrid will get the object type by calling <code>ice_id</code> on the
     * given proxy. The object must be reachable.
     * @param obj The object to be added to the registry.
     * @param current The Current object for the invocation.
     * @throws DeploymentException Raised if the object can't be added. This might be raised if the invocation on
     * the proxy to get the object type failed.
     * @throws ObjectExistsException Raised if the object is already registered.
     **/
    void addObject(com.zeroc.Ice.ObjectPrx obj, com.zeroc.Ice.Current current)
        throws DeploymentException,
               ObjectExistsException;

    /**
     * Update an object in the object registry. Only objects added with this interface can be updated with this
     * operation. Objects added with deployment descriptors should be updated with the deployment mechanism.
     * @param obj The object to be updated to the registry.
     * @param current The Current object for the invocation.
     * @throws DeploymentException Raised if the object can't be updated. This might happen if the object was added
     * with a deployment descriptor.
     * @throws ObjectNotRegisteredException Raised if the object isn't registered with the registry.
     **/
    void updateObject(com.zeroc.Ice.ObjectPrx obj, com.zeroc.Ice.Current current)
        throws ObjectNotRegisteredException,
               DeploymentException;

    /**
     * Add an object to the object registry and explicitly specify its type.
     * @param obj The object to be added to the registry. The proxy is never null.
     * @param type The object type.
     * @param current The Current object for the invocation.
     * @throws DeploymentException Raised if application deployment failed.
     * @throws ObjectExistsException Raised if the object is already registered.
     **/
    void addObjectWithType(com.zeroc.Ice.ObjectPrx obj, String type, com.zeroc.Ice.Current current)
        throws DeploymentException,
               ObjectExistsException;

    /**
     * Remove an object from the object registry. Only objects added with this interface can be removed with this
     * operation. Objects added with deployment descriptors should be removed with the deployment mechanism.
     * @param id The identity of the object to be removed from the registry.
     * @param current The Current object for the invocation.
     * @throws DeploymentException Raised if the object can't be removed. This might happen if the object was added
     * with a deployment descriptor.
     * @throws ObjectNotRegisteredException Raised if the object isn't registered with the registry.
     **/
    void removeObject(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current)
        throws ObjectNotRegisteredException,
               DeploymentException;

    /**
     * Get the object info for the object with the given identity.
     * @param id The identity of the object.
     * @param current The Current object for the invocation.
     * @return The object info.
     * @throws ObjectNotRegisteredException Raised if the object isn't registered with the registry.
     **/
    ObjectInfo getObjectInfo(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current)
        throws ObjectNotRegisteredException;

    /**
     * Get the object info of all the registered objects with the given type.
     * @param type The type of the object.
     * @param current The Current object for the invocation.
     * @return The object infos.
     **/
    ObjectInfo[] getObjectInfosByType(String type, com.zeroc.Ice.Current current);

    /**
     * Get the object info of all the registered objects whose stringified identities match the given expression.
     * @param expr The expression to match against the stringified identities of registered objects. The expression
     * may contain a trailing wildcard (<code>*</code>) character.
     * @param current The Current object for the invocation.
     * @return All the object infos with a stringified identity matching the given expression.
     **/
    ObjectInfo[] getAllObjectInfos(String expr, com.zeroc.Ice.Current current);

    /**
     * Ping an IceGrid node to see if it is active.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @return true if the node ping succeeded, false otherwise.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     **/
    boolean pingNode(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException;

    /**
     * Get the load averages of the node.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @return The node load information.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    LoadInfo getNodeLoad(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Get the node information for the node with the given name.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @return The node information.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    NodeInfo getNodeInfo(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Get a proxy to the IceGrid node's admin object.
     * @param name The IceGrid node name
     * @param current The Current object for the invocation.
     * @return A proxy to the IceGrid node's admin object. The returned proxy is never null.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    com.zeroc.Ice.ObjectPrx getNodeAdmin(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Get the number of physical processor sockets for the machine running the node with the given name.
     * Note that this method will return 1 on operating systems where this can't be automatically determined and
     * where the IceGrid.Node.ProcessorSocketCount property for the node is not set.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @return The number of processor sockets or 1 if the number of sockets can't determined.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    int getNodeProcessorSocketCount(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Shutdown an IceGrid node.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    void shutdownNode(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Get the hostname of this node.
     * @param name The node name.
     * @param current The Current object for the invocation.
     * @return The node hostname.
     * @throws NodeNotExistException Raised if the node doesn't exist.
     * @throws NodeUnreachableException Raised if the node could not be reached.
     **/
    String getNodeHostname(String name, com.zeroc.Ice.Current current)
        throws NodeNotExistException,
               NodeUnreachableException;

    /**
     * Get all the IceGrid nodes currently registered.
     * @param current The Current object for the invocation.
     * @return The node names.
     **/
    String[] getAllNodeNames(com.zeroc.Ice.Current current);

    /**
     * Ping an IceGrid registry to see if it is active.
     * @param name The registry name.
     * @param current The Current object for the invocation.
     * @return true if the registry ping succeeded, false otherwise.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     **/
    boolean pingRegistry(String name, com.zeroc.Ice.Current current)
        throws RegistryNotExistException;

    /**
     * Get the registry information for the registry with the given name.
     * @param name The registry name.
     * @param current The Current object for the invocation.
     * @return The registry information.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    RegistryInfo getRegistryInfo(String name, com.zeroc.Ice.Current current)
        throws RegistryNotExistException,
               RegistryUnreachableException;

    /**
     * Get a proxy to the IceGrid registry's admin object.
     * @param name The registry name
     * @param current The Current object for the invocation.
     * @return A proxy to the IceGrid registry's admin object. The returned proxy is never null.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     **/
    com.zeroc.Ice.ObjectPrx getRegistryAdmin(String name, com.zeroc.Ice.Current current)
        throws RegistryNotExistException;

    /**
     * Shutdown an IceGrid registry.
     * @param name The registry name.
     * @param current The Current object for the invocation.
     * @throws RegistryNotExistException Raised if the registry doesn't exist.
     * @throws RegistryUnreachableException Raised if the registry could not be reached.
     **/
    void shutdownRegistry(String name, com.zeroc.Ice.Current current)
        throws RegistryNotExistException,
               RegistryUnreachableException;

    /**
     * Get all the IceGrid registries currently registered.
     * @param current The Current object for the invocation.
     * @return The registry names.
     **/
    String[] getAllRegistryNames(com.zeroc.Ice.Current current);

    /**
     * Shut down the IceGrid registry.
     * @param current The Current object for the invocation.
     **/
    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::Admin"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Admin";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_addApplication(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ApplicationDescriptor iceP_descriptor;
        iceP_descriptor = ApplicationDescriptor.ice_read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.addApplication(iceP_descriptor, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_syncApplication(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ApplicationDescriptor iceP_descriptor;
        iceP_descriptor = ApplicationDescriptor.ice_read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.syncApplication(iceP_descriptor, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_updateApplication(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ApplicationUpdateDescriptor iceP_descriptor;
        iceP_descriptor = ApplicationUpdateDescriptor.ice_read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.updateApplication(iceP_descriptor, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_syncApplicationWithoutRestart(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ApplicationDescriptor iceP_descriptor;
        iceP_descriptor = ApplicationDescriptor.ice_read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.syncApplicationWithoutRestart(iceP_descriptor, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_updateApplicationWithoutRestart(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        ApplicationUpdateDescriptor iceP_descriptor;
        iceP_descriptor = ApplicationUpdateDescriptor.ice_read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.updateApplicationWithoutRestart(iceP_descriptor, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_removeApplication(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.removeApplication(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_instantiateServer(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_application;
        String iceP_node;
        ServerInstanceDescriptor iceP_desc;
        iceP_application = istr.readString();
        iceP_node = istr.readString();
        iceP_desc = ServerInstanceDescriptor.ice_read(istr);
        istr.endEncapsulation();
        obj.instantiateServer(iceP_application, iceP_node, iceP_desc, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getApplicationInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        ApplicationInfo ret = obj.getApplicationInfo(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ApplicationInfo.ice_write(ostr, ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getDefaultApplicationDescriptor(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        ApplicationDescriptor ret = obj.getDefaultApplicationDescriptor(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ApplicationDescriptor.ice_write(ostr, ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllApplicationNames(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String[] ret = obj.getAllApplicationNames(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeStringSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getServerInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        ServerInfo ret = obj.getServerInfo(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ServerInfo.ice_write(ostr, ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getServerState(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        ServerState ret = obj.getServerState(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ServerState.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getServerPid(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        int ret = obj.getServerPid(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeInt(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getServerAdminCategory(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String ret = obj.getServerAdminCategory(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeString(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getServerAdmin(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.getServerAdmin(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_enableServer(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        boolean iceP_enabled;
        iceP_id = istr.readString();
        iceP_enabled = istr.readBool();
        istr.endEncapsulation();
        obj.enableServer(iceP_id, iceP_enabled, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_isServerEnabled(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        boolean ret = obj.isServerEnabled(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_startServer(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        var result = obj.startServerAsync(iceP_id, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_stopServer(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        var result = obj.stopServerAsync(iceP_id, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sendSignal(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        String iceP_signal;
        iceP_id = istr.readString();
        iceP_signal = istr.readString();
        istr.endEncapsulation();
        obj.sendSignal(iceP_id, iceP_signal, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllServerIds(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String[] ret = obj.getAllServerIds(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeStringSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAdapterInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        AdapterInfo[] ret = obj.getAdapterInfo(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        AdapterInfoSeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_removeAdapter(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_id;
        iceP_id = istr.readString();
        istr.endEncapsulation();
        obj.removeAdapter(iceP_id, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllAdapterIds(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String[] ret = obj.getAllAdapterIds(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeStringSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_addObject(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx iceP_obj;
        iceP_obj = istr.readProxy();
        istr.endEncapsulation();
        obj.addObject(iceP_obj, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_updateObject(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx iceP_obj;
        iceP_obj = istr.readProxy();
        istr.endEncapsulation();
        obj.updateObject(iceP_obj, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_addObjectWithType(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx iceP_obj;
        String iceP_type;
        iceP_obj = istr.readProxy();
        iceP_type = istr.readString();
        istr.endEncapsulation();
        obj.addObjectWithType(iceP_obj, iceP_type, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_removeObject(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        obj.removeObject(iceP_id, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getObjectInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        ObjectInfo ret = obj.getObjectInfo(iceP_id, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ObjectInfo.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getObjectInfosByType(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_type;
        iceP_type = istr.readString();
        istr.endEncapsulation();
        ObjectInfo[] ret = obj.getObjectInfosByType(iceP_type, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ObjectInfoSeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllObjectInfos(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_expr;
        iceP_expr = istr.readString();
        istr.endEncapsulation();
        ObjectInfo[] ret = obj.getAllObjectInfos(iceP_expr, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ObjectInfoSeqHelper.write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_pingNode(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        boolean ret = obj.pingNode(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getNodeLoad(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        LoadInfo ret = obj.getNodeLoad(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        LoadInfo.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getNodeInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        NodeInfo ret = obj.getNodeInfo(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        NodeInfo.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getNodeAdmin(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.getNodeAdmin(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getNodeProcessorSocketCount(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        int ret = obj.getNodeProcessorSocketCount(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeInt(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdownNode(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.shutdownNode(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getNodeHostname(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        String ret = obj.getNodeHostname(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeString(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllNodeNames(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String[] ret = obj.getAllNodeNames(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeStringSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_pingRegistry(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        boolean ret = obj.pingRegistry(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getRegistryInfo(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        RegistryInfo ret = obj.getRegistryInfo(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        RegistryInfo.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getRegistryAdmin(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.getRegistryAdmin(iceP_name, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdownRegistry(Admin obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        iceP_name = istr.readString();
        istr.endEncapsulation();
        obj.shutdownRegistry(iceP_name, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getAllRegistryNames(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String[] ret = obj.getAllRegistryNames(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeStringSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Admin obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "addApplication" -> Admin._iceD_addApplication(this, request);
            case "syncApplication" -> Admin._iceD_syncApplication(this, request);
            case "updateApplication" -> Admin._iceD_updateApplication(this, request);
            case "syncApplicationWithoutRestart" -> Admin._iceD_syncApplicationWithoutRestart(this, request);
            case "updateApplicationWithoutRestart" -> Admin._iceD_updateApplicationWithoutRestart(this, request);
            case "removeApplication" -> Admin._iceD_removeApplication(this, request);
            case "instantiateServer" -> Admin._iceD_instantiateServer(this, request);
            case "getApplicationInfo" -> Admin._iceD_getApplicationInfo(this, request);
            case "getDefaultApplicationDescriptor" -> Admin._iceD_getDefaultApplicationDescriptor(this, request);
            case "getAllApplicationNames" -> Admin._iceD_getAllApplicationNames(this, request);
            case "getServerInfo" -> Admin._iceD_getServerInfo(this, request);
            case "getServerState" -> Admin._iceD_getServerState(this, request);
            case "getServerPid" -> Admin._iceD_getServerPid(this, request);
            case "getServerAdminCategory" -> Admin._iceD_getServerAdminCategory(this, request);
            case "getServerAdmin" -> Admin._iceD_getServerAdmin(this, request);
            case "enableServer" -> Admin._iceD_enableServer(this, request);
            case "isServerEnabled" -> Admin._iceD_isServerEnabled(this, request);
            case "startServer" -> Admin._iceD_startServer(this, request);
            case "stopServer" -> Admin._iceD_stopServer(this, request);
            case "sendSignal" -> Admin._iceD_sendSignal(this, request);
            case "getAllServerIds" -> Admin._iceD_getAllServerIds(this, request);
            case "getAdapterInfo" -> Admin._iceD_getAdapterInfo(this, request);
            case "removeAdapter" -> Admin._iceD_removeAdapter(this, request);
            case "getAllAdapterIds" -> Admin._iceD_getAllAdapterIds(this, request);
            case "addObject" -> Admin._iceD_addObject(this, request);
            case "updateObject" -> Admin._iceD_updateObject(this, request);
            case "addObjectWithType" -> Admin._iceD_addObjectWithType(this, request);
            case "removeObject" -> Admin._iceD_removeObject(this, request);
            case "getObjectInfo" -> Admin._iceD_getObjectInfo(this, request);
            case "getObjectInfosByType" -> Admin._iceD_getObjectInfosByType(this, request);
            case "getAllObjectInfos" -> Admin._iceD_getAllObjectInfos(this, request);
            case "pingNode" -> Admin._iceD_pingNode(this, request);
            case "getNodeLoad" -> Admin._iceD_getNodeLoad(this, request);
            case "getNodeInfo" -> Admin._iceD_getNodeInfo(this, request);
            case "getNodeAdmin" -> Admin._iceD_getNodeAdmin(this, request);
            case "getNodeProcessorSocketCount" -> Admin._iceD_getNodeProcessorSocketCount(this, request);
            case "shutdownNode" -> Admin._iceD_shutdownNode(this, request);
            case "getNodeHostname" -> Admin._iceD_getNodeHostname(this, request);
            case "getAllNodeNames" -> Admin._iceD_getAllNodeNames(this, request);
            case "pingRegistry" -> Admin._iceD_pingRegistry(this, request);
            case "getRegistryInfo" -> Admin._iceD_getRegistryInfo(this, request);
            case "getRegistryAdmin" -> Admin._iceD_getRegistryAdmin(this, request);
            case "shutdownRegistry" -> Admin._iceD_shutdownRegistry(this, request);
            case "getAllRegistryNames" -> Admin._iceD_getAllRegistryNames(this, request);
            case "shutdown" -> Admin._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
