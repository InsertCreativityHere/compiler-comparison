//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceGrid;

/**
 * A session object is used by IceGrid clients to allocate and release objects. Client sessions are created either
 * via the {@link Registry} object or via the registry client <code>SessionManager</code> object.
 *
 * @see Registry
 **/
public interface Session extends com.zeroc.Glacier2.Session
{
    /**
     * Keep the session alive.
     * As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
     * @param current The Current object for the invocation.
     **/
    void keepAlive(com.zeroc.Ice.Current current);

    /**
     * Allocate an object. Depending on the allocation timeout, this operation might hang until the object is
     * available or until the timeout is reached.
     * @param id The identity of the object to allocate.
     * @param current The Current object for the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object can't be allocated.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    java.util.concurrent.CompletionStage<com.zeroc.Ice.ObjectPrx> allocateObjectByIdAsync(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current)
        throws ObjectNotRegisteredException,
               AllocationException;

    /**
     * Allocate an object with the given type. Depending on the allocation timeout, this operation can block until
     * an object becomes available or until the timeout is reached.
     * @param type The type of the object.
     * @param current The Current object for the invocation.
     * @return The proxy of the allocated object. The returned proxy is never null.
     * @throws AllocationException Raised if the object could not be allocated.
     *
     * @see #setAllocationTimeout
     * @see #releaseObject
     **/
    java.util.concurrent.CompletionStage<com.zeroc.Ice.ObjectPrx> allocateObjectByTypeAsync(String type, com.zeroc.Ice.Current current)
        throws AllocationException;

    /**
     * Release an object that was allocated using <code>allocateObjectById</code> or
     * <code>allocateObjectByType</code>.
     * @param id The identity of the object to release.
     * @param current The Current object for the invocation.
     * @throws AllocationException Raised if the given object can't be released. This might happen if the object
     * isn't allocatable or isn't allocated by the session.
     * @throws ObjectNotRegisteredException Raised if the object with the given identity is not registered with
     * the registry.
     **/
    void releaseObject(com.zeroc.Ice.Identity id, com.zeroc.Ice.Current current)
        throws ObjectNotRegisteredException,
               AllocationException;

    /**
     * Set the allocation timeout. If no objects are available for an allocation request, a call to
     * <code>allocateObjectById</code> or <code>allocateObjectByType</code> will block for the duration of this
     * timeout.
     * @param timeout The timeout in milliseconds.
     * @param current The Current object for the invocation.
     **/
    void setAllocationTimeout(int timeout, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::IceGrid::Session"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Session";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_keepAlive(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.keepAlive(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_allocateObjectById(Session obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        var result = obj.allocateObjectByIdAsync(iceP_id, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeProxy(value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_allocateObjectByType(Session obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_type;
        iceP_type = istr.readString();
        istr.endEncapsulation();
        var result = obj.allocateObjectByTypeAsync(iceP_type, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeProxy(value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_releaseObject(Session obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity iceP_id;
        iceP_id = com.zeroc.Ice.Identity.ice_read(istr);
        istr.endEncapsulation();
        obj.releaseObject(iceP_id, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setAllocationTimeout(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_timeout;
        iceP_timeout = istr.readInt();
        istr.endEncapsulation();
        obj.setAllocationTimeout(iceP_timeout, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "destroy" -> com.zeroc.Glacier2.Session._iceD_destroy(this, request);
            case "keepAlive" -> Session._iceD_keepAlive(this, request);
            case "allocateObjectById" -> Session._iceD_allocateObjectById(this, request);
            case "allocateObjectByType" -> Session._iceD_allocateObjectByType(this, request);
            case "releaseObject" -> Session._iceD_releaseObject(this, request);
            case "setAllocationTimeout" -> Session._iceD_setAllocationTimeout(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
