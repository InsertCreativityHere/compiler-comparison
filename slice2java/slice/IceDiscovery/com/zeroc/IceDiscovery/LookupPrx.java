//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.IceDiscovery;

/**
 * The Lookup interface is used by IceDiscovery clients to look for objects and adapters using UDP multicast.
 **/
public interface LookupPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Request to find an Ice object
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The object identity.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * object is found. The reply proxy is never null.
     **/
    default void findObjectById(String domainId, com.zeroc.Ice.Identity id, LookupReplyPrx reply)
    {
        findObjectById(domainId, id, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Request to find an Ice object
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The object identity.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * object is found. The reply proxy is never null.
     * @param context The Context map to send with the invocation.
     **/
    default void findObjectById(String domainId, com.zeroc.Ice.Identity id, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        _iceI_findObjectByIdAsync(domainId, id, reply, context, true).waitForResponse();
    }

    /**
     * Request to find an Ice object
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The object identity.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * object is found. The reply proxy is never null.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findObjectByIdAsync(String domainId, com.zeroc.Ice.Identity id, LookupReplyPrx reply)
    {
        return _iceI_findObjectByIdAsync(domainId, id, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Request to find an Ice object
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The object identity.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * object is found. The reply proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findObjectByIdAsync(String domainId, com.zeroc.Ice.Identity id, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        return _iceI_findObjectByIdAsync(domainId, id, reply, context, false);
    }

    /**
     * @hidden
     * @param iceP_domainId -
     * @param iceP_id -
     * @param iceP_reply -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_findObjectByIdAsync(String iceP_domainId, com.zeroc.Ice.Identity iceP_id, LookupReplyPrx iceP_reply, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findObjectById", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_domainId);
                     com.zeroc.Ice.Identity.ice_write(ostr, iceP_id);
                     ostr.writeProxy(iceP_reply);
                 }, null);
        return f;
    }

    /**
     * Request to find an object adapter
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The adapter ID.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * adapter is found. The reply proxy is never null.
     **/
    default void findAdapterById(String domainId, String id, LookupReplyPrx reply)
    {
        findAdapterById(domainId, id, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Request to find an object adapter
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The adapter ID.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * adapter is found. The reply proxy is never null.
     * @param context The Context map to send with the invocation.
     **/
    default void findAdapterById(String domainId, String id, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        _iceI_findAdapterByIdAsync(domainId, id, reply, context, true).waitForResponse();
    }

    /**
     * Request to find an object adapter
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The adapter ID.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * adapter is found. The reply proxy is never null.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findAdapterByIdAsync(String domainId, String id, LookupReplyPrx reply)
    {
        return _iceI_findAdapterByIdAsync(domainId, id, reply, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Request to find an object adapter
     * @param domainId The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
     * matching domain identifier.
     * @param id The adapter ID.
     * @param reply The proxy of the LookupReply interface that should be used to send the reply if a matching
     * adapter is found. The reply proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> findAdapterByIdAsync(String domainId, String id, LookupReplyPrx reply, java.util.Map<String, String> context)
    {
        return _iceI_findAdapterByIdAsync(domainId, id, reply, context, false);
    }

    /**
     * @hidden
     * @param iceP_domainId -
     * @param iceP_id -
     * @param iceP_reply -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_findAdapterByIdAsync(String iceP_domainId, String iceP_id, LookupReplyPrx iceP_reply, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "findAdapterById", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_domainId);
                     ostr.writeString(iceP_id);
                     ostr.writeProxy(iceP_reply);
                 }, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), LookupPrx.class, _LookupPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), LookupPrx.class, _LookupPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), LookupPrx.class, _LookupPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static LookupPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), LookupPrx.class, _LookupPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static LookupPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, LookupPrx.class, _LookupPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static LookupPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, LookupPrx.class, _LookupPrxI.class);
    }

    @Override
    LookupPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    LookupPrx ice_adapterId(String newAdapterId);

    @Override
    LookupPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    LookupPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    LookupPrx ice_invocationTimeout(int newTimeout);

    @Override
    LookupPrx ice_connectionCached(boolean newCache);

    @Override
    LookupPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    LookupPrx ice_secure(boolean b);

    @Override
    LookupPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    LookupPrx ice_preferSecure(boolean b);

    @Override
    LookupPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    LookupPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    LookupPrx ice_collocationOptimized(boolean b);

    @Override
    LookupPrx ice_twoway();

    @Override
    LookupPrx ice_oneway();

    @Override
    LookupPrx ice_batchOneway();

    @Override
    LookupPrx ice_datagram();

    @Override
    LookupPrx ice_batchDatagram();

    @Override
    LookupPrx ice_compress(boolean co);

    @Override
    LookupPrx ice_connectionId(String connectionId);

    @Override
    LookupPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceDiscovery::Lookup";
    }
}
