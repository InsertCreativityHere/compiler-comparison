//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Initial extends com.zeroc.Ice.Object
{
    /**
     * Holds the marshaled result of operation getMB.
     **/
    public static class GetMBMarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public GetMBMarshaledResult(B returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeValue(returnValue);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation getAMDMB.
     **/
    public static class GetAMDMBMarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public GetAMDMBMarshaledResult(B returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeValue(returnValue);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation getAll.
     **/
    public static class GetAllResult
    {
        /**
         * Default constructor.
         **/
        public GetAllResult()
        {
        }

        public GetAllResult(B b1, B b2, C theC, D theD)
        {
            this.b1 = b1;
            this.b2 = b2;
            this.theC = theC;
            this.theD = theD;
        }

        public B b1;
        public B b2;
        public C theC;
        public D theD;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.b1);
            ostr.writeValue(this.b2);
            ostr.writeValue(this.theC);
            ostr.writeValue(this.theD);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.b1 = v, B.class);
            istr.readValue(v -> this.b2 = v, B.class);
            istr.readValue(v -> this.theC = v, C.class);
            istr.readValue(v -> this.theD = v, D.class);
        }
    }

    /**
     * Holds the result of operation opValue.
     **/
    public static class OpValueResult
    {
        /**
         * Default constructor.
         **/
        public OpValueResult()
        {
        }

        public OpValueResult(com.zeroc.Ice.Value returnValue, com.zeroc.Ice.Value v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public com.zeroc.Ice.Value returnValue;
        public com.zeroc.Ice.Value v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.v2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.v2 = v, com.zeroc.Ice.Value.class);
            istr.readValue(v -> returnValue = v, com.zeroc.Ice.Value.class);
        }
    }

    /**
     * Holds the result of operation opValueSeq.
     **/
    public static class OpValueSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpValueSeqResult()
        {
        }

        public OpValueSeqResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ValueSeqHelper.write(ostr, this.v2);
            ValueSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = ValueSeqHelper.read(istr);
            returnValue = ValueSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opValueMap.
     **/
    public static class OpValueMapResult
    {
        /**
         * Default constructor.
         **/
        public OpValueMapResult()
        {
        }

        public OpValueMapResult(java.util.Map<java.lang.String, com.zeroc.Ice.Value> returnValue, java.util.Map<java.lang.String, com.zeroc.Ice.Value> v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public java.util.Map<java.lang.String, com.zeroc.Ice.Value> returnValue;
        public java.util.Map<java.lang.String, com.zeroc.Ice.Value> v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ValueMapHelper.write(ostr, this.v2);
            ValueMapHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.v2 = ValueMapHelper.read(istr);
            returnValue = ValueMapHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBaseSeq.
     **/
    public static class OpBaseSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBaseSeqResult()
        {
        }

        public OpBaseSeqResult(Base[] returnValue, Base[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Base[] returnValue;
        public Base[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BaseSeqHelper.write(ostr, this.outSeq);
            BaseSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BaseSeqHelper.read(istr);
            returnValue = BaseSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opM.
     **/
    public static class OpMResult
    {
        /**
         * Default constructor.
         **/
        public OpMResult()
        {
        }

        public OpMResult(M returnValue, M v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public M returnValue;
        public M v2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.v2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.v2 = v, M.class);
            istr.readValue(v -> returnValue = v, M.class);
        }
    }

    /**
     * Holds the result of operation opF1.
     **/
    public static class OpF1Result
    {
        /**
         * Default constructor.
         **/
        public OpF1Result()
        {
        }

        public OpF1Result(F1 returnValue, F1 f12)
        {
            this.returnValue = returnValue;
            this.f12 = f12;
        }

        public F1 returnValue;
        public F1 f12;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.f12);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.f12 = v, F1.class);
            istr.readValue(v -> returnValue = v, F1.class);
        }
    }

    /**
     * Holds the result of operation opF2.
     **/
    public static class OpF2Result
    {
        /**
         * Default constructor.
         **/
        public OpF2Result()
        {
        }

        public OpF2Result(F2Prx returnValue, F2Prx f22)
        {
            this.returnValue = returnValue;
            this.f22 = f22;
        }

        public F2Prx returnValue;
        public F2Prx f22;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(this.f22);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.f22 = F2Prx.uncheckedCast(istr.readProxy());
            returnValue = F2Prx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Holds the result of operation opF3.
     **/
    public static class OpF3Result
    {
        /**
         * Default constructor.
         **/
        public OpF3Result()
        {
        }

        public OpF3Result(F3 returnValue, F3 f32)
        {
            this.returnValue = returnValue;
            this.f32 = f32;
        }

        public F3 returnValue;
        public F3 f32;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.f32);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.f32 = v, F3.class);
            istr.readValue(v -> returnValue = v, F3.class);
        }
    }

    void shutdown(com.zeroc.Ice.Current current);

    B getB1(com.zeroc.Ice.Current current);

    B getB2(com.zeroc.Ice.Current current);

    C getC(com.zeroc.Ice.Current current);

    D getD(com.zeroc.Ice.Current current);

    E getE(com.zeroc.Ice.Current current);

    F getF(com.zeroc.Ice.Current current);

    void setRecursive(Recursive p, com.zeroc.Ice.Current current);

    boolean supportsClassGraphDepthMax(com.zeroc.Ice.Current current);

    Initial.GetMBMarshaledResult getMB(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Initial.GetAMDMBMarshaledResult> getAMDMBAsync(com.zeroc.Ice.Current current);

    Initial.GetAllResult getAll(com.zeroc.Ice.Current current);

    K getK(com.zeroc.Ice.Current current);

    Initial.OpValueResult opValue(com.zeroc.Ice.Value v1, com.zeroc.Ice.Current current);

    Initial.OpValueSeqResult opValueSeq(com.zeroc.Ice.Value[] v1, com.zeroc.Ice.Current current);

    Initial.OpValueMapResult opValueMap(java.util.Map<java.lang.String, com.zeroc.Ice.Value> v1, com.zeroc.Ice.Current current);

    D1 getD1(D1 d1, com.zeroc.Ice.Current current);

    void throwEDerived(com.zeroc.Ice.Current current)
        throws EDerived;

    void setG(G theG, com.zeroc.Ice.Current current);

    Initial.OpBaseSeqResult opBaseSeq(Base[] inSeq, com.zeroc.Ice.Current current);

    Compact getCompact(com.zeroc.Ice.Current current);

    Test.Inner.A getInnerA(com.zeroc.Ice.Current current);

    Test.Inner.Sub.A getInnerSubA(com.zeroc.Ice.Current current);

    void throwInnerEx(com.zeroc.Ice.Current current)
        throws Test.Inner.Ex;

    void throwInnerSubEx(com.zeroc.Ice.Current current)
        throws Test.Inner.Sub.Ex;

    Initial.OpMResult opM(M v1, com.zeroc.Ice.Current current);

    Initial.OpF1Result opF1(F1 f11, com.zeroc.Ice.Current current);

    Initial.OpF2Result opF2(F2Prx f21, com.zeroc.Ice.Current current);

    Initial.OpF3Result opF3(F3 f31, com.zeroc.Ice.Current current);

    boolean hasF3(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Initial"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getB1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        B ret = obj.getB1(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getB2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        B ret = obj.getB2(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getC(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        C ret = obj.getC(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getD(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        D ret = obj.getD(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getE(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        E ret = obj.getE(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getF(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        F ret = obj.getF(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setRecursive(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Recursive> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Recursive.class);
        istr.readPendingValues();
        inS.endReadParams();
        Recursive iceP_p = icePP_p.value;
        obj.setRecursive(iceP_p, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsClassGraphDepthMax(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsClassGraphDepthMax(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMB(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.GetMBMarshaledResult ret = obj.getMB(current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAMDMB(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setMarshaledResultFuture(obj.getAMDMBAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAll(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.GetAllResult ret = obj.getAll(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getK(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        K ret = obj.getK(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opValue(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_v1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_v1.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        inS.endReadParams();
        com.zeroc.Ice.Value iceP_v1 = icePP_v1.value;
        Initial.OpValueResult ret = obj.opValue(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opValueSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.Value[] iceP_v1;
        iceP_v1 = ValueSeqHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        Initial.OpValueSeqResult ret = obj.opValueSeq(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opValueMap(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, com.zeroc.Ice.Value> iceP_v1;
        iceP_v1 = ValueMapHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        Initial.OpValueMapResult ret = obj.opValueMap(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getD1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<D1> icePP_d1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_d1.value = v, D1.class);
        istr.readPendingValues();
        inS.endReadParams();
        D1 iceP_d1 = icePP_d1.value;
        D1 ret = obj.getD1(iceP_d1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwEDerived(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.throwEDerived(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setG(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<G> icePP_theG = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_theG.value = v, G.class);
        istr.readPendingValues();
        inS.endReadParams();
        G iceP_theG = icePP_theG.value;
        obj.setG(iceP_theG, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBaseSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Base[] iceP_inSeq;
        iceP_inSeq = BaseSeqHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        Initial.OpBaseSeqResult ret = obj.opBaseSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCompact(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Compact ret = obj.getCompact(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getInnerA(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Test.Inner.A ret = obj.getInnerA(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getInnerSubA(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Test.Inner.Sub.A ret = obj.getInnerSubA(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwInnerEx(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.throwInnerEx(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwInnerSubEx(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.throwInnerSubEx(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opM(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<M> icePP_v1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_v1.value = v, M.class);
        istr.readPendingValues();
        inS.endReadParams();
        M iceP_v1 = icePP_v1.value;
        Initial.OpMResult ret = obj.opM(iceP_v1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opF1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<F1> icePP_f11 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_f11.value = v, F1.class);
        istr.readPendingValues();
        inS.endReadParams();
        F1 iceP_f11 = icePP_f11.value;
        Initial.OpF1Result ret = obj.opF1(iceP_f11, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opF2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        F2Prx iceP_f21;
        iceP_f21 = F2Prx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        Initial.OpF2Result ret = obj.opF2(iceP_f21, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opF3(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<F3> icePP_f31 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_f31.value = v, F3.class);
        istr.readPendingValues();
        inS.endReadParams();
        F3 iceP_f31 = icePP_f31.value;
        Initial.OpF3Result ret = obj.opF3(iceP_f31, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_hasF3(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.hasF3(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "getAMDMB",
        "getAll",
        "getB1",
        "getB2",
        "getC",
        "getCompact",
        "getD",
        "getD1",
        "getE",
        "getF",
        "getInnerA",
        "getInnerSubA",
        "getK",
        "getMB",
        "hasF3",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBaseSeq",
        "opF1",
        "opF2",
        "opF3",
        "opM",
        "opValue",
        "opValueMap",
        "opValueSeq",
        "setG",
        "setRecursive",
        "shutdown",
        "supportsClassGraphDepthMax",
        "throwEDerived",
        "throwInnerEx",
        "throwInnerSubEx"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getAMDMB(this, in, current);
            }
            case 1:
            {
                return _iceD_getAll(this, in, current);
            }
            case 2:
            {
                return _iceD_getB1(this, in, current);
            }
            case 3:
            {
                return _iceD_getB2(this, in, current);
            }
            case 4:
            {
                return _iceD_getC(this, in, current);
            }
            case 5:
            {
                return _iceD_getCompact(this, in, current);
            }
            case 6:
            {
                return _iceD_getD(this, in, current);
            }
            case 7:
            {
                return _iceD_getD1(this, in, current);
            }
            case 8:
            {
                return _iceD_getE(this, in, current);
            }
            case 9:
            {
                return _iceD_getF(this, in, current);
            }
            case 10:
            {
                return _iceD_getInnerA(this, in, current);
            }
            case 11:
            {
                return _iceD_getInnerSubA(this, in, current);
            }
            case 12:
            {
                return _iceD_getK(this, in, current);
            }
            case 13:
            {
                return _iceD_getMB(this, in, current);
            }
            case 14:
            {
                return _iceD_hasF3(this, in, current);
            }
            case 15:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 16:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 17:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 18:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 19:
            {
                return _iceD_opBaseSeq(this, in, current);
            }
            case 20:
            {
                return _iceD_opF1(this, in, current);
            }
            case 21:
            {
                return _iceD_opF2(this, in, current);
            }
            case 22:
            {
                return _iceD_opF3(this, in, current);
            }
            case 23:
            {
                return _iceD_opM(this, in, current);
            }
            case 24:
            {
                return _iceD_opValue(this, in, current);
            }
            case 25:
            {
                return _iceD_opValueMap(this, in, current);
            }
            case 26:
            {
                return _iceD_opValueSeq(this, in, current);
            }
            case 27:
            {
                return _iceD_setG(this, in, current);
            }
            case 28:
            {
                return _iceD_setRecursive(this, in, current);
            }
            case 29:
            {
                return _iceD_shutdown(this, in, current);
            }
            case 30:
            {
                return _iceD_supportsClassGraphDepthMax(this, in, current);
            }
            case 31:
            {
                return _iceD_throwEDerived(this, in, current);
            }
            case 32:
            {
                return _iceD_throwInnerEx(this, in, current);
            }
            case 33:
            {
                return _iceD_throwInnerSubEx(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
