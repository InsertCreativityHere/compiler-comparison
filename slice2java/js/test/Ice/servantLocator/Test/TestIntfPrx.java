// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default void requestFailedException()
    {
        requestFailedException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void requestFailedException(java.util.Map<String, String> context)
    {
        _iceI_requestFailedExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> requestFailedExceptionAsync()
    {
        return _iceI_requestFailedExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> requestFailedExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_requestFailedExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_requestFailedExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "requestFailedException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void unknownUserException()
    {
        unknownUserException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownUserException(java.util.Map<String, String> context)
    {
        _iceI_unknownUserExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> unknownUserExceptionAsync()
    {
        return _iceI_unknownUserExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownUserExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownUserExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unknownUserExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unknownUserException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void unknownLocalException()
    {
        unknownLocalException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownLocalException(java.util.Map<String, String> context)
    {
        _iceI_unknownLocalExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> unknownLocalExceptionAsync()
    {
        return _iceI_unknownLocalExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownLocalExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownLocalExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unknownLocalExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unknownLocalException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void unknownException()
    {
        unknownException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownException(java.util.Map<String, String> context)
    {
        _iceI_unknownExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> unknownExceptionAsync()
    {
        return _iceI_unknownExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unknownExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unknownException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void localException()
    {
        localException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void localException(java.util.Map<String, String> context)
    {
        _iceI_localExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> localExceptionAsync()
    {
        return _iceI_localExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> localExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_localExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_localExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "localException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void userException()
    {
        userException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void userException(java.util.Map<String, String> context)
    {
        _iceI_userExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> userExceptionAsync()
    {
        return _iceI_userExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> userExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_userExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_userExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "userException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void jsException()
    {
        jsException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void jsException(java.util.Map<String, String> context)
    {
        _iceI_jsExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> jsExceptionAsync()
    {
        return _iceI_jsExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> jsExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_jsExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_jsExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "jsException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void unknownExceptionWithServantException()
    {
        unknownExceptionWithServantException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownExceptionWithServantException(java.util.Map<String, String> context)
    {
        _iceI_unknownExceptionWithServantExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> unknownExceptionWithServantExceptionAsync()
    {
        return _iceI_unknownExceptionWithServantExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownExceptionWithServantExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownExceptionWithServantExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_unknownExceptionWithServantExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "unknownExceptionWithServantException", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default String impossibleException(boolean _throw)
        throws TestImpossibleException
    {
        return impossibleException(_throw, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String impossibleException(boolean _throw, java.util.Map<String, String> context)
        throws TestImpossibleException
    {
        try
        {
            return _iceI_impossibleExceptionAsync(_throw, context, true).waitForResponseOrUserEx();
        }
        catch(TestImpossibleException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> impossibleExceptionAsync(boolean _throw)
    {
        return _iceI_impossibleExceptionAsync(_throw, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> impossibleExceptionAsync(boolean _throw, java.util.Map<String, String> context)
    {
        return _iceI_impossibleExceptionAsync(_throw, context, false);
    }

    /**
     * @hidden
     * @param iceP_throw -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_impossibleExceptionAsync(boolean iceP_throw, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "impossibleException", null, sync, _iceE_impossibleException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(iceP_throw);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_impossibleException =
    {
        TestImpossibleException.class
    };

    default String intfUserException(boolean _throw)
        throws TestIntfUserException,
               TestImpossibleException
    {
        return intfUserException(_throw, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String intfUserException(boolean _throw, java.util.Map<String, String> context)
        throws TestIntfUserException,
               TestImpossibleException
    {
        try
        {
            return _iceI_intfUserExceptionAsync(_throw, context, true).waitForResponseOrUserEx();
        }
        catch(TestIntfUserException ex)
        {
            throw ex;
        }
        catch(TestImpossibleException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> intfUserExceptionAsync(boolean _throw)
    {
        return _iceI_intfUserExceptionAsync(_throw, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> intfUserExceptionAsync(boolean _throw, java.util.Map<String, String> context)
    {
        return _iceI_intfUserExceptionAsync(_throw, context, false);
    }

    /**
     * @hidden
     * @param iceP_throw -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_intfUserExceptionAsync(boolean iceP_throw, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "intfUserException", null, sync, _iceE_intfUserException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(iceP_throw);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_intfUserException =
    {
        TestIntfUserException.class,
        TestImpossibleException.class
    };

    default void asyncResponse()
        throws TestIntfUserException,
               TestImpossibleException
    {
        asyncResponse(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void asyncResponse(java.util.Map<String, String> context)
        throws TestIntfUserException,
               TestImpossibleException
    {
        try
        {
            _iceI_asyncResponseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(TestIntfUserException ex)
        {
            throw ex;
        }
        catch(TestImpossibleException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> asyncResponseAsync()
    {
        return _iceI_asyncResponseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> asyncResponseAsync(java.util.Map<String, String> context)
    {
        return _iceI_asyncResponseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_asyncResponseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "asyncResponse", null, sync, _iceE_asyncResponse);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_asyncResponse =
    {
        TestIntfUserException.class,
        TestImpossibleException.class
    };

    default void asyncException()
        throws TestIntfUserException,
               TestImpossibleException
    {
        asyncException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void asyncException(java.util.Map<String, String> context)
        throws TestIntfUserException,
               TestImpossibleException
    {
        try
        {
            _iceI_asyncExceptionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(TestIntfUserException ex)
        {
            throw ex;
        }
        catch(TestImpossibleException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> asyncExceptionAsync()
    {
        return _iceI_asyncExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> asyncExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_asyncExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_asyncExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "asyncException", null, sync, _iceE_asyncException);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_asyncException =
    {
        TestIntfUserException.class,
        TestImpossibleException.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
