//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation paramTest1.
     **/
    public static class ParamTest1Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest1Result()
        {
        }

        public ParamTest1Result(B p1, B p2)
        {
            this.p1 = p1;
            this.p2 = p2;
        }

        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest2.
     **/
    public static class ParamTest2Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest2Result()
        {
        }

        public ParamTest2Result(B p2, B p1)
        {
            this.p2 = p2;
            this.p1 = p1;
        }

        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest3.
     **/
    public static class ParamTest3Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest3Result()
        {
        }

        public ParamTest3Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest4.
     **/
    public static class ParamTest4Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest4Result()
        {
        }

        public ParamTest4Result(B returnValue, B p)
        {
            this.returnValue = returnValue;
            this.p = p;
        }

        public B returnValue;
        public B p;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest1.
     **/
    public static class ReturnTest1Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest1Result()
        {
        }

        public ReturnTest1Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest2.
     **/
    public static class ReturnTest2Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest2Result()
        {
        }

        public ReturnTest2Result(B returnValue, B p2, B p1)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
            this.p1 = p1;
        }

        public B returnValue;
        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation dictionaryTest.
     **/
    public static class DictionaryTestResult
    {
        /**
         * Default constructor.
         **/
        public DictionaryTestResult()
        {
        }

        public DictionaryTestResult(java.util.Map<java.lang.Integer, B> returnValue, java.util.Map<java.lang.Integer, B> bout)
        {
            this.returnValue = returnValue;
            this.bout = bout;
        }

        public java.util.Map<java.lang.Integer, B> returnValue;
        public java.util.Map<java.lang.Integer, B> bout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BDictHelper.write(ostr, this.bout);
            BDictHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.bout = BDictHelper.read(istr);
            returnValue = BDictHelper.read(istr);
        }
    }

    com.zeroc.Ice.Value SBaseAsObject(com.zeroc.Ice.Current current);

    SBase SBaseAsSBase(com.zeroc.Ice.Current current);

    SBase SBSKnownDerivedAsSBase(com.zeroc.Ice.Current current);

    SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(com.zeroc.Ice.Current current);

    SBase SBSUnknownDerivedAsSBase(com.zeroc.Ice.Current current);

    SBase SBSUnknownDerivedAsSBaseCompact(com.zeroc.Ice.Current current);

    com.zeroc.Ice.Value SUnknownAsObject(com.zeroc.Ice.Current current);

    void checkSUnknown(com.zeroc.Ice.Value o, com.zeroc.Ice.Current current);

    B oneElementCycle(com.zeroc.Ice.Current current);

    B twoElementCycle(com.zeroc.Ice.Current current);

    B D1AsB(com.zeroc.Ice.Current current);

    D1 D1AsD1(com.zeroc.Ice.Current current);

    B D2AsB(com.zeroc.Ice.Current current);

    TestIntf.ParamTest1Result paramTest1(com.zeroc.Ice.Current current);

    TestIntf.ParamTest2Result paramTest2(com.zeroc.Ice.Current current);

    TestIntf.ParamTest3Result paramTest3(com.zeroc.Ice.Current current);

    TestIntf.ParamTest4Result paramTest4(com.zeroc.Ice.Current current);

    TestIntf.ReturnTest1Result returnTest1(com.zeroc.Ice.Current current);

    TestIntf.ReturnTest2Result returnTest2(com.zeroc.Ice.Current current);

    B returnTest3(B p1, B p2, com.zeroc.Ice.Current current);

    SS3 sequenceTest(SS1 p1, SS2 p2, com.zeroc.Ice.Current current);

    TestIntf.DictionaryTestResult dictionaryTest(java.util.Map<java.lang.Integer, B> bin, com.zeroc.Ice.Current current);

    PBase exchangePBase(PBase pb, com.zeroc.Ice.Current current);

    Preserved PBSUnknownAsPreserved(com.zeroc.Ice.Current current);

    void checkPBSUnknown(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknownAsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    void checkPBSUnknownWithGraph(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknown2AsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    void checkPBSUnknown2WithGraph(Preserved p, com.zeroc.Ice.Current current);

    PNode exchangePNode(PNode pn, com.zeroc.Ice.Current current);

    void throwBaseAsBase(com.zeroc.Ice.Current current)
        throws BaseException;

    void throwDerivedAsBase(com.zeroc.Ice.Current current)
        throws BaseException;

    void throwDerivedAsDerived(com.zeroc.Ice.Current current)
        throws DerivedException;

    void throwUnknownDerivedAsBase(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwPreservedExceptionAsync(com.zeroc.Ice.Current current)
        throws PreservedException;

    /**
     * Use of forward-declared class to verify that code is generated correctly.
     * @param current The Current object for the invocation.
     **/
    Forward useForward(com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBaseAsObject(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        com.zeroc.Ice.Value ret = obj.SBaseAsObject(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBaseAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        SBase ret = obj.SBaseAsSBase(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSKnownDerivedAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        SBase ret = obj.SBSKnownDerivedAsSBase(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSKnownDerivedAsSBSKnownDerived(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        SBSKnownDerived ret = obj.SBSKnownDerivedAsSBSKnownDerived(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSUnknownDerivedAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        SBase ret = obj.SBSUnknownDerivedAsSBase(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSUnknownDerivedAsSBaseCompact(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.CompactFormat);
        SBase ret = obj.SBSUnknownDerivedAsSBaseCompact(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SUnknownAsObject(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        com.zeroc.Ice.Value ret = obj.SUnknownAsObject(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkSUnknown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_o = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_o.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        inS.endReadParams();
        com.zeroc.Ice.Value iceP_o = icePP_o.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.checkSUnknown(iceP_o, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_oneElementCycle(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        B ret = obj.oneElementCycle(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_twoElementCycle(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        B ret = obj.twoElementCycle(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D1AsB(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        B ret = obj.D1AsB(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D1AsD1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        D1 ret = obj.D1AsD1(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D2AsB(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        B ret = obj.D2AsB(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ParamTest1Result ret = obj.paramTest1(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest2(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ParamTest2Result ret = obj.paramTest2(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest3(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ParamTest3Result ret = obj.paramTest3(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest4(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ParamTest4Result ret = obj.paramTest4(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ReturnTest1Result ret = obj.returnTest1(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest2(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.ReturnTest2Result ret = obj.returnTest2(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest3(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<B> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<B> icePP_p2 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, B.class);
        istr.readValue(v -> icePP_p2.value = v, B.class);
        istr.readPendingValues();
        inS.endReadParams();
        B iceP_p1 = icePP_p1.value;
        B iceP_p2 = icePP_p2.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        B ret = obj.returnTest3(iceP_p1, iceP_p2, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sequenceTest(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<SS1> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<SS2> icePP_p2 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, SS1.class);
        istr.readValue(v -> icePP_p2.value = v, SS2.class);
        istr.readPendingValues();
        inS.endReadParams();
        SS1 iceP_p1 = icePP_p1.value;
        SS2 iceP_p2 = icePP_p2.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        SS3 ret = obj.sequenceTest(iceP_p1, iceP_p2, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SS3.ice_write(ostr, ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dictionaryTest(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Integer, B> iceP_bin;
        iceP_bin = BDictHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        TestIntf.DictionaryTestResult ret = obj.dictionaryTest(iceP_bin, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_exchangePBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<PBase> icePP_pb = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_pb.value = v, PBase.class);
        istr.readPendingValues();
        inS.endReadParams();
        PBase iceP_pb = icePP_pb.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        PBase ret = obj.exchangePBase(iceP_pb, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknownAsPreserved(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        Preserved ret = obj.PBSUnknownAsPreserved(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.checkPBSUnknown(iceP_p, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknownAsPreservedWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.PBSUnknownAsPreservedWithGraphAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknownWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.checkPBSUnknownWithGraph(iceP_p, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknown2AsPreservedWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.PBSUnknown2AsPreservedWithGraphAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknown2WithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.checkPBSUnknown2WithGraph(iceP_p, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_exchangePNode(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<PNode> icePP_pn = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_pn.value = v, PNode.class);
        istr.readPendingValues();
        inS.endReadParams();
        PNode iceP_pn = icePP_pn.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        PNode ret = obj.exchangePNode(iceP_pn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwBaseAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.throwBaseAsBase(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwDerivedAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.throwDerivedAsBase(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwDerivedAsDerived(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.throwDerivedAsDerived(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwUnknownDerivedAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.throwUnknownDerivedAsBase(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwPreservedException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwPreservedExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_useForward(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        Forward ret = obj.useForward(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        return switch (current.operation)
        {
            case "SBaseAsObject" -> TestIntf._iceD_SBaseAsObject(this, in, current);
            case "SBaseAsSBase" -> TestIntf._iceD_SBaseAsSBase(this, in, current);
            case "SBSKnownDerivedAsSBase" -> TestIntf._iceD_SBSKnownDerivedAsSBase(this, in, current);
            case "SBSKnownDerivedAsSBSKnownDerived" -> TestIntf._iceD_SBSKnownDerivedAsSBSKnownDerived(this, in, current);
            case "SBSUnknownDerivedAsSBase" -> TestIntf._iceD_SBSUnknownDerivedAsSBase(this, in, current);
            case "SBSUnknownDerivedAsSBaseCompact" -> TestIntf._iceD_SBSUnknownDerivedAsSBaseCompact(this, in, current);
            case "SUnknownAsObject" -> TestIntf._iceD_SUnknownAsObject(this, in, current);
            case "checkSUnknown" -> TestIntf._iceD_checkSUnknown(this, in, current);
            case "oneElementCycle" -> TestIntf._iceD_oneElementCycle(this, in, current);
            case "twoElementCycle" -> TestIntf._iceD_twoElementCycle(this, in, current);
            case "D1AsB" -> TestIntf._iceD_D1AsB(this, in, current);
            case "D1AsD1" -> TestIntf._iceD_D1AsD1(this, in, current);
            case "D2AsB" -> TestIntf._iceD_D2AsB(this, in, current);
            case "paramTest1" -> TestIntf._iceD_paramTest1(this, in, current);
            case "paramTest2" -> TestIntf._iceD_paramTest2(this, in, current);
            case "paramTest3" -> TestIntf._iceD_paramTest3(this, in, current);
            case "paramTest4" -> TestIntf._iceD_paramTest4(this, in, current);
            case "returnTest1" -> TestIntf._iceD_returnTest1(this, in, current);
            case "returnTest2" -> TestIntf._iceD_returnTest2(this, in, current);
            case "returnTest3" -> TestIntf._iceD_returnTest3(this, in, current);
            case "sequenceTest" -> TestIntf._iceD_sequenceTest(this, in, current);
            case "dictionaryTest" -> TestIntf._iceD_dictionaryTest(this, in, current);
            case "exchangePBase" -> TestIntf._iceD_exchangePBase(this, in, current);
            case "PBSUnknownAsPreserved" -> TestIntf._iceD_PBSUnknownAsPreserved(this, in, current);
            case "checkPBSUnknown" -> TestIntf._iceD_checkPBSUnknown(this, in, current);
            case "PBSUnknownAsPreservedWithGraph" -> TestIntf._iceD_PBSUnknownAsPreservedWithGraph(this, in, current);
            case "checkPBSUnknownWithGraph" -> TestIntf._iceD_checkPBSUnknownWithGraph(this, in, current);
            case "PBSUnknown2AsPreservedWithGraph" -> TestIntf._iceD_PBSUnknown2AsPreservedWithGraph(this, in, current);
            case "checkPBSUnknown2WithGraph" -> TestIntf._iceD_checkPBSUnknown2WithGraph(this, in, current);
            case "exchangePNode" -> TestIntf._iceD_exchangePNode(this, in, current);
            case "throwBaseAsBase" -> TestIntf._iceD_throwBaseAsBase(this, in, current);
            case "throwDerivedAsBase" -> TestIntf._iceD_throwDerivedAsBase(this, in, current);
            case "throwDerivedAsDerived" -> TestIntf._iceD_throwDerivedAsDerived(this, in, current);
            case "throwUnknownDerivedAsBase" -> TestIntf._iceD_throwUnknownDerivedAsBase(this, in, current);
            case "throwPreservedException" -> TestIntf._iceD_throwPreservedException(this, in, current);
            case "useForward" -> TestIntf._iceD_useForward(this, in, current);
            case "shutdown" -> TestIntf._iceD_shutdown(this, in, current);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
