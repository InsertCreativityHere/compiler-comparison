//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Clash;

public interface Intf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opOut.
     **/
    public static class OpOutResult
    {
        /**
         * Default constructor.
         **/
        public OpOutResult()
        {
        }

        public OpOutResult(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, java.util.Optional<java.lang.String> proxy, java.util.OptionalInt obj)
        {
            this.context = context;
            this.current = current;
            this.response = response;
            this.ex = ex;
            this.sent = sent;
            this.cookie = cookie;
            this.sync = sync;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.proxy = proxy;
            this.obj = obj;
        }

        public OpOutResult(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, String proxy, int obj)
        {
            this.context = context;
            this.current = current;
            this.response = response;
            this.ex = ex;
            this.sent = sent;
            this.cookie = cookie;
            this.sync = sync;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.proxy = java.util.Optional.ofNullable(proxy);
            this.obj = java.util.OptionalInt.of(obj);
        }

        public String context;
        public String current;
        public String response;
        public String ex;
        public String sent;
        public String cookie;
        public String sync;
        public String result;
        public String istr;
        public String ostr;
        public java.util.Optional<java.lang.String> proxy;
        public java.util.OptionalInt obj;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(this.context);
            ostr.writeString(this.current);
            ostr.writeString(this.response);
            ostr.writeString(this.ex);
            ostr.writeString(this.sent);
            ostr.writeString(this.cookie);
            ostr.writeString(this.sync);
            ostr.writeString(this.result);
            ostr.writeString(this.istr);
            ostr.writeString(this.ostr);
            ostr.writeString(1, this.proxy);
            ostr.writeInt(2, this.obj);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.context = istr.readString();
            this.current = istr.readString();
            this.response = istr.readString();
            this.ex = istr.readString();
            this.sent = istr.readString();
            this.cookie = istr.readString();
            this.sync = istr.readString();
            this.result = istr.readString();
            this.istr = istr.readString();
            this.ostr = istr.readString();
            this.proxy = istr.readString(1);
            this.obj = istr.readInt(2);
        }
    }

    void context(com.zeroc.Ice.Current current);

    void current(com.zeroc.Ice.Current current);

    void response(com.zeroc.Ice.Current current);

    void typeId(com.zeroc.Ice.Current current);

    void del(com.zeroc.Ice.Current current);

    void cookie(com.zeroc.Ice.Current current);

    void sync(com.zeroc.Ice.Current current);

    void inS(com.zeroc.Ice.Current current);

    void istr(com.zeroc.Ice.Current current);

    void obj(com.zeroc.Ice.Current current);

    void op(String context, String current, String response, String ex, String sent, String cookie, String sync, String result, String istr, String ostr, java.util.Optional<java.lang.String> proxy, java.util.OptionalInt obj, com.zeroc.Ice.Current current_);

    Intf.OpOutResult opOut(com.zeroc.Ice.Current current_);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Clash::Intf",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Clash::Intf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_context(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.context(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_current(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.current(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_response(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.response(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_typeId(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.typeId(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_del(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.del(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_cookie(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.cookie(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sync(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.sync(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_inS(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.inS(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_istr(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.istr(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obj(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.obj(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_op(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_context;
        String iceP_current;
        String iceP_response;
        String iceP_ex;
        String iceP_sent;
        String iceP_cookie;
        String iceP_sync;
        String iceP_result;
        String iceP_istr;
        String iceP_ostr;
        java.util.Optional<java.lang.String> iceP_proxy;
        java.util.OptionalInt iceP_obj;
        iceP_context = istr.readString();
        iceP_current = istr.readString();
        iceP_response = istr.readString();
        iceP_ex = istr.readString();
        iceP_sent = istr.readString();
        iceP_cookie = istr.readString();
        iceP_sync = istr.readString();
        iceP_result = istr.readString();
        iceP_istr = istr.readString();
        iceP_ostr = istr.readString();
        iceP_proxy = istr.readString(1);
        iceP_obj = istr.readInt(2);
        inS.endReadParams();
        obj.op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOut(Intf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Intf.OpOutResult ret = obj.opOut(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "context",
        "cookie",
        "current",
        "del",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "inS",
        "istr",
        "obj",
        "op",
        "opOut",
        "response",
        "sync",
        "typeId"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_context(this, in, current);
            }
            case 1:
            {
                return _iceD_cookie(this, in, current);
            }
            case 2:
            {
                return _iceD_current(this, in, current);
            }
            case 3:
            {
                return _iceD_del(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_inS(this, in, current);
            }
            case 9:
            {
                return _iceD_istr(this, in, current);
            }
            case 10:
            {
                return _iceD_obj(this, in, current);
            }
            case 11:
            {
                return _iceD_op(this, in, current);
            }
            case 12:
            {
                return _iceD_opOut(this, in, current);
            }
            case 13:
            {
                return _iceD_response(this, in, current);
            }
            case 14:
            {
                return _iceD_sync(this, in, current);
            }
            case 15:
            {
                return _iceD_typeId(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
