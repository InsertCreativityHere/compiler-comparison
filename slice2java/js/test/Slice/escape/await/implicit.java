//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package await;

public interface implicit extends com.zeroc.Ice.Object
{
    var in(_break internal, delete is, explicitPrx lock, casePrx namespace, typeofPrx _new, delete _null, explicitPrx operator, int override, int params, int _private, com.zeroc.Ice.Current current)
        throws fixed,
               foreach;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::await::implicit"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::await::implicit";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_in(implicit obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        _break iceP_internal;
        final com.zeroc.IceInternal.Holder<delete> icePP_is = new com.zeroc.IceInternal.Holder<>();
        explicitPrx iceP_lock;
        casePrx iceP_namespace;
        typeofPrx iceP_new;
        final com.zeroc.IceInternal.Holder<delete> icePP_null = new com.zeroc.IceInternal.Holder<>();
        explicitPrx iceP_operator;
        int iceP_override;
        int iceP_params;
        int iceP_private;
        iceP_internal = _break.ice_read(istr);
        istr.readValue(v -> icePP_is.value = v, delete.class);
        iceP_lock = explicitPrx.uncheckedCast(istr.readProxy());
        iceP_namespace = casePrx.uncheckedCast(istr.readProxy());
        iceP_new = typeofPrx.uncheckedCast(istr.readProxy());
        istr.readValue(v -> icePP_null.value = v, delete.class);
        iceP_operator = explicitPrx.uncheckedCast(istr.readProxy());
        iceP_override = istr.readInt();
        iceP_params = istr.readInt();
        iceP_private = istr.readInt();
        istr.readPendingValues();
        istr.endEncapsulation();
        delete iceP_is = icePP_is.value;
        delete iceP_null = icePP_null.value;
        var ret = obj.in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        var.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "in" -> implicit._iceD_in(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
