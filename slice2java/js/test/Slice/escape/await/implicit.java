//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package await;

public interface implicit extends com.zeroc.Ice.Object
{
    var in(_break internal, delete is, explicitPrx lock, casePrx namespace, typeofPrx _new, delete _null, explicitPrx operator, int override, int params, int _private, com.zeroc.Ice.Current current)
        throws fixed,
               foreach;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::await::implicit"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::await::implicit";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_in(implicit obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        _break iceP_internal;
        final com.zeroc.IceInternal.Holder<delete> icePP_is = new com.zeroc.IceInternal.Holder<>();
        explicitPrx iceP_lock;
        casePrx iceP_namespace;
        typeofPrx iceP_new;
        final com.zeroc.IceInternal.Holder<delete> icePP_null = new com.zeroc.IceInternal.Holder<>();
        explicitPrx iceP_operator;
        int iceP_override;
        int iceP_params;
        int iceP_private;
        iceP_internal = _break.ice_read(istr);
        istr.readValue(v -> icePP_is.value = v, delete.class);
        iceP_lock = explicitPrx.uncheckedCast(istr.readProxy());
        iceP_namespace = casePrx.uncheckedCast(istr.readProxy());
        iceP_new = typeofPrx.uncheckedCast(istr.readProxy());
        istr.readValue(v -> icePP_null.value = v, delete.class);
        iceP_operator = explicitPrx.uncheckedCast(istr.readProxy());
        iceP_override = istr.readInt();
        iceP_params = istr.readInt();
        iceP_private = istr.readInt();
        istr.readPendingValues();
        inS.endReadParams();
        delete iceP_is = icePP_is.value;
        delete iceP_null = icePP_null.value;
        var ret = obj.in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        var.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "in"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_in(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
