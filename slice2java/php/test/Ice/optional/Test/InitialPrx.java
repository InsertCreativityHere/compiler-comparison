//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface InitialPrx extends com.zeroc.Ice.ObjectPrx
{
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default com.zeroc.Ice.Value pingPong(com.zeroc.Ice.Value o)
    {
        return pingPong(o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.zeroc.Ice.Value pingPong(com.zeroc.Ice.Value o, java.util.Map<String, String> context)
    {
        return _iceI_pingPongAsync(o, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> pingPongAsync(com.zeroc.Ice.Value o)
    {
        return _iceI_pingPongAsync(o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.Value> pingPongAsync(com.zeroc.Ice.Value o, java.util.Map<String, String> context)
    {
        return _iceI_pingPongAsync(o, context, false);
    }

    /**
     * @hidden
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> _iceI_pingPongAsync(com.zeroc.Ice.Value iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.Value> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "pingPong", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_o);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, com.zeroc.Ice.Value.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void opOptionalException(int a, String b, OneOptional o)
        throws OptionalException
    {
        opOptionalException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opOptionalException(int a, String b, OneOptional o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opOptionalExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default void opOptionalException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
        throws OptionalException
    {
        opOptionalException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opOptionalException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opOptionalExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> opOptionalExceptionAsync(int a, String b, OneOptional o)
    {
        return _iceI_opOptionalExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opOptionalExceptionAsync(int a, String b, OneOptional o, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opOptionalExceptionAsync(int iceP_a, String iceP_b, OneOptional iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptionalException", null, sync, _iceE_opOptionalException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_opOptionalException =
    {
        OptionalException.class
    };

    default java.util.concurrent.CompletableFuture<Void> opOptionalExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
    {
        return _iceI_opOptionalExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opOptionalExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opOptionalExceptionAsync(java.util.OptionalInt iceP_a, java.util.Optional<java.lang.String> iceP_b, java.util.Optional<OneOptional> iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptionalException", null, sync, _iceE_opOptionalException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    default void opDerivedException(int a, String b, OneOptional o)
        throws OptionalException
    {
        opDerivedException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opDerivedException(int a, String b, OneOptional o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opDerivedExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default void opDerivedException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
        throws OptionalException
    {
        opDerivedException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opDerivedException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opDerivedExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> opDerivedExceptionAsync(int a, String b, OneOptional o)
    {
        return _iceI_opDerivedExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opDerivedExceptionAsync(int a, String b, OneOptional o, java.util.Map<String, String> context)
    {
        return _iceI_opDerivedExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opDerivedExceptionAsync(int iceP_a, String iceP_b, OneOptional iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDerivedException", null, sync, _iceE_opDerivedException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_opDerivedException =
    {
        OptionalException.class
    };

    default java.util.concurrent.CompletableFuture<Void> opDerivedExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
    {
        return _iceI_opDerivedExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opDerivedExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
    {
        return _iceI_opDerivedExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opDerivedExceptionAsync(java.util.OptionalInt iceP_a, java.util.Optional<java.lang.String> iceP_b, java.util.Optional<OneOptional> iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDerivedException", null, sync, _iceE_opDerivedException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    default void opRequiredException(int a, String b, OneOptional o)
        throws OptionalException
    {
        opRequiredException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opRequiredException(int a, String b, OneOptional o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opRequiredExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default void opRequiredException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
        throws OptionalException
    {
        opRequiredException(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opRequiredException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
        throws OptionalException
    {
        try
        {
            _iceI_opRequiredExceptionAsync(a, b, o, context, true).waitForResponseOrUserEx();
        }
        catch(OptionalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> opRequiredExceptionAsync(int a, String b, OneOptional o)
    {
        return _iceI_opRequiredExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opRequiredExceptionAsync(int a, String b, OneOptional o, java.util.Map<String, String> context)
    {
        return _iceI_opRequiredExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opRequiredExceptionAsync(int iceP_a, String iceP_b, OneOptional iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opRequiredException", null, sync, _iceE_opRequiredException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_opRequiredException =
    {
        OptionalException.class
    };

    default java.util.concurrent.CompletableFuture<Void> opRequiredExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o)
    {
        return _iceI_opRequiredExceptionAsync(a, b, o, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opRequiredExceptionAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, java.util.Map<String, String> context)
    {
        return _iceI_opRequiredExceptionAsync(a, b, o, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_b -
     * @param iceP_o -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opRequiredExceptionAsync(java.util.OptionalInt iceP_a, java.util.Optional<java.lang.String> iceP_b, java.util.Optional<OneOptional> iceP_o, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opRequiredException", null, sync, _iceE_opRequiredException);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_b);
                     ostr.writeValue(3, iceP_o);
                 }, null);
        return f;
    }

    default Initial.OpByteResult opByte(byte p1)
    {
        return opByte(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpByteResult opByte(byte p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpByteResult opByte(java.util.Optional<java.lang.Byte> p1)
    {
        return opByte(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpByteResult opByte(java.util.Optional<java.lang.Byte> p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteResult> opByteAsync(byte p1)
    {
        return _iceI_opByteAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteResult> opByteAsync(byte p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteResult> _iceI_opByteAsync(byte iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByte", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByte(2, iceP_p1);
                 }, istr -> {
                     Initial.OpByteResult ret = new Initial.OpByteResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteResult> opByteAsync(java.util.Optional<java.lang.Byte> p1)
    {
        return _iceI_opByteAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteResult> opByteAsync(java.util.Optional<java.lang.Byte> p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteResult> _iceI_opByteAsync(java.util.Optional<java.lang.Byte> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByte", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByte(2, iceP_p1);
                 }, istr -> {
                     Initial.OpByteResult ret = new Initial.OpByteResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpBoolResult opBool(boolean p1)
    {
        return opBool(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpBoolResult opBool(boolean p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpBoolResult opBool(java.util.Optional<java.lang.Boolean> p1)
    {
        return opBool(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpBoolResult opBool(java.util.Optional<java.lang.Boolean> p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolResult> opBoolAsync(boolean p1)
    {
        return _iceI_opBoolAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolResult> opBoolAsync(boolean p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolResult> _iceI_opBoolAsync(boolean iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBool", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(2, iceP_p1);
                 }, istr -> {
                     Initial.OpBoolResult ret = new Initial.OpBoolResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolResult> opBoolAsync(java.util.Optional<java.lang.Boolean> p1)
    {
        return _iceI_opBoolAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolResult> opBoolAsync(java.util.Optional<java.lang.Boolean> p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolResult> _iceI_opBoolAsync(java.util.Optional<java.lang.Boolean> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBool", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(2, iceP_p1);
                 }, istr -> {
                     Initial.OpBoolResult ret = new Initial.OpBoolResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpShortResult opShort(short p1)
    {
        return opShort(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpShortResult opShort(short p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpShortResult opShort(java.util.Optional<java.lang.Short> p1)
    {
        return opShort(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpShortResult opShort(java.util.Optional<java.lang.Short> p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortResult> opShortAsync(short p1)
    {
        return _iceI_opShortAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortResult> opShortAsync(short p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortResult> _iceI_opShortAsync(short iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShort", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShort(2, iceP_p1);
                 }, istr -> {
                     Initial.OpShortResult ret = new Initial.OpShortResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortResult> opShortAsync(java.util.Optional<java.lang.Short> p1)
    {
        return _iceI_opShortAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortResult> opShortAsync(java.util.Optional<java.lang.Short> p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortResult> _iceI_opShortAsync(java.util.Optional<java.lang.Short> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShort", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShort(2, iceP_p1);
                 }, istr -> {
                     Initial.OpShortResult ret = new Initial.OpShortResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpIntResult opInt(int p1)
    {
        return opInt(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntResult opInt(int p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpIntResult opInt(java.util.OptionalInt p1)
    {
        return opInt(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntResult opInt(java.util.OptionalInt p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntResult> opIntAsync(int p1)
    {
        return _iceI_opIntAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntResult> opIntAsync(int p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntResult> _iceI_opIntAsync(int iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opInt", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntResult ret = new Initial.OpIntResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntResult> opIntAsync(java.util.OptionalInt p1)
    {
        return _iceI_opIntAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntResult> opIntAsync(java.util.OptionalInt p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntResult> _iceI_opIntAsync(java.util.OptionalInt iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opInt", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntResult ret = new Initial.OpIntResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpLongResult opLong(long p1)
    {
        return opLong(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpLongResult opLong(long p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpLongResult opLong(java.util.OptionalLong p1)
    {
        return opLong(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpLongResult opLong(java.util.OptionalLong p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongResult> opLongAsync(long p1)
    {
        return _iceI_opLongAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongResult> opLongAsync(long p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongResult> _iceI_opLongAsync(long iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLong", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(1, iceP_p1);
                 }, istr -> {
                     Initial.OpLongResult ret = new Initial.OpLongResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongResult> opLongAsync(java.util.OptionalLong p1)
    {
        return _iceI_opLongAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongResult> opLongAsync(java.util.OptionalLong p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongResult> _iceI_opLongAsync(java.util.OptionalLong iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLong", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(1, iceP_p1);
                 }, istr -> {
                     Initial.OpLongResult ret = new Initial.OpLongResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpFloatResult opFloat(float p1)
    {
        return opFloat(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFloatResult opFloat(float p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpFloatResult opFloat(java.util.Optional<java.lang.Float> p1)
    {
        return opFloat(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFloatResult opFloat(java.util.Optional<java.lang.Float> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatResult> opFloatAsync(float p1)
    {
        return _iceI_opFloatAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatResult> opFloatAsync(float p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatResult> _iceI_opFloatAsync(float iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloat", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(2, iceP_p1);
                 }, istr -> {
                     Initial.OpFloatResult ret = new Initial.OpFloatResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatResult> opFloatAsync(java.util.Optional<java.lang.Float> p1)
    {
        return _iceI_opFloatAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatResult> opFloatAsync(java.util.Optional<java.lang.Float> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatResult> _iceI_opFloatAsync(java.util.Optional<java.lang.Float> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloat", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(2, iceP_p1);
                 }, istr -> {
                     Initial.OpFloatResult ret = new Initial.OpFloatResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpDoubleResult opDouble(double p1)
    {
        return opDouble(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpDoubleResult opDouble(double p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpDoubleResult opDouble(java.util.OptionalDouble p1)
    {
        return opDouble(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpDoubleResult opDouble(java.util.OptionalDouble p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleResult> opDoubleAsync(double p1)
    {
        return _iceI_opDoubleAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleResult> opDoubleAsync(double p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleResult> _iceI_opDoubleAsync(double iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDouble", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDouble(2, iceP_p1);
                 }, istr -> {
                     Initial.OpDoubleResult ret = new Initial.OpDoubleResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleResult> opDoubleAsync(java.util.OptionalDouble p1)
    {
        return _iceI_opDoubleAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleResult> opDoubleAsync(java.util.OptionalDouble p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleResult> _iceI_opDoubleAsync(java.util.OptionalDouble iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDouble", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDouble(2, iceP_p1);
                 }, istr -> {
                     Initial.OpDoubleResult ret = new Initial.OpDoubleResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpStringResult opString(String p1)
    {
        return opString(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringResult opString(String p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpStringResult opString(java.util.Optional<java.lang.String> p1)
    {
        return opString(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringResult opString(java.util.Optional<java.lang.String> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringResult> opStringAsync(String p1)
    {
        return _iceI_opStringAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringResult> opStringAsync(String p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringResult> _iceI_opStringAsync(String iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opString", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringResult ret = new Initial.OpStringResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringResult> opStringAsync(java.util.Optional<java.lang.String> p1)
    {
        return _iceI_opStringAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringResult> opStringAsync(java.util.Optional<java.lang.String> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringResult> _iceI_opStringAsync(java.util.Optional<java.lang.String> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opString", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringResult ret = new Initial.OpStringResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpMyEnumResult opMyEnum(MyEnum p1)
    {
        return opMyEnum(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMyEnumResult opMyEnum(MyEnum p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyEnumAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpMyEnumResult opMyEnum(java.util.Optional<MyEnum> p1)
    {
        return opMyEnum(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMyEnumResult opMyEnum(java.util.Optional<MyEnum> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyEnumAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyEnumResult> opMyEnumAsync(MyEnum p1)
    {
        return _iceI_opMyEnumAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyEnumResult> opMyEnumAsync(MyEnum p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyEnumAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyEnumResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMyEnum", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     MyEnum.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMyEnumResult ret = new Initial.OpMyEnumResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyEnumResult> opMyEnumAsync(java.util.Optional<MyEnum> p1)
    {
        return _iceI_opMyEnumAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyEnumResult> opMyEnumAsync(java.util.Optional<MyEnum> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyEnumAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyEnumResult> _iceI_opMyEnumAsync(java.util.Optional<MyEnum> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyEnumResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMyEnum", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     MyEnum.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMyEnumResult ret = new Initial.OpMyEnumResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpSmallStructResult opSmallStruct(SmallStruct p1)
    {
        return opSmallStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructResult opSmallStruct(SmallStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpSmallStructResult opSmallStruct(java.util.Optional<SmallStruct> p1)
    {
        return opSmallStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructResult opSmallStruct(java.util.Optional<SmallStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructResult> opSmallStructAsync(SmallStruct p1)
    {
        return _iceI_opSmallStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructResult> opSmallStructAsync(SmallStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructResult> _iceI_opSmallStructAsync(SmallStruct iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructResult ret = new Initial.OpSmallStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructResult> opSmallStructAsync(java.util.Optional<SmallStruct> p1)
    {
        return _iceI_opSmallStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructResult> opSmallStructAsync(java.util.Optional<SmallStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructResult> _iceI_opSmallStructAsync(java.util.Optional<SmallStruct> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructResult ret = new Initial.OpSmallStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpFixedStructResult opFixedStruct(FixedStruct p1)
    {
        return opFixedStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructResult opFixedStruct(FixedStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpFixedStructResult opFixedStruct(java.util.Optional<FixedStruct> p1)
    {
        return opFixedStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructResult opFixedStruct(java.util.Optional<FixedStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructResult> opFixedStructAsync(FixedStruct p1)
    {
        return _iceI_opFixedStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructResult> opFixedStructAsync(FixedStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructResult> _iceI_opFixedStructAsync(FixedStruct iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructResult ret = new Initial.OpFixedStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructResult> opFixedStructAsync(java.util.Optional<FixedStruct> p1)
    {
        return _iceI_opFixedStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructResult> opFixedStructAsync(java.util.Optional<FixedStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructResult> _iceI_opFixedStructAsync(java.util.Optional<FixedStruct> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructResult ret = new Initial.OpFixedStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpVarStructResult opVarStruct(VarStruct p1)
    {
        return opVarStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpVarStructResult opVarStruct(VarStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpVarStructResult opVarStruct(java.util.Optional<VarStruct> p1)
    {
        return opVarStruct(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpVarStructResult opVarStruct(java.util.Optional<VarStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructResult> opVarStructAsync(VarStruct p1)
    {
        return _iceI_opVarStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructResult> opVarStructAsync(VarStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructResult> _iceI_opVarStructAsync(VarStruct iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVarStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VarStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpVarStructResult ret = new Initial.OpVarStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructResult> opVarStructAsync(java.util.Optional<VarStruct> p1)
    {
        return _iceI_opVarStructAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructResult> opVarStructAsync(java.util.Optional<VarStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructResult> _iceI_opVarStructAsync(java.util.Optional<VarStruct> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVarStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VarStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpVarStructResult ret = new Initial.OpVarStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpOneOptionalResult opOneOptional(OneOptional p1)
    {
        return opOneOptional(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpOneOptionalResult opOneOptional(OneOptional p1, java.util.Map<String, String> context)
    {
        return _iceI_opOneOptionalAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpOneOptionalResult opOneOptional(java.util.Optional<OneOptional> p1)
    {
        return opOneOptional(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpOneOptionalResult opOneOptional(java.util.Optional<OneOptional> p1, java.util.Map<String, String> context)
    {
        return _iceI_opOneOptionalAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpOneOptionalResult> opOneOptionalAsync(OneOptional p1)
    {
        return _iceI_opOneOptionalAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpOneOptionalResult> opOneOptionalAsync(OneOptional p1, java.util.Map<String, String> context)
    {
        return _iceI_opOneOptionalAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpOneOptionalResult> _iceI_opOneOptionalAsync(OneOptional iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpOneOptionalResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOneOptional", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(2, iceP_p1);
                 }, istr -> {
                     Initial.OpOneOptionalResult ret = new Initial.OpOneOptionalResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpOneOptionalResult> opOneOptionalAsync(java.util.Optional<OneOptional> p1)
    {
        return _iceI_opOneOptionalAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpOneOptionalResult> opOneOptionalAsync(java.util.Optional<OneOptional> p1, java.util.Map<String, String> context)
    {
        return _iceI_opOneOptionalAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpOneOptionalResult> _iceI_opOneOptionalAsync(java.util.Optional<OneOptional> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpOneOptionalResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOneOptional", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(2, iceP_p1);
                 }, istr -> {
                     Initial.OpOneOptionalResult ret = new Initial.OpOneOptionalResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpMyInterfaceProxyResult opMyInterfaceProxy(MyInterfacePrx p1)
    {
        return opMyInterfaceProxy(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMyInterfaceProxyResult opMyInterfaceProxy(MyInterfacePrx p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpMyInterfaceProxyResult opMyInterfaceProxy(java.util.Optional<MyInterfacePrx> p1)
    {
        return opMyInterfaceProxy(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMyInterfaceProxyResult opMyInterfaceProxy(java.util.Optional<MyInterfacePrx> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(MyInterfacePrx p1)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(MyInterfacePrx p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyInterfaceProxyResult> _iceI_opMyInterfaceProxyAsync(MyInterfacePrx iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyInterfaceProxyResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMyInterfaceProxy", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMyInterfaceProxyResult ret = new Initial.OpMyInterfaceProxyResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(java.util.Optional<MyInterfacePrx> p1)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(java.util.Optional<MyInterfacePrx> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMyInterfaceProxyAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyInterfaceProxyResult> _iceI_opMyInterfaceProxyAsync(java.util.Optional<MyInterfacePrx> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMyInterfaceProxyResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMyInterfaceProxy", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMyInterfaceProxyResult ret = new Initial.OpMyInterfaceProxyResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpByteSeqResult opByteSeq(byte[] p1)
    {
        return opByteSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpByteSeqResult opByteSeq(byte[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpByteSeqResult opByteSeq(java.util.Optional<byte[]> p1)
    {
        return opByteSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpByteSeqResult opByteSeq(java.util.Optional<byte[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteSeqResult> opByteSeqAsync(byte[] p1)
    {
        return _iceI_opByteSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteSeqResult> opByteSeqAsync(byte[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpByteSeqResult ret = new Initial.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteSeqResult> opByteSeqAsync(java.util.Optional<byte[]> p1)
    {
        return _iceI_opByteSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpByteSeqResult> opByteSeqAsync(java.util.Optional<byte[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteSeqResult> _iceI_opByteSeqAsync(java.util.Optional<byte[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpByteSeqResult ret = new Initial.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpBoolSeqResult opBoolSeq(boolean[] p1)
    {
        return opBoolSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpBoolSeqResult opBoolSeq(boolean[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpBoolSeqResult opBoolSeq(java.util.Optional<boolean[]> p1)
    {
        return opBoolSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpBoolSeqResult opBoolSeq(java.util.Optional<boolean[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolSeqResult> opBoolSeqAsync(boolean[] p1)
    {
        return _iceI_opBoolSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolSeqResult> opBoolSeqAsync(boolean[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolSeqResult> _iceI_opBoolSeqAsync(boolean[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpBoolSeqResult ret = new Initial.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolSeqResult> opBoolSeqAsync(java.util.Optional<boolean[]> p1)
    {
        return _iceI_opBoolSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBoolSeqResult> opBoolSeqAsync(java.util.Optional<boolean[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolSeqResult> _iceI_opBoolSeqAsync(java.util.Optional<boolean[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpBoolSeqResult ret = new Initial.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpShortSeqResult opShortSeq(short[] p1)
    {
        return opShortSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpShortSeqResult opShortSeq(short[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpShortSeqResult opShortSeq(java.util.Optional<short[]> p1)
    {
        return opShortSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpShortSeqResult opShortSeq(java.util.Optional<short[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortSeqResult> opShortSeqAsync(short[] p1)
    {
        return _iceI_opShortSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortSeqResult> opShortSeqAsync(short[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpShortSeqResult ret = new Initial.OpShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortSeqResult> opShortSeqAsync(java.util.Optional<short[]> p1)
    {
        return _iceI_opShortSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpShortSeqResult> opShortSeqAsync(java.util.Optional<short[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortSeqResult> _iceI_opShortSeqAsync(java.util.Optional<short[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpShortSeqResult ret = new Initial.OpShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpIntSeqResult opIntSeq(int[] p1)
    {
        return opIntSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntSeqResult opIntSeq(int[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpIntSeqResult opIntSeq(java.util.Optional<int[]> p1)
    {
        return opIntSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntSeqResult opIntSeq(java.util.Optional<int[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntSeqResult> opIntSeqAsync(int[] p1)
    {
        return _iceI_opIntSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntSeqResult> opIntSeqAsync(int[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeIntSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntSeqResult ret = new Initial.OpIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntSeqResult> opIntSeqAsync(java.util.Optional<int[]> p1)
    {
        return _iceI_opIntSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntSeqResult> opIntSeqAsync(java.util.Optional<int[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntSeqResult> _iceI_opIntSeqAsync(java.util.Optional<int[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeIntSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntSeqResult ret = new Initial.OpIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpLongSeqResult opLongSeq(long[] p1)
    {
        return opLongSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpLongSeqResult opLongSeq(long[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpLongSeqResult opLongSeq(java.util.Optional<long[]> p1)
    {
        return opLongSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpLongSeqResult opLongSeq(java.util.Optional<long[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongSeqResult> opLongSeqAsync(long[] p1)
    {
        return _iceI_opLongSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongSeqResult> opLongSeqAsync(long[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLongSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpLongSeqResult ret = new Initial.OpLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongSeqResult> opLongSeqAsync(java.util.Optional<long[]> p1)
    {
        return _iceI_opLongSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpLongSeqResult> opLongSeqAsync(java.util.Optional<long[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongSeqResult> _iceI_opLongSeqAsync(java.util.Optional<long[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLongSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpLongSeqResult ret = new Initial.OpLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpFloatSeqResult opFloatSeq(float[] p1)
    {
        return opFloatSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFloatSeqResult opFloatSeq(float[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpFloatSeqResult opFloatSeq(java.util.Optional<float[]> p1)
    {
        return opFloatSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFloatSeqResult opFloatSeq(java.util.Optional<float[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatSeqResult> opFloatSeqAsync(float[] p1)
    {
        return _iceI_opFloatSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatSeqResult> opFloatSeqAsync(float[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloatSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpFloatSeqResult ret = new Initial.OpFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatSeqResult> opFloatSeqAsync(java.util.Optional<float[]> p1)
    {
        return _iceI_opFloatSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFloatSeqResult> opFloatSeqAsync(java.util.Optional<float[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatSeqResult> _iceI_opFloatSeqAsync(java.util.Optional<float[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloatSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpFloatSeqResult ret = new Initial.OpFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpDoubleSeqResult opDoubleSeq(double[] p1)
    {
        return opDoubleSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpDoubleSeqResult opDoubleSeq(double[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpDoubleSeqResult opDoubleSeq(java.util.Optional<double[]> p1)
    {
        return opDoubleSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpDoubleSeqResult opDoubleSeq(java.util.Optional<double[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleSeqResult> opDoubleSeqAsync(double[] p1)
    {
        return _iceI_opDoubleSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleSeqResult> opDoubleSeqAsync(double[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpDoubleSeqResult ret = new Initial.OpDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleSeqResult> opDoubleSeqAsync(java.util.Optional<double[]> p1)
    {
        return _iceI_opDoubleSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpDoubleSeqResult> opDoubleSeqAsync(java.util.Optional<double[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleSeqResult> _iceI_opDoubleSeqAsync(java.util.Optional<double[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpDoubleSeqResult ret = new Initial.OpDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpStringSeqResult opStringSeq(String[] p1)
    {
        return opStringSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringSeqResult opStringSeq(String[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpStringSeqResult opStringSeq(java.util.Optional<String[]> p1)
    {
        return opStringSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringSeqResult opStringSeq(java.util.Optional<String[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringSeqResult> opStringSeqAsync(String[] p1)
    {
        return _iceI_opStringSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringSeqResult> opStringSeqAsync(String[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringSeqResult> _iceI_opStringSeqAsync(String[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringSeqResult ret = new Initial.OpStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringSeqResult> opStringSeqAsync(java.util.Optional<String[]> p1)
    {
        return _iceI_opStringSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringSeqResult> opStringSeqAsync(java.util.Optional<String[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringSeqResult> _iceI_opStringSeqAsync(java.util.Optional<String[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringSeqResult ret = new Initial.OpStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpSmallStructSeqResult opSmallStructSeq(SmallStruct[] p1)
    {
        return opSmallStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructSeqResult opSmallStructSeq(SmallStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpSmallStructSeqResult opSmallStructSeq(java.util.Optional<SmallStruct[]> p1)
    {
        return opSmallStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructSeqResult opSmallStructSeq(java.util.Optional<SmallStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructSeqResult> opSmallStructSeqAsync(SmallStruct[] p1)
    {
        return _iceI_opSmallStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructSeqResult> opSmallStructSeqAsync(SmallStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructSeqResult> _iceI_opSmallStructSeqAsync(SmallStruct[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructSeqResult ret = new Initial.OpSmallStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructSeqResult> opSmallStructSeqAsync(java.util.Optional<SmallStruct[]> p1)
    {
        return _iceI_opSmallStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructSeqResult> opSmallStructSeqAsync(java.util.Optional<SmallStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructSeqResult> _iceI_opSmallStructSeqAsync(java.util.Optional<SmallStruct[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructSeqResult ret = new Initial.OpSmallStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpSmallStructListResult opSmallStructList(SmallStruct[] p1)
    {
        return opSmallStructList(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructListResult opSmallStructList(SmallStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructListAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpSmallStructListResult opSmallStructList(java.util.Optional<SmallStruct[]> p1)
    {
        return opSmallStructList(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSmallStructListResult opSmallStructList(java.util.Optional<SmallStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructListAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructListResult> opSmallStructListAsync(SmallStruct[] p1)
    {
        return _iceI_opSmallStructListAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructListResult> opSmallStructListAsync(SmallStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructListAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructListResult> _iceI_opSmallStructListAsync(SmallStruct[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStructList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStructListHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructListResult ret = new Initial.OpSmallStructListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructListResult> opSmallStructListAsync(java.util.Optional<SmallStruct[]> p1)
    {
        return _iceI_opSmallStructListAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSmallStructListResult> opSmallStructListAsync(java.util.Optional<SmallStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSmallStructListAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructListResult> _iceI_opSmallStructListAsync(java.util.Optional<SmallStruct[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSmallStructListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSmallStructList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStructListHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpSmallStructListResult ret = new Initial.OpSmallStructListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpFixedStructSeqResult opFixedStructSeq(FixedStruct[] p1)
    {
        return opFixedStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructSeqResult opFixedStructSeq(FixedStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpFixedStructSeqResult opFixedStructSeq(java.util.Optional<FixedStruct[]> p1)
    {
        return opFixedStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructSeqResult opFixedStructSeq(java.util.Optional<FixedStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructSeqResult> opFixedStructSeqAsync(FixedStruct[] p1)
    {
        return _iceI_opFixedStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructSeqResult> opFixedStructSeqAsync(FixedStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructSeqResult> _iceI_opFixedStructSeqAsync(FixedStruct[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructSeqResult ret = new Initial.OpFixedStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructSeqResult> opFixedStructSeqAsync(java.util.Optional<FixedStruct[]> p1)
    {
        return _iceI_opFixedStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructSeqResult> opFixedStructSeqAsync(java.util.Optional<FixedStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructSeqResult> _iceI_opFixedStructSeqAsync(java.util.Optional<FixedStruct[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructSeqResult ret = new Initial.OpFixedStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpFixedStructListResult opFixedStructList(FixedStruct[] p1)
    {
        return opFixedStructList(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructListResult opFixedStructList(FixedStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructListAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpFixedStructListResult opFixedStructList(java.util.Optional<FixedStruct[]> p1)
    {
        return opFixedStructList(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpFixedStructListResult opFixedStructList(java.util.Optional<FixedStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructListAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructListResult> opFixedStructListAsync(FixedStruct[] p1)
    {
        return _iceI_opFixedStructListAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructListResult> opFixedStructListAsync(FixedStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructListAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructListResult> _iceI_opFixedStructListAsync(FixedStruct[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStructList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStructListHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructListResult ret = new Initial.OpFixedStructListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructListResult> opFixedStructListAsync(java.util.Optional<FixedStruct[]> p1)
    {
        return _iceI_opFixedStructListAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpFixedStructListResult> opFixedStructListAsync(java.util.Optional<FixedStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opFixedStructListAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructListResult> _iceI_opFixedStructListAsync(java.util.Optional<FixedStruct[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpFixedStructListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedStructList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedStructListHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpFixedStructListResult ret = new Initial.OpFixedStructListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpVarStructSeqResult opVarStructSeq(VarStruct[] p1)
    {
        return opVarStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpVarStructSeqResult opVarStructSeq(VarStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructSeqAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpVarStructSeqResult opVarStructSeq(java.util.Optional<VarStruct[]> p1)
    {
        return opVarStructSeq(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpVarStructSeqResult opVarStructSeq(java.util.Optional<VarStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructSeqAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructSeqResult> opVarStructSeqAsync(VarStruct[] p1)
    {
        return _iceI_opVarStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructSeqResult> opVarStructSeqAsync(VarStruct[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructSeqResult> _iceI_opVarStructSeqAsync(VarStruct[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVarStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VarStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpVarStructSeqResult ret = new Initial.OpVarStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructSeqResult> opVarStructSeqAsync(java.util.Optional<VarStruct[]> p1)
    {
        return _iceI_opVarStructSeqAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpVarStructSeqResult> opVarStructSeqAsync(java.util.Optional<VarStruct[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opVarStructSeqAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructSeqResult> _iceI_opVarStructSeqAsync(java.util.Optional<VarStruct[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpVarStructSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVarStructSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VarStructSeqHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpVarStructSeqResult ret = new Initial.OpVarStructSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpSerializableResult opSerializable(byte[] p1)
    {
        return opSerializable(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSerializableResult opSerializable(byte[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSerializableAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpSerializableResult opSerializable(java.util.Optional<byte[]> p1)
    {
        return opSerializable(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpSerializableResult opSerializable(java.util.Optional<byte[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSerializableAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSerializableResult> opSerializableAsync(byte[] p1)
    {
        return _iceI_opSerializableAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSerializableResult> opSerializableAsync(byte[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opSerializableAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSerializableResult> _iceI_opSerializableAsync(byte[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSerializableResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSerializable", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpSerializableResult ret = new Initial.OpSerializableResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSerializableResult> opSerializableAsync(java.util.Optional<byte[]> p1)
    {
        return _iceI_opSerializableAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpSerializableResult> opSerializableAsync(java.util.Optional<byte[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opSerializableAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpSerializableResult> _iceI_opSerializableAsync(java.util.Optional<byte[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpSerializableResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSerializable", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpSerializableResult ret = new Initial.OpSerializableResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpIntIntDictResult opIntIntDict(java.util.Map<java.lang.Integer, java.lang.Integer> p1)
    {
        return opIntIntDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntIntDictResult opIntIntDict(java.util.Map<java.lang.Integer, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntIntDictAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpIntIntDictResult opIntIntDict(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1)
    {
        return opIntIntDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntIntDictResult opIntIntDict(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntIntDictAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntIntDictResult> opIntIntDictAsync(java.util.Map<java.lang.Integer, java.lang.Integer> p1)
    {
        return _iceI_opIntIntDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntIntDictResult> opIntIntDictAsync(java.util.Map<java.lang.Integer, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntIntDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntIntDictResult> _iceI_opIntIntDictAsync(java.util.Map<java.lang.Integer, java.lang.Integer> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntIntDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntIntDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntIntDictResult ret = new Initial.OpIntIntDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntIntDictResult> opIntIntDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1)
    {
        return _iceI_opIntIntDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntIntDictResult> opIntIntDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntIntDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntIntDictResult> _iceI_opIntIntDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntIntDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntIntDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntIntDictResult ret = new Initial.OpIntIntDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpStringIntDictResult opStringIntDict(java.util.Map<java.lang.String, java.lang.Integer> p1)
    {
        return opStringIntDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringIntDictResult opStringIntDict(java.util.Map<java.lang.String, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringIntDictAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpStringIntDictResult opStringIntDict(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1)
    {
        return opStringIntDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpStringIntDictResult opStringIntDict(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringIntDictAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringIntDictResult> opStringIntDictAsync(java.util.Map<java.lang.String, java.lang.Integer> p1)
    {
        return _iceI_opStringIntDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringIntDictResult> opStringIntDictAsync(java.util.Map<java.lang.String, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringIntDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringIntDictResult> _iceI_opStringIntDictAsync(java.util.Map<java.lang.String, java.lang.Integer> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringIntDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringIntDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringIntDictResult ret = new Initial.OpStringIntDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringIntDictResult> opStringIntDictAsync(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1)
    {
        return _iceI_opStringIntDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpStringIntDictResult> opStringIntDictAsync(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opStringIntDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringIntDictResult> _iceI_opStringIntDictAsync(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpStringIntDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringIntDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpStringIntDictResult ret = new Initial.OpStringIntDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpIntOneOptionalDictResult opIntOneOptionalDict(java.util.Map<java.lang.Integer, OneOptional> p1)
    {
        return opIntOneOptionalDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntOneOptionalDictResult opIntOneOptionalDict(java.util.Map<java.lang.Integer, OneOptional> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, context, true).waitForResponse();
    }

    default Initial.OpIntOneOptionalDictResult opIntOneOptionalDict(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1)
    {
        return opIntOneOptionalDict(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpIntOneOptionalDictResult opIntOneOptionalDict(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(java.util.Map<java.lang.Integer, OneOptional> p1)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(java.util.Map<java.lang.Integer, OneOptional> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntOneOptionalDictResult> _iceI_opIntOneOptionalDictAsync(java.util.Map<java.lang.Integer, OneOptional> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntOneOptionalDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntOneOptionalDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntOneOptionalDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntOneOptionalDictResult ret = new Initial.OpIntOneOptionalDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opIntOneOptionalDictAsync(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntOneOptionalDictResult> _iceI_opIntOneOptionalDictAsync(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpIntOneOptionalDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntOneOptionalDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntOneOptionalDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpIntOneOptionalDictResult ret = new Initial.OpIntOneOptionalDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default void opClassAndUnknownOptional(A p)
    {
        opClassAndUnknownOptional(p, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opClassAndUnknownOptional(A p, java.util.Map<String, String> context)
    {
        _iceI_opClassAndUnknownOptionalAsync(p, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p, java.util.Map<String, String> context)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opClassAndUnknownOptionalAsync(A iceP_p, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opClassAndUnknownOptional", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_p);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default G opG(G g)
    {
        return opG(g, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default G opG(G g, java.util.Map<String, String> context)
    {
        return _iceI_opGAsync(g, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<G> opGAsync(G g)
    {
        return _iceI_opGAsync(g, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<G> opGAsync(G g, java.util.Map<String, String> context)
    {
        return _iceI_opGAsync(g, context, false);
    }

    /**
     * @hidden
     * @param iceP_g -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<G> _iceI_opGAsync(G iceP_g, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<G> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opG", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_g);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.IceInternal.Holder<G> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, G.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default java.util.Optional<SmallStruct> opMStruct1()
    {
        return opMStruct1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<SmallStruct> opMStruct1(java.util.Map<String, String> context)
    {
        return _iceI_opMStruct1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<SmallStruct>> opMStruct1Async()
    {
        return _iceI_opMStruct1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<SmallStruct>> opMStruct1Async(java.util.Map<String, String> context)
    {
        return _iceI_opMStruct1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<SmallStruct>> _iceI_opMStruct1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<SmallStruct>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMStruct1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.Optional<SmallStruct> ret;
                     ret = SmallStruct.ice_read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default Initial.OpMStruct2Result opMStruct2(SmallStruct p1)
    {
        return opMStruct2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMStruct2Result opMStruct2(SmallStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opMStruct2Async(p1, context, true).waitForResponse();
    }

    default Initial.OpMStruct2Result opMStruct2(java.util.Optional<SmallStruct> p1)
    {
        return opMStruct2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMStruct2Result opMStruct2(java.util.Optional<SmallStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMStruct2Async(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMStruct2Result> opMStruct2Async(SmallStruct p1)
    {
        return _iceI_opMStruct2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMStruct2Result> opMStruct2Async(SmallStruct p1, java.util.Map<String, String> context)
    {
        return _iceI_opMStruct2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMStruct2Result> _iceI_opMStruct2Async(SmallStruct iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMStruct2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMStruct2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMStruct2Result ret = new Initial.OpMStruct2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMStruct2Result> opMStruct2Async(java.util.Optional<SmallStruct> p1)
    {
        return _iceI_opMStruct2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMStruct2Result> opMStruct2Async(java.util.Optional<SmallStruct> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMStruct2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMStruct2Result> _iceI_opMStruct2Async(java.util.Optional<SmallStruct> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMStruct2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMStruct2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SmallStruct.ice_write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMStruct2Result ret = new Initial.OpMStruct2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.Optional<String[]> opMSeq1()
    {
        return opMSeq1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<String[]> opMSeq1(java.util.Map<String, String> context)
    {
        return _iceI_opMSeq1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<String[]>> opMSeq1Async()
    {
        return _iceI_opMSeq1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<String[]>> opMSeq1Async(java.util.Map<String, String> context)
    {
        return _iceI_opMSeq1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<String[]>> _iceI_opMSeq1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<String[]>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMSeq1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.Optional<String[]> ret;
                     ret = istr.readStringSeq(1);
                     return ret;
                 });
        return f;
    }

    default Initial.OpMSeq2Result opMSeq2(String[] p1)
    {
        return opMSeq2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMSeq2Result opMSeq2(String[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opMSeq2Async(p1, context, true).waitForResponse();
    }

    default Initial.OpMSeq2Result opMSeq2(java.util.Optional<String[]> p1)
    {
        return opMSeq2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMSeq2Result opMSeq2(java.util.Optional<String[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMSeq2Async(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMSeq2Result> opMSeq2Async(String[] p1)
    {
        return _iceI_opMSeq2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMSeq2Result> opMSeq2Async(String[] p1, java.util.Map<String, String> context)
    {
        return _iceI_opMSeq2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMSeq2Result> _iceI_opMSeq2Async(String[] iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMSeq2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMSeq2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMSeq2Result ret = new Initial.OpMSeq2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMSeq2Result> opMSeq2Async(java.util.Optional<String[]> p1)
    {
        return _iceI_opMSeq2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMSeq2Result> opMSeq2Async(java.util.Optional<String[]> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMSeq2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMSeq2Result> _iceI_opMSeq2Async(java.util.Optional<String[]> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMSeq2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMSeq2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMSeq2Result ret = new Initial.OpMSeq2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> opMDict1()
    {
        return opMDict1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> opMDict1(java.util.Map<String, String> context)
    {
        return _iceI_opMDict1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>>> opMDict1Async()
    {
        return _iceI_opMDict1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>>> opMDict1Async(java.util.Map<String, String> context)
    {
        return _iceI_opMDict1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>>> _iceI_opMDict1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMDict1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> ret;
                     ret = StringIntDictHelper.read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default Initial.OpMDict2Result opMDict2(java.util.Map<java.lang.String, java.lang.Integer> p1)
    {
        return opMDict2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMDict2Result opMDict2(java.util.Map<java.lang.String, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMDict2Async(p1, context, true).waitForResponse();
    }

    default Initial.OpMDict2Result opMDict2(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1)
    {
        return opMDict2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMDict2Result opMDict2(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMDict2Async(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMDict2Result> opMDict2Async(java.util.Map<java.lang.String, java.lang.Integer> p1)
    {
        return _iceI_opMDict2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMDict2Result> opMDict2Async(java.util.Map<java.lang.String, java.lang.Integer> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMDict2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMDict2Result> _iceI_opMDict2Async(java.util.Map<java.lang.String, java.lang.Integer> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMDict2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMDict2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMDict2Result ret = new Initial.OpMDict2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMDict2Result> opMDict2Async(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1)
    {
        return _iceI_opMDict2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMDict2Result> opMDict2Async(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMDict2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMDict2Result> _iceI_opMDict2Async(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMDict2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMDict2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringIntDictHelper.write(ostr, 2, iceP_p1);
                 }, istr -> {
                     Initial.OpMDict2Result ret = new Initial.OpMDict2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.Optional<G> opMG1()
    {
        return opMG1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<G> opMG1(java.util.Map<String, String> context)
    {
        return _iceI_opMG1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<G>> opMG1Async()
    {
        return _iceI_opMG1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<G>> opMG1Async(java.util.Map<String, String> context)
    {
        return _iceI_opMG1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<G>> _iceI_opMG1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<G>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMG1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.IceInternal.Holder<java.util.Optional<G>> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(1, v -> ret.value = v, G.class);
                     return ret.value;
                 });
        return f;
    }

    default Initial.OpMG2Result opMG2(G p1)
    {
        return opMG2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMG2Result opMG2(G p1, java.util.Map<String, String> context)
    {
        return _iceI_opMG2Async(p1, context, true).waitForResponse();
    }

    default Initial.OpMG2Result opMG2(java.util.Optional<G> p1)
    {
        return opMG2(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMG2Result opMG2(java.util.Optional<G> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMG2Async(p1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMG2Result> opMG2Async(G p1)
    {
        return _iceI_opMG2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMG2Result> opMG2Async(G p1, java.util.Map<String, String> context)
    {
        return _iceI_opMG2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMG2Result> _iceI_opMG2Async(G iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMG2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMG2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMG2Result ret = new Initial.OpMG2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMG2Result> opMG2Async(java.util.Optional<G> p1)
    {
        return _iceI_opMG2Async(p1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMG2Result> opMG2Async(java.util.Optional<G> p1, java.util.Map<String, String> context)
    {
        return _iceI_opMG2Async(p1, context, false);
    }

    /**
     * @hidden
     * @param iceP_p1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Initial.OpMG2Result> _iceI_opMG2Async(java.util.Optional<G> iceP_p1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Initial.OpMG2Result> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMG2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(2, iceP_p1);
                 }, istr -> {
                     Initial.OpMG2Result ret = new Initial.OpMG2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean supportsRequiredParams()
    {
        return supportsRequiredParams(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsRequiredParams(java.util.Map<String, String> context)
    {
        return _iceI_supportsRequiredParamsAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsRequiredParamsAsync()
    {
        return _iceI_supportsRequiredParamsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsRequiredParamsAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsRequiredParamsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsRequiredParamsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsRequiredParams", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean supportsJavaSerializable()
    {
        return supportsJavaSerializable(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsJavaSerializable(java.util.Map<String, String> context)
    {
        return _iceI_supportsJavaSerializableAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsJavaSerializableAsync()
    {
        return _iceI_supportsJavaSerializableAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsJavaSerializableAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsJavaSerializableAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsJavaSerializableAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsJavaSerializable", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean supportsCsharpSerializable()
    {
        return supportsCsharpSerializable(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsCsharpSerializable(java.util.Map<String, String> context)
    {
        return _iceI_supportsCsharpSerializableAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsCsharpSerializableAsync()
    {
        return _iceI_supportsCsharpSerializableAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsCsharpSerializableAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsCsharpSerializableAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsCsharpSerializableAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsCsharpSerializable", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean supportsNullOptional()
    {
        return supportsNullOptional(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsNullOptional(java.util.Map<String, String> context)
    {
        return _iceI_supportsNullOptionalAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsNullOptionalAsync()
    {
        return _iceI_supportsNullOptionalAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsNullOptionalAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsNullOptionalAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsNullOptionalAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsNullOptional", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, InitialPrx.class, _InitialPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default InitialPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (InitialPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default InitialPrx ice_adapterId(String newAdapterId)
    {
        return (InitialPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default InitialPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (InitialPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default InitialPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (InitialPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default InitialPrx ice_invocationTimeout(int newTimeout)
    {
        return (InitialPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default InitialPrx ice_connectionCached(boolean newCache)
    {
        return (InitialPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default InitialPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (InitialPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default InitialPrx ice_secure(boolean b)
    {
        return (InitialPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default InitialPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (InitialPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default InitialPrx ice_preferSecure(boolean b)
    {
        return (InitialPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default InitialPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (InitialPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default InitialPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (InitialPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default InitialPrx ice_collocationOptimized(boolean b)
    {
        return (InitialPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default InitialPrx ice_twoway()
    {
        return (InitialPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default InitialPrx ice_oneway()
    {
        return (InitialPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default InitialPrx ice_batchOneway()
    {
        return (InitialPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default InitialPrx ice_datagram()
    {
        return (InitialPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default InitialPrx ice_batchDatagram()
    {
        return (InitialPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default InitialPrx ice_compress(boolean co)
    {
        return (InitialPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default InitialPrx ice_timeout(int t)
    {
        return (InitialPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default InitialPrx ice_connectionId(String connectionId)
    {
        return (InitialPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default InitialPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (InitialPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::Initial";
    }
}
