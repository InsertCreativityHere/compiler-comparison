//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Initial2Prx extends com.zeroc.Ice.ObjectPrx
{
    default void opClassAndUnknownOptional(A p, VarStruct ovs)
    {
        opClassAndUnknownOptional(p, ovs, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opClassAndUnknownOptional(A p, VarStruct ovs, java.util.Map<String, String> context)
    {
        _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, true).waitForResponse();
    }

    default void opClassAndUnknownOptional(A p, java.util.Optional<VarStruct> ovs)
    {
        opClassAndUnknownOptional(p, ovs, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opClassAndUnknownOptional(A p, java.util.Optional<VarStruct> ovs, java.util.Map<String, String> context)
    {
        _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p, VarStruct ovs)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, ovs, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p, VarStruct ovs, java.util.Map<String, String> context)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param iceP_ovs -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opClassAndUnknownOptionalAsync(A iceP_p, VarStruct iceP_ovs, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opClassAndUnknownOptional", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_p);
                     VarStruct.ice_write(ostr, 1, iceP_ovs);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p, java.util.Optional<VarStruct> ovs)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, ovs, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opClassAndUnknownOptionalAsync(A p, java.util.Optional<VarStruct> ovs, java.util.Map<String, String> context)
    {
        return _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param iceP_ovs -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opClassAndUnknownOptionalAsync(A iceP_p, java.util.Optional<VarStruct> iceP_ovs, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opClassAndUnknownOptional", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_p);
                     VarStruct.ice_write(ostr, 1, iceP_ovs);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default void opVoid(int a, String v)
    {
        opVoid(a, v, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opVoid(int a, String v, java.util.Map<String, String> context)
    {
        _iceI_opVoidAsync(a, v, context, true).waitForResponse();
    }

    default void opVoid(java.util.OptionalInt a, java.util.Optional<java.lang.String> v)
    {
        opVoid(a, v, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opVoid(java.util.OptionalInt a, java.util.Optional<java.lang.String> v, java.util.Map<String, String> context)
    {
        _iceI_opVoidAsync(a, v, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opVoidAsync(int a, String v)
    {
        return _iceI_opVoidAsync(a, v, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opVoidAsync(int a, String v, java.util.Map<String, String> context)
    {
        return _iceI_opVoidAsync(a, v, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_v -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opVoidAsync(int iceP_a, String iceP_v, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVoid", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_v);
                 }, null);
        return f;
    }

    default java.util.concurrent.CompletableFuture<Void> opVoidAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> v)
    {
        return _iceI_opVoidAsync(a, v, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opVoidAsync(java.util.OptionalInt a, java.util.Optional<java.lang.String> v, java.util.Map<String, String> context)
    {
        return _iceI_opVoidAsync(a, v, context, false);
    }

    /**
     * @hidden
     * @param iceP_a -
     * @param iceP_v -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opVoidAsync(java.util.OptionalInt iceP_a, java.util.Optional<java.lang.String> iceP_v, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVoid", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(1, iceP_a);
                     ostr.writeString(2, iceP_v);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link Initial2Prx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static Initial2Prx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _Initial2PrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Initial2Prx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Initial2Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _Initial2PrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Initial2Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static Initial2Prx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static Initial2Prx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _Initial2PrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static Initial2Prx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _Initial2PrxI(obj.ice_facet(facet));
    }

    @Override
    Initial2Prx ice_context(java.util.Map<String, String> newContext);

    @Override
    Initial2Prx ice_adapterId(String newAdapterId);

    @Override
    Initial2Prx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    Initial2Prx ice_locatorCacheTimeout(int newTimeout);

    @Override
    Initial2Prx ice_invocationTimeout(int newTimeout);

    @Override
    Initial2Prx ice_connectionCached(boolean newCache);

    @Override
    Initial2Prx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    Initial2Prx ice_secure(boolean b);

    @Override
    Initial2Prx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    Initial2Prx ice_preferSecure(boolean b);

    @Override
    Initial2Prx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    Initial2Prx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    Initial2Prx ice_collocationOptimized(boolean b);

    @Override
    Initial2Prx ice_twoway();

    @Override
    Initial2Prx ice_oneway();

    @Override
    Initial2Prx ice_batchOneway();

    @Override
    Initial2Prx ice_datagram();

    @Override
    Initial2Prx ice_batchDatagram();

    @Override
    Initial2Prx ice_compress(boolean co);

    @Override
    Initial2Prx ice_connectionId(String connectionId);

    @Override
    Initial2Prx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Initial2";
    }

    /**
     * @hidden
     **/
    @Override
    default Initial2Prx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _Initial2PrxI(ref);
    }
}
