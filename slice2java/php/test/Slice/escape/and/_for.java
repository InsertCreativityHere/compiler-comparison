//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package and;

public interface _for extends com.zeroc.Ice.Object
{
    array foreach(com.zeroc.Ice.Value _if, echo global, com.zeroc.Ice.Value require, functionPrx include, diePrx _return, com.zeroc.Ice.ObjectPrx isset, enddeclarePrx list, int _new, int _static, com.zeroc.Ice.Current current)
        throws endif,
               endwhile;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::and::for"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::and::for";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_foreach(_for obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_if = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<echo> icePP_global = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_require = new com.zeroc.IceInternal.Holder<>();
        functionPrx iceP_include;
        diePrx iceP_return;
        com.zeroc.Ice.ObjectPrx iceP_isset;
        enddeclarePrx iceP_list;
        int iceP_new;
        int iceP_static;
        istr.readValue(v -> icePP_if.value = v, com.zeroc.Ice.Value.class);
        istr.readValue(v -> icePP_global.value = v, echo.class);
        istr.readValue(v -> icePP_require.value = v, com.zeroc.Ice.Value.class);
        iceP_include = functionPrx.uncheckedCast(istr.readProxy());
        iceP_return = diePrx.uncheckedCast(istr.readProxy());
        iceP_isset = com.zeroc.Ice.ObjectPrx.uncheckedCast(istr.readProxy());
        iceP_list = enddeclarePrx.uncheckedCast(istr.readProxy());
        iceP_new = istr.readInt();
        iceP_static = istr.readInt();
        istr.readPendingValues();
        inS.endReadParams();
        com.zeroc.Ice.Value iceP_if = icePP_if.value;
        echo iceP_global = icePP_global.value;
        com.zeroc.Ice.Value iceP_require = icePP_require.value;
        array ret = obj.foreach(iceP_if, iceP_global, iceP_require, iceP_include, iceP_return, iceP_isset, iceP_list, iceP_new, iceP_static, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        array.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "foreach",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_foreach(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
