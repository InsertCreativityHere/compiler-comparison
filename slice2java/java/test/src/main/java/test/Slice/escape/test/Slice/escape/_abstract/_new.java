//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Slice.escape._abstract;

public interface _new extends com.zeroc.Ice.Object
{
    _assert _notify(_break _notifyAll, _else _null, finalizePrx _package, catchPrx _public, defaultPrx _return, int _static, int _strictfp, int _super, com.zeroc.Ice.Current current)
        throws _hashCode,
               _import;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::abstract::new"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::abstract::new";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_notify(_new obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        _break iceP_notifyAll;
        final com.zeroc.IceInternal.Holder<_else> icePP_null = new com.zeroc.IceInternal.Holder<>();
        finalizePrx iceP_package;
        catchPrx iceP_public;
        defaultPrx iceP_return;
        int iceP_static;
        int iceP_strictfp;
        int iceP_super;
        iceP_notifyAll = _break.ice_read(istr);
        istr.readValue(v -> icePP_null.value = v, _else.class);
        iceP_package = finalizePrx.uncheckedCast(istr.readProxy());
        iceP_public = catchPrx.uncheckedCast(istr.readProxy());
        iceP_return = defaultPrx.uncheckedCast(istr.readProxy());
        iceP_static = istr.readInt();
        iceP_strictfp = istr.readInt();
        iceP_super = istr.readInt();
        istr.readPendingValues();
        istr.endEncapsulation();
        _else iceP_null = icePP_null.value;
        _assert ret = obj._notify(iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        _assert.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "notify" -> _new._iceD_notify(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
