//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Slice.escape._abstract;

public interface newPrx extends com.zeroc.Ice.ObjectPrx
{
    default _assert _notify(_break _notifyAll, _else _null, finalizePrx _package, catchPrx _public, defaultPrx _return, int _static, int _strictfp, int _super)
        throws _import,
               _hashCode
    {
        return _notify(_notifyAll, _null, _package, _public, _return, _static, _strictfp, _super, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default _assert _notify(_break _notifyAll, _else _null, finalizePrx _package, catchPrx _public, defaultPrx _return, int _static, int _strictfp, int _super, java.util.Map<String, String> context)
        throws _import,
               _hashCode
    {
        try
        {
            return _iceI_notifyAsync(_notifyAll, _null, _package, _public, _return, _static, _strictfp, _super, context, true).waitForResponseOrUserEx();
        }
        catch(_import ex)
        {
            throw ex;
        }
        catch(_hashCode ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<_assert> notifyAsync(_break _notifyAll, _else _null, finalizePrx _package, catchPrx _public, defaultPrx _return, int _static, int _strictfp, int _super)
    {
        return _iceI_notifyAsync(_notifyAll, _null, _package, _public, _return, _static, _strictfp, _super, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<_assert> notifyAsync(_break _notifyAll, _else _null, finalizePrx _package, catchPrx _public, defaultPrx _return, int _static, int _strictfp, int _super, java.util.Map<String, String> context)
    {
        return _iceI_notifyAsync(_notifyAll, _null, _package, _public, _return, _static, _strictfp, _super, context, false);
    }

    /**
     * @hidden
     * @param iceP_notifyAll -
     * @param iceP_null -
     * @param iceP_package -
     * @param iceP_public -
     * @param iceP_return -
     * @param iceP_static -
     * @param iceP_strictfp -
     * @param iceP_super -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<_assert> _iceI_notifyAsync(_break iceP_notifyAll, _else iceP_null, finalizePrx iceP_package, catchPrx iceP_public, defaultPrx iceP_return, int iceP_static, int iceP_strictfp, int iceP_super, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<_assert> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "notify", null, sync, _iceE_notify);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     _break.ice_write(ostr, iceP_notifyAll);
                     ostr.writeValue(iceP_null);
                     ostr.writeProxy(iceP_package);
                     ostr.writeProxy(iceP_public);
                     ostr.writeProxy(iceP_return);
                     ostr.writeInt(iceP_static);
                     ostr.writeInt(iceP_strictfp);
                     ostr.writeInt(iceP_super);
                     ostr.writePendingValues();
                 }, istr -> {
                     _assert ret;
                     ret = _assert.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_notify =
    {
        _import.class,
        _hashCode.class
    };

    /**
     * Creates a new proxy that implements {@link newPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static newPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _newPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static newPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static newPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _newPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static newPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static newPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static newPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _newPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static newPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _newPrxI(obj.ice_facet(facet));
    }

    @Override
    newPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    newPrx ice_adapterId(String newAdapterId);

    @Override
    newPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    newPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    newPrx ice_invocationTimeout(int newTimeout);

    @Override
    newPrx ice_connectionCached(boolean newCache);

    @Override
    newPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    newPrx ice_secure(boolean b);

    @Override
    newPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    newPrx ice_preferSecure(boolean b);

    @Override
    newPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    newPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    newPrx ice_collocationOptimized(boolean b);

    @Override
    newPrx ice_twoway();

    @Override
    newPrx ice_oneway();

    @Override
    newPrx ice_batchOneway();

    @Override
    newPrx ice_datagram();

    @Override
    newPrx ice_batchDatagram();

    @Override
    newPrx ice_compress(boolean co);

    @Override
    newPrx ice_connectionId(String connectionId);

    @Override
    newPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::abstract::new";
    }

    /**
     * @hidden
     **/
    @Override
    default newPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _newPrxI(ref);
    }
}
