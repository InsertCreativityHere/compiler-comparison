//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.IceSSL.configuration.Test;

public interface ServerPrx extends com.zeroc.Ice.ObjectPrx
{
    default void noCert()
    {
        noCert(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void noCert(java.util.Map<String, String> context)
    {
        _iceI_noCertAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> noCertAsync()
    {
        return _iceI_noCertAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> noCertAsync(java.util.Map<String, String> context)
    {
        return _iceI_noCertAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_noCertAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "noCert", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void checkCert(String subjectDN, String issuerDN)
    {
        checkCert(subjectDN, issuerDN, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkCert(String subjectDN, String issuerDN, java.util.Map<String, String> context)
    {
        _iceI_checkCertAsync(subjectDN, issuerDN, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkCertAsync(String subjectDN, String issuerDN)
    {
        return _iceI_checkCertAsync(subjectDN, issuerDN, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkCertAsync(String subjectDN, String issuerDN, java.util.Map<String, String> context)
    {
        return _iceI_checkCertAsync(subjectDN, issuerDN, context, false);
    }

    /**
     * @hidden
     * @param iceP_subjectDN -
     * @param iceP_issuerDN -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkCertAsync(String iceP_subjectDN, String iceP_issuerDN, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkCert", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_subjectDN);
                     ostr.writeString(iceP_issuerDN);
                 }, null);
        return f;
    }

    default void checkCipher(String cipher)
    {
        checkCipher(cipher, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void checkCipher(String cipher, java.util.Map<String, String> context)
    {
        _iceI_checkCipherAsync(cipher, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> checkCipherAsync(String cipher)
    {
        return _iceI_checkCipherAsync(cipher, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> checkCipherAsync(String cipher, java.util.Map<String, String> context)
    {
        return _iceI_checkCipherAsync(cipher, context, false);
    }

    /**
     * @hidden
     * @param iceP_cipher -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_checkCipherAsync(String iceP_cipher, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkCipher", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_cipher);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link ServerPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static ServerPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return uncheckedCast(communicator.stringToProxy(proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _ServerPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ServerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ServerPrxI(obj.ice_facet(facet));
    }

    @Override
    ServerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ServerPrx ice_adapterId(String newAdapterId);

    @Override
    ServerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ServerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ServerPrx ice_invocationTimeout(int newTimeout);

    @Override
    ServerPrx ice_connectionCached(boolean newCache);

    @Override
    ServerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ServerPrx ice_secure(boolean b);

    @Override
    ServerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ServerPrx ice_preferSecure(boolean b);

    @Override
    ServerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ServerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ServerPrx ice_collocationOptimized(boolean b);

    @Override
    ServerPrx ice_twoway();

    @Override
    ServerPrx ice_oneway();

    @Override
    ServerPrx ice_batchOneway();

    @Override
    ServerPrx ice_datagram();

    @Override
    ServerPrx ice_batchDatagram();

    @Override
    ServerPrx ice_compress(boolean co);

    @Override
    ServerPrx ice_connectionId(String connectionId);

    @Override
    ServerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Server";
    }
}
