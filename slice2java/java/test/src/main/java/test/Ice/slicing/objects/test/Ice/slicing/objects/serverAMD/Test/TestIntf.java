//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.slicing.objects.serverAMD.Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation paramTest1.
     **/
    public static class ParamTest1Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest1Result()
        {
        }

        public ParamTest1Result(B p1, B p2)
        {
            this.p1 = p1;
            this.p2 = p2;
        }

        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest2.
     **/
    public static class ParamTest2Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest2Result()
        {
        }

        public ParamTest2Result(B p2, B p1)
        {
            this.p2 = p2;
            this.p1 = p1;
        }

        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest3.
     **/
    public static class ParamTest3Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest3Result()
        {
        }

        public ParamTest3Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest4.
     **/
    public static class ParamTest4Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest4Result()
        {
        }

        public ParamTest4Result(B returnValue, B p)
        {
            this.returnValue = returnValue;
            this.p = p;
        }

        public B returnValue;
        public B p;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest1.
     **/
    public static class ReturnTest1Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest1Result()
        {
        }

        public ReturnTest1Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest2.
     **/
    public static class ReturnTest2Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest2Result()
        {
        }

        public ReturnTest2Result(B returnValue, B p2, B p1)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
            this.p1 = p1;
        }

        public B returnValue;
        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation dictionaryTest.
     **/
    public static class DictionaryTestResult
    {
        /**
         * Default constructor.
         **/
        public DictionaryTestResult()
        {
        }

        public DictionaryTestResult(java.util.Map<java.lang.Integer, B> returnValue, java.util.Map<java.lang.Integer, B> bout)
        {
            this.returnValue = returnValue;
            this.bout = bout;
        }

        public java.util.Map<java.lang.Integer, B> returnValue;
        public java.util.Map<java.lang.Integer, B> bout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BDictHelper.write(ostr, this.bout);
            BDictHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.bout = BDictHelper.read(istr);
            returnValue = BDictHelper.read(istr);
        }
    }

    java.util.concurrent.CompletionStage<com.zeroc.Ice.Value> SBaseAsObjectAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBaseAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSKnownDerivedAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSUnknownDerivedAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSUnknownDerivedAsSBaseCompactAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<com.zeroc.Ice.Value> SUnknownAsObjectAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkSUnknownAsync(com.zeroc.Ice.Value o, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> oneElementCycleAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> twoElementCycleAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> D1AsBAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<D1> D1AsD1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> D2AsBAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest1Result> paramTest1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest2Result> paramTest2Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest3Result> paramTest3Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest4Result> paramTest4Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ReturnTest1Result> returnTest1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ReturnTest2Result> returnTest2Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> returnTest3Async(B p1, B p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SS3> sequenceTestAsync(SS1 p1, SS2 p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.DictionaryTestResult> dictionaryTestAsync(java.util.Map<java.lang.Integer, B> bin, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<PBase> exchangePBaseAsync(PBase pb, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknownAsPreservedAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknownAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknownAsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknownWithGraphAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknown2AsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknown2WithGraphAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<PNode> exchangePNodeAsync(PNode pn, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwBaseAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwDerivedAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwDerivedAsDerivedAsync(com.zeroc.Ice.Current current)
        throws DerivedException;

    java.util.concurrent.CompletionStage<Void> throwUnknownDerivedAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwPreservedExceptionAsync(com.zeroc.Ice.Current current)
        throws PreservedException;

    /**
     * Use of forward-declared class to verify that code is generated correctly.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with the result.
     **/
    java.util.concurrent.CompletionStage<Forward> useForwardAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBaseAsObject(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SBaseAsObjectAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBaseAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SBaseAsSBaseAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSKnownDerivedAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SBSKnownDerivedAsSBaseAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSKnownDerivedAsSBSKnownDerived(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SBSKnownDerivedAsSBSKnownDerivedAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSUnknownDerivedAsSBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SBSUnknownDerivedAsSBaseAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SBSUnknownDerivedAsSBaseCompact(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.CompactFormat);
        return inS.setResultFuture(obj.SBSUnknownDerivedAsSBaseCompactAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_SUnknownAsObject(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.SUnknownAsObjectAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkSUnknown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_o = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_o.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        inS.endReadParams();
        com.zeroc.Ice.Value iceP_o = icePP_o.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.checkSUnknownAsync(iceP_o, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_oneElementCycle(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.oneElementCycleAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_twoElementCycle(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.twoElementCycleAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D1AsB(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.D1AsBAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D1AsD1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.D1AsD1Async(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_D2AsB(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.D2AsBAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.paramTest1Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest2(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.paramTest2Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest3(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.paramTest3Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_paramTest4(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.paramTest4Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest1(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.returnTest1Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest2(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.returnTest2Async(current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnTest3(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<B> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<B> icePP_p2 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, B.class);
        istr.readValue(v -> icePP_p2.value = v, B.class);
        istr.readPendingValues();
        inS.endReadParams();
        B iceP_p1 = icePP_p1.value;
        B iceP_p2 = icePP_p2.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.returnTest3Async(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sequenceTest(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<SS1> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<SS2> icePP_p2 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, SS1.class);
        istr.readValue(v -> icePP_p2.value = v, SS2.class);
        istr.readPendingValues();
        inS.endReadParams();
        SS1 iceP_p1 = icePP_p1.value;
        SS2 iceP_p2 = icePP_p2.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.sequenceTestAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                SS3.ice_write(ostr, ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dictionaryTest(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Integer, B> iceP_bin;
        iceP_bin = BDictHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.dictionaryTestAsync(iceP_bin, current), (ostr, ret) ->
            {
                ret.write(ostr);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_exchangePBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<PBase> icePP_pb = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_pb.value = v, PBase.class);
        istr.readPendingValues();
        inS.endReadParams();
        PBase iceP_pb = icePP_pb.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.exchangePBaseAsync(iceP_pb, current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknownAsPreserved(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.PBSUnknownAsPreservedAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.checkPBSUnknownAsync(iceP_p, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknownAsPreservedWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.PBSUnknownAsPreservedWithGraphAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknownWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.checkPBSUnknownWithGraphAsync(iceP_p, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_PBSUnknown2AsPreservedWithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.PBSUnknown2AsPreservedWithGraphAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkPBSUnknown2WithGraph(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Preserved> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        inS.endReadParams();
        Preserved iceP_p = icePP_p.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.checkPBSUnknown2WithGraphAsync(iceP_p, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_exchangePNode(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<PNode> icePP_pn = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_pn.value = v, PNode.class);
        istr.readPendingValues();
        inS.endReadParams();
        PNode iceP_pn = icePP_pn.value;
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.exchangePNodeAsync(iceP_pn, current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwBaseAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwBaseAsBaseAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwDerivedAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwDerivedAsBaseAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwDerivedAsDerived(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwDerivedAsDerivedAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwUnknownDerivedAsBase(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwUnknownDerivedAsBaseAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_throwPreservedException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.throwPreservedExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_useForward(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.useForwardAsync(current), (ostr, ret) ->
            {
                ostr.writeValue(ret);
                ostr.writePendingValues();
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        inS.setFormat(com.zeroc.Ice.FormatType.SlicedFormat);
        return inS.setResultFuture(obj.shutdownAsync(current));
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "D1AsB",
        "D1AsD1",
        "D2AsB",
        "PBSUnknown2AsPreservedWithGraph",
        "PBSUnknownAsPreserved",
        "PBSUnknownAsPreservedWithGraph",
        "SBSKnownDerivedAsSBSKnownDerived",
        "SBSKnownDerivedAsSBase",
        "SBSUnknownDerivedAsSBase",
        "SBSUnknownDerivedAsSBaseCompact",
        "SBaseAsObject",
        "SBaseAsSBase",
        "SUnknownAsObject",
        "checkPBSUnknown",
        "checkPBSUnknown2WithGraph",
        "checkPBSUnknownWithGraph",
        "checkSUnknown",
        "dictionaryTest",
        "exchangePBase",
        "exchangePNode",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "oneElementCycle",
        "paramTest1",
        "paramTest2",
        "paramTest3",
        "paramTest4",
        "returnTest1",
        "returnTest2",
        "returnTest3",
        "sequenceTest",
        "shutdown",
        "throwBaseAsBase",
        "throwDerivedAsBase",
        "throwDerivedAsDerived",
        "throwPreservedException",
        "throwUnknownDerivedAsBase",
        "twoElementCycle",
        "useForward"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_D1AsB(this, in, current);
            }
            case 1:
            {
                return _iceD_D1AsD1(this, in, current);
            }
            case 2:
            {
                return _iceD_D2AsB(this, in, current);
            }
            case 3:
            {
                return _iceD_PBSUnknown2AsPreservedWithGraph(this, in, current);
            }
            case 4:
            {
                return _iceD_PBSUnknownAsPreserved(this, in, current);
            }
            case 5:
            {
                return _iceD_PBSUnknownAsPreservedWithGraph(this, in, current);
            }
            case 6:
            {
                return _iceD_SBSKnownDerivedAsSBSKnownDerived(this, in, current);
            }
            case 7:
            {
                return _iceD_SBSKnownDerivedAsSBase(this, in, current);
            }
            case 8:
            {
                return _iceD_SBSUnknownDerivedAsSBase(this, in, current);
            }
            case 9:
            {
                return _iceD_SBSUnknownDerivedAsSBaseCompact(this, in, current);
            }
            case 10:
            {
                return _iceD_SBaseAsObject(this, in, current);
            }
            case 11:
            {
                return _iceD_SBaseAsSBase(this, in, current);
            }
            case 12:
            {
                return _iceD_SUnknownAsObject(this, in, current);
            }
            case 13:
            {
                return _iceD_checkPBSUnknown(this, in, current);
            }
            case 14:
            {
                return _iceD_checkPBSUnknown2WithGraph(this, in, current);
            }
            case 15:
            {
                return _iceD_checkPBSUnknownWithGraph(this, in, current);
            }
            case 16:
            {
                return _iceD_checkSUnknown(this, in, current);
            }
            case 17:
            {
                return _iceD_dictionaryTest(this, in, current);
            }
            case 18:
            {
                return _iceD_exchangePBase(this, in, current);
            }
            case 19:
            {
                return _iceD_exchangePNode(this, in, current);
            }
            case 20:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 21:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 22:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 23:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 24:
            {
                return _iceD_oneElementCycle(this, in, current);
            }
            case 25:
            {
                return _iceD_paramTest1(this, in, current);
            }
            case 26:
            {
                return _iceD_paramTest2(this, in, current);
            }
            case 27:
            {
                return _iceD_paramTest3(this, in, current);
            }
            case 28:
            {
                return _iceD_paramTest4(this, in, current);
            }
            case 29:
            {
                return _iceD_returnTest1(this, in, current);
            }
            case 30:
            {
                return _iceD_returnTest2(this, in, current);
            }
            case 31:
            {
                return _iceD_returnTest3(this, in, current);
            }
            case 32:
            {
                return _iceD_sequenceTest(this, in, current);
            }
            case 33:
            {
                return _iceD_shutdown(this, in, current);
            }
            case 34:
            {
                return _iceD_throwBaseAsBase(this, in, current);
            }
            case 35:
            {
                return _iceD_throwDerivedAsBase(this, in, current);
            }
            case 36:
            {
                return _iceD_throwDerivedAsDerived(this, in, current);
            }
            case 37:
            {
                return _iceD_throwPreservedException(this, in, current);
            }
            case 38:
            {
                return _iceD_throwUnknownDerivedAsBase(this, in, current);
            }
            case 39:
            {
                return _iceD_twoElementCycle(this, in, current);
            }
            case 40:
            {
                return _iceD_useForward(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
