//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.scope.Test;

public interface I extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opS.
     **/
    public static class OpSResult
    {
        /**
         * Default constructor.
         **/
        public OpSResult()
        {
        }

        public OpSResult(S returnValue, S s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public S returnValue;
        public S s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            S.ice_write(ostr, this.s2);
            S.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = S.ice_read(istr);
            returnValue = S.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opSSeq.
     **/
    public static class OpSSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpSSeqResult()
        {
        }

        public OpSSeqResult(S[] returnValue, S[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public S[] returnValue;
        public S[] s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SSeqHelper.write(ostr, this.s2);
            SSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = SSeqHelper.read(istr);
            returnValue = SSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSMap.
     **/
    public static class OpSMapResult
    {
        /**
         * Default constructor.
         **/
        public OpSMapResult()
        {
        }

        public OpSMapResult(java.util.Map<java.lang.String, S> returnValue, java.util.Map<java.lang.String, S> s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public java.util.Map<java.lang.String, S> returnValue;
        public java.util.Map<java.lang.String, S> s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SMapHelper.write(ostr, this.s2);
            SMapHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = SMapHelper.read(istr);
            returnValue = SMapHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opC.
     **/
    public static class OpCResult
    {
        /**
         * Default constructor.
         **/
        public OpCResult()
        {
        }

        public OpCResult(C returnValue, C c2)
        {
            this.returnValue = returnValue;
            this.c2 = c2;
        }

        public C returnValue;
        public C c2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.c2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.c2 = v, C.class);
            istr.readValue(v -> returnValue = v, C.class);
        }
    }

    /**
     * Holds the result of operation opCSeq.
     **/
    public static class OpCSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpCSeqResult()
        {
        }

        public OpCSeqResult(C[] returnValue, C[] c2)
        {
            this.returnValue = returnValue;
            this.c2 = c2;
        }

        public C[] returnValue;
        public C[] c2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CSeqHelper.write(ostr, this.c2);
            CSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.c2 = CSeqHelper.read(istr);
            returnValue = CSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCMap.
     **/
    public static class OpCMapResult
    {
        /**
         * Default constructor.
         **/
        public OpCMapResult()
        {
        }

        public OpCMapResult(java.util.Map<java.lang.String, C> returnValue, java.util.Map<java.lang.String, C> c2)
        {
            this.returnValue = returnValue;
            this.c2 = c2;
        }

        public java.util.Map<java.lang.String, C> returnValue;
        public java.util.Map<java.lang.String, C> c2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CMapHelper.write(ostr, this.c2);
            CMapHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.c2 = CMapHelper.read(istr);
            returnValue = CMapHelper.read(istr);
        }
    }

    I.OpSResult opS(S s1, com.zeroc.Ice.Current current);

    I.OpSSeqResult opSSeq(S[] s1, com.zeroc.Ice.Current current);

    I.OpSMapResult opSMap(java.util.Map<java.lang.String, S> s1, com.zeroc.Ice.Current current);

    I.OpCResult opC(C c1, com.zeroc.Ice.Current current);

    I.OpCSeqResult opCSeq(C[] c1, com.zeroc.Ice.Current current);

    I.OpCMapResult opCMap(java.util.Map<java.lang.String, C> c1, com.zeroc.Ice.Current current);

    E1 opE1(E1 E1, com.zeroc.Ice.Current current);

    S1 opS1(S1 S1, com.zeroc.Ice.Current current);

    C1 opC1(C1 C1, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::I"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::I";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opS(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S iceP_s1;
        iceP_s1 = S.ice_read(istr);
        istr.endEncapsulation();
        I.OpSResult ret = obj.opS(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSSeq(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_s1;
        iceP_s1 = SSeqHelper.read(istr);
        istr.endEncapsulation();
        I.OpSSeqResult ret = obj.opSSeq(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSMap(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.String, S> iceP_s1;
        iceP_s1 = SMapHelper.read(istr);
        istr.endEncapsulation();
        I.OpSMapResult ret = obj.opSMap(iceP_s1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opC(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.IceInternal.Holder<C> icePP_c1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_c1.value = v, C.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        C iceP_c1 = icePP_c1.value;
        I.OpCResult ret = obj.opC(iceP_c1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCSeq(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        C[] iceP_c1;
        iceP_c1 = CSeqHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        I.OpCSeqResult ret = obj.opCSeq(iceP_c1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCMap(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.String, C> iceP_c1;
        iceP_c1 = CMapHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        I.OpCMapResult ret = obj.opCMap(iceP_c1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opE1(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        E1 iceP_E1;
        iceP_E1 = E1.ice_read(istr);
        istr.endEncapsulation();
        E1 ret = obj.opE1(iceP_E1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        E1.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opS1(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S1 iceP_S1;
        iceP_S1 = S1.ice_read(istr);
        istr.endEncapsulation();
        S1 ret = obj.opS1(iceP_S1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        S1.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opC1(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.IceInternal.Holder<C1> icePP_C1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_C1.value = v, C1.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        C1 iceP_C1 = icePP_C1.value;
        C1 ret = obj.opC1(iceP_C1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ostr.writeValue(ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(I obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opS" -> I._iceD_opS(this, request);
            case "opSSeq" -> I._iceD_opSSeq(this, request);
            case "opSMap" -> I._iceD_opSMap(this, request);
            case "opC" -> I._iceD_opC(this, request);
            case "opCSeq" -> I._iceD_opCSeq(this, request);
            case "opCMap" -> I._iceD_opCMap(this, request);
            case "opE1" -> I._iceD_opE1(this, request);
            case "opS1" -> I._iceD_opS1(this, request);
            case "opC1" -> I._iceD_opC1(this, request);
            case "shutdown" -> I._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
