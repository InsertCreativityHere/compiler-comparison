//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.objects.Test;

public interface InitialPrx extends com.zeroc.Ice.ObjectPrx
{
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default B getB1()
    {
        return getB1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B getB1(java.util.Map<String, String> context)
    {
        return _iceI_getB1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> getB1Async()
    {
        return _iceI_getB1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> getB1Async(java.util.Map<String, String> context)
    {
        return _iceI_getB1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<B> _iceI_getB1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<B> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getB1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<B> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default B getB2()
    {
        return getB2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B getB2(java.util.Map<String, String> context)
    {
        return _iceI_getB2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> getB2Async()
    {
        return _iceI_getB2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> getB2Async(java.util.Map<String, String> context)
    {
        return _iceI_getB2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<B> _iceI_getB2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<B> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getB2", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<B> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default C getC()
    {
        return getC(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default C getC(java.util.Map<String, String> context)
    {
        return _iceI_getCAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<C> getCAsync()
    {
        return _iceI_getCAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<C> getCAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<C> _iceI_getCAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<C> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getC", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<C> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, C.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default D getD()
    {
        return getD(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default D getD(java.util.Map<String, String> context)
    {
        return _iceI_getDAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<D> getDAsync()
    {
        return _iceI_getDAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<D> getDAsync(java.util.Map<String, String> context)
    {
        return _iceI_getDAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<D> _iceI_getDAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<D> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getD", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<D> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, D.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default E getE()
    {
        return getE(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default E getE(java.util.Map<String, String> context)
    {
        return _iceI_getEAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<E> getEAsync()
    {
        return _iceI_getEAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<E> getEAsync(java.util.Map<String, String> context)
    {
        return _iceI_getEAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<E> _iceI_getEAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<E> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getE", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<E> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, E.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default F getF()
    {
        return getF(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default F getF(java.util.Map<String, String> context)
    {
        return _iceI_getFAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<F> getFAsync()
    {
        return _iceI_getFAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<F> getFAsync(java.util.Map<String, String> context)
    {
        return _iceI_getFAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<F> _iceI_getFAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<F> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getF", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<F> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, F.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void setRecursive(Recursive p)
    {
        setRecursive(p, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setRecursive(Recursive p, java.util.Map<String, String> context)
    {
        _iceI_setRecursiveAsync(p, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> setRecursiveAsync(Recursive p)
    {
        return _iceI_setRecursiveAsync(p, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setRecursiveAsync(Recursive p, java.util.Map<String, String> context)
    {
        return _iceI_setRecursiveAsync(p, context, false);
    }

    /**
     * @hidden
     * @param iceP_p -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setRecursiveAsync(Recursive iceP_p, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setRecursive", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_p);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default void setCycle(Recursive r)
    {
        setCycle(r, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setCycle(Recursive r, java.util.Map<String, String> context)
    {
        _iceI_setCycleAsync(r, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> setCycleAsync(Recursive r)
    {
        return _iceI_setCycleAsync(r, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setCycleAsync(Recursive r, java.util.Map<String, String> context)
    {
        return _iceI_setCycleAsync(r, context, false);
    }

    /**
     * @hidden
     * @param iceP_r -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setCycleAsync(Recursive iceP_r, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setCycle", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_r);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default boolean acceptsClassCycles()
    {
        return acceptsClassCycles(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean acceptsClassCycles(java.util.Map<String, String> context)
    {
        return _iceI_acceptsClassCyclesAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> acceptsClassCyclesAsync()
    {
        return _iceI_acceptsClassCyclesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> acceptsClassCyclesAsync(java.util.Map<String, String> context)
    {
        return _iceI_acceptsClassCyclesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Boolean> _iceI_acceptsClassCyclesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.Ice.OutgoingAsync<>(this, "acceptsClassCycles", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default B getMB()
    {
        return getMB(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B getMB(java.util.Map<String, String> context)
    {
        return _iceI_getMBAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> getMBAsync()
    {
        return _iceI_getMBAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> getMBAsync(java.util.Map<String, String> context)
    {
        return _iceI_getMBAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<B> _iceI_getMBAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<B> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getMB", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<B> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default B getAMDMB()
    {
        return getAMDMB(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default B getAMDMB(java.util.Map<String, String> context)
    {
        return _iceI_getAMDMBAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<B> getAMDMBAsync()
    {
        return _iceI_getAMDMBAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<B> getAMDMBAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAMDMBAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<B> _iceI_getAMDMBAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<B> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getAMDMB", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<B> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, B.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Initial.GetAllResult getAll()
    {
        return getAll(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.GetAllResult getAll(java.util.Map<String, String> context)
    {
        return _iceI_getAllAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.GetAllResult> getAllAsync()
    {
        return _iceI_getAllAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.GetAllResult> getAllAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAllAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.GetAllResult> _iceI_getAllAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.GetAllResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getAll", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     Initial.GetAllResult ret = new Initial.GetAllResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default K getK()
    {
        return getK(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default K getK(java.util.Map<String, String> context)
    {
        return _iceI_getKAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<K> getKAsync()
    {
        return _iceI_getKAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<K> getKAsync(java.util.Map<String, String> context)
    {
        return _iceI_getKAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<K> _iceI_getKAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<K> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getK", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<K> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, K.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default Initial.OpValueResult opValue(com.zeroc.Ice.Value v1)
    {
        return opValue(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpValueResult opValue(com.zeroc.Ice.Value v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueResult> opValueAsync(com.zeroc.Ice.Value v1)
    {
        return _iceI_opValueAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueResult> opValueAsync(com.zeroc.Ice.Value v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpValueResult> _iceI_opValueAsync(com.zeroc.Ice.Value iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpValueResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opValue", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_v1);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpValueResult ret = new Initial.OpValueResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default Initial.OpValueSeqResult opValueSeq(com.zeroc.Ice.Value[] v1)
    {
        return opValueSeq(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpValueSeqResult opValueSeq(com.zeroc.Ice.Value[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueSeqAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueSeqResult> opValueSeqAsync(com.zeroc.Ice.Value[] v1)
    {
        return _iceI_opValueSeqAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueSeqResult> opValueSeqAsync(com.zeroc.Ice.Value[] v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueSeqAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpValueSeqResult> _iceI_opValueSeqAsync(com.zeroc.Ice.Value[] iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpValueSeqResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opValueSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ValueSeqHelper.write(ostr, iceP_v1);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpValueSeqResult ret = new Initial.OpValueSeqResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default Initial.OpValueMapResult opValueMap(java.util.Map<java.lang.String, com.zeroc.Ice.Value> v1)
    {
        return opValueMap(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpValueMapResult opValueMap(java.util.Map<java.lang.String, com.zeroc.Ice.Value> v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueMapAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueMapResult> opValueMapAsync(java.util.Map<java.lang.String, com.zeroc.Ice.Value> v1)
    {
        return _iceI_opValueMapAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpValueMapResult> opValueMapAsync(java.util.Map<java.lang.String, com.zeroc.Ice.Value> v1, java.util.Map<String, String> context)
    {
        return _iceI_opValueMapAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpValueMapResult> _iceI_opValueMapAsync(java.util.Map<java.lang.String, com.zeroc.Ice.Value> iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpValueMapResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opValueMap", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ValueMapHelper.write(ostr, iceP_v1);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpValueMapResult ret = new Initial.OpValueMapResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default D1 getD1(D1 d1)
    {
        return getD1(d1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default D1 getD1(D1 d1, java.util.Map<String, String> context)
    {
        return _iceI_getD1Async(d1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<D1> getD1Async(D1 d1)
    {
        return _iceI_getD1Async(d1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<D1> getD1Async(D1 d1, java.util.Map<String, String> context)
    {
        return _iceI_getD1Async(d1, context, false);
    }

    /**
     * @hidden
     * @param iceP_d1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<D1> _iceI_getD1Async(D1 iceP_d1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<D1> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getD1", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_d1);
                     ostr.writePendingValues();
                 }, istr -> {
                     final com.zeroc.Ice.Holder<D1> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, D1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwEDerived()
        throws EDerived
    {
        throwEDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwEDerived(java.util.Map<String, String> context)
        throws EDerived
    {
        try
        {
            _iceI_throwEDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(EDerived ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwEDerivedAsync()
    {
        return _iceI_throwEDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwEDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwEDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwEDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwEDerived", null, sync, _iceE_throwEDerived);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwEDerived =
    {
        EDerived.class
    };

    default void setG(G theG)
    {
        setG(theG, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void setG(G theG, java.util.Map<String, String> context)
    {
        _iceI_setGAsync(theG, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> setGAsync(G theG)
    {
        return _iceI_setGAsync(theG, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> setGAsync(G theG, java.util.Map<String, String> context)
    {
        return _iceI_setGAsync(theG, context, false);
    }

    /**
     * @hidden
     * @param iceP_theG -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setGAsync(G iceP_theG, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setG", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeValue(iceP_theG);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    default Initial.OpBaseSeqResult opBaseSeq(Base[] inSeq)
    {
        return opBaseSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpBaseSeqResult opBaseSeq(Base[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBaseSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBaseSeqResult> opBaseSeqAsync(Base[] inSeq)
    {
        return _iceI_opBaseSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpBaseSeqResult> opBaseSeqAsync(Base[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBaseSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpBaseSeqResult> _iceI_opBaseSeqAsync(Base[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpBaseSeqResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opBaseSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BaseSeqHelper.write(ostr, iceP_inSeq);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpBaseSeqResult ret = new Initial.OpBaseSeqResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default Compact getCompact()
    {
        return getCompact(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Compact getCompact(java.util.Map<String, String> context)
    {
        return _iceI_getCompactAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Compact> getCompactAsync()
    {
        return _iceI_getCompactAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Compact> getCompactAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCompactAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Compact> _iceI_getCompactAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Compact> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getCompact", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<Compact> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, Compact.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default test.Ice.objects.Test.Inner.A getInnerA()
    {
        return getInnerA(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.objects.Test.Inner.A getInnerA(java.util.Map<String, String> context)
    {
        return _iceI_getInnerAAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.objects.Test.Inner.A> getInnerAAsync()
    {
        return _iceI_getInnerAAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.objects.Test.Inner.A> getInnerAAsync(java.util.Map<String, String> context)
    {
        return _iceI_getInnerAAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.objects.Test.Inner.A> _iceI_getInnerAAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.objects.Test.Inner.A> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getInnerA", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.objects.Test.Inner.A> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.objects.Test.Inner.A.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default test.Ice.objects.Test.Inner.Sub.A getInnerSubA()
    {
        return getInnerSubA(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.objects.Test.Inner.Sub.A getInnerSubA(java.util.Map<String, String> context)
    {
        return _iceI_getInnerSubAAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.objects.Test.Inner.Sub.A> getInnerSubAAsync()
    {
        return _iceI_getInnerSubAAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.objects.Test.Inner.Sub.A> getInnerSubAAsync(java.util.Map<String, String> context)
    {
        return _iceI_getInnerSubAAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.objects.Test.Inner.Sub.A> _iceI_getInnerSubAAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.objects.Test.Inner.Sub.A> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getInnerSubA", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.objects.Test.Inner.Sub.A> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.objects.Test.Inner.Sub.A.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwInnerEx()
        throws test.Ice.objects.Test.Inner.Ex
    {
        throwInnerEx(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwInnerEx(java.util.Map<String, String> context)
        throws test.Ice.objects.Test.Inner.Ex
    {
        try
        {
            _iceI_throwInnerExAsync(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.objects.Test.Inner.Ex ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwInnerExAsync()
    {
        return _iceI_throwInnerExAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwInnerExAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwInnerExAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwInnerExAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwInnerEx", null, sync, _iceE_throwInnerEx);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwInnerEx =
    {
        test.Ice.objects.Test.Inner.Ex.class
    };

    default void throwInnerSubEx()
        throws test.Ice.objects.Test.Inner.Sub.Ex
    {
        throwInnerSubEx(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwInnerSubEx(java.util.Map<String, String> context)
        throws test.Ice.objects.Test.Inner.Sub.Ex
    {
        try
        {
            _iceI_throwInnerSubExAsync(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.objects.Test.Inner.Sub.Ex ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwInnerSubExAsync()
    {
        return _iceI_throwInnerSubExAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwInnerSubExAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwInnerSubExAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwInnerSubExAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwInnerSubEx", null, sync, _iceE_throwInnerSubEx);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwInnerSubEx =
    {
        test.Ice.objects.Test.Inner.Sub.Ex.class
    };

    default Initial.OpMResult opM(M v1)
    {
        return opM(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpMResult opM(M v1, java.util.Map<String, String> context)
    {
        return _iceI_opMAsync(v1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMResult> opMAsync(M v1)
    {
        return _iceI_opMAsync(v1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpMResult> opMAsync(M v1, java.util.Map<String, String> context)
    {
        return _iceI_opMAsync(v1, context, false);
    }

    /**
     * @hidden
     * @param iceP_v1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpMResult> _iceI_opMAsync(M iceP_v1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpMResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opM", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_v1);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpMResult ret = new Initial.OpMResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default Initial.OpF1Result opF1(F1 f11)
    {
        return opF1(f11, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpF1Result opF1(F1 f11, java.util.Map<String, String> context)
    {
        return _iceI_opF1Async(f11, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF1Result> opF1Async(F1 f11)
    {
        return _iceI_opF1Async(f11, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF1Result> opF1Async(F1 f11, java.util.Map<String, String> context)
    {
        return _iceI_opF1Async(f11, context, false);
    }

    /**
     * @hidden
     * @param iceP_f11 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpF1Result> _iceI_opF1Async(F1 iceP_f11, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpF1Result> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opF1", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_f11);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpF1Result ret = new Initial.OpF1Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default Initial.OpF2Result opF2(F2Prx f21)
    {
        return opF2(f21, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpF2Result opF2(F2Prx f21, java.util.Map<String, String> context)
    {
        return _iceI_opF2Async(f21, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF2Result> opF2Async(F2Prx f21)
    {
        return _iceI_opF2Async(f21, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF2Result> opF2Async(F2Prx f21, java.util.Map<String, String> context)
    {
        return _iceI_opF2Async(f21, context, false);
    }

    /**
     * @hidden
     * @param iceP_f21 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpF2Result> _iceI_opF2Async(F2Prx iceP_f21, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpF2Result> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opF2", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_f21);
                 }, istr -> {
                     Initial.OpF2Result ret = new Initial.OpF2Result();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default Initial.OpF3Result opF3(F3 f31)
    {
        return opF3(f31, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default Initial.OpF3Result opF3(F3 f31, java.util.Map<String, String> context)
    {
        return _iceI_opF3Async(f31, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF3Result> opF3Async(F3 f31)
    {
        return _iceI_opF3Async(f31, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Initial.OpF3Result> opF3Async(F3 f31, java.util.Map<String, String> context)
    {
        return _iceI_opF3Async(f31, context, false);
    }

    /**
     * @hidden
     * @param iceP_f31 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Initial.OpF3Result> _iceI_opF3Async(F3 iceP_f31, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Initial.OpF3Result> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opF3", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_f31);
                     ostr.writePendingValues();
                 }, istr -> {
                     Initial.OpF3Result ret = new Initial.OpF3Result();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default boolean hasF3()
    {
        return hasF3(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean hasF3(java.util.Map<String, String> context)
    {
        return _iceI_hasF3Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> hasF3Async()
    {
        return _iceI_hasF3Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> hasF3Async(java.util.Map<String, String> context)
    {
        return _iceI_hasF3Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Boolean> _iceI_hasF3Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.Ice.OutgoingAsync<>(this, "hasF3", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link InitialPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static InitialPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _InitialPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _InitialPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _InitialPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _InitialPrxI(obj.ice_facet(facet));
    }

    @Override
    InitialPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    InitialPrx ice_adapterId(String newAdapterId);

    @Override
    InitialPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    InitialPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    InitialPrx ice_invocationTimeout(int newTimeout);

    @Override
    InitialPrx ice_connectionCached(boolean newCache);

    @Override
    InitialPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    InitialPrx ice_secure(boolean b);

    @Override
    InitialPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    InitialPrx ice_preferSecure(boolean b);

    @Override
    InitialPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    InitialPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    InitialPrx ice_collocationOptimized(boolean b);

    @Override
    InitialPrx ice_twoway();

    @Override
    InitialPrx ice_oneway();

    @Override
    InitialPrx ice_batchOneway();

    @Override
    InitialPrx ice_datagram();

    @Override
    InitialPrx ice_batchDatagram();

    @Override
    InitialPrx ice_compress(boolean co);

    @Override
    InitialPrx ice_connectionId(String connectionId);

    @Override
    InitialPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /**
     * @hidden
     **/
    @Override
    default InitialPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _InitialPrxI(ref);
    }
}
