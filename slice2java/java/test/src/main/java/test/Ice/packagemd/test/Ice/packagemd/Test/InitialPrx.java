//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.packagemd.Test;

public interface InitialPrx extends com.zeroc.Ice.ObjectPrx
{
    default test.Ice.packagemd.Test1.C1 getTest1C2AsC1()
    {
        return getTest1C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.Test1.C1 getTest1C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.Test1.C1> getTest1C2AsC1Async()
    {
        return _iceI_getTest1C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.Test1.C1> getTest1C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.Test1.C1> _iceI_getTest1C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.Test1.C1> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest1C2AsC1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.Test1.C1> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.Test1.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default test.Ice.packagemd.Test1.C2 getTest1C2AsC2()
    {
        return getTest1C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.Test1.C2 getTest1C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.Test1.C2> getTest1C2AsC2Async()
    {
        return _iceI_getTest1C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.Test1.C2> getTest1C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest1C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.Test1.C2> _iceI_getTest1C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.Test1.C2> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest1C2AsC2", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.Test1.C2> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.Test1.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest1E2AsE1()
        throws test.Ice.packagemd.Test1.E1
    {
        throwTest1E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1E2AsE1(java.util.Map<String, String> context)
        throws test.Ice.packagemd.Test1.E1
    {
        try
        {
            _iceI_throwTest1E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.Test1.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE1Async()
    {
        return _iceI_throwTest1E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest1E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest1E2AsE1", null, sync, _iceE_throwTest1E2AsE1);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1E2AsE1 =
    {
        test.Ice.packagemd.Test1.E1.class
    };

    default void throwTest1E2AsE2()
        throws test.Ice.packagemd.Test1.E2
    {
        throwTest1E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1E2AsE2(java.util.Map<String, String> context)
        throws test.Ice.packagemd.Test1.E2
    {
        try
        {
            _iceI_throwTest1E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.Test1.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE2Async()
    {
        return _iceI_throwTest1E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest1E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest1E2AsE2", null, sync, _iceE_throwTest1E2AsE2);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1E2AsE2 =
    {
        test.Ice.packagemd.Test1.E2.class
    };

    default void throwTest1Notify()
        throws test.Ice.packagemd.Test1._notify
    {
        throwTest1Notify(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest1Notify(java.util.Map<String, String> context)
        throws test.Ice.packagemd.Test1._notify
    {
        try
        {
            _iceI_throwTest1NotifyAsync(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.Test1._notify ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1NotifyAsync()
    {
        return _iceI_throwTest1NotifyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest1NotifyAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwTest1NotifyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest1NotifyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest1Notify", null, sync, _iceE_throwTest1Notify);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest1Notify =
    {
        test.Ice.packagemd.Test1._notify.class
    };

    default test.Ice.packagemd.testpkg.Test2.C1 getTest2C2AsC1()
    {
        return getTest2C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.testpkg.Test2.C1 getTest2C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.testpkg.Test2.C1> getTest2C2AsC1Async()
    {
        return _iceI_getTest2C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.testpkg.Test2.C1> getTest2C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.testpkg.Test2.C1> _iceI_getTest2C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.testpkg.Test2.C1> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest2C2AsC1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.testpkg.Test2.C1> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.testpkg.Test2.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default test.Ice.packagemd.testpkg.Test2.C2 getTest2C2AsC2()
    {
        return getTest2C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.testpkg.Test2.C2 getTest2C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.testpkg.Test2.C2> getTest2C2AsC2Async()
    {
        return _iceI_getTest2C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.testpkg.Test2.C2> getTest2C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest2C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.testpkg.Test2.C2> _iceI_getTest2C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.testpkg.Test2.C2> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest2C2AsC2", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.testpkg.Test2.C2> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.testpkg.Test2.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest2E2AsE1()
        throws test.Ice.packagemd.testpkg.Test2.E1
    {
        throwTest2E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest2E2AsE1(java.util.Map<String, String> context)
        throws test.Ice.packagemd.testpkg.Test2.E1
    {
        try
        {
            _iceI_throwTest2E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.testpkg.Test2.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE1Async()
    {
        return _iceI_throwTest2E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest2E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest2E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest2E2AsE1", null, sync, _iceE_throwTest2E2AsE1);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest2E2AsE1 =
    {
        test.Ice.packagemd.testpkg.Test2.E1.class
    };

    default void throwTest2E2AsE2()
        throws test.Ice.packagemd.testpkg.Test2.E2
    {
        throwTest2E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest2E2AsE2(java.util.Map<String, String> context)
        throws test.Ice.packagemd.testpkg.Test2.E2
    {
        try
        {
            _iceI_throwTest2E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.testpkg.Test2.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE2Async()
    {
        return _iceI_throwTest2E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest2E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest2E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest2E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest2E2AsE2", null, sync, _iceE_throwTest2E2AsE2);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest2E2AsE2 =
    {
        test.Ice.packagemd.testpkg.Test2.E2.class
    };

    default test.Ice.packagemd.modpkg.Test3.C1 getTest3C2AsC1()
    {
        return getTest3C2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.modpkg.Test3.C1 getTest3C2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.modpkg.Test3.C1> getTest3C2AsC1Async()
    {
        return _iceI_getTest3C2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.modpkg.Test3.C1> getTest3C2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.modpkg.Test3.C1> _iceI_getTest3C2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.modpkg.Test3.C1> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest3C2AsC1", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.modpkg.Test3.C1> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.modpkg.Test3.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default test.Ice.packagemd.modpkg.Test3.C2 getTest3C2AsC2()
    {
        return getTest3C2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default test.Ice.packagemd.modpkg.Test3.C2 getTest3C2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.modpkg.Test3.C2> getTest3C2AsC2Async()
    {
        return _iceI_getTest3C2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<test.Ice.packagemd.modpkg.Test3.C2> getTest3C2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getTest3C2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.modpkg.Test3.C2> _iceI_getTest3C2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<test.Ice.packagemd.modpkg.Test3.C2> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTest3C2AsC2", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     final com.zeroc.Ice.Holder<test.Ice.packagemd.modpkg.Test3.C2> ret = new com.zeroc.Ice.Holder<>();
                     istr.readValue(v -> ret.value = v, test.Ice.packagemd.modpkg.Test3.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwTest3E2AsE1()
        throws test.Ice.packagemd.modpkg.Test3.E1
    {
        throwTest3E2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest3E2AsE1(java.util.Map<String, String> context)
        throws test.Ice.packagemd.modpkg.Test3.E1
    {
        try
        {
            _iceI_throwTest3E2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.modpkg.Test3.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE1Async()
    {
        return _iceI_throwTest3E2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest3E2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest3E2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest3E2AsE1", null, sync, _iceE_throwTest3E2AsE1);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest3E2AsE1 =
    {
        test.Ice.packagemd.modpkg.Test3.E1.class
    };

    default void throwTest3E2AsE2()
        throws test.Ice.packagemd.modpkg.Test3.E2
    {
        throwTest3E2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwTest3E2AsE2(java.util.Map<String, String> context)
        throws test.Ice.packagemd.modpkg.Test3.E2
    {
        try
        {
            _iceI_throwTest3E2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(test.Ice.packagemd.modpkg.Test3.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE2Async()
    {
        return _iceI_throwTest3E2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwTest3E2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwTest3E2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_throwTest3E2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "throwTest3E2AsE2", null, sync, _iceE_throwTest3E2AsE2);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwTest3E2AsE2 =
    {
        test.Ice.packagemd.modpkg.Test3.E2.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link InitialPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static InitialPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _InitialPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _InitialPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _InitialPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _InitialPrxI(obj.ice_facet(facet));
    }

    @Override
    InitialPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    InitialPrx ice_adapterId(String newAdapterId);

    @Override
    InitialPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    InitialPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    InitialPrx ice_invocationTimeout(int newTimeout);

    @Override
    InitialPrx ice_connectionCached(boolean newCache);

    @Override
    InitialPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    InitialPrx ice_secure(boolean b);

    @Override
    InitialPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    InitialPrx ice_preferSecure(boolean b);

    @Override
    InitialPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    InitialPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    InitialPrx ice_collocationOptimized(boolean b);

    @Override
    InitialPrx ice_twoway();

    @Override
    InitialPrx ice_oneway();

    @Override
    InitialPrx ice_batchOneway();

    @Override
    InitialPrx ice_datagram();

    @Override
    InitialPrx ice_batchDatagram();

    @Override
    InitialPrx ice_compress(boolean co);

    @Override
    InitialPrx ice_connectionId(String connectionId);

    @Override
    InitialPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /**
     * @hidden
     **/
    @Override
    default InitialPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _InitialPrxI(ref);
    }
}
