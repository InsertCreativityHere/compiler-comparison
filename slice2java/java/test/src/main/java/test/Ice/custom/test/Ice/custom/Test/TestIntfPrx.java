//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.custom.Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestIntf.OpASeqResult opASeq(A[] inSeq)
    {
        return opASeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpASeqResult opASeq(A[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opASeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpASeqResult> opASeqAsync(A[] inSeq)
    {
        return _iceI_opASeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpASeqResult> opASeqAsync(A[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opASeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpASeqResult> _iceI_opASeqAsync(A[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpASeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opASeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ASeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpASeqResult ret = new TestIntf.OpASeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpAArrayResult opAArray(java.util.List<A> inSeq)
    {
        return opAArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpAArrayResult opAArray(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opAArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpAArrayResult> opAArrayAsync(java.util.List<A> inSeq)
    {
        return _iceI_opAArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpAArrayResult> opAArrayAsync(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opAArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpAArrayResult> _iceI_opAArrayAsync(java.util.List<A> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpAArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AArrayHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpAArrayResult ret = new TestIntf.OpAArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpAListResult opAList(java.util.List<A> inSeq)
    {
        return opAList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpAListResult opAList(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opAListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpAListResult> opAListAsync(java.util.List<A> inSeq)
    {
        return _iceI_opAListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpAListResult> opAListAsync(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opAListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpAListResult> _iceI_opAListAsync(java.util.List<A> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpAListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpAListResult ret = new TestIntf.OpAListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolSeqResult opBoolSeq(java.util.List<java.lang.Boolean> inSeq)
    {
        return opBoolSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolSeqResult opBoolSeq(java.util.List<java.lang.Boolean> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolSeqResult> opBoolSeqAsync(java.util.List<java.lang.Boolean> inSeq)
    {
        return _iceI_opBoolSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolSeqResult> opBoolSeqAsync(java.util.List<java.lang.Boolean> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolSeqResult> _iceI_opBoolSeqAsync(java.util.List<java.lang.Boolean> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolSeqResult ret = new TestIntf.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteSeqResult opByteSeq(java.util.List<java.lang.Byte> inSeq)
    {
        return opByteSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteSeqResult opByteSeq(java.util.List<java.lang.Byte> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSeqResult> opByteSeqAsync(java.util.List<java.lang.Byte> inSeq)
    {
        return _iceI_opByteSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSeqResult> opByteSeqAsync(java.util.List<java.lang.Byte> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteSeqResult> _iceI_opByteSeqAsync(java.util.List<java.lang.Byte> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ByteSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteSeqResult ret = new TestIntf.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpShortSeqResult opShortSeq(java.util.List<java.lang.Short> inSeq)
    {
        return opShortSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpShortSeqResult opShortSeq(java.util.List<java.lang.Short> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortSeqResult> opShortSeqAsync(java.util.List<java.lang.Short> inSeq)
    {
        return _iceI_opShortSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortSeqResult> opShortSeqAsync(java.util.List<java.lang.Short> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opShortSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortSeqResult> _iceI_opShortSeqAsync(java.util.List<java.lang.Short> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ShortSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpShortSeqResult ret = new TestIntf.OpShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpIntSeqResult opIntSeq(java.util.List<java.lang.Integer> inSeq)
    {
        return opIntSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpIntSeqResult opIntSeq(java.util.List<java.lang.Integer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntSeqResult> opIntSeqAsync(java.util.List<java.lang.Integer> inSeq)
    {
        return _iceI_opIntSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntSeqResult> opIntSeqAsync(java.util.List<java.lang.Integer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opIntSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntSeqResult> _iceI_opIntSeqAsync(java.util.List<java.lang.Integer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpIntSeqResult ret = new TestIntf.OpIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpLongSeqResult opLongSeq(java.util.List<java.lang.Long> inSeq)
    {
        return opLongSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpLongSeqResult opLongSeq(java.util.List<java.lang.Long> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpLongSeqResult> opLongSeqAsync(java.util.List<java.lang.Long> inSeq)
    {
        return _iceI_opLongSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpLongSeqResult> opLongSeqAsync(java.util.List<java.lang.Long> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opLongSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpLongSeqResult> _iceI_opLongSeqAsync(java.util.List<java.lang.Long> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     LongSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpLongSeqResult ret = new TestIntf.OpLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpFloatSeqResult opFloatSeq(java.util.List<java.lang.Float> inSeq)
    {
        return opFloatSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpFloatSeqResult opFloatSeq(java.util.List<java.lang.Float> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFloatSeqResult> opFloatSeqAsync(java.util.List<java.lang.Float> inSeq)
    {
        return _iceI_opFloatSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFloatSeqResult> opFloatSeqAsync(java.util.List<java.lang.Float> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFloatSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFloatSeqResult> _iceI_opFloatSeqAsync(java.util.List<java.lang.Float> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FloatSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpFloatSeqResult ret = new TestIntf.OpFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpDoubleSeqResult opDoubleSeq(java.util.List<java.lang.Double> inSeq)
    {
        return opDoubleSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDoubleSeqResult opDoubleSeq(java.util.List<java.lang.Double> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleSeqResult> opDoubleSeqAsync(java.util.List<java.lang.Double> inSeq)
    {
        return _iceI_opDoubleSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleSeqResult> opDoubleSeqAsync(java.util.List<java.lang.Double> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleSeqResult> _iceI_opDoubleSeqAsync(java.util.List<java.lang.Double> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DoubleSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDoubleSeqResult ret = new TestIntf.OpDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringSeqResult opStringSeq(java.util.List<java.lang.String> inSeq)
    {
        return opStringSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringSeqResult opStringSeq(java.util.List<java.lang.String> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqResult> opStringSeqAsync(java.util.List<java.lang.String> inSeq)
    {
        return _iceI_opStringSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqResult> opStringSeqAsync(java.util.List<java.lang.String> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqResult> _iceI_opStringSeqAsync(java.util.List<java.lang.String> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringSeqResult ret = new TestIntf.OpStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpESeqResult opESeq(java.util.List<E> inSeq)
    {
        return opESeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpESeqResult opESeq(java.util.List<E> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opESeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpESeqResult> opESeqAsync(java.util.List<E> inSeq)
    {
        return _iceI_opESeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpESeqResult> opESeqAsync(java.util.List<E> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opESeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpESeqResult> _iceI_opESeqAsync(java.util.List<E> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpESeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opESeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ESeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpESeqResult ret = new TestIntf.OpESeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpSSeqResult opSSeq(java.util.List<S> inSeq)
    {
        return opSSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpSSeqResult opSSeq(java.util.List<S> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opSSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpSSeqResult> opSSeqAsync(java.util.List<S> inSeq)
    {
        return _iceI_opSSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpSSeqResult> opSSeqAsync(java.util.List<S> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opSSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpSSeqResult> _iceI_opSSeqAsync(java.util.List<S> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpSSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpSSeqResult ret = new TestIntf.OpSSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpDSeqResult opDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq)
    {
        return opDSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDSeqResult opDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDSeqResult> opDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq)
    {
        return _iceI_opDSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDSeqResult> opDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDSeqResult> _iceI_opDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDSeqResult ret = new TestIntf.OpDSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringSeqSeqResult opStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq)
    {
        return opStringSeqSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringSeqSeqResult opStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqSeqResult> opStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> inSeq)
    {
        return _iceI_opStringSeqSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqSeqResult> opStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqSeqResult> _iceI_opStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringSeqSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringSeqSeqResult ret = new TestIntf.OpStringSeqSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteBufferSeqResult opByteBufferSeq(java.nio.ByteBuffer inSeq)
    {
        return opByteBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteBufferSeqResult opByteBufferSeq(java.nio.ByteBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteBufferSeqResult> opByteBufferSeqAsync(java.nio.ByteBuffer inSeq)
    {
        return _iceI_opByteBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteBufferSeqResult> opByteBufferSeqAsync(java.nio.ByteBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteBufferSeqResult> _iceI_opByteBufferSeqAsync(java.nio.ByteBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteBufferSeqResult ret = new TestIntf.OpByteBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpShortBufferSeqResult opShortBufferSeq(java.nio.ShortBuffer inSeq)
    {
        return opShortBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpShortBufferSeqResult opShortBufferSeq(java.nio.ShortBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opShortBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortBufferSeqResult> opShortBufferSeqAsync(java.nio.ShortBuffer inSeq)
    {
        return _iceI_opShortBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortBufferSeqResult> opShortBufferSeqAsync(java.nio.ShortBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opShortBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortBufferSeqResult> _iceI_opShortBufferSeqAsync(java.nio.ShortBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpShortBufferSeqResult ret = new TestIntf.OpShortBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpIntBufferSeqResult opIntBufferSeq(java.nio.IntBuffer inSeq)
    {
        return opIntBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpIntBufferSeqResult opIntBufferSeq(java.nio.IntBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opIntBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntBufferSeqResult> opIntBufferSeqAsync(java.nio.IntBuffer inSeq)
    {
        return _iceI_opIntBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntBufferSeqResult> opIntBufferSeqAsync(java.nio.IntBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opIntBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntBufferSeqResult> _iceI_opIntBufferSeqAsync(java.nio.IntBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeIntBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpIntBufferSeqResult ret = new TestIntf.OpIntBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpLongBufferSeqResult opLongBufferSeq(java.nio.LongBuffer inSeq)
    {
        return opLongBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpLongBufferSeqResult opLongBufferSeq(java.nio.LongBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opLongBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpLongBufferSeqResult> opLongBufferSeqAsync(java.nio.LongBuffer inSeq)
    {
        return _iceI_opLongBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpLongBufferSeqResult> opLongBufferSeqAsync(java.nio.LongBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opLongBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpLongBufferSeqResult> _iceI_opLongBufferSeqAsync(java.nio.LongBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpLongBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLongBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLongBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpLongBufferSeqResult ret = new TestIntf.OpLongBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpFloatBufferSeqResult opFloatBufferSeq(java.nio.FloatBuffer inSeq)
    {
        return opFloatBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpFloatBufferSeqResult opFloatBufferSeq(java.nio.FloatBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFloatBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFloatBufferSeqResult> opFloatBufferSeqAsync(java.nio.FloatBuffer inSeq)
    {
        return _iceI_opFloatBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFloatBufferSeqResult> opFloatBufferSeqAsync(java.nio.FloatBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFloatBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFloatBufferSeqResult> _iceI_opFloatBufferSeqAsync(java.nio.FloatBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFloatBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloatBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloatBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpFloatBufferSeqResult ret = new TestIntf.OpFloatBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpDoubleBufferSeqResult opDoubleBufferSeq(java.nio.DoubleBuffer inSeq)
    {
        return opDoubleBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDoubleBufferSeqResult opDoubleBufferSeq(java.nio.DoubleBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(java.nio.DoubleBuffer inSeq)
    {
        return _iceI_opDoubleBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(java.nio.DoubleBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleBufferSeqResult> _iceI_opDoubleBufferSeqAsync(java.nio.DoubleBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleBuffer(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDoubleBufferSeqResult ret = new TestIntf.OpDoubleBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptASeqResult opOptASeq(A[] inSeq)
    {
        return opOptASeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptASeqResult opOptASeq(A[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptASeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptASeqResult opOptASeq(java.util.Optional<A[]> inSeq)
    {
        return opOptASeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptASeqResult opOptASeq(java.util.Optional<A[]> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptASeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptASeqResult> opOptASeqAsync(A[] inSeq)
    {
        return _iceI_opOptASeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptASeqResult> opOptASeqAsync(A[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptASeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptASeqResult> _iceI_opOptASeqAsync(A[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptASeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptASeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ASeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptASeqResult ret = new TestIntf.OpOptASeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptASeqResult> opOptASeqAsync(java.util.Optional<A[]> inSeq)
    {
        return _iceI_opOptASeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptASeqResult> opOptASeqAsync(java.util.Optional<A[]> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptASeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptASeqResult> _iceI_opOptASeqAsync(java.util.Optional<A[]> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptASeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptASeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ASeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptASeqResult ret = new TestIntf.OpOptASeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptAArrayResult opOptAArray(java.util.List<A> inSeq)
    {
        return opOptAArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptAArrayResult opOptAArray(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAArrayAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptAArrayResult opOptAArray(java.util.Optional<java.util.List<A>> inSeq)
    {
        return opOptAArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptAArrayResult opOptAArray(java.util.Optional<java.util.List<A>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAArrayResult> opOptAArrayAsync(java.util.List<A> inSeq)
    {
        return _iceI_opOptAArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAArrayResult> opOptAArrayAsync(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAArrayResult> _iceI_opOptAArrayAsync(java.util.List<A> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptAArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AArrayHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptAArrayResult ret = new TestIntf.OpOptAArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAArrayResult> opOptAArrayAsync(java.util.Optional<java.util.List<A>> inSeq)
    {
        return _iceI_opOptAArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAArrayResult> opOptAArrayAsync(java.util.Optional<java.util.List<A>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAArrayResult> _iceI_opOptAArrayAsync(java.util.Optional<java.util.List<A>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptAArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AArrayHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptAArrayResult ret = new TestIntf.OpOptAArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptAListResult opOptAList(java.util.List<A> inSeq)
    {
        return opOptAList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptAListResult opOptAList(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAListAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptAListResult opOptAList(java.util.Optional<java.util.List<A>> inSeq)
    {
        return opOptAList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptAListResult opOptAList(java.util.Optional<java.util.List<A>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAListResult> opOptAListAsync(java.util.List<A> inSeq)
    {
        return _iceI_opOptAListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAListResult> opOptAListAsync(java.util.List<A> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAListResult> _iceI_opOptAListAsync(java.util.List<A> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptAList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AListHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptAListResult ret = new TestIntf.OpOptAListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAListResult> opOptAListAsync(java.util.Optional<java.util.List<A>> inSeq)
    {
        return _iceI_opOptAListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptAListResult> opOptAListAsync(java.util.Optional<java.util.List<A>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptAListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAListResult> _iceI_opOptAListAsync(java.util.Optional<java.util.List<A>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptAListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptAList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     AListHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptAListResult ret = new TestIntf.OpOptAListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptBoolSeqResult opOptBoolSeq(java.util.List<java.lang.Boolean> inSeq)
    {
        return opOptBoolSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptBoolSeqResult opOptBoolSeq(java.util.List<java.lang.Boolean> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptBoolSeqResult opOptBoolSeq(java.util.Optional<java.util.List<java.lang.Boolean>> inSeq)
    {
        return opOptBoolSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptBoolSeqResult opOptBoolSeq(java.util.Optional<java.util.List<java.lang.Boolean>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptBoolSeqResult> opOptBoolSeqAsync(java.util.List<java.lang.Boolean> inSeq)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptBoolSeqResult> opOptBoolSeqAsync(java.util.List<java.lang.Boolean> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptBoolSeqResult> _iceI_opOptBoolSeqAsync(java.util.List<java.lang.Boolean> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptBoolSeqResult ret = new TestIntf.OpOptBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptBoolSeqResult> opOptBoolSeqAsync(java.util.Optional<java.util.List<java.lang.Boolean>> inSeq)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptBoolSeqResult> opOptBoolSeqAsync(java.util.Optional<java.util.List<java.lang.Boolean>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptBoolSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptBoolSeqResult> _iceI_opOptBoolSeqAsync(java.util.Optional<java.util.List<java.lang.Boolean>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptBoolSeqResult ret = new TestIntf.OpOptBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptByteSeqResult opOptByteSeq(java.util.List<java.lang.Byte> inSeq)
    {
        return opOptByteSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptByteSeqResult opOptByteSeq(java.util.List<java.lang.Byte> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptByteSeqResult opOptByteSeq(java.util.Optional<java.util.List<java.lang.Byte>> inSeq)
    {
        return opOptByteSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptByteSeqResult opOptByteSeq(java.util.Optional<java.util.List<java.lang.Byte>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteSeqResult> opOptByteSeqAsync(java.util.List<java.lang.Byte> inSeq)
    {
        return _iceI_opOptByteSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteSeqResult> opOptByteSeqAsync(java.util.List<java.lang.Byte> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteSeqResult> _iceI_opOptByteSeqAsync(java.util.List<java.lang.Byte> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ByteSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptByteSeqResult ret = new TestIntf.OpOptByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteSeqResult> opOptByteSeqAsync(java.util.Optional<java.util.List<java.lang.Byte>> inSeq)
    {
        return _iceI_opOptByteSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteSeqResult> opOptByteSeqAsync(java.util.Optional<java.util.List<java.lang.Byte>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteSeqResult> _iceI_opOptByteSeqAsync(java.util.Optional<java.util.List<java.lang.Byte>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ByteSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptByteSeqResult ret = new TestIntf.OpOptByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptShortSeqResult opOptShortSeq(java.util.List<java.lang.Short> inSeq)
    {
        return opOptShortSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptShortSeqResult opOptShortSeq(java.util.List<java.lang.Short> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptShortSeqResult opOptShortSeq(java.util.Optional<java.util.List<java.lang.Short>> inSeq)
    {
        return opOptShortSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptShortSeqResult opOptShortSeq(java.util.Optional<java.util.List<java.lang.Short>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortSeqResult> opOptShortSeqAsync(java.util.List<java.lang.Short> inSeq)
    {
        return _iceI_opOptShortSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortSeqResult> opOptShortSeqAsync(java.util.List<java.lang.Short> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortSeqResult> _iceI_opOptShortSeqAsync(java.util.List<java.lang.Short> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ShortSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptShortSeqResult ret = new TestIntf.OpOptShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortSeqResult> opOptShortSeqAsync(java.util.Optional<java.util.List<java.lang.Short>> inSeq)
    {
        return _iceI_opOptShortSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortSeqResult> opOptShortSeqAsync(java.util.Optional<java.util.List<java.lang.Short>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortSeqResult> _iceI_opOptShortSeqAsync(java.util.Optional<java.util.List<java.lang.Short>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptShortSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ShortSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptShortSeqResult ret = new TestIntf.OpOptShortSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptIntSeqResult opOptIntSeq(java.util.List<java.lang.Integer> inSeq)
    {
        return opOptIntSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptIntSeqResult opOptIntSeq(java.util.List<java.lang.Integer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptIntSeqResult opOptIntSeq(java.util.Optional<java.util.List<java.lang.Integer>> inSeq)
    {
        return opOptIntSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptIntSeqResult opOptIntSeq(java.util.Optional<java.util.List<java.lang.Integer>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntSeqResult> opOptIntSeqAsync(java.util.List<java.lang.Integer> inSeq)
    {
        return _iceI_opOptIntSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntSeqResult> opOptIntSeqAsync(java.util.List<java.lang.Integer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntSeqResult> _iceI_opOptIntSeqAsync(java.util.List<java.lang.Integer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptIntSeqResult ret = new TestIntf.OpOptIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntSeqResult> opOptIntSeqAsync(java.util.Optional<java.util.List<java.lang.Integer>> inSeq)
    {
        return _iceI_opOptIntSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntSeqResult> opOptIntSeqAsync(java.util.Optional<java.util.List<java.lang.Integer>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntSeqResult> _iceI_opOptIntSeqAsync(java.util.Optional<java.util.List<java.lang.Integer>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptIntSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptIntSeqResult ret = new TestIntf.OpOptIntSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptLongSeqResult opOptLongSeq(java.util.List<java.lang.Long> inSeq)
    {
        return opOptLongSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptLongSeqResult opOptLongSeq(java.util.List<java.lang.Long> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptLongSeqResult opOptLongSeq(java.util.Optional<java.util.List<java.lang.Long>> inSeq)
    {
        return opOptLongSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptLongSeqResult opOptLongSeq(java.util.Optional<java.util.List<java.lang.Long>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongSeqResult> opOptLongSeqAsync(java.util.List<java.lang.Long> inSeq)
    {
        return _iceI_opOptLongSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongSeqResult> opOptLongSeqAsync(java.util.List<java.lang.Long> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongSeqResult> _iceI_opOptLongSeqAsync(java.util.List<java.lang.Long> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     LongSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptLongSeqResult ret = new TestIntf.OpOptLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongSeqResult> opOptLongSeqAsync(java.util.Optional<java.util.List<java.lang.Long>> inSeq)
    {
        return _iceI_opOptLongSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongSeqResult> opOptLongSeqAsync(java.util.Optional<java.util.List<java.lang.Long>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongSeqResult> _iceI_opOptLongSeqAsync(java.util.Optional<java.util.List<java.lang.Long>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptLongSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     LongSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptLongSeqResult ret = new TestIntf.OpOptLongSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptFloatSeqResult opOptFloatSeq(java.util.List<java.lang.Float> inSeq)
    {
        return opOptFloatSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptFloatSeqResult opOptFloatSeq(java.util.List<java.lang.Float> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptFloatSeqResult opOptFloatSeq(java.util.Optional<java.util.List<java.lang.Float>> inSeq)
    {
        return opOptFloatSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptFloatSeqResult opOptFloatSeq(java.util.Optional<java.util.List<java.lang.Float>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatSeqResult> opOptFloatSeqAsync(java.util.List<java.lang.Float> inSeq)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatSeqResult> opOptFloatSeqAsync(java.util.List<java.lang.Float> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatSeqResult> _iceI_opOptFloatSeqAsync(java.util.List<java.lang.Float> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FloatSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptFloatSeqResult ret = new TestIntf.OpOptFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatSeqResult> opOptFloatSeqAsync(java.util.Optional<java.util.List<java.lang.Float>> inSeq)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatSeqResult> opOptFloatSeqAsync(java.util.Optional<java.util.List<java.lang.Float>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatSeqResult> _iceI_opOptFloatSeqAsync(java.util.Optional<java.util.List<java.lang.Float>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptFloatSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FloatSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptFloatSeqResult ret = new TestIntf.OpOptFloatSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptDoubleSeqResult opOptDoubleSeq(java.util.List<java.lang.Double> inSeq)
    {
        return opOptDoubleSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDoubleSeqResult opOptDoubleSeq(java.util.List<java.lang.Double> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptDoubleSeqResult opOptDoubleSeq(java.util.Optional<java.util.List<java.lang.Double>> inSeq)
    {
        return opOptDoubleSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDoubleSeqResult opOptDoubleSeq(java.util.Optional<java.util.List<java.lang.Double>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleSeqResult> opOptDoubleSeqAsync(java.util.List<java.lang.Double> inSeq)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleSeqResult> opOptDoubleSeqAsync(java.util.List<java.lang.Double> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleSeqResult> _iceI_opOptDoubleSeqAsync(java.util.List<java.lang.Double> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DoubleSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptDoubleSeqResult ret = new TestIntf.OpOptDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleSeqResult> opOptDoubleSeqAsync(java.util.Optional<java.util.List<java.lang.Double>> inSeq)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleSeqResult> opOptDoubleSeqAsync(java.util.Optional<java.util.List<java.lang.Double>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleSeqResult> _iceI_opOptDoubleSeqAsync(java.util.Optional<java.util.List<java.lang.Double>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDoubleSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DoubleSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptDoubleSeqResult ret = new TestIntf.OpOptDoubleSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptStringSeqResult opOptStringSeq(java.util.List<java.lang.String> inSeq)
    {
        return opOptStringSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptStringSeqResult opOptStringSeq(java.util.List<java.lang.String> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptStringSeqResult opOptStringSeq(java.util.Optional<java.util.List<java.lang.String>> inSeq)
    {
        return opOptStringSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptStringSeqResult opOptStringSeq(java.util.Optional<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqResult> opOptStringSeqAsync(java.util.List<java.lang.String> inSeq)
    {
        return _iceI_opOptStringSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqResult> opOptStringSeqAsync(java.util.List<java.lang.String> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqResult> _iceI_opOptStringSeqAsync(java.util.List<java.lang.String> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptStringSeqResult ret = new TestIntf.OpOptStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqResult> opOptStringSeqAsync(java.util.Optional<java.util.List<java.lang.String>> inSeq)
    {
        return _iceI_opOptStringSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqResult> opOptStringSeqAsync(java.util.Optional<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqResult> _iceI_opOptStringSeqAsync(java.util.Optional<java.util.List<java.lang.String>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptStringSeqResult ret = new TestIntf.OpOptStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptESeqResult opOptESeq(java.util.List<E> inSeq)
    {
        return opOptESeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptESeqResult opOptESeq(java.util.List<E> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptESeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptESeqResult opOptESeq(java.util.Optional<java.util.List<E>> inSeq)
    {
        return opOptESeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptESeqResult opOptESeq(java.util.Optional<java.util.List<E>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptESeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptESeqResult> opOptESeqAsync(java.util.List<E> inSeq)
    {
        return _iceI_opOptESeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptESeqResult> opOptESeqAsync(java.util.List<E> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptESeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptESeqResult> _iceI_opOptESeqAsync(java.util.List<E> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptESeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptESeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ESeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptESeqResult ret = new TestIntf.OpOptESeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptESeqResult> opOptESeqAsync(java.util.Optional<java.util.List<E>> inSeq)
    {
        return _iceI_opOptESeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptESeqResult> opOptESeqAsync(java.util.Optional<java.util.List<E>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptESeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptESeqResult> _iceI_opOptESeqAsync(java.util.Optional<java.util.List<E>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptESeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptESeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ESeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptESeqResult ret = new TestIntf.OpOptESeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptSSeqResult opOptSSeq(java.util.List<S> inSeq)
    {
        return opOptSSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptSSeqResult opOptSSeq(java.util.List<S> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptSSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptSSeqResult opOptSSeq(java.util.Optional<java.util.List<S>> inSeq)
    {
        return opOptSSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptSSeqResult opOptSSeq(java.util.Optional<java.util.List<S>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptSSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptSSeqResult> opOptSSeqAsync(java.util.List<S> inSeq)
    {
        return _iceI_opOptSSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptSSeqResult> opOptSSeqAsync(java.util.List<S> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptSSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptSSeqResult> _iceI_opOptSSeqAsync(java.util.List<S> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptSSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptSSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptSSeqResult ret = new TestIntf.OpOptSSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptSSeqResult> opOptSSeqAsync(java.util.Optional<java.util.List<S>> inSeq)
    {
        return _iceI_opOptSSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptSSeqResult> opOptSSeqAsync(java.util.Optional<java.util.List<S>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptSSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptSSeqResult> _iceI_opOptSSeqAsync(java.util.Optional<java.util.List<S>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptSSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptSSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     SSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptSSeqResult ret = new TestIntf.OpOptSSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptDSeqResult opOptDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq)
    {
        return opOptDSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDSeqResult opOptDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptDSeqResult opOptDSeq(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> inSeq)
    {
        return opOptDSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDSeqResult opOptDSeq(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDSeqResult> opOptDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq)
    {
        return _iceI_opOptDSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDSeqResult> opOptDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDSeqResult> _iceI_opOptDSeqAsync(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptDSeqResult ret = new TestIntf.OpOptDSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDSeqResult> opOptDSeqAsync(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> inSeq)
    {
        return _iceI_opOptDSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDSeqResult> opOptDSeqAsync(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDSeqResult> _iceI_opOptDSeqAsync(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptDSeqResult ret = new TestIntf.OpOptDSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptStringSeqSeqResult opOptStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq)
    {
        return opOptStringSeqSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptStringSeqSeqResult opOptStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptStringSeqSeqResult opOptStringSeqSeq(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> inSeq)
    {
        return opOptStringSeqSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptStringSeqSeqResult opOptStringSeqSeq(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> inSeq)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqSeqResult> _iceI_opOptStringSeqSeqAsync(java.util.List<java.util.List<java.lang.String>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptStringSeqSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptStringSeqSeqResult ret = new TestIntf.OpOptStringSeqSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> inSeq)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptStringSeqSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqSeqResult> _iceI_opOptStringSeqSeqAsync(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptStringSeqSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptStringSeqSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringSeqSeqHelper.write(ostr, 2, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpOptStringSeqSeqResult ret = new TestIntf.OpOptStringSeqSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptByteBufferSeqResult opOptByteBufferSeq(java.nio.ByteBuffer inSeq)
    {
        return opOptByteBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptByteBufferSeqResult opOptByteBufferSeq(java.nio.ByteBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptByteBufferSeqResult opOptByteBufferSeq(java.util.Optional<java.nio.ByteBuffer> inSeq)
    {
        return opOptByteBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptByteBufferSeqResult opOptByteBufferSeq(java.util.Optional<java.nio.ByteBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(java.nio.ByteBuffer inSeq)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(java.nio.ByteBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteBufferSeqResult> _iceI_opOptByteBufferSeqAsync(java.nio.ByteBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptByteBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         ostr.writeByteBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptByteBufferSeqResult ret = new TestIntf.OpOptByteBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(java.util.Optional<java.nio.ByteBuffer> inSeq)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(java.util.Optional<java.nio.ByteBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptByteBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteBufferSeqResult> _iceI_opOptByteBufferSeqAsync(java.util.Optional<java.nio.ByteBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptByteBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptByteBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         ostr.writeByteBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptByteBufferSeqResult ret = new TestIntf.OpOptByteBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptShortBufferSeqResult opOptShortBufferSeq(java.nio.ShortBuffer inSeq)
    {
        return opOptShortBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptShortBufferSeqResult opOptShortBufferSeq(java.nio.ShortBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptShortBufferSeqResult opOptShortBufferSeq(java.util.Optional<java.nio.ShortBuffer> inSeq)
    {
        return opOptShortBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptShortBufferSeqResult opOptShortBufferSeq(java.util.Optional<java.nio.ShortBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(java.nio.ShortBuffer inSeq)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(java.nio.ShortBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortBufferSeqResult> _iceI_opOptShortBufferSeqAsync(java.nio.ShortBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptShortBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq == null ? 0 : iceP_inSeq.remaining() / 2;
                         ostr.writeSize(optSize > 254 ? optSize * 2 + 5 : optSize * 2 + 1);
                         ostr.writeShortBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptShortBufferSeqResult ret = new TestIntf.OpOptShortBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(java.util.Optional<java.nio.ShortBuffer> inSeq)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(java.util.Optional<java.nio.ShortBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptShortBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortBufferSeqResult> _iceI_opOptShortBufferSeqAsync(java.util.Optional<java.nio.ShortBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptShortBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptShortBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq.get() == null ? 0 : iceP_inSeq.get().remaining() / 2;
                         ostr.writeSize(optSize > 254 ? optSize * 2 + 5 : optSize * 2 + 1);
                         ostr.writeShortBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptShortBufferSeqResult ret = new TestIntf.OpOptShortBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptIntBufferSeqResult opOptIntBufferSeq(java.nio.IntBuffer inSeq)
    {
        return opOptIntBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptIntBufferSeqResult opOptIntBufferSeq(java.nio.IntBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptIntBufferSeqResult opOptIntBufferSeq(java.util.Optional<java.nio.IntBuffer> inSeq)
    {
        return opOptIntBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptIntBufferSeqResult opOptIntBufferSeq(java.util.Optional<java.nio.IntBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(java.nio.IntBuffer inSeq)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(java.nio.IntBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntBufferSeqResult> _iceI_opOptIntBufferSeqAsync(java.nio.IntBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptIntBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq == null ? 0 : iceP_inSeq.remaining() / 4;
                         ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                         ostr.writeIntBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptIntBufferSeqResult ret = new TestIntf.OpOptIntBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(java.util.Optional<java.nio.IntBuffer> inSeq)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(java.util.Optional<java.nio.IntBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptIntBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntBufferSeqResult> _iceI_opOptIntBufferSeqAsync(java.util.Optional<java.nio.IntBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptIntBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptIntBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq.get() == null ? 0 : iceP_inSeq.get().remaining() / 4;
                         ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                         ostr.writeIntBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptIntBufferSeqResult ret = new TestIntf.OpOptIntBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptLongBufferSeqResult opOptLongBufferSeq(java.nio.LongBuffer inSeq)
    {
        return opOptLongBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptLongBufferSeqResult opOptLongBufferSeq(java.nio.LongBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptLongBufferSeqResult opOptLongBufferSeq(java.util.Optional<java.nio.LongBuffer> inSeq)
    {
        return opOptLongBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptLongBufferSeqResult opOptLongBufferSeq(java.util.Optional<java.nio.LongBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(java.nio.LongBuffer inSeq)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(java.nio.LongBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongBufferSeqResult> _iceI_opOptLongBufferSeqAsync(java.nio.LongBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptLongBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq == null ? 0 : iceP_inSeq.remaining() / 8;
                         ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                         ostr.writeLongBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptLongBufferSeqResult ret = new TestIntf.OpOptLongBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(java.util.Optional<java.nio.LongBuffer> inSeq)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(java.util.Optional<java.nio.LongBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptLongBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongBufferSeqResult> _iceI_opOptLongBufferSeqAsync(java.util.Optional<java.nio.LongBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptLongBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptLongBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq.get() == null ? 0 : iceP_inSeq.get().remaining() / 8;
                         ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                         ostr.writeLongBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptLongBufferSeqResult ret = new TestIntf.OpOptLongBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptFloatBufferSeqResult opOptFloatBufferSeq(java.nio.FloatBuffer inSeq)
    {
        return opOptFloatBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptFloatBufferSeqResult opOptFloatBufferSeq(java.nio.FloatBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptFloatBufferSeqResult opOptFloatBufferSeq(java.util.Optional<java.nio.FloatBuffer> inSeq)
    {
        return opOptFloatBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptFloatBufferSeqResult opOptFloatBufferSeq(java.util.Optional<java.nio.FloatBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(java.nio.FloatBuffer inSeq)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(java.nio.FloatBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatBufferSeqResult> _iceI_opOptFloatBufferSeqAsync(java.nio.FloatBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptFloatBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq == null ? 0 : iceP_inSeq.remaining() / 4;
                         ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                         ostr.writeFloatBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptFloatBufferSeqResult ret = new TestIntf.OpOptFloatBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(java.util.Optional<java.nio.FloatBuffer> inSeq)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(java.util.Optional<java.nio.FloatBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptFloatBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatBufferSeqResult> _iceI_opOptFloatBufferSeqAsync(java.util.Optional<java.nio.FloatBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptFloatBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptFloatBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq.get() == null ? 0 : iceP_inSeq.get().remaining() / 4;
                         ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                         ostr.writeFloatBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptFloatBufferSeqResult ret = new TestIntf.OpOptFloatBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptDoubleBufferSeqResult opOptDoubleBufferSeq(java.nio.DoubleBuffer inSeq)
    {
        return opOptDoubleBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDoubleBufferSeqResult opOptDoubleBufferSeq(java.nio.DoubleBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default TestIntf.OpOptDoubleBufferSeqResult opOptDoubleBufferSeq(java.util.Optional<java.nio.DoubleBuffer> inSeq)
    {
        return opOptDoubleBufferSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptDoubleBufferSeqResult opOptDoubleBufferSeq(java.util.Optional<java.nio.DoubleBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(java.nio.DoubleBuffer inSeq)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(java.nio.DoubleBuffer inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleBufferSeqResult> _iceI_opOptDoubleBufferSeqAsync(java.nio.DoubleBuffer iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDoubleBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq == null ? 0 : iceP_inSeq.remaining() / 8;
                         ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                         ostr.writeDoubleBuffer(iceP_inSeq);
                     }
                 }, istr -> {
                     TestIntf.OpOptDoubleBufferSeqResult ret = new TestIntf.OpOptDoubleBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(java.util.Optional<java.nio.DoubleBuffer> inSeq)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(java.util.Optional<java.nio.DoubleBuffer> inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opOptDoubleBufferSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleBufferSeqResult> _iceI_opOptDoubleBufferSeqAsync(java.util.Optional<java.nio.DoubleBuffer> iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpOptDoubleBufferSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOptDoubleBufferSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     if(iceP_inSeq != null && iceP_inSeq.isPresent() && ostr.writeOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
                     {
                         final int optSize = iceP_inSeq.get() == null ? 0 : iceP_inSeq.get().remaining() / 8;
                         ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                         ostr.writeDoubleBuffer(iceP_inSeq.get());
                     }
                 }, istr -> {
                     TestIntf.OpOptDoubleBufferSeqResult ret = new TestIntf.OpOptDoubleBufferSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
