//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.servantLocator.AMD.Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    java.util.concurrent.CompletionStage<Void> requestFailedExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> unknownUserExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> unknownLocalExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> unknownExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> localExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> javaExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> unknownExceptionWithServantExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.String> impossibleExceptionAsync(boolean _throw, com.zeroc.Ice.Current current)
        throws TestImpossibleException;

    java.util.concurrent.CompletionStage<java.lang.String> intfUserExceptionAsync(boolean _throw, com.zeroc.Ice.Current current)
        throws TestIntfUserException,
               TestImpossibleException;

    java.util.concurrent.CompletionStage<Void> asyncResponseAsync(com.zeroc.Ice.Current current)
        throws TestIntfUserException,
               TestImpossibleException;

    java.util.concurrent.CompletionStage<Void> asyncExceptionAsync(com.zeroc.Ice.Current current)
        throws TestIntfUserException,
               TestImpossibleException;

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestFailedException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.requestFailedExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unknownUserException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.unknownUserExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unknownLocalException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.unknownLocalExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unknownException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.unknownExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_localException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.localExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_javaException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.javaExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unknownExceptionWithServantException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.unknownExceptionWithServantExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_impossibleException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_throw;
        iceP_throw = istr.readBool();
        inS.endReadParams();
        return inS.setResultFuture(obj.impossibleExceptionAsync(iceP_throw, current), (ostr, ret) ->
            {
                ostr.writeString(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_intfUserException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_throw;
        iceP_throw = istr.readBool();
        inS.endReadParams();
        return inS.setResultFuture(obj.intfUserExceptionAsync(iceP_throw, current), (ostr, ret) ->
            {
                ostr.writeString(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_asyncResponse(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.asyncResponseAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_asyncException(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.asyncExceptionAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.shutdownAsync(current));
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "asyncException",
        "asyncResponse",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "impossibleException",
        "intfUserException",
        "javaException",
        "localException",
        "requestFailedException",
        "shutdown",
        "unknownException",
        "unknownExceptionWithServantException",
        "unknownLocalException",
        "unknownUserException"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_asyncException(this, in, current);
            }
            case 1:
            {
                return _iceD_asyncResponse(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_impossibleException(this, in, current);
            }
            case 7:
            {
                return _iceD_intfUserException(this, in, current);
            }
            case 8:
            {
                return _iceD_javaException(this, in, current);
            }
            case 9:
            {
                return _iceD_localException(this, in, current);
            }
            case 10:
            {
                return _iceD_requestFailedException(this, in, current);
            }
            case 11:
            {
                return _iceD_shutdown(this, in, current);
            }
            case 12:
            {
                return _iceD_unknownException(this, in, current);
            }
            case 13:
            {
                return _iceD_unknownExceptionWithServantException(this, in, current);
            }
            case 14:
            {
                return _iceD_unknownLocalException(this, in, current);
            }
            case 15:
            {
                return _iceD_unknownUserException(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
