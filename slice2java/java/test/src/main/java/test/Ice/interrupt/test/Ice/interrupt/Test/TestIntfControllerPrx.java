//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.interrupt.Test;

public interface TestIntfControllerPrx extends com.zeroc.Ice.ObjectPrx
{
    default void holdAdapter()
    {
        holdAdapter(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void holdAdapter(java.util.Map<String, String> context)
    {
        _iceI_holdAdapterAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> holdAdapterAsync()
    {
        return _iceI_holdAdapterAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> holdAdapterAsync(java.util.Map<String, String> context)
    {
        return _iceI_holdAdapterAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_holdAdapterAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "holdAdapter", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void resumeAdapter()
    {
        resumeAdapter(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void resumeAdapter(java.util.Map<String, String> context)
    {
        _iceI_resumeAdapterAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> resumeAdapterAsync()
    {
        return _iceI_resumeAdapterAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> resumeAdapterAsync(java.util.Map<String, String> context)
    {
        return _iceI_resumeAdapterAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_resumeAdapterAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "resumeAdapter", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void interrupt()
        throws CannotInterruptException
    {
        interrupt(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void interrupt(java.util.Map<String, String> context)
        throws CannotInterruptException
    {
        try
        {
            _iceI_interruptAsync(context, true).waitForResponseOrUserEx();
        }
        catch(CannotInterruptException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> interruptAsync()
    {
        return _iceI_interruptAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> interruptAsync(java.util.Map<String, String> context)
    {
        return _iceI_interruptAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_interruptAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "interrupt", null, sync, _iceE_interrupt);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_interrupt =
    {
        CannotInterruptException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestIntfControllerPrx.class, _TestIntfControllerPrxI.class);
    }

    @Override
    TestIntfControllerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfControllerPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfControllerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfControllerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfControllerPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfControllerPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfControllerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfControllerPrx ice_secure(boolean b);

    @Override
    TestIntfControllerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfControllerPrx ice_preferSecure(boolean b);

    @Override
    TestIntfControllerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfControllerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfControllerPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfControllerPrx ice_twoway();

    @Override
    TestIntfControllerPrx ice_oneway();

    @Override
    TestIntfControllerPrx ice_batchOneway();

    @Override
    TestIntfControllerPrx ice_datagram();

    @Override
    TestIntfControllerPrx ice_batchDatagram();

    @Override
    TestIntfControllerPrx ice_compress(boolean co);

    @Override
    TestIntfControllerPrx ice_connectionId(String connectionId);

    @Override
    TestIntfControllerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntfController";
    }
}
