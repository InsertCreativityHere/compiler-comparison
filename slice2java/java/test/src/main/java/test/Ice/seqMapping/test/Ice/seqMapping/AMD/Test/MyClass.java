//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.seqMapping.AMD.Test;

public interface MyClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opSerialSmallJava.
     **/
    public static class OpSerialSmallJavaResult
    {
        /**
         * Default constructor.
         **/
        public OpSerialSmallJavaResult()
        {
        }

        public OpSerialSmallJavaResult(test.Ice.seqMapping.Serialize.Small returnValue, test.Ice.seqMapping.Serialize.Small o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public test.Ice.seqMapping.Serialize.Small returnValue;
        public test.Ice.seqMapping.Serialize.Small o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeSerializable(this.o);
            ostr.writeSerializable(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readSerializable(test.Ice.seqMapping.Serialize.Small.class);
            returnValue = istr.readSerializable(test.Ice.seqMapping.Serialize.Small.class);
        }
    }

    /**
     * Holds the result of operation opSerialLargeJava.
     **/
    public static class OpSerialLargeJavaResult
    {
        /**
         * Default constructor.
         **/
        public OpSerialLargeJavaResult()
        {
        }

        public OpSerialLargeJavaResult(test.Ice.seqMapping.Serialize.Large returnValue, test.Ice.seqMapping.Serialize.Large o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public test.Ice.seqMapping.Serialize.Large returnValue;
        public test.Ice.seqMapping.Serialize.Large o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeSerializable(this.o);
            ostr.writeSerializable(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readSerializable(test.Ice.seqMapping.Serialize.Large.class);
            returnValue = istr.readSerializable(test.Ice.seqMapping.Serialize.Large.class);
        }
    }

    /**
     * Holds the result of operation opSerialStructJava.
     **/
    public static class OpSerialStructJavaResult
    {
        /**
         * Default constructor.
         **/
        public OpSerialStructJavaResult()
        {
        }

        public OpSerialStructJavaResult(test.Ice.seqMapping.Serialize.Struct returnValue, test.Ice.seqMapping.Serialize.Struct o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public test.Ice.seqMapping.Serialize.Struct returnValue;
        public test.Ice.seqMapping.Serialize.Struct o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeSerializable(this.o);
            ostr.writeSerializable(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readSerializable(test.Ice.seqMapping.Serialize.Struct.class);
            returnValue = istr.readSerializable(test.Ice.seqMapping.Serialize.Struct.class);
        }
    }

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSerialSmallJavaResult> opSerialSmallJavaAsync(test.Ice.seqMapping.Serialize.Small i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSerialLargeJavaResult> opSerialLargeJavaAsync(test.Ice.seqMapping.Serialize.Large i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSerialStructJavaResult> opSerialStructJavaAsync(test.Ice.seqMapping.Serialize.Struct i, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.shutdownAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSerialSmallJava(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        test.Ice.seqMapping.Serialize.Small iceP_i;
        iceP_i = istr.readSerializable(test.Ice.seqMapping.Serialize.Small.class);
        inS.endReadParams();
        return inS.setResultFuture(obj.opSerialSmallJavaAsync(iceP_i, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSerialLargeJava(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        test.Ice.seqMapping.Serialize.Large iceP_i;
        iceP_i = istr.readSerializable(test.Ice.seqMapping.Serialize.Large.class);
        inS.endReadParams();
        return inS.setResultFuture(obj.opSerialLargeJavaAsync(iceP_i, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSerialStructJava(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        test.Ice.seqMapping.Serialize.Struct iceP_i;
        iceP_i = istr.readSerializable(test.Ice.seqMapping.Serialize.Struct.class);
        inS.endReadParams();
        return inS.setResultFuture(obj.opSerialStructJavaAsync(iceP_i, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opSerialLargeJava",
        "opSerialSmallJava",
        "opSerialStructJava",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opSerialLargeJava(this, in, current);
            }
            case 5:
            {
                return _iceD_opSerialSmallJava(this, in, current);
            }
            case 6:
            {
                return _iceD_opSerialStructJava(this, in, current);
            }
            case 7:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
