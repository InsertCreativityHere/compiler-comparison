//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.facets.Test;

public interface FPrx extends EPrx
{
    default String callF()
    {
        return callF(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String callF(java.util.Map<String, String> context)
    {
        return _iceI_callFAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> callFAsync()
    {
        return _iceI_callFAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> callFAsync(java.util.Map<String, String> context)
    {
        return _iceI_callFAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_callFAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "callF", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _FPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _FPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _FPrxI(obj.ice_facet(facet));
    }

    @Override
    FPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    FPrx ice_adapterId(String newAdapterId);

    @Override
    FPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    FPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    FPrx ice_invocationTimeout(int newTimeout);

    @Override
    FPrx ice_connectionCached(boolean newCache);

    @Override
    FPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    FPrx ice_secure(boolean b);

    @Override
    FPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    FPrx ice_preferSecure(boolean b);

    @Override
    FPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    FPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    FPrx ice_collocationOptimized(boolean b);

    @Override
    FPrx ice_twoway();

    @Override
    FPrx ice_oneway();

    @Override
    FPrx ice_batchOneway();

    @Override
    FPrx ice_datagram();

    @Override
    FPrx ice_batchDatagram();

    @Override
    FPrx ice_compress(boolean co);

    @Override
    FPrx ice_connectionId(String connectionId);

    @Override
    FPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::F";
    }
}
