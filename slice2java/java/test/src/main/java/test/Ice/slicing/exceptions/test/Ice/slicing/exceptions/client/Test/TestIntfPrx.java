//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.slicing.exceptions.client.Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default void baseAsBase()
        throws Base
    {
        baseAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void baseAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_baseAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> baseAsBaseAsync()
    {
        return _iceI_baseAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> baseAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_baseAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_baseAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "baseAsBase", null, sync, _iceE_baseAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_baseAsBase =
    {
        Base.class
    };

    default void unknownDerivedAsBase()
        throws Base
    {
        unknownDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownDerivedAsBaseAsync()
    {
        return _iceI_unknownDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownDerivedAsBase", null, sync, _iceE_unknownDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownDerivedAsBase =
    {
        Base.class
    };

    default void knownDerivedAsBase()
        throws Base
    {
        knownDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsBaseAsync()
    {
        return _iceI_knownDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownDerivedAsBase", null, sync, _iceE_knownDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownDerivedAsBase =
    {
        Base.class
    };

    default void knownDerivedAsKnownDerived()
        throws KnownDerived
    {
        knownDerivedAsKnownDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownDerivedAsKnownDerived(java.util.Map<String, String> context)
        throws KnownDerived
    {
        try
        {
            _iceI_knownDerivedAsKnownDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownDerived ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsKnownDerivedAsync()
    {
        return _iceI_knownDerivedAsKnownDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsKnownDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownDerivedAsKnownDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownDerivedAsKnownDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownDerivedAsKnownDerived", null, sync, _iceE_knownDerivedAsKnownDerived);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownDerivedAsKnownDerived =
    {
        KnownDerived.class
    };

    default void unknownIntermediateAsBase()
        throws Base
    {
        unknownIntermediateAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownIntermediateAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownIntermediateAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownIntermediateAsBaseAsync()
    {
        return _iceI_unknownIntermediateAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownIntermediateAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownIntermediateAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownIntermediateAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownIntermediateAsBase", null, sync, _iceE_unknownIntermediateAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownIntermediateAsBase =
    {
        Base.class
    };

    default void knownIntermediateAsBase()
        throws Base
    {
        knownIntermediateAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownIntermediateAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownIntermediateAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsBaseAsync()
    {
        return _iceI_knownIntermediateAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownIntermediateAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownIntermediateAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownIntermediateAsBase", null, sync, _iceE_knownIntermediateAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownIntermediateAsBase =
    {
        Base.class
    };

    default void knownMostDerivedAsBase()
        throws Base
    {
        knownMostDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownMostDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsBaseAsync()
    {
        return _iceI_knownMostDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsBase", null, sync, _iceE_knownMostDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsBase =
    {
        Base.class
    };

    default void knownIntermediateAsKnownIntermediate()
        throws KnownIntermediate
    {
        knownIntermediateAsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownIntermediateAsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_knownIntermediateAsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsKnownIntermediateAsync()
    {
        return _iceI_knownIntermediateAsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownIntermediateAsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownIntermediateAsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownIntermediateAsKnownIntermediate", null, sync, _iceE_knownIntermediateAsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownIntermediateAsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void knownMostDerivedAsKnownIntermediate()
        throws KnownIntermediate
    {
        knownMostDerivedAsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_knownMostDerivedAsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownIntermediateAsync()
    {
        return _iceI_knownMostDerivedAsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsKnownIntermediate", null, sync, _iceE_knownMostDerivedAsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void knownMostDerivedAsKnownMostDerived()
        throws KnownMostDerived
    {
        knownMostDerivedAsKnownMostDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsKnownMostDerived(java.util.Map<String, String> context)
        throws KnownMostDerived
    {
        try
        {
            _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownMostDerived ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownMostDerivedAsync()
    {
        return _iceI_knownMostDerivedAsKnownMostDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownMostDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsKnownMostDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsKnownMostDerived", null, sync, _iceE_knownMostDerivedAsKnownMostDerived);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsKnownMostDerived =
    {
        KnownMostDerived.class
    };

    default void unknownMostDerived1AsBase()
        throws Base
    {
        unknownMostDerived1AsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived1AsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownMostDerived1AsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsBaseAsync()
    {
        return _iceI_unknownMostDerived1AsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived1AsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived1AsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived1AsBase", null, sync, _iceE_unknownMostDerived1AsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived1AsBase =
    {
        Base.class
    };

    default void unknownMostDerived1AsKnownIntermediate()
        throws KnownIntermediate
    {
        unknownMostDerived1AsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived1AsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsKnownIntermediateAsync()
    {
        return _iceI_unknownMostDerived1AsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived1AsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived1AsKnownIntermediate", null, sync, _iceE_unknownMostDerived1AsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived1AsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void unknownMostDerived2AsBase()
        throws Base
    {
        unknownMostDerived2AsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived2AsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownMostDerived2AsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseAsync()
    {
        return _iceI_unknownMostDerived2AsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived2AsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived2AsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived2AsBase", null, sync, _iceE_unknownMostDerived2AsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived2AsBase =
    {
        Base.class
    };

    default void unknownMostDerived2AsBaseCompact()
        throws Base
    {
        unknownMostDerived2AsBaseCompact(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived2AsBaseCompact(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownMostDerived2AsBaseCompactAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseCompactAsync()
    {
        return _iceI_unknownMostDerived2AsBaseCompactAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseCompactAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived2AsBaseCompactAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived2AsBaseCompactAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived2AsBaseCompact", null, sync, _iceE_unknownMostDerived2AsBaseCompact);
        f.invoke(true, context, com.zeroc.Ice.FormatType.CompactFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived2AsBaseCompact =
    {
        Base.class
    };

    default void knownPreservedAsBase()
        throws Base
    {
        knownPreservedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownPreservedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownPreservedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsBaseAsync()
    {
        return _iceI_knownPreservedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownPreservedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownPreservedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownPreservedAsBase", null, sync, _iceE_knownPreservedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownPreservedAsBase =
    {
        Base.class
    };

    default void knownPreservedAsKnownPreserved()
        throws KnownPreserved
    {
        knownPreservedAsKnownPreserved(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownPreservedAsKnownPreserved(java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_knownPreservedAsKnownPreservedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsKnownPreservedAsync()
    {
        return _iceI_knownPreservedAsKnownPreservedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownPreservedAsKnownPreservedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownPreservedAsKnownPreserved", null, sync, _iceE_knownPreservedAsKnownPreserved);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    default void relayKnownPreservedAsBase(RelayPrx r)
        throws Base
    {
        relayKnownPreservedAsBase(r, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void relayKnownPreservedAsBase(RelayPrx r, java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_relayKnownPreservedAsBaseAsync(r, context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> relayKnownPreservedAsBaseAsync(RelayPrx r)
    {
        return _iceI_relayKnownPreservedAsBaseAsync(r, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> relayKnownPreservedAsBaseAsync(RelayPrx r, java.util.Map<String, String> context)
    {
        return _iceI_relayKnownPreservedAsBaseAsync(r, context, false);
    }

    /**
     * @hidden
     * @param iceP_r -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_relayKnownPreservedAsBaseAsync(RelayPrx iceP_r, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "relayKnownPreservedAsBase", null, sync, _iceE_relayKnownPreservedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeProxy(iceP_r);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_relayKnownPreservedAsBase =
    {
        Base.class
    };

    default void relayKnownPreservedAsKnownPreserved(RelayPrx r)
        throws KnownPreserved
    {
        relayKnownPreservedAsKnownPreserved(r, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void relayKnownPreservedAsKnownPreserved(RelayPrx r, java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_relayKnownPreservedAsKnownPreservedAsync(r, context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> relayKnownPreservedAsKnownPreservedAsync(RelayPrx r)
    {
        return _iceI_relayKnownPreservedAsKnownPreservedAsync(r, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> relayKnownPreservedAsKnownPreservedAsync(RelayPrx r, java.util.Map<String, String> context)
    {
        return _iceI_relayKnownPreservedAsKnownPreservedAsync(r, context, false);
    }

    /**
     * @hidden
     * @param iceP_r -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_relayKnownPreservedAsKnownPreservedAsync(RelayPrx iceP_r, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "relayKnownPreservedAsKnownPreserved", null, sync, _iceE_relayKnownPreservedAsKnownPreserved);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeProxy(iceP_r);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_relayKnownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    default void unknownPreservedAsBase()
        throws Base
    {
        unknownPreservedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownPreservedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownPreservedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsBaseAsync()
    {
        return _iceI_unknownPreservedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownPreservedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownPreservedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownPreservedAsBase", null, sync, _iceE_unknownPreservedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownPreservedAsBase =
    {
        Base.class
    };

    default void unknownPreservedAsKnownPreserved()
        throws KnownPreserved
    {
        unknownPreservedAsKnownPreserved(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownPreservedAsKnownPreserved(java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_unknownPreservedAsKnownPreservedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsKnownPreservedAsync()
    {
        return _iceI_unknownPreservedAsKnownPreservedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownPreservedAsKnownPreservedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownPreservedAsKnownPreservedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownPreservedAsKnownPreserved", null, sync, _iceE_unknownPreservedAsKnownPreserved);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    default void relayUnknownPreservedAsBase(RelayPrx r)
        throws Base
    {
        relayUnknownPreservedAsBase(r, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void relayUnknownPreservedAsBase(RelayPrx r, java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_relayUnknownPreservedAsBaseAsync(r, context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> relayUnknownPreservedAsBaseAsync(RelayPrx r)
    {
        return _iceI_relayUnknownPreservedAsBaseAsync(r, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> relayUnknownPreservedAsBaseAsync(RelayPrx r, java.util.Map<String, String> context)
    {
        return _iceI_relayUnknownPreservedAsBaseAsync(r, context, false);
    }

    /**
     * @hidden
     * @param iceP_r -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_relayUnknownPreservedAsBaseAsync(RelayPrx iceP_r, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "relayUnknownPreservedAsBase", null, sync, _iceE_relayUnknownPreservedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeProxy(iceP_r);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_relayUnknownPreservedAsBase =
    {
        Base.class
    };

    default void relayUnknownPreservedAsKnownPreserved(RelayPrx r)
        throws KnownPreserved
    {
        relayUnknownPreservedAsKnownPreserved(r, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void relayUnknownPreservedAsKnownPreserved(RelayPrx r, java.util.Map<String, String> context)
        throws KnownPreserved
    {
        try
        {
            _iceI_relayUnknownPreservedAsKnownPreservedAsync(r, context, true).waitForResponseOrUserEx();
        }
        catch(KnownPreserved ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> relayUnknownPreservedAsKnownPreservedAsync(RelayPrx r)
    {
        return _iceI_relayUnknownPreservedAsKnownPreservedAsync(r, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> relayUnknownPreservedAsKnownPreservedAsync(RelayPrx r, java.util.Map<String, String> context)
    {
        return _iceI_relayUnknownPreservedAsKnownPreservedAsync(r, context, false);
    }

    /**
     * @hidden
     * @param iceP_r -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_relayUnknownPreservedAsKnownPreservedAsync(RelayPrx iceP_r, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "relayUnknownPreservedAsKnownPreserved", null, sync, _iceE_relayUnknownPreservedAsKnownPreserved);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, ostr -> {
                     ostr.writeProxy(iceP_r);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_relayUnknownPreservedAsKnownPreserved =
    {
        KnownPreserved.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default TestIntfPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (TestIntfPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default TestIntfPrx ice_adapterId(String newAdapterId)
    {
        return (TestIntfPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (TestIntfPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default TestIntfPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default TestIntfPrx ice_invocationTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default TestIntfPrx ice_connectionCached(boolean newCache)
    {
        return (TestIntfPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (TestIntfPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_secure(boolean b)
    {
        return (TestIntfPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (TestIntfPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_preferSecure(boolean b)
    {
        return (TestIntfPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (TestIntfPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (TestIntfPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default TestIntfPrx ice_collocationOptimized(boolean b)
    {
        return (TestIntfPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default TestIntfPrx ice_twoway()
    {
        return (TestIntfPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_oneway()
    {
        return (TestIntfPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_batchOneway()
    {
        return (TestIntfPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_datagram()
    {
        return (TestIntfPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_batchDatagram()
    {
        return (TestIntfPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default TestIntfPrx ice_compress(boolean co)
    {
        return (TestIntfPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default TestIntfPrx ice_timeout(int t)
    {
        return (TestIntfPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default TestIntfPrx ice_connectionId(String connectionId)
    {
        return (TestIntfPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (TestIntfPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }
}
