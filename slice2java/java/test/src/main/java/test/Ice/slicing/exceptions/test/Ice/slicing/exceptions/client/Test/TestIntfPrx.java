//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.slicing.exceptions.client.Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default void baseAsBase()
        throws Base
    {
        baseAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void baseAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_baseAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> baseAsBaseAsync()
    {
        return _iceI_baseAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> baseAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_baseAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_baseAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "baseAsBase", null, sync, _iceE_baseAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_baseAsBase =
    {
        Base.class
    };

    default void unknownDerivedAsBase()
        throws Base
    {
        unknownDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownDerivedAsBaseAsync()
    {
        return _iceI_unknownDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownDerivedAsBase", null, sync, _iceE_unknownDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownDerivedAsBase =
    {
        Base.class
    };

    default void knownDerivedAsBase()
        throws Base
    {
        knownDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsBaseAsync()
    {
        return _iceI_knownDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownDerivedAsBase", null, sync, _iceE_knownDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownDerivedAsBase =
    {
        Base.class
    };

    default void knownDerivedAsKnownDerived()
        throws KnownDerived
    {
        knownDerivedAsKnownDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownDerivedAsKnownDerived(java.util.Map<String, String> context)
        throws KnownDerived
    {
        try
        {
            _iceI_knownDerivedAsKnownDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownDerived ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsKnownDerivedAsync()
    {
        return _iceI_knownDerivedAsKnownDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownDerivedAsKnownDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownDerivedAsKnownDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownDerivedAsKnownDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownDerivedAsKnownDerived", null, sync, _iceE_knownDerivedAsKnownDerived);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownDerivedAsKnownDerived =
    {
        KnownDerived.class
    };

    default void unknownIntermediateAsBase()
        throws Base
    {
        unknownIntermediateAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownIntermediateAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownIntermediateAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownIntermediateAsBaseAsync()
    {
        return _iceI_unknownIntermediateAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownIntermediateAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownIntermediateAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownIntermediateAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownIntermediateAsBase", null, sync, _iceE_unknownIntermediateAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownIntermediateAsBase =
    {
        Base.class
    };

    default void knownIntermediateAsBase()
        throws Base
    {
        knownIntermediateAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownIntermediateAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownIntermediateAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsBaseAsync()
    {
        return _iceI_knownIntermediateAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownIntermediateAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownIntermediateAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownIntermediateAsBase", null, sync, _iceE_knownIntermediateAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownIntermediateAsBase =
    {
        Base.class
    };

    default void knownMostDerivedAsBase()
        throws Base
    {
        knownMostDerivedAsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_knownMostDerivedAsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsBaseAsync()
    {
        return _iceI_knownMostDerivedAsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsBase", null, sync, _iceE_knownMostDerivedAsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsBase =
    {
        Base.class
    };

    default void knownIntermediateAsKnownIntermediate()
        throws KnownIntermediate
    {
        knownIntermediateAsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownIntermediateAsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_knownIntermediateAsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsKnownIntermediateAsync()
    {
        return _iceI_knownIntermediateAsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownIntermediateAsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownIntermediateAsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownIntermediateAsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownIntermediateAsKnownIntermediate", null, sync, _iceE_knownIntermediateAsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownIntermediateAsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void knownMostDerivedAsKnownIntermediate()
        throws KnownIntermediate
    {
        knownMostDerivedAsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_knownMostDerivedAsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownIntermediateAsync()
    {
        return _iceI_knownMostDerivedAsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsKnownIntermediate", null, sync, _iceE_knownMostDerivedAsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void knownMostDerivedAsKnownMostDerived()
        throws KnownMostDerived
    {
        knownMostDerivedAsKnownMostDerived(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void knownMostDerivedAsKnownMostDerived(java.util.Map<String, String> context)
        throws KnownMostDerived
    {
        try
        {
            _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownMostDerived ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownMostDerivedAsync()
    {
        return _iceI_knownMostDerivedAsKnownMostDerivedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> knownMostDerivedAsKnownMostDerivedAsync(java.util.Map<String, String> context)
    {
        return _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_knownMostDerivedAsKnownMostDerivedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "knownMostDerivedAsKnownMostDerived", null, sync, _iceE_knownMostDerivedAsKnownMostDerived);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_knownMostDerivedAsKnownMostDerived =
    {
        KnownMostDerived.class
    };

    default void unknownMostDerived1AsBase()
        throws Base
    {
        unknownMostDerived1AsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived1AsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownMostDerived1AsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsBaseAsync()
    {
        return _iceI_unknownMostDerived1AsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived1AsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived1AsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived1AsBase", null, sync, _iceE_unknownMostDerived1AsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived1AsBase =
    {
        Base.class
    };

    default void unknownMostDerived1AsKnownIntermediate()
        throws KnownIntermediate
    {
        unknownMostDerived1AsKnownIntermediate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived1AsKnownIntermediate(java.util.Map<String, String> context)
        throws KnownIntermediate
    {
        try
        {
            _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, true).waitForResponseOrUserEx();
        }
        catch(KnownIntermediate ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsKnownIntermediateAsync()
    {
        return _iceI_unknownMostDerived1AsKnownIntermediateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived1AsKnownIntermediateAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived1AsKnownIntermediateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived1AsKnownIntermediate", null, sync, _iceE_unknownMostDerived1AsKnownIntermediate);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived1AsKnownIntermediate =
    {
        KnownIntermediate.class
    };

    default void unknownMostDerived2AsBase()
        throws Base
    {
        unknownMostDerived2AsBase(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void unknownMostDerived2AsBase(java.util.Map<String, String> context)
        throws Base
    {
        try
        {
            _iceI_unknownMostDerived2AsBaseAsync(context, true).waitForResponseOrUserEx();
        }
        catch(Base ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseAsync()
    {
        return _iceI_unknownMostDerived2AsBaseAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> unknownMostDerived2AsBaseAsync(java.util.Map<String, String> context)
    {
        return _iceI_unknownMostDerived2AsBaseAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_unknownMostDerived2AsBaseAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unknownMostDerived2AsBase", null, sync, _iceE_unknownMostDerived2AsBase);
        f.invoke(true, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_unknownMostDerived2AsBase =
    {
        Base.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.SlicedFormat, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
