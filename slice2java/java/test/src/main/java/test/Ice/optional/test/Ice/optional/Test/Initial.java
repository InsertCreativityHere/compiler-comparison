//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.optional.Test;

public interface Initial extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByte.
     **/
    public static class OpByteResult
    {
        /**
         * Default constructor.
         **/
        public OpByteResult()
        {
        }

        public OpByteResult(java.util.Optional<java.lang.Byte> returnValue, java.util.Optional<java.lang.Byte> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteResult(byte returnValue, byte p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Byte> returnValue;
        public java.util.Optional<java.lang.Byte> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByte(1, returnValue);
            ostr.writeByte(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByte(1);
            this.p3 = istr.readByte(3);
        }
    }

    /**
     * Holds the result of operation opByteReq.
     **/
    public static class OpByteReqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteReqResult()
        {
        }

        public OpByteReqResult(java.util.Optional<java.lang.Byte> returnValue, java.util.Optional<java.lang.Byte> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteReqResult(byte returnValue, byte p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Byte> returnValue;
        public java.util.Optional<java.lang.Byte> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByte(1, returnValue);
            ostr.writeByte(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByte(1);
            this.p3 = istr.readByte(3);
        }
    }

    /**
     * Holds the result of operation opBool.
     **/
    public static class OpBoolResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolResult()
        {
        }

        public OpBoolResult(java.util.Optional<java.lang.Boolean> returnValue, java.util.Optional<java.lang.Boolean> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolResult(boolean returnValue, boolean p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Boolean> returnValue;
        public java.util.Optional<java.lang.Boolean> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBool(1, returnValue);
            ostr.writeBool(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBool(1);
            this.p3 = istr.readBool(3);
        }
    }

    /**
     * Holds the result of operation opBoolReq.
     **/
    public static class OpBoolReqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolReqResult()
        {
        }

        public OpBoolReqResult(java.util.Optional<java.lang.Boolean> returnValue, java.util.Optional<java.lang.Boolean> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolReqResult(boolean returnValue, boolean p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Boolean> returnValue;
        public java.util.Optional<java.lang.Boolean> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBool(1, returnValue);
            ostr.writeBool(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBool(1);
            this.p3 = istr.readBool(3);
        }
    }

    /**
     * Holds the result of operation opShort.
     **/
    public static class OpShortResult
    {
        /**
         * Default constructor.
         **/
        public OpShortResult()
        {
        }

        public OpShortResult(java.util.Optional<java.lang.Short> returnValue, java.util.Optional<java.lang.Short> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortResult(short returnValue, short p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Short> returnValue;
        public java.util.Optional<java.lang.Short> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShort(1, returnValue);
            ostr.writeShort(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShort(1);
            this.p3 = istr.readShort(3);
        }
    }

    /**
     * Holds the result of operation opShortReq.
     **/
    public static class OpShortReqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortReqResult()
        {
        }

        public OpShortReqResult(java.util.Optional<java.lang.Short> returnValue, java.util.Optional<java.lang.Short> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortReqResult(short returnValue, short p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Short> returnValue;
        public java.util.Optional<java.lang.Short> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShort(1, returnValue);
            ostr.writeShort(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShort(1);
            this.p3 = istr.readShort(3);
        }
    }

    /**
     * Holds the result of operation opInt.
     **/
    public static class OpIntResult
    {
        /**
         * Default constructor.
         **/
        public OpIntResult()
        {
        }

        public OpIntResult(java.util.OptionalInt returnValue, java.util.OptionalInt p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntResult(int returnValue, int p3)
        {
            this.returnValue = java.util.OptionalInt.of(returnValue);
            this.p3 = java.util.OptionalInt.of(p3);
        }

        public java.util.OptionalInt returnValue;
        public java.util.OptionalInt p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeInt(1, returnValue);
            ostr.writeInt(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readInt(1);
            this.p3 = istr.readInt(3);
        }
    }

    /**
     * Holds the result of operation opIntReq.
     **/
    public static class OpIntReqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntReqResult()
        {
        }

        public OpIntReqResult(java.util.OptionalInt returnValue, java.util.OptionalInt p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntReqResult(int returnValue, int p3)
        {
            this.returnValue = java.util.OptionalInt.of(returnValue);
            this.p3 = java.util.OptionalInt.of(p3);
        }

        public java.util.OptionalInt returnValue;
        public java.util.OptionalInt p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeInt(1, returnValue);
            ostr.writeInt(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readInt(1);
            this.p3 = istr.readInt(3);
        }
    }

    /**
     * Holds the result of operation opLong.
     **/
    public static class OpLongResult
    {
        /**
         * Default constructor.
         **/
        public OpLongResult()
        {
        }

        public OpLongResult(java.util.OptionalLong returnValue, java.util.OptionalLong p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongResult(long returnValue, long p3)
        {
            this.returnValue = java.util.OptionalLong.of(returnValue);
            this.p3 = java.util.OptionalLong.of(p3);
        }

        public java.util.OptionalLong returnValue;
        public java.util.OptionalLong p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(2, this.p3);
            ostr.writeLong(3, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readLong(2);
            returnValue = istr.readLong(3);
        }
    }

    /**
     * Holds the result of operation opLongReq.
     **/
    public static class OpLongReqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongReqResult()
        {
        }

        public OpLongReqResult(java.util.OptionalLong returnValue, java.util.OptionalLong p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongReqResult(long returnValue, long p3)
        {
            this.returnValue = java.util.OptionalLong.of(returnValue);
            this.p3 = java.util.OptionalLong.of(p3);
        }

        public java.util.OptionalLong returnValue;
        public java.util.OptionalLong p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(2, this.p3);
            ostr.writeLong(3, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readLong(2);
            returnValue = istr.readLong(3);
        }
    }

    /**
     * Holds the result of operation opFloat.
     **/
    public static class OpFloatResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatResult()
        {
        }

        public OpFloatResult(java.util.Optional<java.lang.Float> returnValue, java.util.Optional<java.lang.Float> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatResult(float returnValue, float p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Float> returnValue;
        public java.util.Optional<java.lang.Float> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloat(1, returnValue);
            ostr.writeFloat(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloat(1);
            this.p3 = istr.readFloat(3);
        }
    }

    /**
     * Holds the result of operation opFloatReq.
     **/
    public static class OpFloatReqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatReqResult()
        {
        }

        public OpFloatReqResult(java.util.Optional<java.lang.Float> returnValue, java.util.Optional<java.lang.Float> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatReqResult(float returnValue, float p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Float> returnValue;
        public java.util.Optional<java.lang.Float> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloat(1, returnValue);
            ostr.writeFloat(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloat(1);
            this.p3 = istr.readFloat(3);
        }
    }

    /**
     * Holds the result of operation opDouble.
     **/
    public static class OpDoubleResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleResult()
        {
        }

        public OpDoubleResult(java.util.OptionalDouble returnValue, java.util.OptionalDouble p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleResult(double returnValue, double p3)
        {
            this.returnValue = java.util.OptionalDouble.of(returnValue);
            this.p3 = java.util.OptionalDouble.of(p3);
        }

        public java.util.OptionalDouble returnValue;
        public java.util.OptionalDouble p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDouble(1, returnValue);
            ostr.writeDouble(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDouble(1);
            this.p3 = istr.readDouble(3);
        }
    }

    /**
     * Holds the result of operation opDoubleReq.
     **/
    public static class OpDoubleReqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleReqResult()
        {
        }

        public OpDoubleReqResult(java.util.OptionalDouble returnValue, java.util.OptionalDouble p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleReqResult(double returnValue, double p3)
        {
            this.returnValue = java.util.OptionalDouble.of(returnValue);
            this.p3 = java.util.OptionalDouble.of(p3);
        }

        public java.util.OptionalDouble returnValue;
        public java.util.OptionalDouble p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDouble(1, returnValue);
            ostr.writeDouble(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDouble(1);
            this.p3 = istr.readDouble(3);
        }
    }

    /**
     * Holds the result of operation opString.
     **/
    public static class OpStringResult
    {
        /**
         * Default constructor.
         **/
        public OpStringResult()
        {
        }

        public OpStringResult(java.util.Optional<java.lang.String> returnValue, java.util.Optional<java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringResult(String returnValue, String p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.lang.String> returnValue;
        public java.util.Optional<java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(1, returnValue);
            ostr.writeString(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readString(1);
            this.p3 = istr.readString(3);
        }
    }

    /**
     * Holds the result of operation opStringReq.
     **/
    public static class OpStringReqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringReqResult()
        {
        }

        public OpStringReqResult(java.util.Optional<java.lang.String> returnValue, java.util.Optional<java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringReqResult(String returnValue, String p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.lang.String> returnValue;
        public java.util.Optional<java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(1, returnValue);
            ostr.writeString(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readString(1);
            this.p3 = istr.readString(3);
        }
    }

    /**
     * Holds the result of operation opMyEnum.
     **/
    public static class OpMyEnumResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumResult()
        {
        }

        public OpMyEnumResult(java.util.Optional<MyEnum> returnValue, java.util.Optional<MyEnum> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpMyEnumResult(MyEnum returnValue, MyEnum p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<MyEnum> returnValue;
        public java.util.Optional<MyEnum> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnum.ice_write(ostr, 1, returnValue);
            MyEnum.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = MyEnum.ice_read(istr, 1);
            this.p3 = MyEnum.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opMyEnumReq.
     **/
    public static class OpMyEnumReqResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumReqResult()
        {
        }

        public OpMyEnumReqResult(java.util.Optional<MyEnum> returnValue, java.util.Optional<MyEnum> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpMyEnumReqResult(MyEnum returnValue, MyEnum p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<MyEnum> returnValue;
        public java.util.Optional<MyEnum> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnum.ice_write(ostr, 1, returnValue);
            MyEnum.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = MyEnum.ice_read(istr, 1);
            this.p3 = MyEnum.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStruct.
     **/
    public static class OpSmallStructResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructResult()
        {
        }

        public OpSmallStructResult(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructResult(SmallStruct returnValue, SmallStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct> returnValue;
        public java.util.Optional<SmallStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStruct.ice_write(ostr, 1, returnValue);
            SmallStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStruct.ice_read(istr, 1);
            this.p3 = SmallStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStructReq.
     **/
    public static class OpSmallStructReqResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructReqResult()
        {
        }

        public OpSmallStructReqResult(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructReqResult(SmallStruct returnValue, SmallStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct> returnValue;
        public java.util.Optional<SmallStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStruct.ice_write(ostr, 1, returnValue);
            SmallStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStruct.ice_read(istr, 1);
            this.p3 = SmallStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStruct.
     **/
    public static class OpFixedStructResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructResult()
        {
        }

        public OpFixedStructResult(java.util.Optional<FixedStruct> returnValue, java.util.Optional<FixedStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructResult(FixedStruct returnValue, FixedStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct> returnValue;
        public java.util.Optional<FixedStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStruct.ice_write(ostr, 1, returnValue);
            FixedStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStruct.ice_read(istr, 1);
            this.p3 = FixedStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructReq.
     **/
    public static class OpFixedStructReqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructReqResult()
        {
        }

        public OpFixedStructReqResult(java.util.Optional<FixedStruct> returnValue, java.util.Optional<FixedStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructReqResult(FixedStruct returnValue, FixedStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct> returnValue;
        public java.util.Optional<FixedStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStruct.ice_write(ostr, 1, returnValue);
            FixedStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStruct.ice_read(istr, 1);
            this.p3 = FixedStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStruct.
     **/
    public static class OpVarStructResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructResult()
        {
        }

        public OpVarStructResult(java.util.Optional<VarStruct> returnValue, java.util.Optional<VarStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructResult(VarStruct returnValue, VarStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct> returnValue;
        public java.util.Optional<VarStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStruct.ice_write(ostr, 1, returnValue);
            VarStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStruct.ice_read(istr, 1);
            this.p3 = VarStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStructReq.
     **/
    public static class OpVarStructReqResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructReqResult()
        {
        }

        public OpVarStructReqResult(java.util.Optional<VarStruct> returnValue, java.util.Optional<VarStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructReqResult(VarStruct returnValue, VarStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct> returnValue;
        public java.util.Optional<VarStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStruct.ice_write(ostr, 1, returnValue);
            VarStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStruct.ice_read(istr, 1);
            this.p3 = VarStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOneOptional.
     **/
    public static class OpOneOptionalResult
    {
        /**
         * Default constructor.
         **/
        public OpOneOptionalResult()
        {
        }

        public OpOneOptionalResult(java.util.Optional<OneOptional> returnValue, java.util.Optional<OneOptional> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpOneOptionalResult(OneOptional returnValue, OneOptional p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<OneOptional> returnValue;
        public java.util.Optional<OneOptional> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(1, returnValue);
            ostr.writeValue(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(1, v -> returnValue = v, OneOptional.class);
            istr.readValue(3, v -> p3 = v, OneOptional.class);
        }
    }

    /**
     * Holds the result of operation opOneOptionalReq.
     **/
    public static class OpOneOptionalReqResult
    {
        /**
         * Default constructor.
         **/
        public OpOneOptionalReqResult()
        {
        }

        public OpOneOptionalReqResult(java.util.Optional<OneOptional> returnValue, java.util.Optional<OneOptional> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpOneOptionalReqResult(OneOptional returnValue, OneOptional p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<OneOptional> returnValue;
        public java.util.Optional<OneOptional> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(1, returnValue);
            ostr.writeValue(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(1, v -> returnValue = v, OneOptional.class);
            istr.readValue(3, v -> p3 = v, OneOptional.class);
        }
    }

    /**
     * Holds the result of operation opOneOptionalProxy.
     **/
    public static class OpOneOptionalProxyResult
    {
        /**
         * Default constructor.
         **/
        public OpOneOptionalProxyResult()
        {
        }

        public OpOneOptionalProxyResult(java.util.Optional<com.zeroc.Ice.ObjectPrx> returnValue, java.util.Optional<com.zeroc.Ice.ObjectPrx> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpOneOptionalProxyResult(com.zeroc.Ice.ObjectPrx returnValue, com.zeroc.Ice.ObjectPrx p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<com.zeroc.Ice.ObjectPrx> returnValue;
        public java.util.Optional<com.zeroc.Ice.ObjectPrx> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(1, returnValue);
            ostr.writeProxy(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readProxy(1, com.zeroc.Ice.ObjectPrx::uncheckedCast);
            this.p3 = istr.readProxy(3, com.zeroc.Ice.ObjectPrx::uncheckedCast);
        }
    }

    /**
     * Holds the result of operation opOneOptionalProxyReq.
     **/
    public static class OpOneOptionalProxyReqResult
    {
        /**
         * Default constructor.
         **/
        public OpOneOptionalProxyReqResult()
        {
        }

        public OpOneOptionalProxyReqResult(java.util.Optional<com.zeroc.Ice.ObjectPrx> returnValue, java.util.Optional<com.zeroc.Ice.ObjectPrx> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpOneOptionalProxyReqResult(com.zeroc.Ice.ObjectPrx returnValue, com.zeroc.Ice.ObjectPrx p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<com.zeroc.Ice.ObjectPrx> returnValue;
        public java.util.Optional<com.zeroc.Ice.ObjectPrx> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(1, returnValue);
            ostr.writeProxy(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readProxy(1, com.zeroc.Ice.ObjectPrx::uncheckedCast);
            this.p3 = istr.readProxy(3, com.zeroc.Ice.ObjectPrx::uncheckedCast);
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(java.util.Optional<byte[]> returnValue, java.util.Optional<byte[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteSeqResult(byte[] returnValue, byte[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<byte[]> returnValue;
        public java.util.Optional<byte[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(1, returnValue);
            ostr.writeByteSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByteSeq(1);
            this.p3 = istr.readByteSeq(3);
        }
    }

    /**
     * Holds the result of operation opByteSeqReq.
     **/
    public static class OpByteSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqReqResult()
        {
        }

        public OpByteSeqReqResult(java.util.Optional<byte[]> returnValue, java.util.Optional<byte[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteSeqReqResult(byte[] returnValue, byte[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<byte[]> returnValue;
        public java.util.Optional<byte[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(1, returnValue);
            ostr.writeByteSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByteSeq(1);
            this.p3 = istr.readByteSeq(3);
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(java.util.Optional<boolean[]> returnValue, java.util.Optional<boolean[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<boolean[]> returnValue;
        public java.util.Optional<boolean[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(1, returnValue);
            ostr.writeBoolSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBoolSeq(1);
            this.p3 = istr.readBoolSeq(3);
        }
    }

    /**
     * Holds the result of operation opBoolSeqReq.
     **/
    public static class OpBoolSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqReqResult()
        {
        }

        public OpBoolSeqReqResult(java.util.Optional<boolean[]> returnValue, java.util.Optional<boolean[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolSeqReqResult(boolean[] returnValue, boolean[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<boolean[]> returnValue;
        public java.util.Optional<boolean[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(1, returnValue);
            ostr.writeBoolSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBoolSeq(1);
            this.p3 = istr.readBoolSeq(3);
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(java.util.Optional<short[]> returnValue, java.util.Optional<short[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortSeqResult(short[] returnValue, short[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<short[]> returnValue;
        public java.util.Optional<short[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(1, returnValue);
            ostr.writeShortSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShortSeq(1);
            this.p3 = istr.readShortSeq(3);
        }
    }

    /**
     * Holds the result of operation opShortSeqReq.
     **/
    public static class OpShortSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqReqResult()
        {
        }

        public OpShortSeqReqResult(java.util.Optional<short[]> returnValue, java.util.Optional<short[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortSeqReqResult(short[] returnValue, short[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<short[]> returnValue;
        public java.util.Optional<short[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(1, returnValue);
            ostr.writeShortSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShortSeq(1);
            this.p3 = istr.readShortSeq(3);
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(java.util.Optional<int[]> returnValue, java.util.Optional<int[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntSeqResult(int[] returnValue, int[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<int[]> returnValue;
        public java.util.Optional<int[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(1, returnValue);
            ostr.writeIntSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readIntSeq(1);
            this.p3 = istr.readIntSeq(3);
        }
    }

    /**
     * Holds the result of operation opIntSeqReq.
     **/
    public static class OpIntSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqReqResult()
        {
        }

        public OpIntSeqReqResult(java.util.Optional<int[]> returnValue, java.util.Optional<int[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntSeqReqResult(int[] returnValue, int[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<int[]> returnValue;
        public java.util.Optional<int[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(1, returnValue);
            ostr.writeIntSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readIntSeq(1);
            this.p3 = istr.readIntSeq(3);
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(java.util.Optional<long[]> returnValue, java.util.Optional<long[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongSeqResult(long[] returnValue, long[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<long[]> returnValue;
        public java.util.Optional<long[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(1, returnValue);
            ostr.writeLongSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readLongSeq(1);
            this.p3 = istr.readLongSeq(3);
        }
    }

    /**
     * Holds the result of operation opLongSeqReq.
     **/
    public static class OpLongSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqReqResult()
        {
        }

        public OpLongSeqReqResult(java.util.Optional<long[]> returnValue, java.util.Optional<long[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongSeqReqResult(long[] returnValue, long[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<long[]> returnValue;
        public java.util.Optional<long[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(1, returnValue);
            ostr.writeLongSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readLongSeq(1);
            this.p3 = istr.readLongSeq(3);
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(java.util.Optional<float[]> returnValue, java.util.Optional<float[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatSeqResult(float[] returnValue, float[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<float[]> returnValue;
        public java.util.Optional<float[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(1, returnValue);
            ostr.writeFloatSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloatSeq(1);
            this.p3 = istr.readFloatSeq(3);
        }
    }

    /**
     * Holds the result of operation opFloatSeqReq.
     **/
    public static class OpFloatSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqReqResult()
        {
        }

        public OpFloatSeqReqResult(java.util.Optional<float[]> returnValue, java.util.Optional<float[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatSeqReqResult(float[] returnValue, float[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<float[]> returnValue;
        public java.util.Optional<float[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(1, returnValue);
            ostr.writeFloatSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloatSeq(1);
            this.p3 = istr.readFloatSeq(3);
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(java.util.Optional<double[]> returnValue, java.util.Optional<double[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleSeqResult(double[] returnValue, double[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<double[]> returnValue;
        public java.util.Optional<double[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(1, returnValue);
            ostr.writeDoubleSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDoubleSeq(1);
            this.p3 = istr.readDoubleSeq(3);
        }
    }

    /**
     * Holds the result of operation opDoubleSeqReq.
     **/
    public static class OpDoubleSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqReqResult()
        {
        }

        public OpDoubleSeqReqResult(java.util.Optional<double[]> returnValue, java.util.Optional<double[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleSeqReqResult(double[] returnValue, double[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<double[]> returnValue;
        public java.util.Optional<double[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(1, returnValue);
            ostr.writeDoubleSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDoubleSeq(1);
            this.p3 = istr.readDoubleSeq(3);
        }
    }

    /**
     * Holds the result of operation opStringSeq.
     **/
    public static class OpStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqResult()
        {
        }

        public OpStringSeqResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringSeqResult(String[] returnValue, String[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(1, returnValue);
            ostr.writeStringSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(1);
            this.p3 = istr.readStringSeq(3);
        }
    }

    /**
     * Holds the result of operation opStringSeqReq.
     **/
    public static class OpStringSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqReqResult()
        {
        }

        public OpStringSeqReqResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringSeqReqResult(String[] returnValue, String[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(1, returnValue);
            ostr.writeStringSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(1);
            this.p3 = istr.readStringSeq(3);
        }
    }

    /**
     * Holds the result of operation opSmallStructSeq.
     **/
    public static class OpSmallStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructSeqResult()
        {
        }

        public OpSmallStructSeqResult(java.util.Optional<SmallStruct[]> returnValue, java.util.Optional<SmallStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructSeqResult(SmallStruct[] returnValue, SmallStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct[]> returnValue;
        public java.util.Optional<SmallStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructSeqHelper.write(ostr, 1, returnValue);
            SmallStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructSeqHelper.read(istr, 1);
            this.p3 = SmallStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStructSeqReq.
     **/
    public static class OpSmallStructSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructSeqReqResult()
        {
        }

        public OpSmallStructSeqReqResult(java.util.Optional<SmallStruct[]> returnValue, java.util.Optional<SmallStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructSeqReqResult(SmallStruct[] returnValue, SmallStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct[]> returnValue;
        public java.util.Optional<SmallStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructSeqHelper.write(ostr, 1, returnValue);
            SmallStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructSeqHelper.read(istr, 1);
            this.p3 = SmallStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStructList.
     **/
    public static class OpSmallStructListResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructListResult()
        {
        }

        public OpSmallStructListResult(java.util.Optional<java.util.List<SmallStruct>> returnValue, java.util.Optional<java.util.List<SmallStruct>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructListResult(java.util.List<SmallStruct> returnValue, java.util.List<SmallStruct> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.List<SmallStruct>> returnValue;
        public java.util.Optional<java.util.List<SmallStruct>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructListHelper.write(ostr, 1, returnValue);
            SmallStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructListHelper.read(istr, 1);
            this.p3 = SmallStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStructListReq.
     **/
    public static class OpSmallStructListReqResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructListReqResult()
        {
        }

        public OpSmallStructListReqResult(java.util.Optional<java.util.List<SmallStruct>> returnValue, java.util.Optional<java.util.List<SmallStruct>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructListReqResult(java.util.List<SmallStruct> returnValue, java.util.List<SmallStruct> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.List<SmallStruct>> returnValue;
        public java.util.Optional<java.util.List<SmallStruct>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructListHelper.write(ostr, 1, returnValue);
            SmallStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructListHelper.read(istr, 1);
            this.p3 = SmallStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructSeq.
     **/
    public static class OpFixedStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructSeqResult()
        {
        }

        public OpFixedStructSeqResult(java.util.Optional<FixedStruct[]> returnValue, java.util.Optional<FixedStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructSeqResult(FixedStruct[] returnValue, FixedStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct[]> returnValue;
        public java.util.Optional<FixedStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructSeqHelper.write(ostr, 1, returnValue);
            FixedStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructSeqHelper.read(istr, 1);
            this.p3 = FixedStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructSeqReq.
     **/
    public static class OpFixedStructSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructSeqReqResult()
        {
        }

        public OpFixedStructSeqReqResult(java.util.Optional<FixedStruct[]> returnValue, java.util.Optional<FixedStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructSeqReqResult(FixedStruct[] returnValue, FixedStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct[]> returnValue;
        public java.util.Optional<FixedStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructSeqHelper.write(ostr, 1, returnValue);
            FixedStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructSeqHelper.read(istr, 1);
            this.p3 = FixedStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructList.
     **/
    public static class OpFixedStructListResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructListResult()
        {
        }

        public OpFixedStructListResult(java.util.Optional<java.util.List<FixedStruct>> returnValue, java.util.Optional<java.util.List<FixedStruct>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructListResult(java.util.List<FixedStruct> returnValue, java.util.List<FixedStruct> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.List<FixedStruct>> returnValue;
        public java.util.Optional<java.util.List<FixedStruct>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructListHelper.write(ostr, 1, returnValue);
            FixedStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructListHelper.read(istr, 1);
            this.p3 = FixedStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructListReq.
     **/
    public static class OpFixedStructListReqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructListReqResult()
        {
        }

        public OpFixedStructListReqResult(java.util.Optional<java.util.List<FixedStruct>> returnValue, java.util.Optional<java.util.List<FixedStruct>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructListReqResult(java.util.List<FixedStruct> returnValue, java.util.List<FixedStruct> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.List<FixedStruct>> returnValue;
        public java.util.Optional<java.util.List<FixedStruct>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructListHelper.write(ostr, 1, returnValue);
            FixedStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructListHelper.read(istr, 1);
            this.p3 = FixedStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStructSeq.
     **/
    public static class OpVarStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructSeqResult()
        {
        }

        public OpVarStructSeqResult(java.util.Optional<VarStruct[]> returnValue, java.util.Optional<VarStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructSeqResult(VarStruct[] returnValue, VarStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct[]> returnValue;
        public java.util.Optional<VarStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStructSeqHelper.write(ostr, 1, returnValue);
            VarStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStructSeqHelper.read(istr, 1);
            this.p3 = VarStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStructSeqReq.
     **/
    public static class OpVarStructSeqReqResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructSeqReqResult()
        {
        }

        public OpVarStructSeqReqResult(java.util.Optional<VarStruct[]> returnValue, java.util.Optional<VarStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructSeqReqResult(VarStruct[] returnValue, VarStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct[]> returnValue;
        public java.util.Optional<VarStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStructSeqHelper.write(ostr, 1, returnValue);
            VarStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStructSeqHelper.read(istr, 1);
            this.p3 = VarStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSerializable.
     **/
    public static class OpSerializableResult
    {
        /**
         * Default constructor.
         **/
        public OpSerializableResult()
        {
        }

        public OpSerializableResult(java.util.Optional<test.Ice.optional.SerializableClass> returnValue, java.util.Optional<test.Ice.optional.SerializableClass> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSerializableResult(test.Ice.optional.SerializableClass returnValue, test.Ice.optional.SerializableClass p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<test.Ice.optional.SerializableClass> returnValue;
        public java.util.Optional<test.Ice.optional.SerializableClass> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeSerializable(1, returnValue);
            ostr.writeSerializable(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readSerializable(1, test.Ice.optional.SerializableClass.class);
            this.p3 = istr.readSerializable(3, test.Ice.optional.SerializableClass.class);
        }
    }

    /**
     * Holds the result of operation opSerializableReq.
     **/
    public static class OpSerializableReqResult
    {
        /**
         * Default constructor.
         **/
        public OpSerializableReqResult()
        {
        }

        public OpSerializableReqResult(java.util.Optional<test.Ice.optional.SerializableClass> returnValue, java.util.Optional<test.Ice.optional.SerializableClass> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSerializableReqResult(test.Ice.optional.SerializableClass returnValue, test.Ice.optional.SerializableClass p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<test.Ice.optional.SerializableClass> returnValue;
        public java.util.Optional<test.Ice.optional.SerializableClass> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeSerializable(1, returnValue);
            ostr.writeSerializable(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readSerializable(1, test.Ice.optional.SerializableClass.class);
            this.p3 = istr.readSerializable(3, test.Ice.optional.SerializableClass.class);
        }
    }

    /**
     * Holds the result of operation opIntIntDict.
     **/
    public static class OpIntIntDictResult
    {
        /**
         * Default constructor.
         **/
        public OpIntIntDictResult()
        {
        }

        public OpIntIntDictResult(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntIntDictResult(java.util.Map<java.lang.Integer, java.lang.Integer> returnValue, java.util.Map<java.lang.Integer, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntIntDictHelper.write(ostr, 1, returnValue);
            IntIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntIntDictHelper.read(istr, 1);
            this.p3 = IntIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opIntIntDictReq.
     **/
    public static class OpIntIntDictReqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntIntDictReqResult()
        {
        }

        public OpIntIntDictReqResult(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntIntDictReqResult(java.util.Map<java.lang.Integer, java.lang.Integer> returnValue, java.util.Map<java.lang.Integer, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntIntDictHelper.write(ostr, 1, returnValue);
            IntIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntIntDictHelper.read(istr, 1);
            this.p3 = IntIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opStringIntDict.
     **/
    public static class OpStringIntDictResult
    {
        /**
         * Default constructor.
         **/
        public OpStringIntDictResult()
        {
        }

        public OpStringIntDictResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringIntDictResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, 1, returnValue);
            StringIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringIntDictHelper.read(istr, 1);
            this.p3 = StringIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opStringIntDictReq.
     **/
    public static class OpStringIntDictReqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringIntDictReqResult()
        {
        }

        public OpStringIntDictReqResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringIntDictReqResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, 1, returnValue);
            StringIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringIntDictHelper.read(istr, 1);
            this.p3 = StringIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opIntOneOptionalDict.
     **/
    public static class OpIntOneOptionalDictResult
    {
        /**
         * Default constructor.
         **/
        public OpIntOneOptionalDictResult()
        {
        }

        public OpIntOneOptionalDictResult(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntOneOptionalDictResult(java.util.Map<java.lang.Integer, OneOptional> returnValue, java.util.Map<java.lang.Integer, OneOptional> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntOneOptionalDictHelper.write(ostr, 1, returnValue);
            IntOneOptionalDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntOneOptionalDictHelper.read(istr, 1);
            this.p3 = IntOneOptionalDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opIntOneOptionalDictReq.
     **/
    public static class OpIntOneOptionalDictReqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntOneOptionalDictReqResult()
        {
        }

        public OpIntOneOptionalDictReqResult(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntOneOptionalDictReqResult(java.util.Map<java.lang.Integer, OneOptional> returnValue, java.util.Map<java.lang.Integer, OneOptional> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntOneOptionalDictHelper.write(ostr, 1, returnValue);
            IntOneOptionalDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntOneOptionalDictHelper.read(istr, 1);
            this.p3 = IntOneOptionalDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct1.
     **/
    public static class OpMStruct1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct1MarshaledResult(java.util.Optional<SmallStruct> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            SmallStruct.ice_write(_ostr, 1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMStruct1MarshaledResult(SmallStruct returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMStruct2.
     **/
    public static class OpMStruct2Result
    {
        /**
         * Default constructor.
         **/
        public OpMStruct2Result()
        {
        }

        public OpMStruct2Result(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMStruct2Result(SmallStruct returnValue, SmallStruct p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<SmallStruct> returnValue;
        public java.util.Optional<SmallStruct> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStruct.ice_write(ostr, 1, returnValue);
            SmallStruct.ice_write(ostr, 3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStruct.ice_read(istr, 1);
            this.p2 = SmallStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct2.
     **/
    public static class OpMStruct2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct2MarshaledResult(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            SmallStruct.ice_write(_ostr, 1, returnValue);
            SmallStruct.ice_write(_ostr, 3, p2);
            _ostr.endEncapsulation();
        }

        public OpMStruct2MarshaledResult(SmallStruct returnValue, SmallStruct p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMSeq1.
     **/
    public static class OpMSeq1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq1MarshaledResult(java.util.Optional<String[]> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMSeq1MarshaledResult(String[] returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMSeq2.
     **/
    public static class OpMSeq2Result
    {
        /**
         * Default constructor.
         **/
        public OpMSeq2Result()
        {
        }

        public OpMSeq2Result(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMSeq2Result(String[] returnValue, String[] p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(1, returnValue);
            ostr.writeStringSeq(3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(1);
            this.p2 = istr.readStringSeq(3);
        }
    }

    /**
     * Holds the marshaled result of operation opMSeq2.
     **/
    public static class OpMSeq2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq2MarshaledResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(1, returnValue);
            _ostr.writeStringSeq(3, p2);
            _ostr.endEncapsulation();
        }

        public OpMSeq2MarshaledResult(String[] returnValue, String[] p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMDict1.
     **/
    public static class OpMDict1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict1MarshaledResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            StringIntDictHelper.write(_ostr, 1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMDict1MarshaledResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMDict2.
     **/
    public static class OpMDict2Result
    {
        /**
         * Default constructor.
         **/
        public OpMDict2Result()
        {
        }

        public OpMDict2Result(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMDict2Result(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, 1, returnValue);
            StringIntDictHelper.write(ostr, 3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringIntDictHelper.read(istr, 1);
            this.p2 = StringIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMDict2.
     **/
    public static class OpMDict2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict2MarshaledResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            StringIntDictHelper.write(_ostr, 1, returnValue);
            StringIntDictHelper.write(_ostr, 3, p2);
            _ostr.endEncapsulation();
        }

        public OpMDict2MarshaledResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMG1.
     **/
    public static class OpMG1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMG1MarshaledResult(java.util.Optional<G> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeValue(1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMG1MarshaledResult(G returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMG2.
     **/
    public static class OpMG2Result
    {
        /**
         * Default constructor.
         **/
        public OpMG2Result()
        {
        }

        public OpMG2Result(java.util.Optional<G> returnValue, java.util.Optional<G> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMG2Result(G returnValue, G p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<G> returnValue;
        public java.util.Optional<G> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(1, returnValue);
            ostr.writeValue(3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(1, v -> returnValue = v, G.class);
            istr.readValue(3, v -> p2 = v, G.class);
        }
    }

    /**
     * Holds the marshaled result of operation opMG2.
     **/
    public static class OpMG2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMG2MarshaledResult(java.util.Optional<G> returnValue, java.util.Optional<G> p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeValue(1, returnValue);
            _ostr.writeValue(3, p2);
            _ostr.endEncapsulation();
        }

        public OpMG2MarshaledResult(G returnValue, G p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    void shutdown(com.zeroc.Ice.Current current);

    com.zeroc.Ice.Value pingPong(com.zeroc.Ice.Value o, com.zeroc.Ice.Current current);

    void opOptionalException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, com.zeroc.Ice.Current current)
        throws OptionalException;

    void opDerivedException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, com.zeroc.Ice.Current current)
        throws OptionalException;

    void opRequiredException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, java.util.Optional<OneOptional> o, com.zeroc.Ice.Current current)
        throws OptionalException;

    Initial.OpByteResult opByte(java.util.Optional<java.lang.Byte> p1, com.zeroc.Ice.Current current);

    Initial.OpByteReqResult opByteReq(java.util.Optional<java.lang.Byte> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolResult opBool(java.util.Optional<java.lang.Boolean> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolReqResult opBoolReq(java.util.Optional<java.lang.Boolean> p1, com.zeroc.Ice.Current current);

    Initial.OpShortResult opShort(java.util.Optional<java.lang.Short> p1, com.zeroc.Ice.Current current);

    Initial.OpShortReqResult opShortReq(java.util.Optional<java.lang.Short> p1, com.zeroc.Ice.Current current);

    Initial.OpIntResult opInt(java.util.OptionalInt p1, com.zeroc.Ice.Current current);

    Initial.OpIntReqResult opIntReq(java.util.OptionalInt p1, com.zeroc.Ice.Current current);

    Initial.OpLongResult opLong(java.util.OptionalLong p1, com.zeroc.Ice.Current current);

    Initial.OpLongReqResult opLongReq(java.util.OptionalLong p1, com.zeroc.Ice.Current current);

    Initial.OpFloatResult opFloat(java.util.Optional<java.lang.Float> p1, com.zeroc.Ice.Current current);

    Initial.OpFloatReqResult opFloatReq(java.util.Optional<java.lang.Float> p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleResult opDouble(java.util.OptionalDouble p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleReqResult opDoubleReq(java.util.OptionalDouble p1, com.zeroc.Ice.Current current);

    Initial.OpStringResult opString(java.util.Optional<java.lang.String> p1, com.zeroc.Ice.Current current);

    Initial.OpStringReqResult opStringReq(java.util.Optional<java.lang.String> p1, com.zeroc.Ice.Current current);

    Initial.OpMyEnumResult opMyEnum(java.util.Optional<MyEnum> p1, com.zeroc.Ice.Current current);

    Initial.OpMyEnumReqResult opMyEnumReq(java.util.Optional<MyEnum> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructResult opSmallStruct(java.util.Optional<SmallStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructReqResult opSmallStructReq(java.util.Optional<SmallStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructResult opFixedStruct(java.util.Optional<FixedStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructReqResult opFixedStructReq(java.util.Optional<FixedStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructResult opVarStruct(java.util.Optional<VarStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructReqResult opVarStructReq(java.util.Optional<VarStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpOneOptionalResult opOneOptional(java.util.Optional<OneOptional> p1, com.zeroc.Ice.Current current);

    Initial.OpOneOptionalReqResult opOneOptionalReq(java.util.Optional<OneOptional> p1, com.zeroc.Ice.Current current);

    Initial.OpOneOptionalProxyResult opOneOptionalProxy(java.util.Optional<com.zeroc.Ice.ObjectPrx> p1, com.zeroc.Ice.Current current);

    Initial.OpOneOptionalProxyReqResult opOneOptionalProxyReq(java.util.Optional<com.zeroc.Ice.ObjectPrx> p1, com.zeroc.Ice.Current current);

    Initial.OpByteSeqResult opByteSeq(java.util.Optional<byte[]> p1, com.zeroc.Ice.Current current);

    Initial.OpByteSeqReqResult opByteSeqReq(java.util.Optional<byte[]> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolSeqResult opBoolSeq(java.util.Optional<boolean[]> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolSeqReqResult opBoolSeqReq(java.util.Optional<boolean[]> p1, com.zeroc.Ice.Current current);

    Initial.OpShortSeqResult opShortSeq(java.util.Optional<short[]> p1, com.zeroc.Ice.Current current);

    Initial.OpShortSeqReqResult opShortSeqReq(java.util.Optional<short[]> p1, com.zeroc.Ice.Current current);

    Initial.OpIntSeqResult opIntSeq(java.util.Optional<int[]> p1, com.zeroc.Ice.Current current);

    Initial.OpIntSeqReqResult opIntSeqReq(java.util.Optional<int[]> p1, com.zeroc.Ice.Current current);

    Initial.OpLongSeqResult opLongSeq(java.util.Optional<long[]> p1, com.zeroc.Ice.Current current);

    Initial.OpLongSeqReqResult opLongSeqReq(java.util.Optional<long[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFloatSeqResult opFloatSeq(java.util.Optional<float[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFloatSeqReqResult opFloatSeqReq(java.util.Optional<float[]> p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleSeqResult opDoubleSeq(java.util.Optional<double[]> p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleSeqReqResult opDoubleSeqReq(java.util.Optional<double[]> p1, com.zeroc.Ice.Current current);

    Initial.OpStringSeqResult opStringSeq(java.util.Optional<String[]> p1, com.zeroc.Ice.Current current);

    Initial.OpStringSeqReqResult opStringSeqReq(java.util.Optional<String[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructSeqResult opSmallStructSeq(java.util.Optional<SmallStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructSeqReqResult opSmallStructSeqReq(java.util.Optional<SmallStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructListResult opSmallStructList(java.util.Optional<java.util.List<SmallStruct>> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructListReqResult opSmallStructListReq(java.util.Optional<java.util.List<SmallStruct>> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructSeqResult opFixedStructSeq(java.util.Optional<FixedStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructSeqReqResult opFixedStructSeqReq(java.util.Optional<FixedStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructListResult opFixedStructList(java.util.Optional<java.util.List<FixedStruct>> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructListReqResult opFixedStructListReq(java.util.Optional<java.util.List<FixedStruct>> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructSeqResult opVarStructSeq(java.util.Optional<VarStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructSeqReqResult opVarStructSeqReq(java.util.Optional<VarStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSerializableResult opSerializable(java.util.Optional<test.Ice.optional.SerializableClass> p1, com.zeroc.Ice.Current current);

    Initial.OpSerializableReqResult opSerializableReq(java.util.Optional<test.Ice.optional.SerializableClass> p1, com.zeroc.Ice.Current current);

    Initial.OpIntIntDictResult opIntIntDict(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpIntIntDictReqResult opIntIntDictReq(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpStringIntDictResult opStringIntDict(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpStringIntDictReqResult opStringIntDictReq(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpIntOneOptionalDictResult opIntOneOptionalDict(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1, com.zeroc.Ice.Current current);

    Initial.OpIntOneOptionalDictReqResult opIntOneOptionalDictReq(java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> p1, com.zeroc.Ice.Current current);

    void opClassAndUnknownOptional(A p, com.zeroc.Ice.Current current);

    void sendOptionalClass(boolean req, java.util.Optional<OneOptional> o, com.zeroc.Ice.Current current);

    java.util.Optional<OneOptional> returnOptionalClass(boolean req, com.zeroc.Ice.Current current);

    G opG(G g, com.zeroc.Ice.Current current);

    void opVoid(com.zeroc.Ice.Current current);

    Initial.OpMStruct1MarshaledResult opMStruct1(com.zeroc.Ice.Current current);

    Initial.OpMStruct2MarshaledResult opMStruct2(java.util.Optional<SmallStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpMSeq1MarshaledResult opMSeq1(com.zeroc.Ice.Current current);

    Initial.OpMSeq2MarshaledResult opMSeq2(java.util.Optional<String[]> p1, com.zeroc.Ice.Current current);

    Initial.OpMDict1MarshaledResult opMDict1(com.zeroc.Ice.Current current);

    Initial.OpMDict2MarshaledResult opMDict2(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpMG1MarshaledResult opMG1(com.zeroc.Ice.Current current);

    Initial.OpMG2MarshaledResult opMG2(java.util.Optional<G> p1, com.zeroc.Ice.Current current);

    boolean supportsRequiredParams(com.zeroc.Ice.Current current);

    boolean supportsJavaSerializable(com.zeroc.Ice.Current current);

    boolean supportsCsharpSerializable(com.zeroc.Ice.Current current);

    boolean supportsCppStringView(com.zeroc.Ice.Current current);

    boolean supportsNullOptional(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Initial"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_pingPong(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<com.zeroc.Ice.Value> icePP_o = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_o.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        inS.endReadParams();
        com.zeroc.Ice.Value iceP_o = icePP_o.value;
        com.zeroc.Ice.Value ret = obj.pingPong(iceP_o, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOptionalException(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_o = new com.zeroc.IceInternal.Holder<>();
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.readValue(3, v -> icePP_o.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_o = icePP_o.value;
        obj.opOptionalException(iceP_a, iceP_b, iceP_o, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDerivedException(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_o = new com.zeroc.IceInternal.Holder<>();
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.readValue(3, v -> icePP_o.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_o = icePP_o.value;
        obj.opDerivedException(iceP_a, iceP_b, iceP_o, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opRequiredException(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_o = new com.zeroc.IceInternal.Holder<>();
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.readValue(3, v -> icePP_o.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_o = icePP_o.value;
        obj.opRequiredException(iceP_a, iceP_b, iceP_o, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByte(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Byte> iceP_p1;
        iceP_p1 = istr.readByte(2);
        inS.endReadParams();
        Initial.OpByteResult ret = obj.opByte(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Byte> iceP_p1;
        iceP_p1 = istr.readByte(2);
        inS.endReadParams();
        Initial.OpByteReqResult ret = obj.opByteReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBool(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Boolean> iceP_p1;
        iceP_p1 = istr.readBool(2);
        inS.endReadParams();
        Initial.OpBoolResult ret = obj.opBool(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Boolean> iceP_p1;
        iceP_p1 = istr.readBool(2);
        inS.endReadParams();
        Initial.OpBoolReqResult ret = obj.opBoolReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShort(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Short> iceP_p1;
        iceP_p1 = istr.readShort(2);
        inS.endReadParams();
        Initial.OpShortResult ret = obj.opShort(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Short> iceP_p1;
        iceP_p1 = istr.readShort(2);
        inS.endReadParams();
        Initial.OpShortReqResult ret = obj.opShortReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opInt(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_p1;
        iceP_p1 = istr.readInt(2);
        inS.endReadParams();
        Initial.OpIntResult ret = obj.opInt(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalInt iceP_p1;
        iceP_p1 = istr.readInt(2);
        inS.endReadParams();
        Initial.OpIntReqResult ret = obj.opIntReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLong(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalLong iceP_p1;
        iceP_p1 = istr.readLong(1);
        inS.endReadParams();
        Initial.OpLongResult ret = obj.opLong(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalLong iceP_p1;
        iceP_p1 = istr.readLong(1);
        inS.endReadParams();
        Initial.OpLongReqResult ret = obj.opLongReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloat(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Float> iceP_p1;
        iceP_p1 = istr.readFloat(2);
        inS.endReadParams();
        Initial.OpFloatResult ret = obj.opFloat(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.Float> iceP_p1;
        iceP_p1 = istr.readFloat(2);
        inS.endReadParams();
        Initial.OpFloatReqResult ret = obj.opFloatReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDouble(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalDouble iceP_p1;
        iceP_p1 = istr.readDouble(2);
        inS.endReadParams();
        Initial.OpDoubleResult ret = obj.opDouble(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.OptionalDouble iceP_p1;
        iceP_p1 = istr.readDouble(2);
        inS.endReadParams();
        Initial.OpDoubleReqResult ret = obj.opDoubleReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opString(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.String> iceP_p1;
        iceP_p1 = istr.readString(2);
        inS.endReadParams();
        Initial.OpStringResult ret = obj.opString(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.lang.String> iceP_p1;
        iceP_p1 = istr.readString(2);
        inS.endReadParams();
        Initial.OpStringReqResult ret = obj.opStringReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnum(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<MyEnum> iceP_p1;
        iceP_p1 = MyEnum.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpMyEnumResult ret = obj.opMyEnum(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnumReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<MyEnum> iceP_p1;
        iceP_p1 = MyEnum.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpMyEnumReqResult ret = obj.opMyEnumReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStruct(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<SmallStruct> iceP_p1;
        iceP_p1 = SmallStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructResult ret = obj.opSmallStruct(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStructReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<SmallStruct> iceP_p1;
        iceP_p1 = SmallStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructReqResult ret = obj.opSmallStructReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStruct(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<FixedStruct> iceP_p1;
        iceP_p1 = FixedStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructResult ret = obj.opFixedStruct(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStructReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<FixedStruct> iceP_p1;
        iceP_p1 = FixedStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructReqResult ret = obj.opFixedStructReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVarStruct(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<VarStruct> iceP_p1;
        iceP_p1 = VarStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpVarStructResult ret = obj.opVarStruct(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVarStructReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<VarStruct> iceP_p1;
        iceP_p1 = VarStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpVarStructReqResult ret = obj.opVarStructReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOneOptional(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(2, v -> icePP_p1.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_p1 = icePP_p1.value;
        Initial.OpOneOptionalResult ret = obj.opOneOptional(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOneOptionalReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(2, v -> icePP_p1.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_p1 = icePP_p1.value;
        Initial.OpOneOptionalReqResult ret = obj.opOneOptionalReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOneOptionalProxy(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<com.zeroc.Ice.ObjectPrx> iceP_p1;
        iceP_p1 = istr.readProxy(2, com.zeroc.Ice.ObjectPrx::uncheckedCast);
        inS.endReadParams();
        Initial.OpOneOptionalProxyResult ret = obj.opOneOptionalProxy(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOneOptionalProxyReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<com.zeroc.Ice.ObjectPrx> iceP_p1;
        iceP_p1 = istr.readProxy(2, com.zeroc.Ice.ObjectPrx::uncheckedCast);
        inS.endReadParams();
        Initial.OpOneOptionalProxyReqResult ret = obj.opOneOptionalProxyReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<byte[]> iceP_p1;
        iceP_p1 = istr.readByteSeq(2);
        inS.endReadParams();
        Initial.OpByteSeqResult ret = obj.opByteSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<byte[]> iceP_p1;
        iceP_p1 = istr.readByteSeq(2);
        inS.endReadParams();
        Initial.OpByteSeqReqResult ret = obj.opByteSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<boolean[]> iceP_p1;
        iceP_p1 = istr.readBoolSeq(2);
        inS.endReadParams();
        Initial.OpBoolSeqResult ret = obj.opBoolSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<boolean[]> iceP_p1;
        iceP_p1 = istr.readBoolSeq(2);
        inS.endReadParams();
        Initial.OpBoolSeqReqResult ret = obj.opBoolSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<short[]> iceP_p1;
        iceP_p1 = istr.readShortSeq(2);
        inS.endReadParams();
        Initial.OpShortSeqResult ret = obj.opShortSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<short[]> iceP_p1;
        iceP_p1 = istr.readShortSeq(2);
        inS.endReadParams();
        Initial.OpShortSeqReqResult ret = obj.opShortSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<int[]> iceP_p1;
        iceP_p1 = istr.readIntSeq(2);
        inS.endReadParams();
        Initial.OpIntSeqResult ret = obj.opIntSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<int[]> iceP_p1;
        iceP_p1 = istr.readIntSeq(2);
        inS.endReadParams();
        Initial.OpIntSeqReqResult ret = obj.opIntSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<long[]> iceP_p1;
        iceP_p1 = istr.readLongSeq(2);
        inS.endReadParams();
        Initial.OpLongSeqResult ret = obj.opLongSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<long[]> iceP_p1;
        iceP_p1 = istr.readLongSeq(2);
        inS.endReadParams();
        Initial.OpLongSeqReqResult ret = obj.opLongSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<float[]> iceP_p1;
        iceP_p1 = istr.readFloatSeq(2);
        inS.endReadParams();
        Initial.OpFloatSeqResult ret = obj.opFloatSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<float[]> iceP_p1;
        iceP_p1 = istr.readFloatSeq(2);
        inS.endReadParams();
        Initial.OpFloatSeqReqResult ret = obj.opFloatSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<double[]> iceP_p1;
        iceP_p1 = istr.readDoubleSeq(2);
        inS.endReadParams();
        Initial.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<double[]> iceP_p1;
        iceP_p1 = istr.readDoubleSeq(2);
        inS.endReadParams();
        Initial.OpDoubleSeqReqResult ret = obj.opDoubleSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<String[]> iceP_p1;
        iceP_p1 = istr.readStringSeq(2);
        inS.endReadParams();
        Initial.OpStringSeqResult ret = obj.opStringSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<String[]> iceP_p1;
        iceP_p1 = istr.readStringSeq(2);
        inS.endReadParams();
        Initial.OpStringSeqReqResult ret = obj.opStringSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStructSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<SmallStruct[]> iceP_p1;
        iceP_p1 = SmallStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructSeqResult ret = obj.opSmallStructSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStructSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<SmallStruct[]> iceP_p1;
        iceP_p1 = SmallStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructSeqReqResult ret = obj.opSmallStructSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStructList(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.List<SmallStruct>> iceP_p1;
        iceP_p1 = SmallStructListHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructListResult ret = obj.opSmallStructList(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSmallStructListReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.List<SmallStruct>> iceP_p1;
        iceP_p1 = SmallStructListHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpSmallStructListReqResult ret = obj.opSmallStructListReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStructSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<FixedStruct[]> iceP_p1;
        iceP_p1 = FixedStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructSeqResult ret = obj.opFixedStructSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStructSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<FixedStruct[]> iceP_p1;
        iceP_p1 = FixedStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructSeqReqResult ret = obj.opFixedStructSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStructList(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.List<FixedStruct>> iceP_p1;
        iceP_p1 = FixedStructListHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructListResult ret = obj.opFixedStructList(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFixedStructListReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.List<FixedStruct>> iceP_p1;
        iceP_p1 = FixedStructListHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpFixedStructListReqResult ret = obj.opFixedStructListReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVarStructSeq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<VarStruct[]> iceP_p1;
        iceP_p1 = VarStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpVarStructSeqResult ret = obj.opVarStructSeq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVarStructSeqReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<VarStruct[]> iceP_p1;
        iceP_p1 = VarStructSeqHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpVarStructSeqReqResult ret = obj.opVarStructSeqReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSerializable(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<test.Ice.optional.SerializableClass> iceP_p1;
        iceP_p1 = istr.readSerializable(2, test.Ice.optional.SerializableClass.class);
        inS.endReadParams();
        Initial.OpSerializableResult ret = obj.opSerializable(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSerializableReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<test.Ice.optional.SerializableClass> iceP_p1;
        iceP_p1 = istr.readSerializable(2, test.Ice.optional.SerializableClass.class);
        inS.endReadParams();
        Initial.OpSerializableReqResult ret = obj.opSerializableReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntIntDict(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_p1;
        iceP_p1 = IntIntDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpIntIntDictResult ret = obj.opIntIntDict(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntIntDictReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_p1;
        iceP_p1 = IntIntDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpIntIntDictReqResult ret = obj.opIntIntDictReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringIntDict(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1;
        iceP_p1 = StringIntDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpStringIntDictResult ret = obj.opStringIntDict(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringIntDictReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1;
        iceP_p1 = StringIntDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpStringIntDictReqResult ret = obj.opStringIntDictReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntOneOptionalDict(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> iceP_p1;
        iceP_p1 = IntOneOptionalDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpIntOneOptionalDictResult ret = obj.opIntOneOptionalDict(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntOneOptionalDictReq(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.Integer, OneOptional>> iceP_p1;
        iceP_p1 = IntOneOptionalDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpIntOneOptionalDictReqResult ret = obj.opIntOneOptionalDictReq(iceP_p1, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opClassAndUnknownOptional(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<A> icePP_p = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_p.value = v, A.class);
        istr.readPendingValues();
        inS.endReadParams();
        A iceP_p = icePP_p.value;
        obj.opClassAndUnknownOptional(iceP_p, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendOptionalClass(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_req;
        final com.zeroc.IceInternal.Holder<java.util.Optional<OneOptional>> icePP_o = new com.zeroc.IceInternal.Holder<>();
        iceP_req = istr.readBool();
        istr.readValue(1, v -> icePP_o.value = v, OneOptional.class);
        inS.endReadParams();
        java.util.Optional<OneOptional> iceP_o = icePP_o.value;
        obj.sendOptionalClass(iceP_req, iceP_o, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_returnOptionalClass(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_req;
        iceP_req = istr.readBool();
        inS.endReadParams();
        java.util.Optional<OneOptional> ret = obj.returnOptionalClass(iceP_req, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(1, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opG(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<G> icePP_g = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_g.value = v, G.class);
        istr.readPendingValues();
        inS.endReadParams();
        G iceP_g = icePP_g.value;
        G ret = obj.opG(iceP_g, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVoid(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.opVoid(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMStruct1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.OpMStruct1MarshaledResult ret = obj.opMStruct1(current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMStruct2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<SmallStruct> iceP_p1;
        iceP_p1 = SmallStruct.ice_read(istr, 2);
        inS.endReadParams();
        Initial.OpMStruct2MarshaledResult ret = obj.opMStruct2(iceP_p1, current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMSeq1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.OpMSeq1MarshaledResult ret = obj.opMSeq1(current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMSeq2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<String[]> iceP_p1;
        iceP_p1 = istr.readStringSeq(2);
        inS.endReadParams();
        Initial.OpMSeq2MarshaledResult ret = obj.opMSeq2(iceP_p1, current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMDict1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.OpMDict1MarshaledResult ret = obj.opMDict1(current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMDict2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1;
        iceP_p1 = StringIntDictHelper.read(istr, 2);
        inS.endReadParams();
        Initial.OpMDict2MarshaledResult ret = obj.opMDict2(iceP_p1, current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMG1(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Initial.OpMG1MarshaledResult ret = obj.opMG1(current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMG2(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<java.util.Optional<G>> icePP_p1 = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(2, v -> icePP_p1.value = v, G.class);
        inS.endReadParams();
        java.util.Optional<G> iceP_p1 = icePP_p1.value;
        Initial.OpMG2MarshaledResult ret = obj.opMG2(iceP_p1, current);
        return inS.setMarshaledResult(ret);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsRequiredParams(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsRequiredParams(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsJavaSerializable(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsJavaSerializable(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsCsharpSerializable(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsCsharpSerializable(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsCppStringView(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsCppStringView(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_supportsNullOptional(Initial obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.supportsNullOptional(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBool",
        "opBoolReq",
        "opBoolSeq",
        "opBoolSeqReq",
        "opByte",
        "opByteReq",
        "opByteSeq",
        "opByteSeqReq",
        "opClassAndUnknownOptional",
        "opDerivedException",
        "opDouble",
        "opDoubleReq",
        "opDoubleSeq",
        "opDoubleSeqReq",
        "opFixedStruct",
        "opFixedStructList",
        "opFixedStructListReq",
        "opFixedStructReq",
        "opFixedStructSeq",
        "opFixedStructSeqReq",
        "opFloat",
        "opFloatReq",
        "opFloatSeq",
        "opFloatSeqReq",
        "opG",
        "opInt",
        "opIntIntDict",
        "opIntIntDictReq",
        "opIntOneOptionalDict",
        "opIntOneOptionalDictReq",
        "opIntReq",
        "opIntSeq",
        "opIntSeqReq",
        "opLong",
        "opLongReq",
        "opLongSeq",
        "opLongSeqReq",
        "opMDict1",
        "opMDict2",
        "opMG1",
        "opMG2",
        "opMSeq1",
        "opMSeq2",
        "opMStruct1",
        "opMStruct2",
        "opMyEnum",
        "opMyEnumReq",
        "opOneOptional",
        "opOneOptionalProxy",
        "opOneOptionalProxyReq",
        "opOneOptionalReq",
        "opOptionalException",
        "opRequiredException",
        "opSerializable",
        "opSerializableReq",
        "opShort",
        "opShortReq",
        "opShortSeq",
        "opShortSeqReq",
        "opSmallStruct",
        "opSmallStructList",
        "opSmallStructListReq",
        "opSmallStructReq",
        "opSmallStructSeq",
        "opSmallStructSeqReq",
        "opString",
        "opStringIntDict",
        "opStringIntDictReq",
        "opStringReq",
        "opStringSeq",
        "opStringSeqReq",
        "opVarStruct",
        "opVarStructReq",
        "opVarStructSeq",
        "opVarStructSeqReq",
        "opVoid",
        "pingPong",
        "returnOptionalClass",
        "sendOptionalClass",
        "shutdown",
        "supportsCppStringView",
        "supportsCsharpSerializable",
        "supportsJavaSerializable",
        "supportsNullOptional",
        "supportsRequiredParams"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opBool(this, in, current);
            }
            case 5:
            {
                return _iceD_opBoolReq(this, in, current);
            }
            case 6:
            {
                return _iceD_opBoolSeq(this, in, current);
            }
            case 7:
            {
                return _iceD_opBoolSeqReq(this, in, current);
            }
            case 8:
            {
                return _iceD_opByte(this, in, current);
            }
            case 9:
            {
                return _iceD_opByteReq(this, in, current);
            }
            case 10:
            {
                return _iceD_opByteSeq(this, in, current);
            }
            case 11:
            {
                return _iceD_opByteSeqReq(this, in, current);
            }
            case 12:
            {
                return _iceD_opClassAndUnknownOptional(this, in, current);
            }
            case 13:
            {
                return _iceD_opDerivedException(this, in, current);
            }
            case 14:
            {
                return _iceD_opDouble(this, in, current);
            }
            case 15:
            {
                return _iceD_opDoubleReq(this, in, current);
            }
            case 16:
            {
                return _iceD_opDoubleSeq(this, in, current);
            }
            case 17:
            {
                return _iceD_opDoubleSeqReq(this, in, current);
            }
            case 18:
            {
                return _iceD_opFixedStruct(this, in, current);
            }
            case 19:
            {
                return _iceD_opFixedStructList(this, in, current);
            }
            case 20:
            {
                return _iceD_opFixedStructListReq(this, in, current);
            }
            case 21:
            {
                return _iceD_opFixedStructReq(this, in, current);
            }
            case 22:
            {
                return _iceD_opFixedStructSeq(this, in, current);
            }
            case 23:
            {
                return _iceD_opFixedStructSeqReq(this, in, current);
            }
            case 24:
            {
                return _iceD_opFloat(this, in, current);
            }
            case 25:
            {
                return _iceD_opFloatReq(this, in, current);
            }
            case 26:
            {
                return _iceD_opFloatSeq(this, in, current);
            }
            case 27:
            {
                return _iceD_opFloatSeqReq(this, in, current);
            }
            case 28:
            {
                return _iceD_opG(this, in, current);
            }
            case 29:
            {
                return _iceD_opInt(this, in, current);
            }
            case 30:
            {
                return _iceD_opIntIntDict(this, in, current);
            }
            case 31:
            {
                return _iceD_opIntIntDictReq(this, in, current);
            }
            case 32:
            {
                return _iceD_opIntOneOptionalDict(this, in, current);
            }
            case 33:
            {
                return _iceD_opIntOneOptionalDictReq(this, in, current);
            }
            case 34:
            {
                return _iceD_opIntReq(this, in, current);
            }
            case 35:
            {
                return _iceD_opIntSeq(this, in, current);
            }
            case 36:
            {
                return _iceD_opIntSeqReq(this, in, current);
            }
            case 37:
            {
                return _iceD_opLong(this, in, current);
            }
            case 38:
            {
                return _iceD_opLongReq(this, in, current);
            }
            case 39:
            {
                return _iceD_opLongSeq(this, in, current);
            }
            case 40:
            {
                return _iceD_opLongSeqReq(this, in, current);
            }
            case 41:
            {
                return _iceD_opMDict1(this, in, current);
            }
            case 42:
            {
                return _iceD_opMDict2(this, in, current);
            }
            case 43:
            {
                return _iceD_opMG1(this, in, current);
            }
            case 44:
            {
                return _iceD_opMG2(this, in, current);
            }
            case 45:
            {
                return _iceD_opMSeq1(this, in, current);
            }
            case 46:
            {
                return _iceD_opMSeq2(this, in, current);
            }
            case 47:
            {
                return _iceD_opMStruct1(this, in, current);
            }
            case 48:
            {
                return _iceD_opMStruct2(this, in, current);
            }
            case 49:
            {
                return _iceD_opMyEnum(this, in, current);
            }
            case 50:
            {
                return _iceD_opMyEnumReq(this, in, current);
            }
            case 51:
            {
                return _iceD_opOneOptional(this, in, current);
            }
            case 52:
            {
                return _iceD_opOneOptionalProxy(this, in, current);
            }
            case 53:
            {
                return _iceD_opOneOptionalProxyReq(this, in, current);
            }
            case 54:
            {
                return _iceD_opOneOptionalReq(this, in, current);
            }
            case 55:
            {
                return _iceD_opOptionalException(this, in, current);
            }
            case 56:
            {
                return _iceD_opRequiredException(this, in, current);
            }
            case 57:
            {
                return _iceD_opSerializable(this, in, current);
            }
            case 58:
            {
                return _iceD_opSerializableReq(this, in, current);
            }
            case 59:
            {
                return _iceD_opShort(this, in, current);
            }
            case 60:
            {
                return _iceD_opShortReq(this, in, current);
            }
            case 61:
            {
                return _iceD_opShortSeq(this, in, current);
            }
            case 62:
            {
                return _iceD_opShortSeqReq(this, in, current);
            }
            case 63:
            {
                return _iceD_opSmallStruct(this, in, current);
            }
            case 64:
            {
                return _iceD_opSmallStructList(this, in, current);
            }
            case 65:
            {
                return _iceD_opSmallStructListReq(this, in, current);
            }
            case 66:
            {
                return _iceD_opSmallStructReq(this, in, current);
            }
            case 67:
            {
                return _iceD_opSmallStructSeq(this, in, current);
            }
            case 68:
            {
                return _iceD_opSmallStructSeqReq(this, in, current);
            }
            case 69:
            {
                return _iceD_opString(this, in, current);
            }
            case 70:
            {
                return _iceD_opStringIntDict(this, in, current);
            }
            case 71:
            {
                return _iceD_opStringIntDictReq(this, in, current);
            }
            case 72:
            {
                return _iceD_opStringReq(this, in, current);
            }
            case 73:
            {
                return _iceD_opStringSeq(this, in, current);
            }
            case 74:
            {
                return _iceD_opStringSeqReq(this, in, current);
            }
            case 75:
            {
                return _iceD_opVarStruct(this, in, current);
            }
            case 76:
            {
                return _iceD_opVarStructReq(this, in, current);
            }
            case 77:
            {
                return _iceD_opVarStructSeq(this, in, current);
            }
            case 78:
            {
                return _iceD_opVarStructSeqReq(this, in, current);
            }
            case 79:
            {
                return _iceD_opVoid(this, in, current);
            }
            case 80:
            {
                return _iceD_pingPong(this, in, current);
            }
            case 81:
            {
                return _iceD_returnOptionalClass(this, in, current);
            }
            case 82:
            {
                return _iceD_sendOptionalClass(this, in, current);
            }
            case 83:
            {
                return _iceD_shutdown(this, in, current);
            }
            case 84:
            {
                return _iceD_supportsCppStringView(this, in, current);
            }
            case 85:
            {
                return _iceD_supportsCsharpSerializable(this, in, current);
            }
            case 86:
            {
                return _iceD_supportsJavaSerializable(this, in, current);
            }
            case 87:
            {
                return _iceD_supportsNullOptional(this, in, current);
            }
            case 88:
            {
                return _iceD_supportsRequiredParams(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
