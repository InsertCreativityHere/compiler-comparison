//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.ami.Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default void op()
    {
        op(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void op(java.util.Map<String, String> context)
    {
        _iceI_opAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opAsync()
    {
        return _iceI_opAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opAsync(java.util.Map<String, String> context)
    {
        return _iceI_opAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "op", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void opWithPayload(byte[] seq)
    {
        opWithPayload(seq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithPayload(byte[] seq, java.util.Map<String, String> context)
    {
        _iceI_opWithPayloadAsync(seq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opWithPayloadAsync(byte[] seq)
    {
        return _iceI_opWithPayloadAsync(seq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithPayloadAsync(byte[] seq, java.util.Map<String, String> context)
    {
        return _iceI_opWithPayloadAsync(seq, context, false);
    }

    /**
     * @hidden
     * @param iceP_seq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithPayloadAsync(byte[] iceP_seq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithPayload", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_seq);
                 }, null);
        return f;
    }

    default int opWithResult()
    {
        return opWithResult(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int opWithResult(java.util.Map<String, String> context)
    {
        return _iceI_opWithResultAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opWithResultAsync()
    {
        return _iceI_opWithResultAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opWithResultAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithResultAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_opWithResultAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithResult", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default void opWithUE()
        throws TestIntfException
    {
        opWithUE(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithUE(java.util.Map<String, String> context)
        throws TestIntfException
    {
        try
        {
            _iceI_opWithUEAsync(context, true).waitForResponseOrUserEx();
        }
        catch(TestIntfException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUEAsync()
    {
        return _iceI_opWithUEAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUEAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithUEAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithUEAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithUE", null, sync, _iceE_opWithUE);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_opWithUE =
    {
        TestIntfException.class
    };

    default void opBatch()
    {
        opBatch(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opBatch(java.util.Map<String, String> context)
    {
        _iceI_opBatchAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opBatchAsync()
    {
        return _iceI_opBatchAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opBatchAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBatchAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opBatchAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBatch", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default int opBatchCount()
    {
        return opBatchCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int opBatchCount(java.util.Map<String, String> context)
    {
        return _iceI_opBatchCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opBatchCountAsync()
    {
        return _iceI_opBatchCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opBatchCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_opBatchCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_opBatchCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBatchCount", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default boolean waitForBatch(int count)
    {
        return waitForBatch(count, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean waitForBatch(int count, java.util.Map<String, String> context)
    {
        return _iceI_waitForBatchAsync(count, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> waitForBatchAsync(int count)
    {
        return _iceI_waitForBatchAsync(count, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> waitForBatchAsync(int count, java.util.Map<String, String> context)
    {
        return _iceI_waitForBatchAsync(count, context, false);
    }

    /**
     * @hidden
     * @param iceP_count -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_waitForBatchAsync(int iceP_count, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "waitForBatch", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_count);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default void closeConnection()
    {
        closeConnection(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void closeConnection(java.util.Map<String, String> context)
    {
        _iceI_closeConnectionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> closeConnectionAsync()
    {
        return _iceI_closeConnectionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> closeConnectionAsync(java.util.Map<String, String> context)
    {
        return _iceI_closeConnectionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_closeConnectionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "closeConnection", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void abortConnection()
    {
        abortConnection(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void abortConnection(java.util.Map<String, String> context)
    {
        _iceI_abortConnectionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> abortConnectionAsync()
    {
        return _iceI_abortConnectionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> abortConnectionAsync(java.util.Map<String, String> context)
    {
        return _iceI_abortConnectionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_abortConnectionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "abortConnection", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void sleep(int ms)
    {
        sleep(ms, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void sleep(int ms, java.util.Map<String, String> context)
    {
        _iceI_sleepAsync(ms, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> sleepAsync(int ms)
    {
        return _iceI_sleepAsync(ms, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> sleepAsync(int ms, java.util.Map<String, String> context)
    {
        return _iceI_sleepAsync(ms, context, false);
    }

    /**
     * @hidden
     * @param iceP_ms -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sleepAsync(int iceP_ms, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sleep", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_ms);
                 }, null);
        return f;
    }

    default void startDispatch()
    {
        startDispatch(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void startDispatch(java.util.Map<String, String> context)
    {
        _iceI_startDispatchAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> startDispatchAsync()
    {
        return _iceI_startDispatchAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> startDispatchAsync(java.util.Map<String, String> context)
    {
        return _iceI_startDispatchAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_startDispatchAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "startDispatch", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void finishDispatch()
    {
        finishDispatch(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void finishDispatch(java.util.Map<String, String> context)
    {
        _iceI_finishDispatchAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> finishDispatchAsync()
    {
        return _iceI_finishDispatchAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> finishDispatchAsync(java.util.Map<String, String> context)
    {
        return _iceI_finishDispatchAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_finishDispatchAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "finishDispatch", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default boolean supportsAMD()
    {
        return supportsAMD(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsAMD(java.util.Map<String, String> context)
    {
        return _iceI_supportsAMDAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsAMDAsync()
    {
        return _iceI_supportsAMDAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsAMDAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsAMDAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsAMDAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsAMD", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean supportsFunctionalTests()
    {
        return supportsFunctionalTests(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean supportsFunctionalTests(java.util.Map<String, String> context)
    {
        return _iceI_supportsFunctionalTestsAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsFunctionalTestsAsync()
    {
        return _iceI_supportsFunctionalTestsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> supportsFunctionalTestsAsync(java.util.Map<String, String> context)
    {
        return _iceI_supportsFunctionalTestsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_supportsFunctionalTestsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "supportsFunctionalTests", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean opBool(boolean b)
    {
        return opBool(b, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean opBool(boolean b, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(b, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> opBoolAsync(boolean b)
    {
        return _iceI_opBoolAsync(b, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> opBoolAsync(boolean b, java.util.Map<String, String> context)
    {
        return _iceI_opBoolAsync(b, context, false);
    }

    /**
     * @hidden
     * @param iceP_b -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_opBoolAsync(boolean iceP_b, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBool", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(iceP_b);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default byte opByte(byte b)
    {
        return opByte(b, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte opByte(byte b, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(b, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Byte> opByteAsync(byte b)
    {
        return _iceI_opByteAsync(b, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Byte> opByteAsync(byte b, java.util.Map<String, String> context)
    {
        return _iceI_opByteAsync(b, context, false);
    }

    /**
     * @hidden
     * @param iceP_b -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Byte> _iceI_opByteAsync(byte iceP_b, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Byte> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByte", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByte(iceP_b);
                 }, istr -> {
                     byte ret;
                     ret = istr.readByte();
                     return ret;
                 });
        return f;
    }

    default short opShort(short s)
    {
        return opShort(s, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short opShort(short s, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(s, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Short> opShortAsync(short s)
    {
        return _iceI_opShortAsync(s, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Short> opShortAsync(short s, java.util.Map<String, String> context)
    {
        return _iceI_opShortAsync(s, context, false);
    }

    /**
     * @hidden
     * @param iceP_s -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Short> _iceI_opShortAsync(short iceP_s, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Short> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShort", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShort(iceP_s);
                 }, istr -> {
                     short ret;
                     ret = istr.readShort();
                     return ret;
                 });
        return f;
    }

    default int opInt(int i)
    {
        return opInt(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int opInt(int i, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opIntAsync(int i)
    {
        return _iceI_opIntAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> opIntAsync(int i, java.util.Map<String, String> context)
    {
        return _iceI_opIntAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_opIntAsync(int iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opInt", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_i);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default long opLong(long l)
    {
        return opLong(l, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long opLong(long l, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(l, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> opLongAsync(long l)
    {
        return _iceI_opLongAsync(l, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> opLongAsync(long l, java.util.Map<String, String> context)
    {
        return _iceI_opLongAsync(l, context, false);
    }

    /**
     * @hidden
     * @param iceP_l -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> _iceI_opLongAsync(long iceP_l, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLong", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_l);
                 }, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    default float opFloat(float f)
    {
        return opFloat(f, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float opFloat(float f, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(f, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> opFloatAsync(float f)
    {
        return _iceI_opFloatAsync(f, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Float> opFloatAsync(float f, java.util.Map<String, String> context)
    {
        return _iceI_opFloatAsync(f, context, false);
    }

    /**
     * @hidden
     * @param iceP_f -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> _iceI_opFloatAsync(float iceP_f, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFloat", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_f);
                 }, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    default double opDouble(double d)
    {
        return opDouble(d, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double opDouble(double d, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(d, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Double> opDoubleAsync(double d)
    {
        return _iceI_opDoubleAsync(d, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Double> opDoubleAsync(double d, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleAsync(d, context, false);
    }

    /**
     * @hidden
     * @param iceP_d -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Double> _iceI_opDoubleAsync(double iceP_d, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Double> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDouble", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDouble(iceP_d);
                 }, istr -> {
                     double ret;
                     ret = istr.readDouble();
                     return ret;
                 });
        return f;
    }

    default void pingBiDir(PingReplyPrx reply)
    {
        pingBiDir(reply, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void pingBiDir(PingReplyPrx reply, java.util.Map<String, String> context)
    {
        _iceI_pingBiDirAsync(reply, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> pingBiDirAsync(PingReplyPrx reply)
    {
        return _iceI_pingBiDirAsync(reply, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> pingBiDirAsync(PingReplyPrx reply, java.util.Map<String, String> context)
    {
        return _iceI_pingBiDirAsync(reply, context, false);
    }

    /**
     * @hidden
     * @param iceP_reply -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_pingBiDirAsync(PingReplyPrx iceP_reply, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "pingBiDir", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_reply);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
