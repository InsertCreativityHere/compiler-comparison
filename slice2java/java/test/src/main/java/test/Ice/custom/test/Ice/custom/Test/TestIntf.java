// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package test.Ice.custom.Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opASeq.
     **/
    public static class OpASeqResult
    {
        /**
         * Default constructor.
         **/
        public OpASeqResult()
        {
        }

        public OpASeqResult(A[] returnValue, A[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public A[] returnValue;
        public A[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ASeqHelper.write(ostr, this.outSeq);
            ASeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ASeqHelper.read(istr);
            returnValue = ASeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAArray.
     **/
    public static class OpAArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpAArrayResult()
        {
        }

        public OpAArrayResult(java.util.List<A> returnValue, java.util.List<A> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<A> returnValue;
        public java.util.List<A> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AArrayHelper.write(ostr, this.outSeq);
            AArrayHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = AArrayHelper.read(istr);
            returnValue = AArrayHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAList.
     **/
    public static class OpAListResult
    {
        /**
         * Default constructor.
         **/
        public OpAListResult()
        {
        }

        public OpAListResult(java.util.List<A> returnValue, java.util.List<A> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<A> returnValue;
        public java.util.List<A> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AListHelper.write(ostr, this.outSeq);
            AListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = AListHelper.read(istr);
            returnValue = AListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(java.util.List<java.lang.Boolean> returnValue, java.util.List<java.lang.Boolean> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Boolean> returnValue;
        public java.util.List<java.lang.Boolean> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolSeqHelper.write(ostr, this.outSeq);
            BoolSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BoolSeqHelper.read(istr);
            returnValue = BoolSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(java.util.List<java.lang.Byte> returnValue, java.util.List<java.lang.Byte> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Byte> returnValue;
        public java.util.List<java.lang.Byte> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteSeqHelper.write(ostr, this.outSeq);
            ByteSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ByteSeqHelper.read(istr);
            returnValue = ByteSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(java.util.List<java.lang.Short> returnValue, java.util.List<java.lang.Short> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Short> returnValue;
        public java.util.List<java.lang.Short> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortSeqHelper.write(ostr, this.outSeq);
            ShortSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ShortSeqHelper.read(istr);
            returnValue = ShortSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(java.util.List<java.lang.Integer> returnValue, java.util.List<java.lang.Integer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Integer> returnValue;
        public java.util.List<java.lang.Integer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntSeqHelper.write(ostr, this.outSeq);
            IntSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = IntSeqHelper.read(istr);
            returnValue = IntSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(java.util.List<java.lang.Long> returnValue, java.util.List<java.lang.Long> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Long> returnValue;
        public java.util.List<java.lang.Long> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongSeqHelper.write(ostr, this.outSeq);
            LongSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = LongSeqHelper.read(istr);
            returnValue = LongSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(java.util.List<java.lang.Float> returnValue, java.util.List<java.lang.Float> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Float> returnValue;
        public java.util.List<java.lang.Float> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FloatSeqHelper.write(ostr, this.outSeq);
            FloatSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = FloatSeqHelper.read(istr);
            returnValue = FloatSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(java.util.List<java.lang.Double> returnValue, java.util.List<java.lang.Double> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Double> returnValue;
        public java.util.List<java.lang.Double> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DoubleSeqHelper.write(ostr, this.outSeq);
            DoubleSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DoubleSeqHelper.read(istr);
            returnValue = DoubleSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSeq.
     **/
    public static class OpStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqResult()
        {
        }

        public OpStringSeqResult(java.util.List<java.lang.String> returnValue, java.util.List<java.lang.String> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.String> returnValue;
        public java.util.List<java.lang.String> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqHelper.write(ostr, this.outSeq);
            StringSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringSeqHelper.read(istr);
            returnValue = StringSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opESeq.
     **/
    public static class OpESeqResult
    {
        /**
         * Default constructor.
         **/
        public OpESeqResult()
        {
        }

        public OpESeqResult(java.util.List<E> returnValue, java.util.List<E> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<E> returnValue;
        public java.util.List<E> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ESeqHelper.write(ostr, this.outSeq);
            ESeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ESeqHelper.read(istr);
            returnValue = ESeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSSeq.
     **/
    public static class OpSSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpSSeqResult()
        {
        }

        public OpSSeqResult(java.util.List<S> returnValue, java.util.List<S> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<S> returnValue;
        public java.util.List<S> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SSeqHelper.write(ostr, this.outSeq);
            SSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = SSeqHelper.read(istr);
            returnValue = SSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDSeq.
     **/
    public static class OpDSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDSeqResult()
        {
        }

        public OpDSeqResult(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> returnValue, java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> returnValue;
        public java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DSeqHelper.write(ostr, this.outSeq);
            DSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DSeqHelper.read(istr);
            returnValue = DSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSeqSeq.
     **/
    public static class OpStringSeqSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqSeqResult()
        {
        }

        public OpStringSeqSeqResult(java.util.List<java.util.List<java.lang.String>> returnValue, java.util.List<java.util.List<java.lang.String>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.util.List<java.lang.String>> returnValue;
        public java.util.List<java.util.List<java.lang.String>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqSeqHelper.write(ostr, this.outSeq);
            StringSeqSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringSeqSeqHelper.read(istr);
            returnValue = StringSeqSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteBufferSeq.
     **/
    public static class OpByteBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteBufferSeqResult()
        {
        }

        public OpByteBufferSeqResult(java.nio.ByteBuffer returnValue, java.nio.ByteBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.ByteBuffer returnValue;
        public java.nio.ByteBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteBuffer(this.outSeq);
            ostr.writeByteBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteBuffer();
            returnValue = istr.readByteBuffer();
        }
    }

    /**
     * Holds the result of operation opShortBufferSeq.
     **/
    public static class OpShortBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortBufferSeqResult()
        {
        }

        public OpShortBufferSeqResult(java.nio.ShortBuffer returnValue, java.nio.ShortBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.ShortBuffer returnValue;
        public java.nio.ShortBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortBuffer(this.outSeq);
            ostr.writeShortBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readShortBuffer();
            returnValue = istr.readShortBuffer();
        }
    }

    /**
     * Holds the result of operation opIntBufferSeq.
     **/
    public static class OpIntBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntBufferSeqResult()
        {
        }

        public OpIntBufferSeqResult(java.nio.IntBuffer returnValue, java.nio.IntBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.IntBuffer returnValue;
        public java.nio.IntBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntBuffer(this.outSeq);
            ostr.writeIntBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readIntBuffer();
            returnValue = istr.readIntBuffer();
        }
    }

    /**
     * Holds the result of operation opLongBufferSeq.
     **/
    public static class OpLongBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongBufferSeqResult()
        {
        }

        public OpLongBufferSeqResult(java.nio.LongBuffer returnValue, java.nio.LongBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.LongBuffer returnValue;
        public java.nio.LongBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongBuffer(this.outSeq);
            ostr.writeLongBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readLongBuffer();
            returnValue = istr.readLongBuffer();
        }
    }

    /**
     * Holds the result of operation opFloatBufferSeq.
     **/
    public static class OpFloatBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatBufferSeqResult()
        {
        }

        public OpFloatBufferSeqResult(java.nio.FloatBuffer returnValue, java.nio.FloatBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.FloatBuffer returnValue;
        public java.nio.FloatBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatBuffer(this.outSeq);
            ostr.writeFloatBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readFloatBuffer();
            returnValue = istr.readFloatBuffer();
        }
    }

    /**
     * Holds the result of operation opDoubleBufferSeq.
     **/
    public static class OpDoubleBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleBufferSeqResult()
        {
        }

        public OpDoubleBufferSeqResult(java.nio.DoubleBuffer returnValue, java.nio.DoubleBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.DoubleBuffer returnValue;
        public java.nio.DoubleBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleBuffer(this.outSeq);
            ostr.writeDoubleBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readDoubleBuffer();
            returnValue = istr.readDoubleBuffer();
        }
    }

    /**
     * Holds the result of operation opOptASeq.
     **/
    public static class OpOptASeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptASeqResult()
        {
        }

        public OpOptASeqResult(java.util.Optional<A[]> returnValue, java.util.Optional<A[]> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptASeqResult(A[] returnValue, A[] outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<A[]> returnValue;
        public java.util.Optional<A[]> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ASeqHelper.write(ostr, 1, returnValue);
            ASeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = ASeqHelper.read(istr, 1);
            this.outSeq = ASeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptAArray.
     **/
    public static class OpOptAArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpOptAArrayResult()
        {
        }

        public OpOptAArrayResult(java.util.Optional<java.util.List<A>> returnValue, java.util.Optional<java.util.List<A>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptAArrayResult(java.util.List<A> returnValue, java.util.List<A> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<A>> returnValue;
        public java.util.Optional<java.util.List<A>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AArrayHelper.write(ostr, 1, returnValue);
            AArrayHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = AArrayHelper.read(istr, 1);
            this.outSeq = AArrayHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptAList.
     **/
    public static class OpOptAListResult
    {
        /**
         * Default constructor.
         **/
        public OpOptAListResult()
        {
        }

        public OpOptAListResult(java.util.Optional<java.util.List<A>> returnValue, java.util.Optional<java.util.List<A>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptAListResult(java.util.List<A> returnValue, java.util.List<A> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<A>> returnValue;
        public java.util.Optional<java.util.List<A>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AListHelper.write(ostr, 1, returnValue);
            AListHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = AListHelper.read(istr, 1);
            this.outSeq = AListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptBoolSeq.
     **/
    public static class OpOptBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptBoolSeqResult()
        {
        }

        public OpOptBoolSeqResult(java.util.Optional<java.util.List<java.lang.Boolean>> returnValue, java.util.Optional<java.util.List<java.lang.Boolean>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptBoolSeqResult(java.util.List<java.lang.Boolean> returnValue, java.util.List<java.lang.Boolean> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Boolean>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Boolean>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolSeqHelper.write(ostr, 1, returnValue);
            BoolSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = BoolSeqHelper.read(istr, 1);
            this.outSeq = BoolSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptByteSeq.
     **/
    public static class OpOptByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptByteSeqResult()
        {
        }

        public OpOptByteSeqResult(java.util.Optional<java.util.List<java.lang.Byte>> returnValue, java.util.Optional<java.util.List<java.lang.Byte>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptByteSeqResult(java.util.List<java.lang.Byte> returnValue, java.util.List<java.lang.Byte> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Byte>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Byte>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteSeqHelper.write(ostr, 1, returnValue);
            ByteSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = ByteSeqHelper.read(istr, 1);
            this.outSeq = ByteSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptShortSeq.
     **/
    public static class OpOptShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptShortSeqResult()
        {
        }

        public OpOptShortSeqResult(java.util.Optional<java.util.List<java.lang.Short>> returnValue, java.util.Optional<java.util.List<java.lang.Short>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptShortSeqResult(java.util.List<java.lang.Short> returnValue, java.util.List<java.lang.Short> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Short>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Short>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortSeqHelper.write(ostr, 1, returnValue);
            ShortSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = ShortSeqHelper.read(istr, 1);
            this.outSeq = ShortSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptIntSeq.
     **/
    public static class OpOptIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptIntSeqResult()
        {
        }

        public OpOptIntSeqResult(java.util.Optional<java.util.List<java.lang.Integer>> returnValue, java.util.Optional<java.util.List<java.lang.Integer>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptIntSeqResult(java.util.List<java.lang.Integer> returnValue, java.util.List<java.lang.Integer> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Integer>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntSeqHelper.write(ostr, 1, returnValue);
            IntSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntSeqHelper.read(istr, 1);
            this.outSeq = IntSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptLongSeq.
     **/
    public static class OpOptLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptLongSeqResult()
        {
        }

        public OpOptLongSeqResult(java.util.Optional<java.util.List<java.lang.Long>> returnValue, java.util.Optional<java.util.List<java.lang.Long>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptLongSeqResult(java.util.List<java.lang.Long> returnValue, java.util.List<java.lang.Long> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Long>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Long>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongSeqHelper.write(ostr, 1, returnValue);
            LongSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = LongSeqHelper.read(istr, 1);
            this.outSeq = LongSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptFloatSeq.
     **/
    public static class OpOptFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptFloatSeqResult()
        {
        }

        public OpOptFloatSeqResult(java.util.Optional<java.util.List<java.lang.Float>> returnValue, java.util.Optional<java.util.List<java.lang.Float>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptFloatSeqResult(java.util.List<java.lang.Float> returnValue, java.util.List<java.lang.Float> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Float>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Float>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FloatSeqHelper.write(ostr, 1, returnValue);
            FloatSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FloatSeqHelper.read(istr, 1);
            this.outSeq = FloatSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptDoubleSeq.
     **/
    public static class OpOptDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptDoubleSeqResult()
        {
        }

        public OpOptDoubleSeqResult(java.util.Optional<java.util.List<java.lang.Double>> returnValue, java.util.Optional<java.util.List<java.lang.Double>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptDoubleSeqResult(java.util.List<java.lang.Double> returnValue, java.util.List<java.lang.Double> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.Double>> returnValue;
        public java.util.Optional<java.util.List<java.lang.Double>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DoubleSeqHelper.write(ostr, 1, returnValue);
            DoubleSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = DoubleSeqHelper.read(istr, 1);
            this.outSeq = DoubleSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptStringSeq.
     **/
    public static class OpOptStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptStringSeqResult()
        {
        }

        public OpOptStringSeqResult(java.util.Optional<java.util.List<java.lang.String>> returnValue, java.util.Optional<java.util.List<java.lang.String>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptStringSeqResult(java.util.List<java.lang.String> returnValue, java.util.List<java.lang.String> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.lang.String>> returnValue;
        public java.util.Optional<java.util.List<java.lang.String>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqHelper.write(ostr, 1, returnValue);
            StringSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringSeqHelper.read(istr, 1);
            this.outSeq = StringSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptESeq.
     **/
    public static class OpOptESeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptESeqResult()
        {
        }

        public OpOptESeqResult(java.util.Optional<java.util.List<E>> returnValue, java.util.Optional<java.util.List<E>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptESeqResult(java.util.List<E> returnValue, java.util.List<E> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<E>> returnValue;
        public java.util.Optional<java.util.List<E>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ESeqHelper.write(ostr, 1, returnValue);
            ESeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = ESeqHelper.read(istr, 1);
            this.outSeq = ESeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptSSeq.
     **/
    public static class OpOptSSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptSSeqResult()
        {
        }

        public OpOptSSeqResult(java.util.Optional<java.util.List<S>> returnValue, java.util.Optional<java.util.List<S>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptSSeqResult(java.util.List<S> returnValue, java.util.List<S> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<S>> returnValue;
        public java.util.Optional<java.util.List<S>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SSeqHelper.write(ostr, 1, returnValue);
            SSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SSeqHelper.read(istr, 1);
            this.outSeq = SSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptDSeq.
     **/
    public static class OpOptDSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptDSeqResult()
        {
        }

        public OpOptDSeqResult(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> returnValue, java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptDSeqResult(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> returnValue, java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> returnValue;
        public java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DSeqHelper.write(ostr, 1, returnValue);
            DSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = DSeqHelper.read(istr, 1);
            this.outSeq = DSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptStringSeqSeq.
     **/
    public static class OpOptStringSeqSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptStringSeqSeqResult()
        {
        }

        public OpOptStringSeqSeqResult(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> returnValue, java.util.Optional<java.util.List<java.util.List<java.lang.String>>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptStringSeqSeqResult(java.util.List<java.util.List<java.lang.String>> returnValue, java.util.List<java.util.List<java.lang.String>> outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.util.List<java.util.List<java.lang.String>>> returnValue;
        public java.util.Optional<java.util.List<java.util.List<java.lang.String>>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqSeqHelper.write(ostr, 1, returnValue);
            StringSeqSeqHelper.write(ostr, 3, this.outSeq);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringSeqSeqHelper.read(istr, 1);
            this.outSeq = StringSeqSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opOptByteBufferSeq.
     **/
    public static class OpOptByteBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptByteBufferSeqResult()
        {
        }

        public OpOptByteBufferSeqResult(java.util.Optional<java.nio.ByteBuffer> returnValue, java.util.Optional<java.nio.ByteBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptByteBufferSeqResult(java.nio.ByteBuffer returnValue, java.nio.ByteBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.ByteBuffer> returnValue;
        public java.util.Optional<java.nio.ByteBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                ostr.writeByteBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                ostr.writeByteBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.ByteBuffer optSeq;
                optSeq = istr.readByteBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.ByteBuffer optSeq;
                optSeq = istr.readByteBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    /**
     * Holds the result of operation opOptShortBufferSeq.
     **/
    public static class OpOptShortBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptShortBufferSeqResult()
        {
        }

        public OpOptShortBufferSeqResult(java.util.Optional<java.nio.ShortBuffer> returnValue, java.util.Optional<java.nio.ShortBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptShortBufferSeqResult(java.nio.ShortBuffer returnValue, java.nio.ShortBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.ShortBuffer> returnValue;
        public java.util.Optional<java.nio.ShortBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = returnValue.get() == null ? 0 : returnValue.get().remaining() / 2;
                ostr.writeSize(optSize > 254 ? optSize * 2 + 5 : optSize * 2 + 1);
                ostr.writeShortBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = this.outSeq.get() == null ? 0 : this.outSeq.get().remaining() / 2;
                ostr.writeSize(optSize > 254 ? optSize * 2 + 5 : optSize * 2 + 1);
                ostr.writeShortBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.ShortBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readShortBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.ShortBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readShortBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    /**
     * Holds the result of operation opOptIntBufferSeq.
     **/
    public static class OpOptIntBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptIntBufferSeqResult()
        {
        }

        public OpOptIntBufferSeqResult(java.util.Optional<java.nio.IntBuffer> returnValue, java.util.Optional<java.nio.IntBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptIntBufferSeqResult(java.nio.IntBuffer returnValue, java.nio.IntBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.IntBuffer> returnValue;
        public java.util.Optional<java.nio.IntBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = returnValue.get() == null ? 0 : returnValue.get().remaining() / 4;
                ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                ostr.writeIntBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = this.outSeq.get() == null ? 0 : this.outSeq.get().remaining() / 4;
                ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                ostr.writeIntBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.IntBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readIntBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.IntBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readIntBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    /**
     * Holds the result of operation opOptLongBufferSeq.
     **/
    public static class OpOptLongBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptLongBufferSeqResult()
        {
        }

        public OpOptLongBufferSeqResult(java.util.Optional<java.nio.LongBuffer> returnValue, java.util.Optional<java.nio.LongBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptLongBufferSeqResult(java.nio.LongBuffer returnValue, java.nio.LongBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.LongBuffer> returnValue;
        public java.util.Optional<java.nio.LongBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = returnValue.get() == null ? 0 : returnValue.get().remaining() / 8;
                ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                ostr.writeLongBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = this.outSeq.get() == null ? 0 : this.outSeq.get().remaining() / 8;
                ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                ostr.writeLongBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.LongBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readLongBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.LongBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readLongBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    /**
     * Holds the result of operation opOptFloatBufferSeq.
     **/
    public static class OpOptFloatBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptFloatBufferSeqResult()
        {
        }

        public OpOptFloatBufferSeqResult(java.util.Optional<java.nio.FloatBuffer> returnValue, java.util.Optional<java.nio.FloatBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptFloatBufferSeqResult(java.nio.FloatBuffer returnValue, java.nio.FloatBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.FloatBuffer> returnValue;
        public java.util.Optional<java.nio.FloatBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = returnValue.get() == null ? 0 : returnValue.get().remaining() / 4;
                ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                ostr.writeFloatBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = this.outSeq.get() == null ? 0 : this.outSeq.get().remaining() / 4;
                ostr.writeSize(optSize > 254 ? optSize * 4 + 5 : optSize * 4 + 1);
                ostr.writeFloatBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.FloatBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readFloatBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.FloatBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readFloatBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    /**
     * Holds the result of operation opOptDoubleBufferSeq.
     **/
    public static class OpOptDoubleBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpOptDoubleBufferSeqResult()
        {
        }

        public OpOptDoubleBufferSeqResult(java.util.Optional<java.nio.DoubleBuffer> returnValue, java.util.Optional<java.nio.DoubleBuffer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public OpOptDoubleBufferSeqResult(java.nio.DoubleBuffer returnValue, java.nio.DoubleBuffer outSeq)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.outSeq = java.util.Optional.ofNullable(outSeq);
        }

        public java.util.Optional<java.nio.DoubleBuffer> returnValue;
        public java.util.Optional<java.nio.DoubleBuffer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            if(returnValue != null && returnValue.isPresent() && ostr.writeOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = returnValue.get() == null ? 0 : returnValue.get().remaining() / 8;
                ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                ostr.writeDoubleBuffer(returnValue.get());
            }
            if(this.outSeq != null && this.outSeq.isPresent() && ostr.writeOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                final int optSize = this.outSeq.get() == null ? 0 : this.outSeq.get().remaining() / 8;
                ostr.writeSize(optSize > 254 ? optSize * 8 + 5 : optSize * 8 + 1);
                ostr.writeDoubleBuffer(this.outSeq.get());
            }
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            if(istr.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.DoubleBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readDoubleBuffer();
                returnValue = java.util.Optional.of(optSeq);
            }
            else
            {
                returnValue = java.util.Optional.empty();
            }
            if(istr.readOptional(3, com.zeroc.Ice.OptionalFormat.VSize))
            {
                java.nio.DoubleBuffer optSeq;
                istr.skipSize();
                optSeq = istr.readDoubleBuffer();
                this.outSeq = java.util.Optional.of(optSeq);
            }
            else
            {
                this.outSeq = java.util.Optional.empty();
            }
        }
    }

    TestIntf.OpASeqResult opASeq(A[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpAArrayResult opAArray(java.util.List<A> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpAListResult opAList(java.util.List<A> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolSeqResult opBoolSeq(java.util.List<java.lang.Boolean> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteSeqResult opByteSeq(java.util.List<java.lang.Byte> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpShortSeqResult opShortSeq(java.util.List<java.lang.Short> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpIntSeqResult opIntSeq(java.util.List<java.lang.Integer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpLongSeqResult opLongSeq(java.util.List<java.lang.Long> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFloatSeqResult opFloatSeq(java.util.List<java.lang.Float> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDoubleSeqResult opDoubleSeq(java.util.List<java.lang.Double> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringSeqResult opStringSeq(java.util.List<java.lang.String> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpESeqResult opESeq(java.util.List<E> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpSSeqResult opSSeq(java.util.List<S> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDSeqResult opDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringSeqSeqResult opStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteBufferSeqResult opByteBufferSeq(java.nio.ByteBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpShortBufferSeqResult opShortBufferSeq(java.nio.ShortBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpIntBufferSeqResult opIntBufferSeq(java.nio.IntBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpLongBufferSeqResult opLongBufferSeq(java.nio.LongBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFloatBufferSeqResult opFloatBufferSeq(java.nio.FloatBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDoubleBufferSeqResult opDoubleBufferSeq(java.nio.DoubleBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptASeqResult opOptASeq(java.util.Optional<A[]> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptAArrayResult opOptAArray(java.util.Optional<java.util.List<A>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptAListResult opOptAList(java.util.Optional<java.util.List<A>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptBoolSeqResult opOptBoolSeq(java.util.Optional<java.util.List<java.lang.Boolean>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptByteSeqResult opOptByteSeq(java.util.Optional<java.util.List<java.lang.Byte>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptShortSeqResult opOptShortSeq(java.util.Optional<java.util.List<java.lang.Short>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptIntSeqResult opOptIntSeq(java.util.Optional<java.util.List<java.lang.Integer>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptLongSeqResult opOptLongSeq(java.util.Optional<java.util.List<java.lang.Long>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptFloatSeqResult opOptFloatSeq(java.util.Optional<java.util.List<java.lang.Float>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptDoubleSeqResult opOptDoubleSeq(java.util.Optional<java.util.List<java.lang.Double>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptStringSeqResult opOptStringSeq(java.util.Optional<java.util.List<java.lang.String>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptESeqResult opOptESeq(java.util.Optional<java.util.List<E>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptSSeqResult opOptSSeq(java.util.Optional<java.util.List<S>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptDSeqResult opOptDSeq(java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptStringSeqSeqResult opOptStringSeqSeq(java.util.Optional<java.util.List<java.util.List<java.lang.String>>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptByteBufferSeqResult opOptByteBufferSeq(java.util.Optional<java.nio.ByteBuffer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptShortBufferSeqResult opOptShortBufferSeq(java.util.Optional<java.nio.ShortBuffer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptIntBufferSeqResult opOptIntBufferSeq(java.util.Optional<java.nio.IntBuffer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptLongBufferSeqResult opOptLongBufferSeq(java.util.Optional<java.nio.LongBuffer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptFloatBufferSeqResult opOptFloatBufferSeq(java.util.Optional<java.nio.FloatBuffer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpOptDoubleBufferSeqResult opOptDoubleBufferSeq(java.util.Optional<java.nio.DoubleBuffer> inSeq, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opASeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        A[] iceP_inSeq;
        iceP_inSeq = ASeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpASeqResult ret = obj.opASeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<A> iceP_inSeq;
        iceP_inSeq = AArrayHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpAArrayResult ret = obj.opAArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<A> iceP_inSeq;
        iceP_inSeq = AListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpAListResult ret = obj.opAList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Boolean> iceP_inSeq;
        iceP_inSeq = BoolSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpBoolSeqResult ret = obj.opBoolSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Byte> iceP_inSeq;
        iceP_inSeq = ByteSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpByteSeqResult ret = obj.opByteSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Short> iceP_inSeq;
        iceP_inSeq = ShortSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpShortSeqResult ret = obj.opShortSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Integer> iceP_inSeq;
        iceP_inSeq = IntSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpIntSeqResult ret = obj.opIntSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Long> iceP_inSeq;
        iceP_inSeq = LongSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpLongSeqResult ret = obj.opLongSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Float> iceP_inSeq;
        iceP_inSeq = FloatSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpFloatSeqResult ret = obj.opFloatSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.Double> iceP_inSeq;
        iceP_inSeq = DoubleSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.lang.String> iceP_inSeq;
        iceP_inSeq = StringSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpStringSeqResult ret = obj.opStringSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opESeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<E> iceP_inSeq;
        iceP_inSeq = ESeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpESeqResult ret = obj.opESeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<S> iceP_inSeq;
        iceP_inSeq = SSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpSSeqResult ret = obj.opSSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> iceP_inSeq;
        iceP_inSeq = DSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpDSeqResult ret = obj.opDSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringSeqSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.List<java.util.List<java.lang.String>> iceP_inSeq;
        iceP_inSeq = StringSeqSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpStringSeqSeqResult ret = obj.opStringSeqSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.ByteBuffer iceP_inSeq;
        iceP_inSeq = istr.readByteBuffer();
        istr.endEncapsulation();
        TestIntf.OpByteBufferSeqResult ret = obj.opByteBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.ShortBuffer iceP_inSeq;
        iceP_inSeq = istr.readShortBuffer();
        istr.endEncapsulation();
        TestIntf.OpShortBufferSeqResult ret = obj.opShortBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.IntBuffer iceP_inSeq;
        iceP_inSeq = istr.readIntBuffer();
        istr.endEncapsulation();
        TestIntf.OpIntBufferSeqResult ret = obj.opIntBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.LongBuffer iceP_inSeq;
        iceP_inSeq = istr.readLongBuffer();
        istr.endEncapsulation();
        TestIntf.OpLongBufferSeqResult ret = obj.opLongBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.FloatBuffer iceP_inSeq;
        iceP_inSeq = istr.readFloatBuffer();
        istr.endEncapsulation();
        TestIntf.OpFloatBufferSeqResult ret = obj.opFloatBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.nio.DoubleBuffer iceP_inSeq;
        iceP_inSeq = istr.readDoubleBuffer();
        istr.endEncapsulation();
        TestIntf.OpDoubleBufferSeqResult ret = obj.opDoubleBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptASeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<A[]> iceP_inSeq;
        iceP_inSeq = ASeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptASeqResult ret = obj.opOptASeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptAArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<A>> iceP_inSeq;
        iceP_inSeq = AArrayHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptAArrayResult ret = obj.opOptAArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptAList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<A>> iceP_inSeq;
        iceP_inSeq = AListHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptAListResult ret = obj.opOptAList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptBoolSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Boolean>> iceP_inSeq;
        iceP_inSeq = BoolSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptBoolSeqResult ret = obj.opOptBoolSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptByteSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Byte>> iceP_inSeq;
        iceP_inSeq = ByteSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptByteSeqResult ret = obj.opOptByteSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptShortSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Short>> iceP_inSeq;
        iceP_inSeq = ShortSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptShortSeqResult ret = obj.opOptShortSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptIntSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Integer>> iceP_inSeq;
        iceP_inSeq = IntSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptIntSeqResult ret = obj.opOptIntSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptLongSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Long>> iceP_inSeq;
        iceP_inSeq = LongSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptLongSeqResult ret = obj.opOptLongSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptFloatSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Float>> iceP_inSeq;
        iceP_inSeq = FloatSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptFloatSeqResult ret = obj.opOptFloatSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptDoubleSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.Double>> iceP_inSeq;
        iceP_inSeq = DoubleSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptDoubleSeqResult ret = obj.opOptDoubleSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptStringSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.lang.String>> iceP_inSeq;
        iceP_inSeq = StringSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptStringSeqResult ret = obj.opOptStringSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptESeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<E>> iceP_inSeq;
        iceP_inSeq = ESeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptESeqResult ret = obj.opOptESeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptSSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<S>> iceP_inSeq;
        iceP_inSeq = SSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptSSeqResult ret = obj.opOptSSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptDSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.util.Map<java.lang.Integer, java.lang.String>>> iceP_inSeq;
        iceP_inSeq = DSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptDSeqResult ret = obj.opOptDSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptStringSeqSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.List<java.util.List<java.lang.String>>> iceP_inSeq;
        iceP_inSeq = StringSeqSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        TestIntf.OpOptStringSeqSeqResult ret = obj.opOptStringSeqSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptByteBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.ByteBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.ByteBuffer optSeq;
            optSeq = istr.readByteBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptByteBufferSeqResult ret = obj.opOptByteBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptShortBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.ShortBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.ShortBuffer optSeq;
            istr.skipSize();
            optSeq = istr.readShortBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptShortBufferSeqResult ret = obj.opOptShortBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptIntBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.IntBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.IntBuffer optSeq;
            istr.skipSize();
            optSeq = istr.readIntBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptIntBufferSeqResult ret = obj.opOptIntBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptLongBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.LongBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.LongBuffer optSeq;
            istr.skipSize();
            optSeq = istr.readLongBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptLongBufferSeqResult ret = obj.opOptLongBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptFloatBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.FloatBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.FloatBuffer optSeq;
            istr.skipSize();
            optSeq = istr.readFloatBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptFloatBufferSeqResult ret = obj.opOptFloatBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptDoubleBufferSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.nio.DoubleBuffer> iceP_inSeq;
        if(istr.readOptional(2, com.zeroc.Ice.OptionalFormat.VSize))
        {
            java.nio.DoubleBuffer optSeq;
            istr.skipSize();
            optSeq = istr.readDoubleBuffer();
            iceP_inSeq = java.util.Optional.of(optSeq);
        }
        else
        {
            iceP_inSeq = java.util.Optional.empty();
        }
        istr.endEncapsulation();
        TestIntf.OpOptDoubleBufferSeqResult ret = obj.opOptDoubleBufferSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opASeq" -> TestIntf._iceD_opASeq(this, request);
            case "opAArray" -> TestIntf._iceD_opAArray(this, request);
            case "opAList" -> TestIntf._iceD_opAList(this, request);
            case "opBoolSeq" -> TestIntf._iceD_opBoolSeq(this, request);
            case "opByteSeq" -> TestIntf._iceD_opByteSeq(this, request);
            case "opShortSeq" -> TestIntf._iceD_opShortSeq(this, request);
            case "opIntSeq" -> TestIntf._iceD_opIntSeq(this, request);
            case "opLongSeq" -> TestIntf._iceD_opLongSeq(this, request);
            case "opFloatSeq" -> TestIntf._iceD_opFloatSeq(this, request);
            case "opDoubleSeq" -> TestIntf._iceD_opDoubleSeq(this, request);
            case "opStringSeq" -> TestIntf._iceD_opStringSeq(this, request);
            case "opESeq" -> TestIntf._iceD_opESeq(this, request);
            case "opSSeq" -> TestIntf._iceD_opSSeq(this, request);
            case "opDSeq" -> TestIntf._iceD_opDSeq(this, request);
            case "opStringSeqSeq" -> TestIntf._iceD_opStringSeqSeq(this, request);
            case "opByteBufferSeq" -> TestIntf._iceD_opByteBufferSeq(this, request);
            case "opShortBufferSeq" -> TestIntf._iceD_opShortBufferSeq(this, request);
            case "opIntBufferSeq" -> TestIntf._iceD_opIntBufferSeq(this, request);
            case "opLongBufferSeq" -> TestIntf._iceD_opLongBufferSeq(this, request);
            case "opFloatBufferSeq" -> TestIntf._iceD_opFloatBufferSeq(this, request);
            case "opDoubleBufferSeq" -> TestIntf._iceD_opDoubleBufferSeq(this, request);
            case "opOptASeq" -> TestIntf._iceD_opOptASeq(this, request);
            case "opOptAArray" -> TestIntf._iceD_opOptAArray(this, request);
            case "opOptAList" -> TestIntf._iceD_opOptAList(this, request);
            case "opOptBoolSeq" -> TestIntf._iceD_opOptBoolSeq(this, request);
            case "opOptByteSeq" -> TestIntf._iceD_opOptByteSeq(this, request);
            case "opOptShortSeq" -> TestIntf._iceD_opOptShortSeq(this, request);
            case "opOptIntSeq" -> TestIntf._iceD_opOptIntSeq(this, request);
            case "opOptLongSeq" -> TestIntf._iceD_opOptLongSeq(this, request);
            case "opOptFloatSeq" -> TestIntf._iceD_opOptFloatSeq(this, request);
            case "opOptDoubleSeq" -> TestIntf._iceD_opOptDoubleSeq(this, request);
            case "opOptStringSeq" -> TestIntf._iceD_opOptStringSeq(this, request);
            case "opOptESeq" -> TestIntf._iceD_opOptESeq(this, request);
            case "opOptSSeq" -> TestIntf._iceD_opOptSSeq(this, request);
            case "opOptDSeq" -> TestIntf._iceD_opOptDSeq(this, request);
            case "opOptStringSeqSeq" -> TestIntf._iceD_opOptStringSeqSeq(this, request);
            case "opOptByteBufferSeq" -> TestIntf._iceD_opOptByteBufferSeq(this, request);
            case "opOptShortBufferSeq" -> TestIntf._iceD_opOptShortBufferSeq(this, request);
            case "opOptIntBufferSeq" -> TestIntf._iceD_opOptIntBufferSeq(this, request);
            case "opOptLongBufferSeq" -> TestIntf._iceD_opOptLongBufferSeq(this, request);
            case "opOptFloatBufferSeq" -> TestIntf._iceD_opOptFloatBufferSeq(this, request);
            case "opOptDoubleBufferSeq" -> TestIntf._iceD_opOptDoubleBufferSeq(this, request);
            case "shutdown" -> TestIntf._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
