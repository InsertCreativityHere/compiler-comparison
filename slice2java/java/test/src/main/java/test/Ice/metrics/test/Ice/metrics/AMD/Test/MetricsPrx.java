//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.metrics.AMD.Test;

public interface MetricsPrx extends com.zeroc.Ice.ObjectPrx
{
    default void op()
    {
        op(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void op(java.util.Map<String, String> context)
    {
        _iceI_opAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opAsync()
    {
        return _iceI_opAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opAsync(java.util.Map<String, String> context)
    {
        return _iceI_opAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "op", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void fail()
    {
        fail(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void fail(java.util.Map<String, String> context)
    {
        _iceI_failAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> failAsync()
    {
        return _iceI_failAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> failAsync(java.util.Map<String, String> context)
    {
        return _iceI_failAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_failAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "fail", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void opWithUserException()
        throws UserEx
    {
        opWithUserException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithUserException(java.util.Map<String, String> context)
        throws UserEx
    {
        try
        {
            _iceI_opWithUserExceptionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(UserEx ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUserExceptionAsync()
    {
        return _iceI_opWithUserExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUserExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithUserExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithUserExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithUserException", null, sync, _iceE_opWithUserException);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_opWithUserException =
    {
        UserEx.class
    };

    default void opWithRequestFailedException()
    {
        opWithRequestFailedException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithRequestFailedException(java.util.Map<String, String> context)
    {
        _iceI_opWithRequestFailedExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opWithRequestFailedExceptionAsync()
    {
        return _iceI_opWithRequestFailedExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithRequestFailedExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithRequestFailedExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithRequestFailedExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithRequestFailedException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void opWithLocalException()
    {
        opWithLocalException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithLocalException(java.util.Map<String, String> context)
    {
        _iceI_opWithLocalExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opWithLocalExceptionAsync()
    {
        return _iceI_opWithLocalExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithLocalExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithLocalExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithLocalExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithLocalException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void opWithUnknownException()
    {
        opWithUnknownException(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opWithUnknownException(java.util.Map<String, String> context)
    {
        _iceI_opWithUnknownExceptionAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUnknownExceptionAsync()
    {
        return _iceI_opWithUnknownExceptionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opWithUnknownExceptionAsync(java.util.Map<String, String> context)
    {
        return _iceI_opWithUnknownExceptionAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opWithUnknownExceptionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opWithUnknownException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void opByteS(byte[] bs)
    {
        opByteS(bs, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void opByteS(byte[] bs, java.util.Map<String, String> context)
    {
        _iceI_opByteSAsync(bs, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> opByteSAsync(byte[] bs)
    {
        return _iceI_opByteSAsync(bs, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> opByteSAsync(byte[] bs, java.util.Map<String, String> context)
    {
        return _iceI_opByteSAsync(bs, context, false);
    }

    /**
     * @hidden
     * @param iceP_bs -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_opByteSAsync(byte[] iceP_bs, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteS", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_bs);
                 }, null);
        return f;
    }

    default com.zeroc.Ice.ObjectPrx getAdmin()
    {
        return getAdmin(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.zeroc.Ice.ObjectPrx getAdmin(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminAsync()
    {
        return _iceI_getAdminAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getAdminAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getAdmin", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link MetricsPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static MetricsPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return uncheckedCast(communicator.stringToProxy(proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _MetricsPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MetricsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static MetricsPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _MetricsPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static MetricsPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _MetricsPrxI(obj.ice_facet(facet));
    }

    @Override
    MetricsPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    MetricsPrx ice_adapterId(String newAdapterId);

    @Override
    MetricsPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    MetricsPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    MetricsPrx ice_invocationTimeout(int newTimeout);

    @Override
    MetricsPrx ice_connectionCached(boolean newCache);

    @Override
    MetricsPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    MetricsPrx ice_secure(boolean b);

    @Override
    MetricsPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    MetricsPrx ice_preferSecure(boolean b);

    @Override
    MetricsPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    MetricsPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    MetricsPrx ice_collocationOptimized(boolean b);

    @Override
    MetricsPrx ice_twoway();

    @Override
    MetricsPrx ice_oneway();

    @Override
    MetricsPrx ice_batchOneway();

    @Override
    MetricsPrx ice_datagram();

    @Override
    MetricsPrx ice_batchDatagram();

    @Override
    MetricsPrx ice_compress(boolean co);

    @Override
    MetricsPrx ice_connectionId(String connectionId);

    @Override
    MetricsPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Metrics";
    }
}
