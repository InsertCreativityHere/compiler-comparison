//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface BackgroundControllerPrx extends com.zeroc.Ice.ObjectPrx
{
    default void pauseCall(String call)
    {
        pauseCall(call, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void pauseCall(String call, java.util.Map<String, String> context)
    {
        _iceI_pauseCallAsync(call, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> pauseCallAsync(String call)
    {
        return _iceI_pauseCallAsync(call, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> pauseCallAsync(String call, java.util.Map<String, String> context)
    {
        return _iceI_pauseCallAsync(call, context, false);
    }

    /**
     * @hidden
     * @param iceP_call -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_pauseCallAsync(String iceP_call, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "pauseCall", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_call);
                 }, null);
        return f;
    }

    default void resumeCall(String call)
    {
        resumeCall(call, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void resumeCall(String call, java.util.Map<String, String> context)
    {
        _iceI_resumeCallAsync(call, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> resumeCallAsync(String call)
    {
        return _iceI_resumeCallAsync(call, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> resumeCallAsync(String call, java.util.Map<String, String> context)
    {
        return _iceI_resumeCallAsync(call, context, false);
    }

    /**
     * @hidden
     * @param iceP_call -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_resumeCallAsync(String iceP_call, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "resumeCall", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_call);
                 }, null);
        return f;
    }

    default void holdAdapter()
    {
        holdAdapter(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void holdAdapter(java.util.Map<String, String> context)
    {
        _iceI_holdAdapterAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> holdAdapterAsync()
    {
        return _iceI_holdAdapterAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> holdAdapterAsync(java.util.Map<String, String> context)
    {
        return _iceI_holdAdapterAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_holdAdapterAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "holdAdapter", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void resumeAdapter()
    {
        resumeAdapter(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void resumeAdapter(java.util.Map<String, String> context)
    {
        _iceI_resumeAdapterAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> resumeAdapterAsync()
    {
        return _iceI_resumeAdapterAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> resumeAdapterAsync(java.util.Map<String, String> context)
    {
        return _iceI_resumeAdapterAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_resumeAdapterAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "resumeAdapter", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void initializeException(boolean enable)
    {
        initializeException(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void initializeException(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_initializeExceptionAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> initializeExceptionAsync(boolean enable)
    {
        return _iceI_initializeExceptionAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> initializeExceptionAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_initializeExceptionAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_initializeExceptionAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "initializeException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    default void readReady(boolean enable)
    {
        readReady(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void readReady(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_readReadyAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> readReadyAsync(boolean enable)
    {
        return _iceI_readReadyAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> readReadyAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_readReadyAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_readReadyAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "readReady", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    default void readException(boolean enable)
    {
        readException(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void readException(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_readExceptionAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> readExceptionAsync(boolean enable)
    {
        return _iceI_readExceptionAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> readExceptionAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_readExceptionAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_readExceptionAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "readException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    default void writeReady(boolean enable)
    {
        writeReady(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void writeReady(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_writeReadyAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> writeReadyAsync(boolean enable)
    {
        return _iceI_writeReadyAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> writeReadyAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_writeReadyAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_writeReadyAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeReady", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    default void writeException(boolean enable)
    {
        writeException(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void writeException(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_writeExceptionAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> writeExceptionAsync(boolean enable)
    {
        return _iceI_writeExceptionAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> writeExceptionAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_writeExceptionAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_writeExceptionAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeException", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    default void buffered(boolean enable)
    {
        buffered(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void buffered(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_bufferedAsync(enable, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> bufferedAsync(boolean enable)
    {
        return _iceI_bufferedAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> bufferedAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_bufferedAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_bufferedAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "buffered", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link BackgroundControllerPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static BackgroundControllerPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return uncheckedCast(communicator.stringToProxy(proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static BackgroundControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static BackgroundControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _BackgroundControllerPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static BackgroundControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static BackgroundControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static BackgroundControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _BackgroundControllerPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static BackgroundControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _BackgroundControllerPrxI(obj.ice_facet(facet));
    }

    @Override
    BackgroundControllerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    BackgroundControllerPrx ice_adapterId(String newAdapterId);

    @Override
    BackgroundControllerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    BackgroundControllerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    BackgroundControllerPrx ice_invocationTimeout(int newTimeout);

    @Override
    BackgroundControllerPrx ice_connectionCached(boolean newCache);

    @Override
    BackgroundControllerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    BackgroundControllerPrx ice_secure(boolean b);

    @Override
    BackgroundControllerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    BackgroundControllerPrx ice_preferSecure(boolean b);

    @Override
    BackgroundControllerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    BackgroundControllerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    BackgroundControllerPrx ice_collocationOptimized(boolean b);

    @Override
    BackgroundControllerPrx ice_twoway();

    @Override
    BackgroundControllerPrx ice_oneway();

    @Override
    BackgroundControllerPrx ice_batchOneway();

    @Override
    BackgroundControllerPrx ice_datagram();

    @Override
    BackgroundControllerPrx ice_batchDatagram();

    @Override
    BackgroundControllerPrx ice_compress(boolean co);

    @Override
    BackgroundControllerPrx ice_connectionId(String connectionId);

    @Override
    BackgroundControllerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::BackgroundController";
    }
}
