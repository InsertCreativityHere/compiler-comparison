//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opNV.
     **/
    public static class OpNVResult
    {
        /**
         * Default constructor.
         **/
        public OpNVResult()
        {
        }

        public OpNVResult(java.util.Map<java.lang.Integer, java.lang.Integer> returnValue, java.util.Map<java.lang.Integer, java.lang.Integer> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.Integer, java.lang.Integer> returnValue;
        public java.util.Map<java.lang.Integer, java.lang.Integer> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NVHelper.write(ostr, this.o);
            NVHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NVHelper.read(istr);
            returnValue = NVHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNR.
     **/
    public static class OpNRResult
    {
        /**
         * Default constructor.
         **/
        public OpNRResult()
        {
        }

        public OpNRResult(java.util.Map<java.lang.String, java.lang.String> returnValue, java.util.Map<java.lang.String, java.lang.String> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, java.lang.String> returnValue;
        public java.util.Map<java.lang.String, java.lang.String> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NRHelper.write(ostr, this.o);
            NRHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NRHelper.read(istr);
            returnValue = NRHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDV.
     **/
    public static class OpNDVResult
    {
        /**
         * Default constructor.
         **/
        public OpNDVResult()
        {
        }

        public OpNDVResult(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue, java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue;
        public java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDVHelper.write(ostr, this.o);
            NDVHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDVHelper.read(istr);
            returnValue = NDVHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDR.
     **/
    public static class OpNDRResult
    {
        /**
         * Default constructor.
         **/
        public OpNDRResult()
        {
        }

        public OpNDRResult(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> returnValue, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> returnValue;
        public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDRHelper.write(ostr, this.o);
            NDRHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDRHelper.read(istr);
            returnValue = NDRHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDAIS.
     **/
    public static class OpNDAISResult
    {
        /**
         * Default constructor.
         **/
        public OpNDAISResult()
        {
        }

        public OpNDAISResult(java.util.Map<java.lang.String, int[]> returnValue, java.util.Map<java.lang.String, int[]> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, int[]> returnValue;
        public java.util.Map<java.lang.String, int[]> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDAISHelper.write(ostr, this.o);
            NDAISHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDAISHelper.read(istr);
            returnValue = NDAISHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDGIS.
     **/
    public static class OpNDGISResult
    {
        /**
         * Default constructor.
         **/
        public OpNDGISResult()
        {
        }

        public OpNDGISResult(java.util.Map<java.lang.String, int[]> returnValue, java.util.Map<java.lang.String, int[]> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, int[]> returnValue;
        public java.util.Map<java.lang.String, int[]> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDGISHelper.write(ostr, this.o);
            NDGISHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDGISHelper.read(istr);
            returnValue = NDGISHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDASS.
     **/
    public static class OpNDASSResult
    {
        /**
         * Default constructor.
         **/
        public OpNDASSResult()
        {
        }

        public OpNDASSResult(java.util.Map<java.lang.String, String[]> returnValue, java.util.Map<java.lang.String, String[]> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, String[]> returnValue;
        public java.util.Map<java.lang.String, String[]> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDASSHelper.write(ostr, this.o);
            NDASSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDASSHelper.read(istr);
            returnValue = NDASSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opNDGSS.
     **/
    public static class OpNDGSSResult
    {
        /**
         * Default constructor.
         **/
        public OpNDGSSResult()
        {
        }

        public OpNDGSSResult(java.util.Map<java.lang.String, String[]> returnValue, java.util.Map<java.lang.String, String[]> o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public java.util.Map<java.lang.String, String[]> returnValue;
        public java.util.Map<java.lang.String, String[]> o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            NDGSSHelper.write(ostr, this.o);
            NDGSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = NDGSSHelper.read(istr);
            returnValue = NDGSSHelper.read(istr);
        }
    }

    void shutdown(com.zeroc.Ice.Current current);

    MyClass.OpNVResult opNV(java.util.Map<java.lang.Integer, java.lang.Integer> i, com.zeroc.Ice.Current current);

    MyClass.OpNRResult opNR(java.util.Map<java.lang.String, java.lang.String> i, com.zeroc.Ice.Current current);

    MyClass.OpNDVResult opNDV(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> i, com.zeroc.Ice.Current current);

    MyClass.OpNDRResult opNDR(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> i, com.zeroc.Ice.Current current);

    MyClass.OpNDAISResult opNDAIS(java.util.Map<java.lang.String, int[]> i, com.zeroc.Ice.Current current);

    MyClass.OpNDGISResult opNDGIS(java.util.Map<java.lang.String, int[]> i, com.zeroc.Ice.Current current);

    MyClass.OpNDASSResult opNDASS(java.util.Map<java.lang.String, String[]> i, com.zeroc.Ice.Current current);

    MyClass.OpNDGSSResult opNDGSS(java.util.Map<java.lang.String, String[]> i, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNV(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Integer, java.lang.Integer> iceP_i;
        iceP_i = NVHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNVResult ret = obj.opNV(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNR(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> iceP_i;
        iceP_i = NRHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNRResult ret = obj.opNR(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDV(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_i;
        iceP_i = NDVHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDVResult ret = obj.opNDV(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDR(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> iceP_i;
        iceP_i = NDRHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDRResult ret = obj.opNDR(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDAIS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, int[]> iceP_i;
        iceP_i = NDAISHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDAISResult ret = obj.opNDAIS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDGIS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, int[]> iceP_i;
        iceP_i = NDGISHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDGISResult ret = obj.opNDGIS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDASS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, String[]> iceP_i;
        iceP_i = NDASSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDASSResult ret = obj.opNDASS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNDGSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, String[]> iceP_i;
        iceP_i = NDGSSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpNDGSSResult ret = obj.opNDGSS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        return switch (current.operation)
        {
            case "shutdown" -> MyClass._iceD_shutdown(this, in, current);
            case "opNV" -> MyClass._iceD_opNV(this, in, current);
            case "opNR" -> MyClass._iceD_opNR(this, in, current);
            case "opNDV" -> MyClass._iceD_opNDV(this, in, current);
            case "opNDR" -> MyClass._iceD_opNDR(this, in, current);
            case "opNDAIS" -> MyClass._iceD_opNDAIS(this, in, current);
            case "opNDGIS" -> MyClass._iceD_opNDGIS(this, in, current);
            case "opNDASS" -> MyClass._iceD_opNDASS(this, in, current);
            case "opNDGSS" -> MyClass._iceD_opNDGSS(this, in, current);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
