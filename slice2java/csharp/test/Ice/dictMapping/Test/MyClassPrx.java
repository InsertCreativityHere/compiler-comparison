//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClassPrx extends com.zeroc.Ice.ObjectPrx
{
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default MyClass.OpNVResult opNV(java.util.Map<java.lang.Integer, java.lang.Integer> i)
    {
        return opNV(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNVResult opNV(java.util.Map<java.lang.Integer, java.lang.Integer> i, java.util.Map<String, String> context)
    {
        return _iceI_opNVAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNVResult> opNVAsync(java.util.Map<java.lang.Integer, java.lang.Integer> i)
    {
        return _iceI_opNVAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNVResult> opNVAsync(java.util.Map<java.lang.Integer, java.lang.Integer> i, java.util.Map<String, String> context)
    {
        return _iceI_opNVAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNVResult> _iceI_opNVAsync(java.util.Map<java.lang.Integer, java.lang.Integer> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNVResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNV", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NVHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNVResult ret = new MyClass.OpNVResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNRResult opNR(java.util.Map<java.lang.String, java.lang.String> i)
    {
        return opNR(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNRResult opNR(java.util.Map<java.lang.String, java.lang.String> i, java.util.Map<String, String> context)
    {
        return _iceI_opNRAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNRResult> opNRAsync(java.util.Map<java.lang.String, java.lang.String> i)
    {
        return _iceI_opNRAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNRResult> opNRAsync(java.util.Map<java.lang.String, java.lang.String> i, java.util.Map<String, String> context)
    {
        return _iceI_opNRAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNRResult> _iceI_opNRAsync(java.util.Map<java.lang.String, java.lang.String> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNRResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNR", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NRHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNRResult ret = new MyClass.OpNRResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDVResult opNDV(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> i)
    {
        return opNDV(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDVResult opNDV(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDVAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDVResult> opNDVAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> i)
    {
        return _iceI_opNDVAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDVResult> opNDVAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDVAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDVResult> _iceI_opNDVAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDVResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDV", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDVHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDVResult ret = new MyClass.OpNDVResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDRResult opNDR(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> i)
    {
        return opNDR(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDRResult opNDR(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDRAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDRResult> opNDRAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> i)
    {
        return _iceI_opNDRAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDRResult> opNDRAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDRAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDRResult> _iceI_opNDRAsync(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDRResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDR", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDRHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDRResult ret = new MyClass.OpNDRResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDAISResult opNDAIS(java.util.Map<java.lang.String, int[]> i)
    {
        return opNDAIS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDAISResult opNDAIS(java.util.Map<java.lang.String, int[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDAISAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDAISResult> opNDAISAsync(java.util.Map<java.lang.String, int[]> i)
    {
        return _iceI_opNDAISAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDAISResult> opNDAISAsync(java.util.Map<java.lang.String, int[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDAISAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDAISResult> _iceI_opNDAISAsync(java.util.Map<java.lang.String, int[]> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDAISResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDAIS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDAISHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDAISResult ret = new MyClass.OpNDAISResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDGISResult opNDGIS(java.util.Map<java.lang.String, int[]> i)
    {
        return opNDGIS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDGISResult opNDGIS(java.util.Map<java.lang.String, int[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDGISAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDGISResult> opNDGISAsync(java.util.Map<java.lang.String, int[]> i)
    {
        return _iceI_opNDGISAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDGISResult> opNDGISAsync(java.util.Map<java.lang.String, int[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDGISAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDGISResult> _iceI_opNDGISAsync(java.util.Map<java.lang.String, int[]> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDGISResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDGIS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDGISHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDGISResult ret = new MyClass.OpNDGISResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDASSResult opNDASS(java.util.Map<java.lang.String, String[]> i)
    {
        return opNDASS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDASSResult opNDASS(java.util.Map<java.lang.String, String[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDASSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDASSResult> opNDASSAsync(java.util.Map<java.lang.String, String[]> i)
    {
        return _iceI_opNDASSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDASSResult> opNDASSAsync(java.util.Map<java.lang.String, String[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDASSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDASSResult> _iceI_opNDASSAsync(java.util.Map<java.lang.String, String[]> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDASSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDASS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDASSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDASSResult ret = new MyClass.OpNDASSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpNDGSSResult opNDGSS(java.util.Map<java.lang.String, String[]> i)
    {
        return opNDGSS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpNDGSSResult opNDGSS(java.util.Map<java.lang.String, String[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDGSSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDGSSResult> opNDGSSAsync(java.util.Map<java.lang.String, String[]> i)
    {
        return _iceI_opNDGSSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpNDGSSResult> opNDGSSAsync(java.util.Map<java.lang.String, String[]> i, java.util.Map<String, String> context)
    {
        return _iceI_opNDGSSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDGSSResult> _iceI_opNDGSSAsync(java.util.Map<java.lang.String, String[]> iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpNDGSSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opNDGSS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     NDGSSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpNDGSSResult ret = new MyClass.OpNDGSSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link MyClassPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static MyClassPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return uncheckedCast(communicator.stringToProxy(proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _MyClassPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj.ice_facet(facet));
    }

    @Override
    MyClassPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    MyClassPrx ice_adapterId(String newAdapterId);

    @Override
    MyClassPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    MyClassPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    MyClassPrx ice_invocationTimeout(int newTimeout);

    @Override
    MyClassPrx ice_connectionCached(boolean newCache);

    @Override
    MyClassPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    MyClassPrx ice_secure(boolean b);

    @Override
    MyClassPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    MyClassPrx ice_preferSecure(boolean b);

    @Override
    MyClassPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    MyClassPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    MyClassPrx ice_collocationOptimized(boolean b);

    @Override
    MyClassPrx ice_twoway();

    @Override
    MyClassPrx ice_oneway();

    @Override
    MyClassPrx ice_batchOneway();

    @Override
    MyClassPrx ice_datagram();

    @Override
    MyClassPrx ice_batchDatagram();

    @Override
    MyClassPrx ice_compress(boolean co);

    @Override
    MyClassPrx ice_connectionId(String connectionId);

    @Override
    MyClassPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }
}
