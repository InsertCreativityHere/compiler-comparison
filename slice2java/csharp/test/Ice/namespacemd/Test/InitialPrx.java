//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface InitialPrx extends com.zeroc.Ice.ObjectPrx
{
    default NoNamespace.C1 getNoNamespaceC2AsC1()
    {
        return getNoNamespaceC2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default NoNamespace.C1 getNoNamespaceC2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getNoNamespaceC2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<NoNamespace.C1> getNoNamespaceC2AsC1Async()
    {
        return _iceI_getNoNamespaceC2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<NoNamespace.C1> getNoNamespaceC2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getNoNamespaceC2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<NoNamespace.C1> _iceI_getNoNamespaceC2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NoNamespace.C1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNoNamespaceC2AsC1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<NoNamespace.C1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, NoNamespace.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default NoNamespace.C2 getNoNamespaceC2AsC2()
    {
        return getNoNamespaceC2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default NoNamespace.C2 getNoNamespaceC2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getNoNamespaceC2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<NoNamespace.C2> getNoNamespaceC2AsC2Async()
    {
        return _iceI_getNoNamespaceC2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<NoNamespace.C2> getNoNamespaceC2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getNoNamespaceC2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<NoNamespace.C2> _iceI_getNoNamespaceC2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NoNamespace.C2> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNoNamespaceC2AsC2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<NoNamespace.C2> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, NoNamespace.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwNoNamespaceE2AsE1()
        throws NoNamespace.E1
    {
        throwNoNamespaceE2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwNoNamespaceE2AsE1(java.util.Map<String, String> context)
        throws NoNamespace.E1
    {
        try
        {
            _iceI_throwNoNamespaceE2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(NoNamespace.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceE2AsE1Async()
    {
        return _iceI_throwNoNamespaceE2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceE2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwNoNamespaceE2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwNoNamespaceE2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwNoNamespaceE2AsE1", null, sync, _iceE_throwNoNamespaceE2AsE1);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwNoNamespaceE2AsE1 =
    {
        NoNamespace.E1.class
    };

    default void throwNoNamespaceE2AsE2()
        throws NoNamespace.E2
    {
        throwNoNamespaceE2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwNoNamespaceE2AsE2(java.util.Map<String, String> context)
        throws NoNamespace.E2
    {
        try
        {
            _iceI_throwNoNamespaceE2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(NoNamespace.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceE2AsE2Async()
    {
        return _iceI_throwNoNamespaceE2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceE2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwNoNamespaceE2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwNoNamespaceE2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwNoNamespaceE2AsE2", null, sync, _iceE_throwNoNamespaceE2AsE2);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwNoNamespaceE2AsE2 =
    {
        NoNamespace.E2.class
    };

    default void throwNoNamespaceNotify()
        throws NoNamespace._notify
    {
        throwNoNamespaceNotify(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwNoNamespaceNotify(java.util.Map<String, String> context)
        throws NoNamespace._notify
    {
        try
        {
            _iceI_throwNoNamespaceNotifyAsync(context, true).waitForResponseOrUserEx();
        }
        catch(NoNamespace._notify ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceNotifyAsync()
    {
        return _iceI_throwNoNamespaceNotifyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwNoNamespaceNotifyAsync(java.util.Map<String, String> context)
    {
        return _iceI_throwNoNamespaceNotifyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwNoNamespaceNotifyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwNoNamespaceNotify", null, sync, _iceE_throwNoNamespaceNotify);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwNoNamespaceNotify =
    {
        NoNamespace._notify.class
    };

    default WithNamespace.C1 getWithNamespaceC2AsC1()
    {
        return getWithNamespaceC2AsC1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default WithNamespace.C1 getWithNamespaceC2AsC1(java.util.Map<String, String> context)
    {
        return _iceI_getWithNamespaceC2AsC1Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<WithNamespace.C1> getWithNamespaceC2AsC1Async()
    {
        return _iceI_getWithNamespaceC2AsC1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<WithNamespace.C1> getWithNamespaceC2AsC1Async(java.util.Map<String, String> context)
    {
        return _iceI_getWithNamespaceC2AsC1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<WithNamespace.C1> _iceI_getWithNamespaceC2AsC1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<WithNamespace.C1> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getWithNamespaceC2AsC1", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<WithNamespace.C1> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, WithNamespace.C1.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default WithNamespace.C2 getWithNamespaceC2AsC2()
    {
        return getWithNamespaceC2AsC2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default WithNamespace.C2 getWithNamespaceC2AsC2(java.util.Map<String, String> context)
    {
        return _iceI_getWithNamespaceC2AsC2Async(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<WithNamespace.C2> getWithNamespaceC2AsC2Async()
    {
        return _iceI_getWithNamespaceC2AsC2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<WithNamespace.C2> getWithNamespaceC2AsC2Async(java.util.Map<String, String> context)
    {
        return _iceI_getWithNamespaceC2AsC2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<WithNamespace.C2> _iceI_getWithNamespaceC2AsC2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<WithNamespace.C2> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getWithNamespaceC2AsC2", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     final com.zeroc.IceInternal.Holder<WithNamespace.C2> ret = new com.zeroc.IceInternal.Holder<>();
                     istr.readValue(v -> ret.value = v, WithNamespace.C2.class);
                     istr.readPendingValues();
                     return ret.value;
                 });
        return f;
    }

    default void throwWithNamespaceE2AsE1()
        throws WithNamespace.E1
    {
        throwWithNamespaceE2AsE1(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwWithNamespaceE2AsE1(java.util.Map<String, String> context)
        throws WithNamespace.E1
    {
        try
        {
            _iceI_throwWithNamespaceE2AsE1Async(context, true).waitForResponseOrUserEx();
        }
        catch(WithNamespace.E1 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwWithNamespaceE2AsE1Async()
    {
        return _iceI_throwWithNamespaceE2AsE1Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwWithNamespaceE2AsE1Async(java.util.Map<String, String> context)
    {
        return _iceI_throwWithNamespaceE2AsE1Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwWithNamespaceE2AsE1Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwWithNamespaceE2AsE1", null, sync, _iceE_throwWithNamespaceE2AsE1);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwWithNamespaceE2AsE1 =
    {
        WithNamespace.E1.class
    };

    default void throwWithNamespaceE2AsE2()
        throws WithNamespace.E2
    {
        throwWithNamespaceE2AsE2(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void throwWithNamespaceE2AsE2(java.util.Map<String, String> context)
        throws WithNamespace.E2
    {
        try
        {
            _iceI_throwWithNamespaceE2AsE2Async(context, true).waitForResponseOrUserEx();
        }
        catch(WithNamespace.E2 ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> throwWithNamespaceE2AsE2Async()
    {
        return _iceI_throwWithNamespaceE2AsE2Async(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> throwWithNamespaceE2AsE2Async(java.util.Map<String, String> context)
    {
        return _iceI_throwWithNamespaceE2AsE2Async(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_throwWithNamespaceE2AsE2Async(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "throwWithNamespaceE2AsE2", null, sync, _iceE_throwWithNamespaceE2AsE2);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_throwWithNamespaceE2AsE2 =
    {
        WithNamespace.E2.class
    };

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link InitialPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static InitialPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _InitialPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _InitialPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InitialPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _InitialPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InitialPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _InitialPrxI(obj.ice_facet(facet));
    }

    @Override
    InitialPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    InitialPrx ice_adapterId(String newAdapterId);

    @Override
    InitialPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    InitialPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    InitialPrx ice_invocationTimeout(int newTimeout);

    @Override
    InitialPrx ice_connectionCached(boolean newCache);

    @Override
    InitialPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    InitialPrx ice_secure(boolean b);

    @Override
    InitialPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    InitialPrx ice_preferSecure(boolean b);

    @Override
    InitialPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    InitialPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    InitialPrx ice_collocationOptimized(boolean b);

    @Override
    InitialPrx ice_twoway();

    @Override
    InitialPrx ice_oneway();

    @Override
    InitialPrx ice_batchOneway();

    @Override
    InitialPrx ice_datagram();

    @Override
    InitialPrx ice_batchDatagram();

    @Override
    InitialPrx ice_compress(boolean co);

    @Override
    InitialPrx ice_connectionId(String connectionId);

    @Override
    InitialPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /**
     * @hidden
     **/
    @Override
    default InitialPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _InitialPrxI(ref);
    }
}
