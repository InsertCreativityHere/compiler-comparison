//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opAByteS.
     **/
    public static class OpAByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpAByteSResult()
        {
        }

        public OpAByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opLByteS.
     **/
    public static class OpLByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpLByteSResult()
        {
        }

        public OpLByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opKByteS.
     **/
    public static class OpKByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpKByteSResult()
        {
        }

        public OpKByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opQByteS.
     **/
    public static class OpQByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpQByteSResult()
        {
        }

        public OpQByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opSByteS.
     **/
    public static class OpSByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpSByteSResult()
        {
        }

        public OpSByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opABoolS.
     **/
    public static class OpABoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpABoolSResult()
        {
        }

        public OpABoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opLBoolS.
     **/
    public static class OpLBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpLBoolSResult()
        {
        }

        public OpLBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opKBoolS.
     **/
    public static class OpKBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpKBoolSResult()
        {
        }

        public OpKBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opQBoolS.
     **/
    public static class OpQBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpQBoolSResult()
        {
        }

        public OpQBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opSBoolS.
     **/
    public static class OpSBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpSBoolSResult()
        {
        }

        public OpSBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opAShortS.
     **/
    public static class OpAShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpAShortSResult()
        {
        }

        public OpAShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opLShortS.
     **/
    public static class OpLShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpLShortSResult()
        {
        }

        public OpLShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opKShortS.
     **/
    public static class OpKShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpKShortSResult()
        {
        }

        public OpKShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opQShortS.
     **/
    public static class OpQShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpQShortSResult()
        {
        }

        public OpQShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opSShortS.
     **/
    public static class OpSShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpSShortSResult()
        {
        }

        public OpSShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opAIntS.
     **/
    public static class OpAIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpAIntSResult()
        {
        }

        public OpAIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLIntS.
     **/
    public static class OpLIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpLIntSResult()
        {
        }

        public OpLIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opKIntS.
     **/
    public static class OpKIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpKIntSResult()
        {
        }

        public OpKIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opQIntS.
     **/
    public static class OpQIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpQIntSResult()
        {
        }

        public OpQIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opSIntS.
     **/
    public static class OpSIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpSIntSResult()
        {
        }

        public OpSIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opALongS.
     **/
    public static class OpALongSResult
    {
        /**
         * Default constructor.
         **/
        public OpALongSResult()
        {
        }

        public OpALongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opLLongS.
     **/
    public static class OpLLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpLLongSResult()
        {
        }

        public OpLLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opKLongS.
     **/
    public static class OpKLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpKLongSResult()
        {
        }

        public OpKLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opQLongS.
     **/
    public static class OpQLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpQLongSResult()
        {
        }

        public OpQLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opSLongS.
     **/
    public static class OpSLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpSLongSResult()
        {
        }

        public OpSLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opAFloatS.
     **/
    public static class OpAFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpAFloatSResult()
        {
        }

        public OpAFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opLFloatS.
     **/
    public static class OpLFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpLFloatSResult()
        {
        }

        public OpLFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opKFloatS.
     **/
    public static class OpKFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpKFloatSResult()
        {
        }

        public OpKFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opQFloatS.
     **/
    public static class OpQFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpQFloatSResult()
        {
        }

        public OpQFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opSFloatS.
     **/
    public static class OpSFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpSFloatSResult()
        {
        }

        public OpSFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opADoubleS.
     **/
    public static class OpADoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpADoubleSResult()
        {
        }

        public OpADoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opLDoubleS.
     **/
    public static class OpLDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpLDoubleSResult()
        {
        }

        public OpLDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opKDoubleS.
     **/
    public static class OpKDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpKDoubleSResult()
        {
        }

        public OpKDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opQDoubleS.
     **/
    public static class OpQDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpQDoubleSResult()
        {
        }

        public OpQDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opSDoubleS.
     **/
    public static class OpSDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpSDoubleSResult()
        {
        }

        public OpSDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opAStringS.
     **/
    public static class OpAStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpAStringSResult()
        {
        }

        public OpAStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opLStringS.
     **/
    public static class OpLStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpLStringSResult()
        {
        }

        public OpLStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opKStringS.
     **/
    public static class OpKStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpKStringSResult()
        {
        }

        public OpKStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opQStringS.
     **/
    public static class OpQStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpQStringSResult()
        {
        }

        public OpQStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opSStringS.
     **/
    public static class OpSStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpSStringSResult()
        {
        }

        public OpSStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opAObjectS.
     **/
    public static class OpAObjectSResult
    {
        /**
         * Default constructor.
         **/
        public OpAObjectSResult()
        {
        }

        public OpAObjectSResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AObjectSHelper.write(ostr, this.o);
            AObjectSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AObjectSHelper.read(istr);
            returnValue = AObjectSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLObjectS.
     **/
    public static class OpLObjectSResult
    {
        /**
         * Default constructor.
         **/
        public OpLObjectSResult()
        {
        }

        public OpLObjectSResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LObjectSHelper.write(ostr, this.o);
            LObjectSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LObjectSHelper.read(istr);
            returnValue = LObjectSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAObjectPrxS.
     **/
    public static class OpAObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpAObjectPrxSResult()
        {
        }

        public OpAObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AObjectPrxSHelper.write(ostr, this.o);
            AObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AObjectPrxSHelper.read(istr);
            returnValue = AObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLObjectPrxS.
     **/
    public static class OpLObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpLObjectPrxSResult()
        {
        }

        public OpLObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LObjectPrxSHelper.write(ostr, this.o);
            LObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LObjectPrxSHelper.read(istr);
            returnValue = LObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKObjectPrxS.
     **/
    public static class OpKObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpKObjectPrxSResult()
        {
        }

        public OpKObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KObjectPrxSHelper.write(ostr, this.o);
            KObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KObjectPrxSHelper.read(istr);
            returnValue = KObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQObjectPrxS.
     **/
    public static class OpQObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpQObjectPrxSResult()
        {
        }

        public OpQObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QObjectPrxSHelper.write(ostr, this.o);
            QObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QObjectPrxSHelper.read(istr);
            returnValue = QObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSObjectPrxS.
     **/
    public static class OpSObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpSObjectPrxSResult()
        {
        }

        public OpSObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SObjectPrxSHelper.write(ostr, this.o);
            SObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SObjectPrxSHelper.read(istr);
            returnValue = SObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAStructS.
     **/
    public static class OpAStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpAStructSResult()
        {
        }

        public OpAStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AStructSHelper.write(ostr, this.o);
            AStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AStructSHelper.read(istr);
            returnValue = AStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLStructS.
     **/
    public static class OpLStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpLStructSResult()
        {
        }

        public OpLStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LStructSHelper.write(ostr, this.o);
            LStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LStructSHelper.read(istr);
            returnValue = LStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKStructS.
     **/
    public static class OpKStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpKStructSResult()
        {
        }

        public OpKStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KStructSHelper.write(ostr, this.o);
            KStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KStructSHelper.read(istr);
            returnValue = KStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQStructS.
     **/
    public static class OpQStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpQStructSResult()
        {
        }

        public OpQStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QStructSHelper.write(ostr, this.o);
            QStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QStructSHelper.read(istr);
            returnValue = QStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSStructS.
     **/
    public static class OpSStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpSStructSResult()
        {
        }

        public OpSStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SStructSHelper.write(ostr, this.o);
            SStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SStructSHelper.read(istr);
            returnValue = SStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAStructSD.
     **/
    public static class OpAStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpAStructSDResult()
        {
        }

        public OpAStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AStructSDHelper.write(ostr, this.o);
            AStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AStructSDHelper.read(istr);
            returnValue = AStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLStructSD.
     **/
    public static class OpLStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpLStructSDResult()
        {
        }

        public OpLStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LStructSDHelper.write(ostr, this.o);
            LStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LStructSDHelper.read(istr);
            returnValue = LStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKStructSD.
     **/
    public static class OpKStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpKStructSDResult()
        {
        }

        public OpKStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KStructSDHelper.write(ostr, this.o);
            KStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KStructSDHelper.read(istr);
            returnValue = KStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQStructSD.
     **/
    public static class OpQStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpQStructSDResult()
        {
        }

        public OpQStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QStructSDHelper.write(ostr, this.o);
            QStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QStructSDHelper.read(istr);
            returnValue = QStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSStructSD.
     **/
    public static class OpSStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpSStructSDResult()
        {
        }

        public OpSStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SStructSDHelper.write(ostr, this.o);
            SStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SStructSDHelper.read(istr);
            returnValue = SStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opACVS.
     **/
    public static class OpACVSResult
    {
        /**
         * Default constructor.
         **/
        public OpACVSResult()
        {
        }

        public OpACVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ACVSHelper.write(ostr, this.o);
            ACVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = ACVSHelper.read(istr);
            returnValue = ACVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLCVS.
     **/
    public static class OpLCVSResult
    {
        /**
         * Default constructor.
         **/
        public OpLCVSResult()
        {
        }

        public OpLCVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LCVSHelper.write(ostr, this.o);
            LCVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LCVSHelper.read(istr);
            returnValue = LCVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opACRS.
     **/
    public static class OpACRSResult
    {
        /**
         * Default constructor.
         **/
        public OpACRSResult()
        {
        }

        public OpACRSResult(CR[] returnValue, CR[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CR[] returnValue;
        public CR[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ACRSHelper.write(ostr, this.o);
            ACRSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = ACRSHelper.read(istr);
            returnValue = ACRSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLCRS.
     **/
    public static class OpLCRSResult
    {
        /**
         * Default constructor.
         **/
        public OpLCRSResult()
        {
        }

        public OpLCRSResult(CR[] returnValue, CR[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CR[] returnValue;
        public CR[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LCRSHelper.write(ostr, this.o);
            LCRSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LCRSHelper.read(istr);
            returnValue = LCRSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAEnS.
     **/
    public static class OpAEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpAEnSResult()
        {
        }

        public OpAEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AEnSHelper.write(ostr, this.o);
            AEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AEnSHelper.read(istr);
            returnValue = AEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLEnS.
     **/
    public static class OpLEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpLEnSResult()
        {
        }

        public OpLEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LEnSHelper.write(ostr, this.o);
            LEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LEnSHelper.read(istr);
            returnValue = LEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKEnS.
     **/
    public static class OpKEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpKEnSResult()
        {
        }

        public OpKEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KEnSHelper.write(ostr, this.o);
            KEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KEnSHelper.read(istr);
            returnValue = KEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQEnS.
     **/
    public static class OpQEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpQEnSResult()
        {
        }

        public OpQEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QEnSHelper.write(ostr, this.o);
            QEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QEnSHelper.read(istr);
            returnValue = QEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSEnS.
     **/
    public static class OpSEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpSEnSResult()
        {
        }

        public OpSEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SEnSHelper.write(ostr, this.o);
            SEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SEnSHelper.read(istr);
            returnValue = SEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAIPrxS.
     **/
    public static class OpAIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpAIPrxSResult()
        {
        }

        public OpAIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AIPrxSHelper.write(ostr, this.o);
            AIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AIPrxSHelper.read(istr);
            returnValue = AIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLIPrxS.
     **/
    public static class OpLIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpLIPrxSResult()
        {
        }

        public OpLIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LIPrxSHelper.write(ostr, this.o);
            LIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LIPrxSHelper.read(istr);
            returnValue = LIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKIPrxS.
     **/
    public static class OpKIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpKIPrxSResult()
        {
        }

        public OpKIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KIPrxSHelper.write(ostr, this.o);
            KIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KIPrxSHelper.read(istr);
            returnValue = KIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQIPrxS.
     **/
    public static class OpQIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpQIPrxSResult()
        {
        }

        public OpQIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QIPrxSHelper.write(ostr, this.o);
            QIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QIPrxSHelper.read(istr);
            returnValue = QIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSIPrxS.
     **/
    public static class OpSIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpSIPrxSResult()
        {
        }

        public OpSIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SIPrxSHelper.write(ostr, this.o);
            SIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SIPrxSHelper.read(istr);
            returnValue = SIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomIntS.
     **/
    public static class OpCustomIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomIntSResult()
        {
        }

        public OpCustomIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opCustomCVS.
     **/
    public static class OpCustomCVSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomCVSResult()
        {
        }

        public OpCustomCVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomCVSHelper.write(ostr, this.o);
            CustomCVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomCVSHelper.read(istr);
            returnValue = CustomCVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomIntSS.
     **/
    public static class OpCustomIntSSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomIntSSResult()
        {
        }

        public OpCustomIntSSResult(int[][] returnValue, int[][] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[][] returnValue;
        public int[][] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomIntSSHelper.write(ostr, this.o);
            CustomIntSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomIntSSHelper.read(istr);
            returnValue = CustomIntSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomCVSS.
     **/
    public static class OpCustomCVSSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomCVSSResult()
        {
        }

        public OpCustomCVSSResult(CV[][] returnValue, CV[][] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[][] returnValue;
        public CV[][] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomCVSSHelper.write(ostr, this.o);
            CustomCVSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomCVSSHelper.read(istr);
            returnValue = CustomCVSSHelper.read(istr);
        }
    }

    void shutdown(com.zeroc.Ice.Current current);

    MyClass.OpAByteSResult opAByteS(byte[] i, com.zeroc.Ice.Current current);

    MyClass.OpLByteSResult opLByteS(byte[] i, com.zeroc.Ice.Current current);

    MyClass.OpKByteSResult opKByteS(byte[] i, com.zeroc.Ice.Current current);

    MyClass.OpQByteSResult opQByteS(byte[] i, com.zeroc.Ice.Current current);

    MyClass.OpSByteSResult opSByteS(byte[] i, com.zeroc.Ice.Current current);

    MyClass.OpABoolSResult opABoolS(boolean[] i, com.zeroc.Ice.Current current);

    MyClass.OpLBoolSResult opLBoolS(boolean[] i, com.zeroc.Ice.Current current);

    MyClass.OpKBoolSResult opKBoolS(boolean[] i, com.zeroc.Ice.Current current);

    MyClass.OpQBoolSResult opQBoolS(boolean[] i, com.zeroc.Ice.Current current);

    MyClass.OpSBoolSResult opSBoolS(boolean[] i, com.zeroc.Ice.Current current);

    MyClass.OpAShortSResult opAShortS(short[] i, com.zeroc.Ice.Current current);

    MyClass.OpLShortSResult opLShortS(short[] i, com.zeroc.Ice.Current current);

    MyClass.OpKShortSResult opKShortS(short[] i, com.zeroc.Ice.Current current);

    MyClass.OpQShortSResult opQShortS(short[] i, com.zeroc.Ice.Current current);

    MyClass.OpSShortSResult opSShortS(short[] i, com.zeroc.Ice.Current current);

    MyClass.OpAIntSResult opAIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpLIntSResult opLIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpKIntSResult opKIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpQIntSResult opQIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpSIntSResult opSIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpALongSResult opALongS(long[] i, com.zeroc.Ice.Current current);

    MyClass.OpLLongSResult opLLongS(long[] i, com.zeroc.Ice.Current current);

    MyClass.OpKLongSResult opKLongS(long[] i, com.zeroc.Ice.Current current);

    MyClass.OpQLongSResult opQLongS(long[] i, com.zeroc.Ice.Current current);

    MyClass.OpSLongSResult opSLongS(long[] i, com.zeroc.Ice.Current current);

    MyClass.OpAFloatSResult opAFloatS(float[] i, com.zeroc.Ice.Current current);

    MyClass.OpLFloatSResult opLFloatS(float[] i, com.zeroc.Ice.Current current);

    MyClass.OpKFloatSResult opKFloatS(float[] i, com.zeroc.Ice.Current current);

    MyClass.OpQFloatSResult opQFloatS(float[] i, com.zeroc.Ice.Current current);

    MyClass.OpSFloatSResult opSFloatS(float[] i, com.zeroc.Ice.Current current);

    MyClass.OpADoubleSResult opADoubleS(double[] i, com.zeroc.Ice.Current current);

    MyClass.OpLDoubleSResult opLDoubleS(double[] i, com.zeroc.Ice.Current current);

    MyClass.OpKDoubleSResult opKDoubleS(double[] i, com.zeroc.Ice.Current current);

    MyClass.OpQDoubleSResult opQDoubleS(double[] i, com.zeroc.Ice.Current current);

    MyClass.OpSDoubleSResult opSDoubleS(double[] i, com.zeroc.Ice.Current current);

    MyClass.OpAStringSResult opAStringS(String[] i, com.zeroc.Ice.Current current);

    MyClass.OpLStringSResult opLStringS(String[] i, com.zeroc.Ice.Current current);

    MyClass.OpKStringSResult opKStringS(String[] i, com.zeroc.Ice.Current current);

    MyClass.OpQStringSResult opQStringS(String[] i, com.zeroc.Ice.Current current);

    MyClass.OpSStringSResult opSStringS(String[] i, com.zeroc.Ice.Current current);

    MyClass.OpAObjectSResult opAObjectS(com.zeroc.Ice.Value[] i, com.zeroc.Ice.Current current);

    MyClass.OpLObjectSResult opLObjectS(com.zeroc.Ice.Value[] i, com.zeroc.Ice.Current current);

    MyClass.OpAObjectPrxSResult opAObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpLObjectPrxSResult opLObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpKObjectPrxSResult opKObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpQObjectPrxSResult opQObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpSObjectPrxSResult opSObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpAStructSResult opAStructS(S[] i, com.zeroc.Ice.Current current);

    MyClass.OpLStructSResult opLStructS(S[] i, com.zeroc.Ice.Current current);

    MyClass.OpKStructSResult opKStructS(S[] i, com.zeroc.Ice.Current current);

    MyClass.OpQStructSResult opQStructS(S[] i, com.zeroc.Ice.Current current);

    MyClass.OpSStructSResult opSStructS(S[] i, com.zeroc.Ice.Current current);

    MyClass.OpAStructSDResult opAStructSD(SD[] i, com.zeroc.Ice.Current current);

    MyClass.OpLStructSDResult opLStructSD(SD[] i, com.zeroc.Ice.Current current);

    MyClass.OpKStructSDResult opKStructSD(SD[] i, com.zeroc.Ice.Current current);

    MyClass.OpQStructSDResult opQStructSD(SD[] i, com.zeroc.Ice.Current current);

    MyClass.OpSStructSDResult opSStructSD(SD[] i, com.zeroc.Ice.Current current);

    MyClass.OpACVSResult opACVS(CV[] i, com.zeroc.Ice.Current current);

    MyClass.OpLCVSResult opLCVS(CV[] i, com.zeroc.Ice.Current current);

    MyClass.OpACRSResult opACRS(CR[] i, com.zeroc.Ice.Current current);

    MyClass.OpLCRSResult opLCRS(CR[] i, com.zeroc.Ice.Current current);

    MyClass.OpAEnSResult opAEnS(En[] i, com.zeroc.Ice.Current current);

    MyClass.OpLEnSResult opLEnS(En[] i, com.zeroc.Ice.Current current);

    MyClass.OpKEnSResult opKEnS(En[] i, com.zeroc.Ice.Current current);

    MyClass.OpQEnSResult opQEnS(En[] i, com.zeroc.Ice.Current current);

    MyClass.OpSEnSResult opSEnS(En[] i, com.zeroc.Ice.Current current);

    MyClass.OpAIPrxSResult opAIPrxS(IPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpLIPrxSResult opLIPrxS(IPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpKIPrxSResult opKIPrxS(IPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpQIPrxSResult opQIPrxS(IPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpSIPrxSResult opSIPrxS(IPrx[] i, com.zeroc.Ice.Current current);

    MyClass.OpCustomIntSResult opCustomIntS(int[] i, com.zeroc.Ice.Current current);

    MyClass.OpCustomCVSResult opCustomCVS(CV[] i, com.zeroc.Ice.Current current);

    MyClass.OpCustomIntSSResult opCustomIntSS(int[][] i, com.zeroc.Ice.Current current);

    MyClass.OpCustomCVSSResult opCustomCVSS(CV[][] i, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        inS.endReadParams();
        MyClass.OpAByteSResult ret = obj.opAByteS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        inS.endReadParams();
        MyClass.OpLByteSResult ret = obj.opLByteS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        inS.endReadParams();
        MyClass.OpKByteSResult ret = obj.opKByteS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        inS.endReadParams();
        MyClass.OpQByteSResult ret = obj.opQByteS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        inS.endReadParams();
        MyClass.OpSByteSResult ret = obj.opSByteS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opABoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        inS.endReadParams();
        MyClass.OpABoolSResult ret = obj.opABoolS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLBoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        inS.endReadParams();
        MyClass.OpLBoolSResult ret = obj.opLBoolS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKBoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        inS.endReadParams();
        MyClass.OpKBoolSResult ret = obj.opKBoolS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQBoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        inS.endReadParams();
        MyClass.OpQBoolSResult ret = obj.opQBoolS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSBoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        inS.endReadParams();
        MyClass.OpSBoolSResult ret = obj.opSBoolS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAShortS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        inS.endReadParams();
        MyClass.OpAShortSResult ret = obj.opAShortS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLShortS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        inS.endReadParams();
        MyClass.OpLShortSResult ret = obj.opLShortS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKShortS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        inS.endReadParams();
        MyClass.OpKShortSResult ret = obj.opKShortS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQShortS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        inS.endReadParams();
        MyClass.OpQShortSResult ret = obj.opQShortS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSShortS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        inS.endReadParams();
        MyClass.OpSShortSResult ret = obj.opSShortS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpAIntSResult ret = obj.opAIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpLIntSResult ret = obj.opLIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpKIntSResult ret = obj.opKIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpQIntSResult ret = obj.opQIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpSIntSResult ret = obj.opSIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opALongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        inS.endReadParams();
        MyClass.OpALongSResult ret = obj.opALongS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLLongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        inS.endReadParams();
        MyClass.OpLLongSResult ret = obj.opLLongS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKLongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        inS.endReadParams();
        MyClass.OpKLongSResult ret = obj.opKLongS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQLongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        inS.endReadParams();
        MyClass.OpQLongSResult ret = obj.opQLongS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSLongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        inS.endReadParams();
        MyClass.OpSLongSResult ret = obj.opSLongS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAFloatS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        inS.endReadParams();
        MyClass.OpAFloatSResult ret = obj.opAFloatS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLFloatS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        inS.endReadParams();
        MyClass.OpLFloatSResult ret = obj.opLFloatS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKFloatS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        inS.endReadParams();
        MyClass.OpKFloatSResult ret = obj.opKFloatS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQFloatS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        inS.endReadParams();
        MyClass.OpQFloatSResult ret = obj.opQFloatS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSFloatS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        inS.endReadParams();
        MyClass.OpSFloatSResult ret = obj.opSFloatS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opADoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        inS.endReadParams();
        MyClass.OpADoubleSResult ret = obj.opADoubleS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLDoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        inS.endReadParams();
        MyClass.OpLDoubleSResult ret = obj.opLDoubleS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKDoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        inS.endReadParams();
        MyClass.OpKDoubleSResult ret = obj.opKDoubleS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQDoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        inS.endReadParams();
        MyClass.OpQDoubleSResult ret = obj.opQDoubleS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSDoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        inS.endReadParams();
        MyClass.OpSDoubleSResult ret = obj.opSDoubleS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        inS.endReadParams();
        MyClass.OpAStringSResult ret = obj.opAStringS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        inS.endReadParams();
        MyClass.OpLStringSResult ret = obj.opLStringS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        inS.endReadParams();
        MyClass.OpKStringSResult ret = obj.opKStringS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        inS.endReadParams();
        MyClass.OpQStringSResult ret = obj.opQStringS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        inS.endReadParams();
        MyClass.OpSStringSResult ret = obj.opSStringS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAObjectS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.Value[] iceP_i;
        iceP_i = AObjectSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpAObjectSResult ret = obj.opAObjectS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLObjectS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.Value[] iceP_i;
        iceP_i = LObjectSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpLObjectSResult ret = obj.opLObjectS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAObjectPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = AObjectPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpAObjectPrxSResult ret = obj.opAObjectPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLObjectPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = LObjectPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpLObjectPrxSResult ret = obj.opLObjectPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKObjectPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = KObjectPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpKObjectPrxSResult ret = obj.opKObjectPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQObjectPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = QObjectPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpQObjectPrxSResult ret = obj.opQObjectPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSObjectPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = SObjectPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpSObjectPrxSResult ret = obj.opSObjectPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAStructS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S[] iceP_i;
        iceP_i = AStructSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpAStructSResult ret = obj.opAStructS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLStructS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S[] iceP_i;
        iceP_i = LStructSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpLStructSResult ret = obj.opLStructS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKStructS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S[] iceP_i;
        iceP_i = KStructSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpKStructSResult ret = obj.opKStructS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQStructS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S[] iceP_i;
        iceP_i = QStructSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpQStructSResult ret = obj.opQStructS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSStructS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        S[] iceP_i;
        iceP_i = SStructSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpSStructSResult ret = obj.opSStructS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAStructSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SD[] iceP_i;
        iceP_i = AStructSDHelper.read(istr);
        inS.endReadParams();
        MyClass.OpAStructSDResult ret = obj.opAStructSD(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLStructSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SD[] iceP_i;
        iceP_i = LStructSDHelper.read(istr);
        inS.endReadParams();
        MyClass.OpLStructSDResult ret = obj.opLStructSD(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKStructSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SD[] iceP_i;
        iceP_i = KStructSDHelper.read(istr);
        inS.endReadParams();
        MyClass.OpKStructSDResult ret = obj.opKStructSD(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQStructSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SD[] iceP_i;
        iceP_i = QStructSDHelper.read(istr);
        inS.endReadParams();
        MyClass.OpQStructSDResult ret = obj.opQStructSD(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSStructSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SD[] iceP_i;
        iceP_i = SStructSDHelper.read(istr);
        inS.endReadParams();
        MyClass.OpSStructSDResult ret = obj.opSStructSD(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opACVS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CV[] iceP_i;
        iceP_i = ACVSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpACVSResult ret = obj.opACVS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLCVS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CV[] iceP_i;
        iceP_i = LCVSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpLCVSResult ret = obj.opLCVS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opACRS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CR[] iceP_i;
        iceP_i = ACRSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpACRSResult ret = obj.opACRS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLCRS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CR[] iceP_i;
        iceP_i = LCRSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpLCRSResult ret = obj.opLCRS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAEnS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        En[] iceP_i;
        iceP_i = AEnSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpAEnSResult ret = obj.opAEnS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLEnS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        En[] iceP_i;
        iceP_i = LEnSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpLEnSResult ret = obj.opLEnS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKEnS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        En[] iceP_i;
        iceP_i = KEnSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpKEnSResult ret = obj.opKEnS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQEnS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        En[] iceP_i;
        iceP_i = QEnSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpQEnSResult ret = obj.opQEnS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSEnS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        En[] iceP_i;
        iceP_i = SEnSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpSEnSResult ret = obj.opSEnS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opAIPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        IPrx[] iceP_i;
        iceP_i = AIPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpAIPrxSResult ret = obj.opAIPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLIPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        IPrx[] iceP_i;
        iceP_i = LIPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpLIPrxSResult ret = obj.opLIPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opKIPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        IPrx[] iceP_i;
        iceP_i = KIPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpKIPrxSResult ret = obj.opKIPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opQIPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        IPrx[] iceP_i;
        iceP_i = QIPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpQIPrxSResult ret = obj.opQIPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSIPrxS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        IPrx[] iceP_i;
        iceP_i = SIPrxSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpSIPrxSResult ret = obj.opSIPrxS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCustomIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        inS.endReadParams();
        MyClass.OpCustomIntSResult ret = obj.opCustomIntS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCustomCVS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CV[] iceP_i;
        iceP_i = CustomCVSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpCustomCVSResult ret = obj.opCustomCVS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCustomIntSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[][] iceP_i;
        iceP_i = CustomIntSSHelper.read(istr);
        inS.endReadParams();
        MyClass.OpCustomIntSSResult ret = obj.opCustomIntSS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCustomCVSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CV[][] iceP_i;
        iceP_i = CustomCVSSHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        MyClass.OpCustomCVSSResult ret = obj.opCustomCVSS(iceP_i, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opABoolS",
        "opAByteS",
        "opACRS",
        "opACVS",
        "opADoubleS",
        "opAEnS",
        "opAFloatS",
        "opAIPrxS",
        "opAIntS",
        "opALongS",
        "opAObjectPrxS",
        "opAObjectS",
        "opAShortS",
        "opAStringS",
        "opAStructS",
        "opAStructSD",
        "opCustomCVS",
        "opCustomCVSS",
        "opCustomIntS",
        "opCustomIntSS",
        "opKBoolS",
        "opKByteS",
        "opKDoubleS",
        "opKEnS",
        "opKFloatS",
        "opKIPrxS",
        "opKIntS",
        "opKLongS",
        "opKObjectPrxS",
        "opKShortS",
        "opKStringS",
        "opKStructS",
        "opKStructSD",
        "opLBoolS",
        "opLByteS",
        "opLCRS",
        "opLCVS",
        "opLDoubleS",
        "opLEnS",
        "opLFloatS",
        "opLIPrxS",
        "opLIntS",
        "opLLongS",
        "opLObjectPrxS",
        "opLObjectS",
        "opLShortS",
        "opLStringS",
        "opLStructS",
        "opLStructSD",
        "opQBoolS",
        "opQByteS",
        "opQDoubleS",
        "opQEnS",
        "opQFloatS",
        "opQIPrxS",
        "opQIntS",
        "opQLongS",
        "opQObjectPrxS",
        "opQShortS",
        "opQStringS",
        "opQStructS",
        "opQStructSD",
        "opSBoolS",
        "opSByteS",
        "opSDoubleS",
        "opSEnS",
        "opSFloatS",
        "opSIPrxS",
        "opSIntS",
        "opSLongS",
        "opSObjectPrxS",
        "opSShortS",
        "opSStringS",
        "opSStructS",
        "opSStructSD",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opABoolS(this, in, current);
            }
            case 5:
            {
                return _iceD_opAByteS(this, in, current);
            }
            case 6:
            {
                return _iceD_opACRS(this, in, current);
            }
            case 7:
            {
                return _iceD_opACVS(this, in, current);
            }
            case 8:
            {
                return _iceD_opADoubleS(this, in, current);
            }
            case 9:
            {
                return _iceD_opAEnS(this, in, current);
            }
            case 10:
            {
                return _iceD_opAFloatS(this, in, current);
            }
            case 11:
            {
                return _iceD_opAIPrxS(this, in, current);
            }
            case 12:
            {
                return _iceD_opAIntS(this, in, current);
            }
            case 13:
            {
                return _iceD_opALongS(this, in, current);
            }
            case 14:
            {
                return _iceD_opAObjectPrxS(this, in, current);
            }
            case 15:
            {
                return _iceD_opAObjectS(this, in, current);
            }
            case 16:
            {
                return _iceD_opAShortS(this, in, current);
            }
            case 17:
            {
                return _iceD_opAStringS(this, in, current);
            }
            case 18:
            {
                return _iceD_opAStructS(this, in, current);
            }
            case 19:
            {
                return _iceD_opAStructSD(this, in, current);
            }
            case 20:
            {
                return _iceD_opCustomCVS(this, in, current);
            }
            case 21:
            {
                return _iceD_opCustomCVSS(this, in, current);
            }
            case 22:
            {
                return _iceD_opCustomIntS(this, in, current);
            }
            case 23:
            {
                return _iceD_opCustomIntSS(this, in, current);
            }
            case 24:
            {
                return _iceD_opKBoolS(this, in, current);
            }
            case 25:
            {
                return _iceD_opKByteS(this, in, current);
            }
            case 26:
            {
                return _iceD_opKDoubleS(this, in, current);
            }
            case 27:
            {
                return _iceD_opKEnS(this, in, current);
            }
            case 28:
            {
                return _iceD_opKFloatS(this, in, current);
            }
            case 29:
            {
                return _iceD_opKIPrxS(this, in, current);
            }
            case 30:
            {
                return _iceD_opKIntS(this, in, current);
            }
            case 31:
            {
                return _iceD_opKLongS(this, in, current);
            }
            case 32:
            {
                return _iceD_opKObjectPrxS(this, in, current);
            }
            case 33:
            {
                return _iceD_opKShortS(this, in, current);
            }
            case 34:
            {
                return _iceD_opKStringS(this, in, current);
            }
            case 35:
            {
                return _iceD_opKStructS(this, in, current);
            }
            case 36:
            {
                return _iceD_opKStructSD(this, in, current);
            }
            case 37:
            {
                return _iceD_opLBoolS(this, in, current);
            }
            case 38:
            {
                return _iceD_opLByteS(this, in, current);
            }
            case 39:
            {
                return _iceD_opLCRS(this, in, current);
            }
            case 40:
            {
                return _iceD_opLCVS(this, in, current);
            }
            case 41:
            {
                return _iceD_opLDoubleS(this, in, current);
            }
            case 42:
            {
                return _iceD_opLEnS(this, in, current);
            }
            case 43:
            {
                return _iceD_opLFloatS(this, in, current);
            }
            case 44:
            {
                return _iceD_opLIPrxS(this, in, current);
            }
            case 45:
            {
                return _iceD_opLIntS(this, in, current);
            }
            case 46:
            {
                return _iceD_opLLongS(this, in, current);
            }
            case 47:
            {
                return _iceD_opLObjectPrxS(this, in, current);
            }
            case 48:
            {
                return _iceD_opLObjectS(this, in, current);
            }
            case 49:
            {
                return _iceD_opLShortS(this, in, current);
            }
            case 50:
            {
                return _iceD_opLStringS(this, in, current);
            }
            case 51:
            {
                return _iceD_opLStructS(this, in, current);
            }
            case 52:
            {
                return _iceD_opLStructSD(this, in, current);
            }
            case 53:
            {
                return _iceD_opQBoolS(this, in, current);
            }
            case 54:
            {
                return _iceD_opQByteS(this, in, current);
            }
            case 55:
            {
                return _iceD_opQDoubleS(this, in, current);
            }
            case 56:
            {
                return _iceD_opQEnS(this, in, current);
            }
            case 57:
            {
                return _iceD_opQFloatS(this, in, current);
            }
            case 58:
            {
                return _iceD_opQIPrxS(this, in, current);
            }
            case 59:
            {
                return _iceD_opQIntS(this, in, current);
            }
            case 60:
            {
                return _iceD_opQLongS(this, in, current);
            }
            case 61:
            {
                return _iceD_opQObjectPrxS(this, in, current);
            }
            case 62:
            {
                return _iceD_opQShortS(this, in, current);
            }
            case 63:
            {
                return _iceD_opQStringS(this, in, current);
            }
            case 64:
            {
                return _iceD_opQStructS(this, in, current);
            }
            case 65:
            {
                return _iceD_opQStructSD(this, in, current);
            }
            case 66:
            {
                return _iceD_opSBoolS(this, in, current);
            }
            case 67:
            {
                return _iceD_opSByteS(this, in, current);
            }
            case 68:
            {
                return _iceD_opSDoubleS(this, in, current);
            }
            case 69:
            {
                return _iceD_opSEnS(this, in, current);
            }
            case 70:
            {
                return _iceD_opSFloatS(this, in, current);
            }
            case 71:
            {
                return _iceD_opSIPrxS(this, in, current);
            }
            case 72:
            {
                return _iceD_opSIntS(this, in, current);
            }
            case 73:
            {
                return _iceD_opSLongS(this, in, current);
            }
            case 74:
            {
                return _iceD_opSObjectPrxS(this, in, current);
            }
            case 75:
            {
                return _iceD_opSShortS(this, in, current);
            }
            case 76:
            {
                return _iceD_opSStringS(this, in, current);
            }
            case 77:
            {
                return _iceD_opSStructS(this, in, current);
            }
            case 78:
            {
                return _iceD_opSStructSD(this, in, current);
            }
            case 79:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
