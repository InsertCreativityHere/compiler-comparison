//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opAByteS.
     **/
    public static class OpAByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpAByteSResult()
        {
        }

        public OpAByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opLByteS.
     **/
    public static class OpLByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpLByteSResult()
        {
        }

        public OpLByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opKByteS.
     **/
    public static class OpKByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpKByteSResult()
        {
        }

        public OpKByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opQByteS.
     **/
    public static class OpQByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpQByteSResult()
        {
        }

        public OpQByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opSByteS.
     **/
    public static class OpSByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpSByteSResult()
        {
        }

        public OpSByteSResult(byte[] returnValue, byte[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public byte[] returnValue;
        public byte[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.o);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opABoolS.
     **/
    public static class OpABoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpABoolSResult()
        {
        }

        public OpABoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opLBoolS.
     **/
    public static class OpLBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpLBoolSResult()
        {
        }

        public OpLBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opKBoolS.
     **/
    public static class OpKBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpKBoolSResult()
        {
        }

        public OpKBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opQBoolS.
     **/
    public static class OpQBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpQBoolSResult()
        {
        }

        public OpQBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opSBoolS.
     **/
    public static class OpSBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpSBoolSResult()
        {
        }

        public OpSBoolSResult(boolean[] returnValue, boolean[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public boolean[] returnValue;
        public boolean[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.o);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opAShortS.
     **/
    public static class OpAShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpAShortSResult()
        {
        }

        public OpAShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opLShortS.
     **/
    public static class OpLShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpLShortSResult()
        {
        }

        public OpLShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opKShortS.
     **/
    public static class OpKShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpKShortSResult()
        {
        }

        public OpKShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opQShortS.
     **/
    public static class OpQShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpQShortSResult()
        {
        }

        public OpQShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opSShortS.
     **/
    public static class OpSShortSResult
    {
        /**
         * Default constructor.
         **/
        public OpSShortSResult()
        {
        }

        public OpSShortSResult(short[] returnValue, short[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public short[] returnValue;
        public short[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.o);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opAIntS.
     **/
    public static class OpAIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpAIntSResult()
        {
        }

        public OpAIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opLIntS.
     **/
    public static class OpLIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpLIntSResult()
        {
        }

        public OpLIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opKIntS.
     **/
    public static class OpKIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpKIntSResult()
        {
        }

        public OpKIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opQIntS.
     **/
    public static class OpQIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpQIntSResult()
        {
        }

        public OpQIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opSIntS.
     **/
    public static class OpSIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpSIntSResult()
        {
        }

        public OpSIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opALongS.
     **/
    public static class OpALongSResult
    {
        /**
         * Default constructor.
         **/
        public OpALongSResult()
        {
        }

        public OpALongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opLLongS.
     **/
    public static class OpLLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpLLongSResult()
        {
        }

        public OpLLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opKLongS.
     **/
    public static class OpKLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpKLongSResult()
        {
        }

        public OpKLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opQLongS.
     **/
    public static class OpQLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpQLongSResult()
        {
        }

        public OpQLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opSLongS.
     **/
    public static class OpSLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpSLongSResult()
        {
        }

        public OpSLongSResult(long[] returnValue, long[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public long[] returnValue;
        public long[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(this.o);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opAFloatS.
     **/
    public static class OpAFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpAFloatSResult()
        {
        }

        public OpAFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opLFloatS.
     **/
    public static class OpLFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpLFloatSResult()
        {
        }

        public OpLFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opKFloatS.
     **/
    public static class OpKFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpKFloatSResult()
        {
        }

        public OpKFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opQFloatS.
     **/
    public static class OpQFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpQFloatSResult()
        {
        }

        public OpQFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opSFloatS.
     **/
    public static class OpSFloatSResult
    {
        /**
         * Default constructor.
         **/
        public OpSFloatSResult()
        {
        }

        public OpSFloatSResult(float[] returnValue, float[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public float[] returnValue;
        public float[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.o);
            ostr.writeFloatSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readFloatSeq();
            returnValue = istr.readFloatSeq();
        }
    }

    /**
     * Holds the result of operation opADoubleS.
     **/
    public static class OpADoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpADoubleSResult()
        {
        }

        public OpADoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opLDoubleS.
     **/
    public static class OpLDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpLDoubleSResult()
        {
        }

        public OpLDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opKDoubleS.
     **/
    public static class OpKDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpKDoubleSResult()
        {
        }

        public OpKDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opQDoubleS.
     **/
    public static class OpQDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpQDoubleSResult()
        {
        }

        public OpQDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opSDoubleS.
     **/
    public static class OpSDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpSDoubleSResult()
        {
        }

        public OpSDoubleSResult(double[] returnValue, double[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public double[] returnValue;
        public double[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.o);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opAStringS.
     **/
    public static class OpAStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpAStringSResult()
        {
        }

        public OpAStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opLStringS.
     **/
    public static class OpLStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpLStringSResult()
        {
        }

        public OpLStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opKStringS.
     **/
    public static class OpKStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpKStringSResult()
        {
        }

        public OpKStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opQStringS.
     **/
    public static class OpQStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpQStringSResult()
        {
        }

        public OpQStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opSStringS.
     **/
    public static class OpSStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpSStringSResult()
        {
        }

        public OpSStringSResult(String[] returnValue, String[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public String[] returnValue;
        public String[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.o);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opAObjectS.
     **/
    public static class OpAObjectSResult
    {
        /**
         * Default constructor.
         **/
        public OpAObjectSResult()
        {
        }

        public OpAObjectSResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AObjectSHelper.write(ostr, this.o);
            AObjectSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AObjectSHelper.read(istr);
            returnValue = AObjectSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLObjectS.
     **/
    public static class OpLObjectSResult
    {
        /**
         * Default constructor.
         **/
        public OpLObjectSResult()
        {
        }

        public OpLObjectSResult(com.zeroc.Ice.Value[] returnValue, com.zeroc.Ice.Value[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.Value[] returnValue;
        public com.zeroc.Ice.Value[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LObjectSHelper.write(ostr, this.o);
            LObjectSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LObjectSHelper.read(istr);
            returnValue = LObjectSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAObjectPrxS.
     **/
    public static class OpAObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpAObjectPrxSResult()
        {
        }

        public OpAObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AObjectPrxSHelper.write(ostr, this.o);
            AObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AObjectPrxSHelper.read(istr);
            returnValue = AObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLObjectPrxS.
     **/
    public static class OpLObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpLObjectPrxSResult()
        {
        }

        public OpLObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LObjectPrxSHelper.write(ostr, this.o);
            LObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LObjectPrxSHelper.read(istr);
            returnValue = LObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKObjectPrxS.
     **/
    public static class OpKObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpKObjectPrxSResult()
        {
        }

        public OpKObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KObjectPrxSHelper.write(ostr, this.o);
            KObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KObjectPrxSHelper.read(istr);
            returnValue = KObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQObjectPrxS.
     **/
    public static class OpQObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpQObjectPrxSResult()
        {
        }

        public OpQObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QObjectPrxSHelper.write(ostr, this.o);
            QObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QObjectPrxSHelper.read(istr);
            returnValue = QObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSObjectPrxS.
     **/
    public static class OpSObjectPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpSObjectPrxSResult()
        {
        }

        public OpSObjectPrxSResult(com.zeroc.Ice.ObjectPrx[] returnValue, com.zeroc.Ice.ObjectPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public com.zeroc.Ice.ObjectPrx[] returnValue;
        public com.zeroc.Ice.ObjectPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SObjectPrxSHelper.write(ostr, this.o);
            SObjectPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SObjectPrxSHelper.read(istr);
            returnValue = SObjectPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAStructS.
     **/
    public static class OpAStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpAStructSResult()
        {
        }

        public OpAStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AStructSHelper.write(ostr, this.o);
            AStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AStructSHelper.read(istr);
            returnValue = AStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLStructS.
     **/
    public static class OpLStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpLStructSResult()
        {
        }

        public OpLStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LStructSHelper.write(ostr, this.o);
            LStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LStructSHelper.read(istr);
            returnValue = LStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKStructS.
     **/
    public static class OpKStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpKStructSResult()
        {
        }

        public OpKStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KStructSHelper.write(ostr, this.o);
            KStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KStructSHelper.read(istr);
            returnValue = KStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQStructS.
     **/
    public static class OpQStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpQStructSResult()
        {
        }

        public OpQStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QStructSHelper.write(ostr, this.o);
            QStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QStructSHelper.read(istr);
            returnValue = QStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSStructS.
     **/
    public static class OpSStructSResult
    {
        /**
         * Default constructor.
         **/
        public OpSStructSResult()
        {
        }

        public OpSStructSResult(S[] returnValue, S[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public S[] returnValue;
        public S[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SStructSHelper.write(ostr, this.o);
            SStructSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SStructSHelper.read(istr);
            returnValue = SStructSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAStructSD.
     **/
    public static class OpAStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpAStructSDResult()
        {
        }

        public OpAStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AStructSDHelper.write(ostr, this.o);
            AStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AStructSDHelper.read(istr);
            returnValue = AStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLStructSD.
     **/
    public static class OpLStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpLStructSDResult()
        {
        }

        public OpLStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LStructSDHelper.write(ostr, this.o);
            LStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LStructSDHelper.read(istr);
            returnValue = LStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKStructSD.
     **/
    public static class OpKStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpKStructSDResult()
        {
        }

        public OpKStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KStructSDHelper.write(ostr, this.o);
            KStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KStructSDHelper.read(istr);
            returnValue = KStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQStructSD.
     **/
    public static class OpQStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpQStructSDResult()
        {
        }

        public OpQStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QStructSDHelper.write(ostr, this.o);
            QStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QStructSDHelper.read(istr);
            returnValue = QStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSStructSD.
     **/
    public static class OpSStructSDResult
    {
        /**
         * Default constructor.
         **/
        public OpSStructSDResult()
        {
        }

        public OpSStructSDResult(SD[] returnValue, SD[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public SD[] returnValue;
        public SD[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SStructSDHelper.write(ostr, this.o);
            SStructSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SStructSDHelper.read(istr);
            returnValue = SStructSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opACVS.
     **/
    public static class OpACVSResult
    {
        /**
         * Default constructor.
         **/
        public OpACVSResult()
        {
        }

        public OpACVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ACVSHelper.write(ostr, this.o);
            ACVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = ACVSHelper.read(istr);
            returnValue = ACVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLCVS.
     **/
    public static class OpLCVSResult
    {
        /**
         * Default constructor.
         **/
        public OpLCVSResult()
        {
        }

        public OpLCVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LCVSHelper.write(ostr, this.o);
            LCVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LCVSHelper.read(istr);
            returnValue = LCVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opACRS.
     **/
    public static class OpACRSResult
    {
        /**
         * Default constructor.
         **/
        public OpACRSResult()
        {
        }

        public OpACRSResult(CR[] returnValue, CR[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CR[] returnValue;
        public CR[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ACRSHelper.write(ostr, this.o);
            ACRSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = ACRSHelper.read(istr);
            returnValue = ACRSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLCRS.
     **/
    public static class OpLCRSResult
    {
        /**
         * Default constructor.
         **/
        public OpLCRSResult()
        {
        }

        public OpLCRSResult(CR[] returnValue, CR[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CR[] returnValue;
        public CR[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LCRSHelper.write(ostr, this.o);
            LCRSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LCRSHelper.read(istr);
            returnValue = LCRSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAEnS.
     **/
    public static class OpAEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpAEnSResult()
        {
        }

        public OpAEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AEnSHelper.write(ostr, this.o);
            AEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AEnSHelper.read(istr);
            returnValue = AEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLEnS.
     **/
    public static class OpLEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpLEnSResult()
        {
        }

        public OpLEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LEnSHelper.write(ostr, this.o);
            LEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LEnSHelper.read(istr);
            returnValue = LEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKEnS.
     **/
    public static class OpKEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpKEnSResult()
        {
        }

        public OpKEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KEnSHelper.write(ostr, this.o);
            KEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KEnSHelper.read(istr);
            returnValue = KEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQEnS.
     **/
    public static class OpQEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpQEnSResult()
        {
        }

        public OpQEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QEnSHelper.write(ostr, this.o);
            QEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QEnSHelper.read(istr);
            returnValue = QEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSEnS.
     **/
    public static class OpSEnSResult
    {
        /**
         * Default constructor.
         **/
        public OpSEnSResult()
        {
        }

        public OpSEnSResult(En[] returnValue, En[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public En[] returnValue;
        public En[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SEnSHelper.write(ostr, this.o);
            SEnSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SEnSHelper.read(istr);
            returnValue = SEnSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opAIPrxS.
     **/
    public static class OpAIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpAIPrxSResult()
        {
        }

        public OpAIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AIPrxSHelper.write(ostr, this.o);
            AIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = AIPrxSHelper.read(istr);
            returnValue = AIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLIPrxS.
     **/
    public static class OpLIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpLIPrxSResult()
        {
        }

        public OpLIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LIPrxSHelper.write(ostr, this.o);
            LIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = LIPrxSHelper.read(istr);
            returnValue = LIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opKIPrxS.
     **/
    public static class OpKIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpKIPrxSResult()
        {
        }

        public OpKIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            KIPrxSHelper.write(ostr, this.o);
            KIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = KIPrxSHelper.read(istr);
            returnValue = KIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opQIPrxS.
     **/
    public static class OpQIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpQIPrxSResult()
        {
        }

        public OpQIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            QIPrxSHelper.write(ostr, this.o);
            QIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = QIPrxSHelper.read(istr);
            returnValue = QIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSIPrxS.
     **/
    public static class OpSIPrxSResult
    {
        /**
         * Default constructor.
         **/
        public OpSIPrxSResult()
        {
        }

        public OpSIPrxSResult(IPrx[] returnValue, IPrx[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public IPrx[] returnValue;
        public IPrx[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SIPrxSHelper.write(ostr, this.o);
            SIPrxSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = SIPrxSHelper.read(istr);
            returnValue = SIPrxSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomIntS.
     **/
    public static class OpCustomIntSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomIntSResult()
        {
        }

        public OpCustomIntSResult(int[] returnValue, int[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[] returnValue;
        public int[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(this.o);
            ostr.writeIntSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = istr.readIntSeq();
            returnValue = istr.readIntSeq();
        }
    }

    /**
     * Holds the result of operation opCustomCVS.
     **/
    public static class OpCustomCVSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomCVSResult()
        {
        }

        public OpCustomCVSResult(CV[] returnValue, CV[] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[] returnValue;
        public CV[] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomCVSHelper.write(ostr, this.o);
            CustomCVSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomCVSHelper.read(istr);
            returnValue = CustomCVSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomIntSS.
     **/
    public static class OpCustomIntSSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomIntSSResult()
        {
        }

        public OpCustomIntSSResult(int[][] returnValue, int[][] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public int[][] returnValue;
        public int[][] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomIntSSHelper.write(ostr, this.o);
            CustomIntSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomIntSSHelper.read(istr);
            returnValue = CustomIntSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCustomCVSS.
     **/
    public static class OpCustomCVSSResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomCVSSResult()
        {
        }

        public OpCustomCVSSResult(CV[][] returnValue, CV[][] o)
        {
            this.returnValue = returnValue;
            this.o = o;
        }

        public CV[][] returnValue;
        public CV[][] o;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CustomCVSSHelper.write(ostr, this.o);
            CustomCVSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.o = CustomCVSSHelper.read(istr);
            returnValue = CustomCVSSHelper.read(istr);
        }
    }

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAByteSResult> opAByteSAsync(byte[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLByteSResult> opLByteSAsync(byte[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKByteSResult> opKByteSAsync(byte[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQByteSResult> opQByteSAsync(byte[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSByteSResult> opSByteSAsync(byte[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpABoolSResult> opABoolSAsync(boolean[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLBoolSResult> opLBoolSAsync(boolean[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKBoolSResult> opKBoolSAsync(boolean[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQBoolSResult> opQBoolSAsync(boolean[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSBoolSResult> opSBoolSAsync(boolean[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAShortSResult> opAShortSAsync(short[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLShortSResult> opLShortSAsync(short[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKShortSResult> opKShortSAsync(short[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQShortSResult> opQShortSAsync(short[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSShortSResult> opSShortSAsync(short[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAIntSResult> opAIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLIntSResult> opLIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKIntSResult> opKIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQIntSResult> opQIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSIntSResult> opSIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpALongSResult> opALongSAsync(long[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLLongSResult> opLLongSAsync(long[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKLongSResult> opKLongSAsync(long[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQLongSResult> opQLongSAsync(long[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSLongSResult> opSLongSAsync(long[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAFloatSResult> opAFloatSAsync(float[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLFloatSResult> opLFloatSAsync(float[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKFloatSResult> opKFloatSAsync(float[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQFloatSResult> opQFloatSAsync(float[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSFloatSResult> opSFloatSAsync(float[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpADoubleSResult> opADoubleSAsync(double[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLDoubleSResult> opLDoubleSAsync(double[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKDoubleSResult> opKDoubleSAsync(double[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQDoubleSResult> opQDoubleSAsync(double[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSDoubleSResult> opSDoubleSAsync(double[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAStringSResult> opAStringSAsync(String[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLStringSResult> opLStringSAsync(String[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKStringSResult> opKStringSAsync(String[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQStringSResult> opQStringSAsync(String[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSStringSResult> opSStringSAsync(String[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAObjectSResult> opAObjectSAsync(com.zeroc.Ice.Value[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLObjectSResult> opLObjectSAsync(com.zeroc.Ice.Value[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAObjectPrxSResult> opAObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLObjectPrxSResult> opLObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKObjectPrxSResult> opKObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQObjectPrxSResult> opQObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSObjectPrxSResult> opSObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAStructSResult> opAStructSAsync(S[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLStructSResult> opLStructSAsync(S[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKStructSResult> opKStructSAsync(S[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQStructSResult> opQStructSAsync(S[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSStructSResult> opSStructSAsync(S[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAStructSDResult> opAStructSDAsync(SD[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLStructSDResult> opLStructSDAsync(SD[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKStructSDResult> opKStructSDAsync(SD[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQStructSDResult> opQStructSDAsync(SD[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSStructSDResult> opSStructSDAsync(SD[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpACVSResult> opACVSAsync(CV[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLCVSResult> opLCVSAsync(CV[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpACRSResult> opACRSAsync(CR[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLCRSResult> opLCRSAsync(CR[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAEnSResult> opAEnSAsync(En[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLEnSResult> opLEnSAsync(En[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKEnSResult> opKEnSAsync(En[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQEnSResult> opQEnSAsync(En[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSEnSResult> opSEnSAsync(En[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLIPrxSResult> opLIPrxSAsync(IPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpKIPrxSResult> opKIPrxSAsync(IPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpQIPrxSResult> opQIPrxSAsync(IPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpSIPrxSResult> opSIPrxSAsync(IPrx[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpCustomIntSResult> opCustomIntSAsync(int[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpCustomCVSResult> opCustomCVSAsync(CV[] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpCustomIntSSResult> opCustomIntSSAsync(int[][] i, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpCustomCVSSResult> opCustomCVSSAsync(CV[][] i, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.shutdownAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAByteS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.opAByteSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLByteS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.opLByteSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKByteS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.opKByteSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQByteS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.opQByteSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSByteS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_i;
        iceP_i = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.opSByteSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opABoolS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        istr.endEncapsulation();
        var result = obj.opABoolSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLBoolS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        istr.endEncapsulation();
        var result = obj.opLBoolSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKBoolS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        istr.endEncapsulation();
        var result = obj.opKBoolSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQBoolS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        istr.endEncapsulation();
        var result = obj.opQBoolSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSBoolS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_i;
        iceP_i = istr.readBoolSeq();
        istr.endEncapsulation();
        var result = obj.opSBoolSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAShortS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        istr.endEncapsulation();
        var result = obj.opAShortSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLShortS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        istr.endEncapsulation();
        var result = obj.opLShortSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKShortS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        istr.endEncapsulation();
        var result = obj.opKShortSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQShortS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        istr.endEncapsulation();
        var result = obj.opQShortSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSShortS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_i;
        iceP_i = istr.readShortSeq();
        istr.endEncapsulation();
        var result = obj.opSShortSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opAIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opLIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opKIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opQIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opSIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opALongS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        istr.endEncapsulation();
        var result = obj.opALongSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLLongS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        istr.endEncapsulation();
        var result = obj.opLLongSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKLongS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        istr.endEncapsulation();
        var result = obj.opKLongSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQLongS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        istr.endEncapsulation();
        var result = obj.opQLongSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSLongS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long[] iceP_i;
        iceP_i = istr.readLongSeq();
        istr.endEncapsulation();
        var result = obj.opSLongSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAFloatS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        istr.endEncapsulation();
        var result = obj.opAFloatSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLFloatS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        istr.endEncapsulation();
        var result = obj.opLFloatSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKFloatS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        istr.endEncapsulation();
        var result = obj.opKFloatSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQFloatS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        istr.endEncapsulation();
        var result = obj.opQFloatSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSFloatS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        float[] iceP_i;
        iceP_i = istr.readFloatSeq();
        istr.endEncapsulation();
        var result = obj.opSFloatSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opADoubleS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        istr.endEncapsulation();
        var result = obj.opADoubleSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLDoubleS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        istr.endEncapsulation();
        var result = obj.opLDoubleSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKDoubleS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        istr.endEncapsulation();
        var result = obj.opKDoubleSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQDoubleS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        istr.endEncapsulation();
        var result = obj.opQDoubleSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSDoubleS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        double[] iceP_i;
        iceP_i = istr.readDoubleSeq();
        istr.endEncapsulation();
        var result = obj.opSDoubleSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAStringS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        istr.endEncapsulation();
        var result = obj.opAStringSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLStringS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        istr.endEncapsulation();
        var result = obj.opLStringSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKStringS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        istr.endEncapsulation();
        var result = obj.opKStringSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQStringS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        istr.endEncapsulation();
        var result = obj.opQStringSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSStringS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_i;
        iceP_i = istr.readStringSeq();
        istr.endEncapsulation();
        var result = obj.opSStringSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAObjectS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Value[] iceP_i;
        iceP_i = AObjectSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opAObjectSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLObjectS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Value[] iceP_i;
        iceP_i = LObjectSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opLObjectSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAObjectPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = AObjectPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opAObjectPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLObjectPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = LObjectPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opLObjectPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKObjectPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = KObjectPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opKObjectPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQObjectPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = QObjectPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opQObjectPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSObjectPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx[] iceP_i;
        iceP_i = SObjectPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opSObjectPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAStructS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_i;
        iceP_i = AStructSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opAStructSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLStructS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_i;
        iceP_i = LStructSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opLStructSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKStructS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_i;
        iceP_i = KStructSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opKStructSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQStructS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_i;
        iceP_i = QStructSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opQStructSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSStructS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        S[] iceP_i;
        iceP_i = SStructSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opSStructSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAStructSD(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SD[] iceP_i;
        iceP_i = AStructSDHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opAStructSDAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLStructSD(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SD[] iceP_i;
        iceP_i = LStructSDHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opLStructSDAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKStructSD(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SD[] iceP_i;
        iceP_i = KStructSDHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opKStructSDAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQStructSD(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SD[] iceP_i;
        iceP_i = QStructSDHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opQStructSDAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSStructSD(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        SD[] iceP_i;
        iceP_i = SStructSDHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opSStructSDAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opACVS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CV[] iceP_i;
        iceP_i = ACVSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opACVSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLCVS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CV[] iceP_i;
        iceP_i = LCVSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opLCVSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opACRS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CR[] iceP_i;
        iceP_i = ACRSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opACRSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLCRS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CR[] iceP_i;
        iceP_i = LCRSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opLCRSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAEnS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        En[] iceP_i;
        iceP_i = AEnSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opAEnSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLEnS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        En[] iceP_i;
        iceP_i = LEnSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opLEnSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKEnS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        En[] iceP_i;
        iceP_i = KEnSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opKEnSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQEnS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        En[] iceP_i;
        iceP_i = QEnSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opQEnSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSEnS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        En[] iceP_i;
        iceP_i = SEnSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opSEnSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opAIPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IPrx[] iceP_i;
        iceP_i = AIPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opAIPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLIPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IPrx[] iceP_i;
        iceP_i = LIPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opLIPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opKIPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IPrx[] iceP_i;
        iceP_i = KIPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opKIPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opQIPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IPrx[] iceP_i;
        iceP_i = QIPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opQIPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSIPrxS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        IPrx[] iceP_i;
        iceP_i = SIPrxSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opSIPrxSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomIntS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[] iceP_i;
        iceP_i = istr.readIntSeq();
        istr.endEncapsulation();
        var result = obj.opCustomIntSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomCVS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CV[] iceP_i;
        iceP_i = CustomCVSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opCustomCVSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomIntSS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int[][] iceP_i;
        iceP_i = CustomIntSSHelper.read(istr);
        istr.endEncapsulation();
        var result = obj.opCustomIntSSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomCVSS(MyClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CV[][] iceP_i;
        iceP_i = CustomCVSSHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.opCustomCVSSAsync(iceP_i, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            null));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "shutdown" -> MyClass._iceD_shutdown(this, request);
            case "opAByteS" -> MyClass._iceD_opAByteS(this, request);
            case "opLByteS" -> MyClass._iceD_opLByteS(this, request);
            case "opKByteS" -> MyClass._iceD_opKByteS(this, request);
            case "opQByteS" -> MyClass._iceD_opQByteS(this, request);
            case "opSByteS" -> MyClass._iceD_opSByteS(this, request);
            case "opABoolS" -> MyClass._iceD_opABoolS(this, request);
            case "opLBoolS" -> MyClass._iceD_opLBoolS(this, request);
            case "opKBoolS" -> MyClass._iceD_opKBoolS(this, request);
            case "opQBoolS" -> MyClass._iceD_opQBoolS(this, request);
            case "opSBoolS" -> MyClass._iceD_opSBoolS(this, request);
            case "opAShortS" -> MyClass._iceD_opAShortS(this, request);
            case "opLShortS" -> MyClass._iceD_opLShortS(this, request);
            case "opKShortS" -> MyClass._iceD_opKShortS(this, request);
            case "opQShortS" -> MyClass._iceD_opQShortS(this, request);
            case "opSShortS" -> MyClass._iceD_opSShortS(this, request);
            case "opAIntS" -> MyClass._iceD_opAIntS(this, request);
            case "opLIntS" -> MyClass._iceD_opLIntS(this, request);
            case "opKIntS" -> MyClass._iceD_opKIntS(this, request);
            case "opQIntS" -> MyClass._iceD_opQIntS(this, request);
            case "opSIntS" -> MyClass._iceD_opSIntS(this, request);
            case "opALongS" -> MyClass._iceD_opALongS(this, request);
            case "opLLongS" -> MyClass._iceD_opLLongS(this, request);
            case "opKLongS" -> MyClass._iceD_opKLongS(this, request);
            case "opQLongS" -> MyClass._iceD_opQLongS(this, request);
            case "opSLongS" -> MyClass._iceD_opSLongS(this, request);
            case "opAFloatS" -> MyClass._iceD_opAFloatS(this, request);
            case "opLFloatS" -> MyClass._iceD_opLFloatS(this, request);
            case "opKFloatS" -> MyClass._iceD_opKFloatS(this, request);
            case "opQFloatS" -> MyClass._iceD_opQFloatS(this, request);
            case "opSFloatS" -> MyClass._iceD_opSFloatS(this, request);
            case "opADoubleS" -> MyClass._iceD_opADoubleS(this, request);
            case "opLDoubleS" -> MyClass._iceD_opLDoubleS(this, request);
            case "opKDoubleS" -> MyClass._iceD_opKDoubleS(this, request);
            case "opQDoubleS" -> MyClass._iceD_opQDoubleS(this, request);
            case "opSDoubleS" -> MyClass._iceD_opSDoubleS(this, request);
            case "opAStringS" -> MyClass._iceD_opAStringS(this, request);
            case "opLStringS" -> MyClass._iceD_opLStringS(this, request);
            case "opKStringS" -> MyClass._iceD_opKStringS(this, request);
            case "opQStringS" -> MyClass._iceD_opQStringS(this, request);
            case "opSStringS" -> MyClass._iceD_opSStringS(this, request);
            case "opAObjectS" -> MyClass._iceD_opAObjectS(this, request);
            case "opLObjectS" -> MyClass._iceD_opLObjectS(this, request);
            case "opAObjectPrxS" -> MyClass._iceD_opAObjectPrxS(this, request);
            case "opLObjectPrxS" -> MyClass._iceD_opLObjectPrxS(this, request);
            case "opKObjectPrxS" -> MyClass._iceD_opKObjectPrxS(this, request);
            case "opQObjectPrxS" -> MyClass._iceD_opQObjectPrxS(this, request);
            case "opSObjectPrxS" -> MyClass._iceD_opSObjectPrxS(this, request);
            case "opAStructS" -> MyClass._iceD_opAStructS(this, request);
            case "opLStructS" -> MyClass._iceD_opLStructS(this, request);
            case "opKStructS" -> MyClass._iceD_opKStructS(this, request);
            case "opQStructS" -> MyClass._iceD_opQStructS(this, request);
            case "opSStructS" -> MyClass._iceD_opSStructS(this, request);
            case "opAStructSD" -> MyClass._iceD_opAStructSD(this, request);
            case "opLStructSD" -> MyClass._iceD_opLStructSD(this, request);
            case "opKStructSD" -> MyClass._iceD_opKStructSD(this, request);
            case "opQStructSD" -> MyClass._iceD_opQStructSD(this, request);
            case "opSStructSD" -> MyClass._iceD_opSStructSD(this, request);
            case "opACVS" -> MyClass._iceD_opACVS(this, request);
            case "opLCVS" -> MyClass._iceD_opLCVS(this, request);
            case "opACRS" -> MyClass._iceD_opACRS(this, request);
            case "opLCRS" -> MyClass._iceD_opLCRS(this, request);
            case "opAEnS" -> MyClass._iceD_opAEnS(this, request);
            case "opLEnS" -> MyClass._iceD_opLEnS(this, request);
            case "opKEnS" -> MyClass._iceD_opKEnS(this, request);
            case "opQEnS" -> MyClass._iceD_opQEnS(this, request);
            case "opSEnS" -> MyClass._iceD_opSEnS(this, request);
            case "opAIPrxS" -> MyClass._iceD_opAIPrxS(this, request);
            case "opLIPrxS" -> MyClass._iceD_opLIPrxS(this, request);
            case "opKIPrxS" -> MyClass._iceD_opKIPrxS(this, request);
            case "opQIPrxS" -> MyClass._iceD_opQIPrxS(this, request);
            case "opSIPrxS" -> MyClass._iceD_opSIPrxS(this, request);
            case "opCustomIntS" -> MyClass._iceD_opCustomIntS(this, request);
            case "opCustomCVS" -> MyClass._iceD_opCustomCVS(this, request);
            case "opCustomIntSS" -> MyClass._iceD_opCustomIntSS(this, request);
            case "opCustomCVSS" -> MyClass._iceD_opCustomCVSS(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
