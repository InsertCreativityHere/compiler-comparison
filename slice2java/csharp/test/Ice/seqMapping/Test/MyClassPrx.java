//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClassPrx extends com.zeroc.Ice.ObjectPrx
{
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default MyClass.OpAByteSResult opAByteS(byte[] i)
    {
        return opAByteS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAByteSResult opAByteS(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAByteSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAByteSResult> opAByteSAsync(byte[] i)
    {
        return _iceI_opAByteSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAByteSResult> opAByteSAsync(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAByteSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAByteSResult> _iceI_opAByteSAsync(byte[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAByteSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAByteS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpAByteSResult ret = new MyClass.OpAByteSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLByteSResult opLByteS(byte[] i)
    {
        return opLByteS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLByteSResult opLByteS(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLByteSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLByteSResult> opLByteSAsync(byte[] i)
    {
        return _iceI_opLByteSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLByteSResult> opLByteSAsync(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLByteSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLByteSResult> _iceI_opLByteSAsync(byte[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLByteSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLByteS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLByteSResult ret = new MyClass.OpLByteSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKByteSResult opKByteS(byte[] i)
    {
        return opKByteS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKByteSResult opKByteS(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKByteSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKByteSResult> opKByteSAsync(byte[] i)
    {
        return _iceI_opKByteSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKByteSResult> opKByteSAsync(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKByteSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKByteSResult> _iceI_opKByteSAsync(byte[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKByteSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKByteS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKByteSResult ret = new MyClass.OpKByteSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQByteSResult opQByteS(byte[] i)
    {
        return opQByteS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQByteSResult opQByteS(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQByteSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQByteSResult> opQByteSAsync(byte[] i)
    {
        return _iceI_opQByteSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQByteSResult> opQByteSAsync(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQByteSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQByteSResult> _iceI_opQByteSAsync(byte[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQByteSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQByteS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQByteSResult ret = new MyClass.OpQByteSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSByteSResult opSByteS(byte[] i)
    {
        return opSByteS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSByteSResult opSByteS(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSByteSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSByteSResult> opSByteSAsync(byte[] i)
    {
        return _iceI_opSByteSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSByteSResult> opSByteSAsync(byte[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSByteSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSByteSResult> _iceI_opSByteSAsync(byte[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSByteSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSByteS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeByteSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSByteSResult ret = new MyClass.OpSByteSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpABoolSResult opABoolS(boolean[] i)
    {
        return opABoolS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpABoolSResult opABoolS(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opABoolSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpABoolSResult> opABoolSAsync(boolean[] i)
    {
        return _iceI_opABoolSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpABoolSResult> opABoolSAsync(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opABoolSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpABoolSResult> _iceI_opABoolSAsync(boolean[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpABoolSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opABoolS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpABoolSResult ret = new MyClass.OpABoolSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLBoolSResult opLBoolS(boolean[] i)
    {
        return opLBoolS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLBoolSResult opLBoolS(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLBoolSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLBoolSResult> opLBoolSAsync(boolean[] i)
    {
        return _iceI_opLBoolSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLBoolSResult> opLBoolSAsync(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLBoolSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLBoolSResult> _iceI_opLBoolSAsync(boolean[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLBoolSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLBoolS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLBoolSResult ret = new MyClass.OpLBoolSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKBoolSResult opKBoolS(boolean[] i)
    {
        return opKBoolS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKBoolSResult opKBoolS(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKBoolSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKBoolSResult> opKBoolSAsync(boolean[] i)
    {
        return _iceI_opKBoolSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKBoolSResult> opKBoolSAsync(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKBoolSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKBoolSResult> _iceI_opKBoolSAsync(boolean[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKBoolSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKBoolS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKBoolSResult ret = new MyClass.OpKBoolSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQBoolSResult opQBoolS(boolean[] i)
    {
        return opQBoolS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQBoolSResult opQBoolS(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQBoolSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQBoolSResult> opQBoolSAsync(boolean[] i)
    {
        return _iceI_opQBoolSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQBoolSResult> opQBoolSAsync(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQBoolSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQBoolSResult> _iceI_opQBoolSAsync(boolean[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQBoolSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQBoolS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQBoolSResult ret = new MyClass.OpQBoolSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSBoolSResult opSBoolS(boolean[] i)
    {
        return opSBoolS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSBoolSResult opSBoolS(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSBoolSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSBoolSResult> opSBoolSAsync(boolean[] i)
    {
        return _iceI_opSBoolSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSBoolSResult> opSBoolSAsync(boolean[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSBoolSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSBoolSResult> _iceI_opSBoolSAsync(boolean[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSBoolSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSBoolS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeBoolSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSBoolSResult ret = new MyClass.OpSBoolSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAShortSResult opAShortS(short[] i)
    {
        return opAShortS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAShortSResult opAShortS(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAShortSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAShortSResult> opAShortSAsync(short[] i)
    {
        return _iceI_opAShortSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAShortSResult> opAShortSAsync(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAShortSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAShortSResult> _iceI_opAShortSAsync(short[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAShortSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAShortS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpAShortSResult ret = new MyClass.OpAShortSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLShortSResult opLShortS(short[] i)
    {
        return opLShortS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLShortSResult opLShortS(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLShortSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLShortSResult> opLShortSAsync(short[] i)
    {
        return _iceI_opLShortSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLShortSResult> opLShortSAsync(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLShortSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLShortSResult> _iceI_opLShortSAsync(short[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLShortSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLShortS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLShortSResult ret = new MyClass.OpLShortSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKShortSResult opKShortS(short[] i)
    {
        return opKShortS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKShortSResult opKShortS(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKShortSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKShortSResult> opKShortSAsync(short[] i)
    {
        return _iceI_opKShortSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKShortSResult> opKShortSAsync(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKShortSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKShortSResult> _iceI_opKShortSAsync(short[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKShortSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKShortS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKShortSResult ret = new MyClass.OpKShortSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQShortSResult opQShortS(short[] i)
    {
        return opQShortS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQShortSResult opQShortS(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQShortSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQShortSResult> opQShortSAsync(short[] i)
    {
        return _iceI_opQShortSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQShortSResult> opQShortSAsync(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQShortSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQShortSResult> _iceI_opQShortSAsync(short[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQShortSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQShortS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQShortSResult ret = new MyClass.OpQShortSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSShortSResult opSShortS(short[] i)
    {
        return opSShortS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSShortSResult opSShortS(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSShortSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSShortSResult> opSShortSAsync(short[] i)
    {
        return _iceI_opSShortSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSShortSResult> opSShortSAsync(short[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSShortSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSShortSResult> _iceI_opSShortSAsync(short[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSShortSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSShortS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeShortSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSShortSResult ret = new MyClass.OpSShortSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAIntSResult opAIntS(int[] i)
    {
        return opAIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAIntSResult opAIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAIntSResult> opAIntSAsync(int[] i)
    {
        return _iceI_opAIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAIntSResult> opAIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAIntSResult> _iceI_opAIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpAIntSResult ret = new MyClass.OpAIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLIntSResult opLIntS(int[] i)
    {
        return opLIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLIntSResult opLIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLIntSResult> opLIntSAsync(int[] i)
    {
        return _iceI_opLIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLIntSResult> opLIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLIntSResult> _iceI_opLIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLIntSResult ret = new MyClass.OpLIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKIntSResult opKIntS(int[] i)
    {
        return opKIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKIntSResult opKIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKIntSResult> opKIntSAsync(int[] i)
    {
        return _iceI_opKIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKIntSResult> opKIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKIntSResult> _iceI_opKIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKIntSResult ret = new MyClass.OpKIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQIntSResult opQIntS(int[] i)
    {
        return opQIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQIntSResult opQIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQIntSResult> opQIntSAsync(int[] i)
    {
        return _iceI_opQIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQIntSResult> opQIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQIntSResult> _iceI_opQIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQIntSResult ret = new MyClass.OpQIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSIntSResult opSIntS(int[] i)
    {
        return opSIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSIntSResult opSIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSIntSResult> opSIntSAsync(int[] i)
    {
        return _iceI_opSIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSIntSResult> opSIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSIntSResult> _iceI_opSIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSIntSResult ret = new MyClass.OpSIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpALongSResult opALongS(long[] i)
    {
        return opALongS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpALongSResult opALongS(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opALongSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpALongSResult> opALongSAsync(long[] i)
    {
        return _iceI_opALongSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpALongSResult> opALongSAsync(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opALongSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpALongSResult> _iceI_opALongSAsync(long[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpALongSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opALongS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpALongSResult ret = new MyClass.OpALongSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLLongSResult opLLongS(long[] i)
    {
        return opLLongS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLLongSResult opLLongS(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLLongSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLLongSResult> opLLongSAsync(long[] i)
    {
        return _iceI_opLLongSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLLongSResult> opLLongSAsync(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLLongSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLLongSResult> _iceI_opLLongSAsync(long[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLLongSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLLongS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLLongSResult ret = new MyClass.OpLLongSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKLongSResult opKLongS(long[] i)
    {
        return opKLongS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKLongSResult opKLongS(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKLongSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKLongSResult> opKLongSAsync(long[] i)
    {
        return _iceI_opKLongSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKLongSResult> opKLongSAsync(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKLongSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKLongSResult> _iceI_opKLongSAsync(long[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKLongSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKLongS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKLongSResult ret = new MyClass.OpKLongSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQLongSResult opQLongS(long[] i)
    {
        return opQLongS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQLongSResult opQLongS(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQLongSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQLongSResult> opQLongSAsync(long[] i)
    {
        return _iceI_opQLongSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQLongSResult> opQLongSAsync(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQLongSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQLongSResult> _iceI_opQLongSAsync(long[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQLongSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQLongS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQLongSResult ret = new MyClass.OpQLongSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSLongSResult opSLongS(long[] i)
    {
        return opSLongS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSLongSResult opSLongS(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSLongSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSLongSResult> opSLongSAsync(long[] i)
    {
        return _iceI_opSLongSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSLongSResult> opSLongSAsync(long[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSLongSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSLongSResult> _iceI_opSLongSAsync(long[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSLongSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSLongS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeLongSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSLongSResult ret = new MyClass.OpSLongSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAFloatSResult opAFloatS(float[] i)
    {
        return opAFloatS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAFloatSResult opAFloatS(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAFloatSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAFloatSResult> opAFloatSAsync(float[] i)
    {
        return _iceI_opAFloatSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAFloatSResult> opAFloatSAsync(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAFloatSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAFloatSResult> _iceI_opAFloatSAsync(float[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAFloatSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAFloatS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpAFloatSResult ret = new MyClass.OpAFloatSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLFloatSResult opLFloatS(float[] i)
    {
        return opLFloatS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLFloatSResult opLFloatS(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLFloatSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLFloatSResult> opLFloatSAsync(float[] i)
    {
        return _iceI_opLFloatSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLFloatSResult> opLFloatSAsync(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLFloatSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLFloatSResult> _iceI_opLFloatSAsync(float[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLFloatSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLFloatS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLFloatSResult ret = new MyClass.OpLFloatSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKFloatSResult opKFloatS(float[] i)
    {
        return opKFloatS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKFloatSResult opKFloatS(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKFloatSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKFloatSResult> opKFloatSAsync(float[] i)
    {
        return _iceI_opKFloatSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKFloatSResult> opKFloatSAsync(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKFloatSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKFloatSResult> _iceI_opKFloatSAsync(float[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKFloatSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKFloatS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKFloatSResult ret = new MyClass.OpKFloatSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQFloatSResult opQFloatS(float[] i)
    {
        return opQFloatS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQFloatSResult opQFloatS(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQFloatSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQFloatSResult> opQFloatSAsync(float[] i)
    {
        return _iceI_opQFloatSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQFloatSResult> opQFloatSAsync(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQFloatSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQFloatSResult> _iceI_opQFloatSAsync(float[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQFloatSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQFloatS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQFloatSResult ret = new MyClass.OpQFloatSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSFloatSResult opSFloatS(float[] i)
    {
        return opSFloatS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSFloatSResult opSFloatS(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSFloatSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSFloatSResult> opSFloatSAsync(float[] i)
    {
        return _iceI_opSFloatSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSFloatSResult> opSFloatSAsync(float[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSFloatSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSFloatSResult> _iceI_opSFloatSAsync(float[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSFloatSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSFloatS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeFloatSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSFloatSResult ret = new MyClass.OpSFloatSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpADoubleSResult opADoubleS(double[] i)
    {
        return opADoubleS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpADoubleSResult opADoubleS(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opADoubleSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpADoubleSResult> opADoubleSAsync(double[] i)
    {
        return _iceI_opADoubleSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpADoubleSResult> opADoubleSAsync(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opADoubleSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpADoubleSResult> _iceI_opADoubleSAsync(double[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpADoubleSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opADoubleS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpADoubleSResult ret = new MyClass.OpADoubleSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLDoubleSResult opLDoubleS(double[] i)
    {
        return opLDoubleS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLDoubleSResult opLDoubleS(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLDoubleSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLDoubleSResult> opLDoubleSAsync(double[] i)
    {
        return _iceI_opLDoubleSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLDoubleSResult> opLDoubleSAsync(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLDoubleSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLDoubleSResult> _iceI_opLDoubleSAsync(double[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLDoubleSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLDoubleS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLDoubleSResult ret = new MyClass.OpLDoubleSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKDoubleSResult opKDoubleS(double[] i)
    {
        return opKDoubleS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKDoubleSResult opKDoubleS(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKDoubleSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKDoubleSResult> opKDoubleSAsync(double[] i)
    {
        return _iceI_opKDoubleSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKDoubleSResult> opKDoubleSAsync(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKDoubleSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKDoubleSResult> _iceI_opKDoubleSAsync(double[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKDoubleSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKDoubleS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKDoubleSResult ret = new MyClass.OpKDoubleSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQDoubleSResult opQDoubleS(double[] i)
    {
        return opQDoubleS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQDoubleSResult opQDoubleS(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQDoubleSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQDoubleSResult> opQDoubleSAsync(double[] i)
    {
        return _iceI_opQDoubleSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQDoubleSResult> opQDoubleSAsync(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQDoubleSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQDoubleSResult> _iceI_opQDoubleSAsync(double[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQDoubleSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQDoubleS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQDoubleSResult ret = new MyClass.OpQDoubleSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSDoubleSResult opSDoubleS(double[] i)
    {
        return opSDoubleS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSDoubleSResult opSDoubleS(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSDoubleSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSDoubleSResult> opSDoubleSAsync(double[] i)
    {
        return _iceI_opSDoubleSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSDoubleSResult> opSDoubleSAsync(double[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSDoubleSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSDoubleSResult> _iceI_opSDoubleSAsync(double[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSDoubleSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSDoubleS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeDoubleSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSDoubleSResult ret = new MyClass.OpSDoubleSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAStringSResult opAStringS(String[] i)
    {
        return opAStringS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAStringSResult opAStringS(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStringSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStringSResult> opAStringSAsync(String[] i)
    {
        return _iceI_opAStringSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStringSResult> opAStringSAsync(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStringSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStringSResult> _iceI_opAStringSAsync(String[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStringSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAStringS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpAStringSResult ret = new MyClass.OpAStringSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLStringSResult opLStringS(String[] i)
    {
        return opLStringS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLStringSResult opLStringS(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStringSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStringSResult> opLStringSAsync(String[] i)
    {
        return _iceI_opLStringSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStringSResult> opLStringSAsync(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStringSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStringSResult> _iceI_opLStringSAsync(String[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStringSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLStringS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpLStringSResult ret = new MyClass.OpLStringSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKStringSResult opKStringS(String[] i)
    {
        return opKStringS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKStringSResult opKStringS(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStringSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStringSResult> opKStringSAsync(String[] i)
    {
        return _iceI_opKStringSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStringSResult> opKStringSAsync(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStringSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStringSResult> _iceI_opKStringSAsync(String[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStringSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKStringS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpKStringSResult ret = new MyClass.OpKStringSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQStringSResult opQStringS(String[] i)
    {
        return opQStringS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQStringSResult opQStringS(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStringSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStringSResult> opQStringSAsync(String[] i)
    {
        return _iceI_opQStringSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStringSResult> opQStringSAsync(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStringSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStringSResult> _iceI_opQStringSAsync(String[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStringSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQStringS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpQStringSResult ret = new MyClass.OpQStringSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSStringSResult opSStringS(String[] i)
    {
        return opSStringS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSStringSResult opSStringS(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStringSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStringSResult> opSStringSAsync(String[] i)
    {
        return _iceI_opSStringSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStringSResult> opSStringSAsync(String[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStringSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStringSResult> _iceI_opSStringSAsync(String[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStringSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSStringS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeStringSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpSStringSResult ret = new MyClass.OpSStringSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAObjectSResult opAObjectS(com.zeroc.Ice.Value[] i)
    {
        return opAObjectS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAObjectSResult opAObjectS(com.zeroc.Ice.Value[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAObjectSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAObjectSResult> opAObjectSAsync(com.zeroc.Ice.Value[] i)
    {
        return _iceI_opAObjectSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAObjectSResult> opAObjectSAsync(com.zeroc.Ice.Value[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAObjectSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAObjectSResult> _iceI_opAObjectSAsync(com.zeroc.Ice.Value[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAObjectSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAObjectS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AObjectSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpAObjectSResult ret = new MyClass.OpAObjectSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLObjectSResult opLObjectS(com.zeroc.Ice.Value[] i)
    {
        return opLObjectS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLObjectSResult opLObjectS(com.zeroc.Ice.Value[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLObjectSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLObjectSResult> opLObjectSAsync(com.zeroc.Ice.Value[] i)
    {
        return _iceI_opLObjectSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLObjectSResult> opLObjectSAsync(com.zeroc.Ice.Value[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLObjectSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLObjectSResult> _iceI_opLObjectSAsync(com.zeroc.Ice.Value[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLObjectSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLObjectS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LObjectSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpLObjectSResult ret = new MyClass.OpLObjectSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAObjectPrxSResult opAObjectPrxS(com.zeroc.Ice.ObjectPrx[] i)
    {
        return opAObjectPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAObjectPrxSResult opAObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAObjectPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAObjectPrxSResult> opAObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i)
    {
        return _iceI_opAObjectPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAObjectPrxSResult> opAObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAObjectPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAObjectPrxSResult> _iceI_opAObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAObjectPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAObjectPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AObjectPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpAObjectPrxSResult ret = new MyClass.OpAObjectPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLObjectPrxSResult opLObjectPrxS(com.zeroc.Ice.ObjectPrx[] i)
    {
        return opLObjectPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLObjectPrxSResult opLObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLObjectPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLObjectPrxSResult> opLObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i)
    {
        return _iceI_opLObjectPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLObjectPrxSResult> opLObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLObjectPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLObjectPrxSResult> _iceI_opLObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLObjectPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLObjectPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LObjectPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpLObjectPrxSResult ret = new MyClass.OpLObjectPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKObjectPrxSResult opKObjectPrxS(com.zeroc.Ice.ObjectPrx[] i)
    {
        return opKObjectPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKObjectPrxSResult opKObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKObjectPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKObjectPrxSResult> opKObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i)
    {
        return _iceI_opKObjectPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKObjectPrxSResult> opKObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKObjectPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKObjectPrxSResult> _iceI_opKObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKObjectPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKObjectPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     KObjectPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpKObjectPrxSResult ret = new MyClass.OpKObjectPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQObjectPrxSResult opQObjectPrxS(com.zeroc.Ice.ObjectPrx[] i)
    {
        return opQObjectPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQObjectPrxSResult opQObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQObjectPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQObjectPrxSResult> opQObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i)
    {
        return _iceI_opQObjectPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQObjectPrxSResult> opQObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQObjectPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQObjectPrxSResult> _iceI_opQObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQObjectPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQObjectPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     QObjectPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpQObjectPrxSResult ret = new MyClass.OpQObjectPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSObjectPrxSResult opSObjectPrxS(com.zeroc.Ice.ObjectPrx[] i)
    {
        return opSObjectPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSObjectPrxSResult opSObjectPrxS(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSObjectPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSObjectPrxSResult> opSObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i)
    {
        return _iceI_opSObjectPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSObjectPrxSResult> opSObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSObjectPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSObjectPrxSResult> _iceI_opSObjectPrxSAsync(com.zeroc.Ice.ObjectPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSObjectPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSObjectPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     SObjectPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpSObjectPrxSResult ret = new MyClass.OpSObjectPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAStructSResult opAStructS(S[] i)
    {
        return opAStructS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAStructSResult opAStructS(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStructSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStructSResult> opAStructSAsync(S[] i)
    {
        return _iceI_opAStructSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStructSResult> opAStructSAsync(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStructSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStructSResult> _iceI_opAStructSAsync(S[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStructSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAStructS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AStructSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpAStructSResult ret = new MyClass.OpAStructSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLStructSResult opLStructS(S[] i)
    {
        return opLStructS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLStructSResult opLStructS(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStructSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStructSResult> opLStructSAsync(S[] i)
    {
        return _iceI_opLStructSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStructSResult> opLStructSAsync(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStructSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStructSResult> _iceI_opLStructSAsync(S[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStructSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLStructS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LStructSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpLStructSResult ret = new MyClass.OpLStructSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKStructSResult opKStructS(S[] i)
    {
        return opKStructS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKStructSResult opKStructS(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStructSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStructSResult> opKStructSAsync(S[] i)
    {
        return _iceI_opKStructSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStructSResult> opKStructSAsync(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStructSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStructSResult> _iceI_opKStructSAsync(S[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStructSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKStructS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     KStructSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpKStructSResult ret = new MyClass.OpKStructSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQStructSResult opQStructS(S[] i)
    {
        return opQStructS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQStructSResult opQStructS(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStructSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStructSResult> opQStructSAsync(S[] i)
    {
        return _iceI_opQStructSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStructSResult> opQStructSAsync(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStructSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStructSResult> _iceI_opQStructSAsync(S[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStructSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQStructS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     QStructSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpQStructSResult ret = new MyClass.OpQStructSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSStructSResult opSStructS(S[] i)
    {
        return opSStructS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSStructSResult opSStructS(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStructSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStructSResult> opSStructSAsync(S[] i)
    {
        return _iceI_opSStructSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStructSResult> opSStructSAsync(S[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStructSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStructSResult> _iceI_opSStructSAsync(S[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStructSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSStructS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     SStructSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpSStructSResult ret = new MyClass.OpSStructSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAStructSDResult opAStructSD(SD[] i)
    {
        return opAStructSD(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAStructSDResult opAStructSD(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStructSDAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStructSDResult> opAStructSDAsync(SD[] i)
    {
        return _iceI_opAStructSDAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAStructSDResult> opAStructSDAsync(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAStructSDAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStructSDResult> _iceI_opAStructSDAsync(SD[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAStructSDResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAStructSD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AStructSDHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpAStructSDResult ret = new MyClass.OpAStructSDResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLStructSDResult opLStructSD(SD[] i)
    {
        return opLStructSD(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLStructSDResult opLStructSD(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStructSDAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStructSDResult> opLStructSDAsync(SD[] i)
    {
        return _iceI_opLStructSDAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLStructSDResult> opLStructSDAsync(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLStructSDAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStructSDResult> _iceI_opLStructSDAsync(SD[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLStructSDResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLStructSD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LStructSDHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpLStructSDResult ret = new MyClass.OpLStructSDResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKStructSDResult opKStructSD(SD[] i)
    {
        return opKStructSD(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKStructSDResult opKStructSD(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStructSDAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStructSDResult> opKStructSDAsync(SD[] i)
    {
        return _iceI_opKStructSDAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKStructSDResult> opKStructSDAsync(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKStructSDAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStructSDResult> _iceI_opKStructSDAsync(SD[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKStructSDResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKStructSD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     KStructSDHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpKStructSDResult ret = new MyClass.OpKStructSDResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQStructSDResult opQStructSD(SD[] i)
    {
        return opQStructSD(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQStructSDResult opQStructSD(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStructSDAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStructSDResult> opQStructSDAsync(SD[] i)
    {
        return _iceI_opQStructSDAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQStructSDResult> opQStructSDAsync(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQStructSDAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStructSDResult> _iceI_opQStructSDAsync(SD[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQStructSDResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQStructSD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     QStructSDHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpQStructSDResult ret = new MyClass.OpQStructSDResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSStructSDResult opSStructSD(SD[] i)
    {
        return opSStructSD(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSStructSDResult opSStructSD(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStructSDAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStructSDResult> opSStructSDAsync(SD[] i)
    {
        return _iceI_opSStructSDAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSStructSDResult> opSStructSDAsync(SD[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSStructSDAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStructSDResult> _iceI_opSStructSDAsync(SD[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSStructSDResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSStructSD", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     SStructSDHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpSStructSDResult ret = new MyClass.OpSStructSDResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpACVSResult opACVS(CV[] i)
    {
        return opACVS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpACVSResult opACVS(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opACVSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpACVSResult> opACVSAsync(CV[] i)
    {
        return _iceI_opACVSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpACVSResult> opACVSAsync(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opACVSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpACVSResult> _iceI_opACVSAsync(CV[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpACVSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opACVS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ACVSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpACVSResult ret = new MyClass.OpACVSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLCVSResult opLCVS(CV[] i)
    {
        return opLCVS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLCVSResult opLCVS(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLCVSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLCVSResult> opLCVSAsync(CV[] i)
    {
        return _iceI_opLCVSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLCVSResult> opLCVSAsync(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLCVSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLCVSResult> _iceI_opLCVSAsync(CV[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLCVSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLCVS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LCVSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpLCVSResult ret = new MyClass.OpLCVSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpACRSResult opACRS(CR[] i)
    {
        return opACRS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpACRSResult opACRS(CR[] i, java.util.Map<String, String> context)
    {
        return _iceI_opACRSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpACRSResult> opACRSAsync(CR[] i)
    {
        return _iceI_opACRSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpACRSResult> opACRSAsync(CR[] i, java.util.Map<String, String> context)
    {
        return _iceI_opACRSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpACRSResult> _iceI_opACRSAsync(CR[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpACRSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opACRS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ACRSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpACRSResult ret = new MyClass.OpACRSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLCRSResult opLCRS(CR[] i)
    {
        return opLCRS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLCRSResult opLCRS(CR[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLCRSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLCRSResult> opLCRSAsync(CR[] i)
    {
        return _iceI_opLCRSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLCRSResult> opLCRSAsync(CR[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLCRSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLCRSResult> _iceI_opLCRSAsync(CR[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLCRSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLCRS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LCRSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpLCRSResult ret = new MyClass.OpLCRSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAEnSResult opAEnS(En[] i)
    {
        return opAEnS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAEnSResult opAEnS(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAEnSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAEnSResult> opAEnSAsync(En[] i)
    {
        return _iceI_opAEnSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAEnSResult> opAEnSAsync(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAEnSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAEnSResult> _iceI_opAEnSAsync(En[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAEnSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAEnS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AEnSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpAEnSResult ret = new MyClass.OpAEnSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLEnSResult opLEnS(En[] i)
    {
        return opLEnS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLEnSResult opLEnS(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLEnSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLEnSResult> opLEnSAsync(En[] i)
    {
        return _iceI_opLEnSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLEnSResult> opLEnSAsync(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLEnSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLEnSResult> _iceI_opLEnSAsync(En[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLEnSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLEnS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LEnSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpLEnSResult ret = new MyClass.OpLEnSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKEnSResult opKEnS(En[] i)
    {
        return opKEnS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKEnSResult opKEnS(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKEnSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKEnSResult> opKEnSAsync(En[] i)
    {
        return _iceI_opKEnSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKEnSResult> opKEnSAsync(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKEnSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKEnSResult> _iceI_opKEnSAsync(En[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKEnSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKEnS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     KEnSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpKEnSResult ret = new MyClass.OpKEnSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQEnSResult opQEnS(En[] i)
    {
        return opQEnS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQEnSResult opQEnS(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQEnSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQEnSResult> opQEnSAsync(En[] i)
    {
        return _iceI_opQEnSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQEnSResult> opQEnSAsync(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQEnSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQEnSResult> _iceI_opQEnSAsync(En[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQEnSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQEnS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     QEnSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpQEnSResult ret = new MyClass.OpQEnSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSEnSResult opSEnS(En[] i)
    {
        return opSEnS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSEnSResult opSEnS(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSEnSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSEnSResult> opSEnSAsync(En[] i)
    {
        return _iceI_opSEnSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSEnSResult> opSEnSAsync(En[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSEnSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSEnSResult> _iceI_opSEnSAsync(En[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSEnSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSEnS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     SEnSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpSEnSResult ret = new MyClass.OpSEnSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpAIPrxSResult opAIPrxS(IPrx[] i)
    {
        return opAIPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpAIPrxSResult opAIPrxS(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAIPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAIPrxSResult> opAIPrxSAsync(IPrx[] i)
    {
        return _iceI_opAIPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opAIPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAIPrxSResult> _iceI_opAIPrxSAsync(IPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpAIPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opAIPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     AIPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpAIPrxSResult ret = new MyClass.OpAIPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpLIPrxSResult opLIPrxS(IPrx[] i)
    {
        return opLIPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpLIPrxSResult opLIPrxS(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLIPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLIPrxSResult> opLIPrxSAsync(IPrx[] i)
    {
        return _iceI_opLIPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpLIPrxSResult> opLIPrxSAsync(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opLIPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLIPrxSResult> _iceI_opLIPrxSAsync(IPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpLIPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opLIPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     LIPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpLIPrxSResult ret = new MyClass.OpLIPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpKIPrxSResult opKIPrxS(IPrx[] i)
    {
        return opKIPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpKIPrxSResult opKIPrxS(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKIPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKIPrxSResult> opKIPrxSAsync(IPrx[] i)
    {
        return _iceI_opKIPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpKIPrxSResult> opKIPrxSAsync(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opKIPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKIPrxSResult> _iceI_opKIPrxSAsync(IPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpKIPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opKIPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     KIPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpKIPrxSResult ret = new MyClass.OpKIPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpQIPrxSResult opQIPrxS(IPrx[] i)
    {
        return opQIPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpQIPrxSResult opQIPrxS(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQIPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQIPrxSResult> opQIPrxSAsync(IPrx[] i)
    {
        return _iceI_opQIPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpQIPrxSResult> opQIPrxSAsync(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opQIPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQIPrxSResult> _iceI_opQIPrxSAsync(IPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpQIPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opQIPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     QIPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpQIPrxSResult ret = new MyClass.OpQIPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpSIPrxSResult opSIPrxS(IPrx[] i)
    {
        return opSIPrxS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpSIPrxSResult opSIPrxS(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSIPrxSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSIPrxSResult> opSIPrxSAsync(IPrx[] i)
    {
        return _iceI_opSIPrxSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpSIPrxSResult> opSIPrxSAsync(IPrx[] i, java.util.Map<String, String> context)
    {
        return _iceI_opSIPrxSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSIPrxSResult> _iceI_opSIPrxSAsync(IPrx[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpSIPrxSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opSIPrxS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     SIPrxSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpSIPrxSResult ret = new MyClass.OpSIPrxSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpCustomIntSResult opCustomIntS(int[] i)
    {
        return opCustomIntS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpCustomIntSResult opCustomIntS(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomIntSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomIntSResult> opCustomIntSAsync(int[] i)
    {
        return _iceI_opCustomIntSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomIntSResult> opCustomIntSAsync(int[] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomIntSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomIntSResult> _iceI_opCustomIntSAsync(int[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomIntSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCustomIntS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeIntSeq(iceP_i);
                 }, istr -> {
                     MyClass.OpCustomIntSResult ret = new MyClass.OpCustomIntSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpCustomCVSResult opCustomCVS(CV[] i)
    {
        return opCustomCVS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpCustomCVSResult opCustomCVS(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomCVSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomCVSResult> opCustomCVSAsync(CV[] i)
    {
        return _iceI_opCustomCVSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomCVSResult> opCustomCVSAsync(CV[] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomCVSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomCVSResult> _iceI_opCustomCVSAsync(CV[] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomCVSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCustomCVS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     CustomCVSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpCustomCVSResult ret = new MyClass.OpCustomCVSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default MyClass.OpCustomIntSSResult opCustomIntSS(int[][] i)
    {
        return opCustomIntSS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpCustomIntSSResult opCustomIntSS(int[][] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomIntSSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomIntSSResult> opCustomIntSSAsync(int[][] i)
    {
        return _iceI_opCustomIntSSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomIntSSResult> opCustomIntSSAsync(int[][] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomIntSSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomIntSSResult> _iceI_opCustomIntSSAsync(int[][] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomIntSSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCustomIntSS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     CustomIntSSHelper.write(ostr, iceP_i);
                 }, istr -> {
                     MyClass.OpCustomIntSSResult ret = new MyClass.OpCustomIntSSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default MyClass.OpCustomCVSSResult opCustomCVSS(CV[][] i)
    {
        return opCustomCVSS(i, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default MyClass.OpCustomCVSSResult opCustomCVSS(CV[][] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomCVSSAsync(i, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomCVSSResult> opCustomCVSSAsync(CV[][] i)
    {
        return _iceI_opCustomCVSSAsync(i, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<MyClass.OpCustomCVSSResult> opCustomCVSSAsync(CV[][] i, java.util.Map<String, String> context)
    {
        return _iceI_opCustomCVSSAsync(i, context, false);
    }

    /**
     * @hidden
     * @param iceP_i -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomCVSSResult> _iceI_opCustomCVSSAsync(CV[][] iceP_i, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<MyClass.OpCustomCVSSResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCustomCVSS", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     CustomCVSSHelper.write(ostr, iceP_i);
                     ostr.writePendingValues();
                 }, istr -> {
                     MyClass.OpCustomCVSSResult ret = new MyClass.OpCustomCVSSResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _MyClassPrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj.ice_facet(facet));
    }

    @Override
    MyClassPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    MyClassPrx ice_adapterId(String newAdapterId);

    @Override
    MyClassPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    MyClassPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    MyClassPrx ice_invocationTimeout(int newTimeout);

    @Override
    MyClassPrx ice_connectionCached(boolean newCache);

    @Override
    MyClassPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    MyClassPrx ice_secure(boolean b);

    @Override
    MyClassPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    MyClassPrx ice_preferSecure(boolean b);

    @Override
    MyClassPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    MyClassPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    MyClassPrx ice_collocationOptimized(boolean b);

    @Override
    MyClassPrx ice_twoway();

    @Override
    MyClassPrx ice_oneway();

    @Override
    MyClassPrx ice_batchOneway();

    @Override
    MyClassPrx ice_datagram();

    @Override
    MyClassPrx ice_batchDatagram();

    @Override
    MyClassPrx ice_compress(boolean co);

    @Override
    MyClassPrx ice_connectionId(String connectionId);

    @Override
    MyClassPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }
}
