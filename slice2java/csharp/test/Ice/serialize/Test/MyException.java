//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public class MyException extends com.zeroc.Ice.UserException
{
    public MyException()
    {
        this.name = "";
        this.vs = new ValStruct();
        this.rs = new RefStruct();
        this.optName = "";
        this.optValStruct = new ValStruct();
        this.optRefStruct = new RefStruct();
        this.optEnum = MyEnum.enum1;
    }

    public MyException(Throwable cause)
    {
        super(cause);
        this.name = "";
        this.vs = new ValStruct();
        this.rs = new RefStruct();
        this.optName = "";
        this.optValStruct = new ValStruct();
        this.optRefStruct = new RefStruct();
        this.optEnum = MyEnum.enum1;
    }

    public MyException(String name, byte b, short s, int i, long l, ValStruct vs, RefStruct rs, MyClass c, MyInterfacePrx p, ValStruct[] vss, ValStruct[] vsl, ValStruct[] vsll, ValStruct[] vssk, ValStruct[] vsq, java.util.Map<java.lang.Integer, java.lang.String> isd, java.util.Map<java.lang.Integer, ValStruct> ivd, java.util.Map<java.lang.Integer, MyInterfacePrx> ipd, java.util.Map<java.lang.Integer, java.lang.String> issd)
    {
        this.name = name;
        this.b = b;
        this.s = s;
        this.i = i;
        this.l = l;
        this.vs = vs;
        this.rs = rs;
        this.c = c;
        this.p = p;
        this.vss = vss;
        this.vsl = vsl;
        this.vsll = vsll;
        this.vssk = vssk;
        this.vsq = vsq;
        this.isd = isd;
        this.ivd = ivd;
        this.ipd = ipd;
        this.issd = issd;
        this.optName = "";
        this.optValStruct = new ValStruct();
        this.optRefStruct = new RefStruct();
        this.optEnum = MyEnum.enum1;
    }

    public MyException(String name, byte b, short s, int i, long l, ValStruct vs, RefStruct rs, MyClass c, MyInterfacePrx p, ValStruct[] vss, ValStruct[] vsl, ValStruct[] vsll, ValStruct[] vssk, ValStruct[] vsq, java.util.Map<java.lang.Integer, java.lang.String> isd, java.util.Map<java.lang.Integer, ValStruct> ivd, java.util.Map<java.lang.Integer, MyInterfacePrx> ipd, java.util.Map<java.lang.Integer, java.lang.String> issd, Throwable cause)
    {
        super(cause);
        this.name = name;
        this.b = b;
        this.s = s;
        this.i = i;
        this.l = l;
        this.vs = vs;
        this.rs = rs;
        this.c = c;
        this.p = p;
        this.vss = vss;
        this.vsl = vsl;
        this.vsll = vsll;
        this.vssk = vssk;
        this.vsq = vsq;
        this.isd = isd;
        this.ivd = ivd;
        this.ipd = ipd;
        this.issd = issd;
        this.optName = "";
        this.optValStruct = new ValStruct();
        this.optRefStruct = new RefStruct();
        this.optEnum = MyEnum.enum1;
    }

    public MyException(String name, byte b, short s, int i, long l, ValStruct vs, RefStruct rs, MyClass c, MyInterfacePrx p, ValStruct[] vss, ValStruct[] vsl, ValStruct[] vsll, ValStruct[] vssk, ValStruct[] vsq, java.util.Map<java.lang.Integer, java.lang.String> isd, java.util.Map<java.lang.Integer, ValStruct> ivd, java.util.Map<java.lang.Integer, MyInterfacePrx> ipd, java.util.Map<java.lang.Integer, java.lang.String> issd, String optName, int optInt, ValStruct optValStruct, RefStruct optRefStruct, MyEnum optEnum, MyClass optClass, MyInterfacePrx optProxy)
    {
        this.name = name;
        this.b = b;
        this.s = s;
        this.i = i;
        this.l = l;
        this.vs = vs;
        this.rs = rs;
        this.c = c;
        this.p = p;
        this.vss = vss;
        this.vsl = vsl;
        this.vsll = vsll;
        this.vssk = vssk;
        this.vsq = vsq;
        this.isd = isd;
        this.ivd = ivd;
        this.ipd = ipd;
        this.issd = issd;
        setOptName(optName);
        setOptInt(optInt);
        setOptValStruct(optValStruct);
        setOptRefStruct(optRefStruct);
        setOptEnum(optEnum);
        setOptClass(optClass);
        setOptProxy(optProxy);
    }

    public MyException(String name, byte b, short s, int i, long l, ValStruct vs, RefStruct rs, MyClass c, MyInterfacePrx p, ValStruct[] vss, ValStruct[] vsl, ValStruct[] vsll, ValStruct[] vssk, ValStruct[] vsq, java.util.Map<java.lang.Integer, java.lang.String> isd, java.util.Map<java.lang.Integer, ValStruct> ivd, java.util.Map<java.lang.Integer, MyInterfacePrx> ipd, java.util.Map<java.lang.Integer, java.lang.String> issd, String optName, int optInt, ValStruct optValStruct, RefStruct optRefStruct, MyEnum optEnum, MyClass optClass, MyInterfacePrx optProxy, Throwable cause)
    {
        super(cause);
        this.name = name;
        this.b = b;
        this.s = s;
        this.i = i;
        this.l = l;
        this.vs = vs;
        this.rs = rs;
        this.c = c;
        this.p = p;
        this.vss = vss;
        this.vsl = vsl;
        this.vsll = vsll;
        this.vssk = vssk;
        this.vsq = vsq;
        this.isd = isd;
        this.ivd = ivd;
        this.ipd = ipd;
        this.issd = issd;
        setOptName(optName);
        setOptInt(optInt);
        setOptValStruct(optValStruct);
        setOptRefStruct(optRefStruct);
        setOptEnum(optEnum);
        setOptClass(optClass);
        setOptProxy(optProxy);
    }

    public String ice_id()
    {
        return "::Test::MyException";
    }

    public String name;

    public byte b;

    public short s;

    public int i;

    public long l;

    public ValStruct vs;

    public RefStruct rs;

    public MyClass c;

    public MyInterfacePrx p;

    public ValStruct[] vss;

    public ValStruct[] vsl;

    public ValStruct[] vsll;

    public ValStruct[] vssk;

    public ValStruct[] vsq;

    public java.util.Map<java.lang.Integer, java.lang.String> isd;

    public java.util.Map<java.lang.Integer, ValStruct> ivd;

    public java.util.Map<java.lang.Integer, MyInterfacePrx> ipd;

    public java.util.Map<java.lang.Integer, java.lang.String> issd;

    private String optName;
    private boolean _optName;

    public String getOptName()
    {
        if(!_optName)
        {
            throw new java.util.NoSuchElementException("optName is not set");
        }
        return optName;
    }

    public void setOptName(String optName)
    {
        _optName = true;
        this.optName = optName;
    }

    public boolean hasOptName()
    {
        return _optName;
    }

    public void clearOptName()
    {
        _optName = false;
    }

    public void optionalOptName(java.util.Optional<java.lang.String> v)
    {
        if(v == null || !v.isPresent())
        {
            _optName = false;
        }
        else
        {
            _optName = true;
            optName = v.get();
        }
    }

    public java.util.Optional<java.lang.String> optionalOptName()
    {
        if(_optName)
        {
            return java.util.Optional.of(optName);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private int optInt;
    private boolean _optInt;

    public int getOptInt()
    {
        if(!_optInt)
        {
            throw new java.util.NoSuchElementException("optInt is not set");
        }
        return optInt;
    }

    public void setOptInt(int optInt)
    {
        _optInt = true;
        this.optInt = optInt;
    }

    public boolean hasOptInt()
    {
        return _optInt;
    }

    public void clearOptInt()
    {
        _optInt = false;
    }

    public void optionalOptInt(java.util.OptionalInt v)
    {
        if(v == null || !v.isPresent())
        {
            _optInt = false;
        }
        else
        {
            _optInt = true;
            optInt = v.getAsInt();
        }
    }

    public java.util.OptionalInt optionalOptInt()
    {
        if(_optInt)
        {
            return java.util.OptionalInt.of(optInt);
        }
        else
        {
            return java.util.OptionalInt.empty();
        }
    }

    private ValStruct optValStruct;
    private boolean _optValStruct;

    public ValStruct getOptValStruct()
    {
        if(!_optValStruct)
        {
            throw new java.util.NoSuchElementException("optValStruct is not set");
        }
        return optValStruct;
    }

    public void setOptValStruct(ValStruct optValStruct)
    {
        _optValStruct = true;
        this.optValStruct = optValStruct;
    }

    public boolean hasOptValStruct()
    {
        return _optValStruct;
    }

    public void clearOptValStruct()
    {
        _optValStruct = false;
    }

    public void optionalOptValStruct(java.util.Optional<ValStruct> v)
    {
        if(v == null || !v.isPresent())
        {
            _optValStruct = false;
        }
        else
        {
            _optValStruct = true;
            optValStruct = v.get();
        }
    }

    public java.util.Optional<ValStruct> optionalOptValStruct()
    {
        if(_optValStruct)
        {
            return java.util.Optional.of(optValStruct);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private RefStruct optRefStruct;
    private boolean _optRefStruct;

    public RefStruct getOptRefStruct()
    {
        if(!_optRefStruct)
        {
            throw new java.util.NoSuchElementException("optRefStruct is not set");
        }
        return optRefStruct;
    }

    public void setOptRefStruct(RefStruct optRefStruct)
    {
        _optRefStruct = true;
        this.optRefStruct = optRefStruct;
    }

    public boolean hasOptRefStruct()
    {
        return _optRefStruct;
    }

    public void clearOptRefStruct()
    {
        _optRefStruct = false;
    }

    public void optionalOptRefStruct(java.util.Optional<RefStruct> v)
    {
        if(v == null || !v.isPresent())
        {
            _optRefStruct = false;
        }
        else
        {
            _optRefStruct = true;
            optRefStruct = v.get();
        }
    }

    public java.util.Optional<RefStruct> optionalOptRefStruct()
    {
        if(_optRefStruct)
        {
            return java.util.Optional.of(optRefStruct);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private MyEnum optEnum;
    private boolean _optEnum;

    public MyEnum getOptEnum()
    {
        if(!_optEnum)
        {
            throw new java.util.NoSuchElementException("optEnum is not set");
        }
        return optEnum;
    }

    public void setOptEnum(MyEnum optEnum)
    {
        _optEnum = true;
        this.optEnum = optEnum;
    }

    public boolean hasOptEnum()
    {
        return _optEnum;
    }

    public void clearOptEnum()
    {
        _optEnum = false;
    }

    public void optionalOptEnum(java.util.Optional<MyEnum> v)
    {
        if(v == null || !v.isPresent())
        {
            _optEnum = false;
        }
        else
        {
            _optEnum = true;
            optEnum = v.get();
        }
    }

    public java.util.Optional<MyEnum> optionalOptEnum()
    {
        if(_optEnum)
        {
            return java.util.Optional.of(optEnum);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private MyClass optClass;
    private boolean _optClass;

    public MyClass getOptClass()
    {
        if(!_optClass)
        {
            throw new java.util.NoSuchElementException("optClass is not set");
        }
        return optClass;
    }

    public void setOptClass(MyClass optClass)
    {
        _optClass = true;
        this.optClass = optClass;
    }

    public boolean hasOptClass()
    {
        return _optClass;
    }

    public void clearOptClass()
    {
        _optClass = false;
    }

    public void optionalOptClass(java.util.Optional<MyClass> v)
    {
        if(v == null || !v.isPresent())
        {
            _optClass = false;
        }
        else
        {
            _optClass = true;
            optClass = v.get();
        }
    }

    public java.util.Optional<MyClass> optionalOptClass()
    {
        if(_optClass)
        {
            return java.util.Optional.ofNullable(optClass);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private MyInterfacePrx optProxy;
    private boolean _optProxy;

    public MyInterfacePrx getOptProxy()
    {
        if(!_optProxy)
        {
            throw new java.util.NoSuchElementException("optProxy is not set");
        }
        return optProxy;
    }

    public void setOptProxy(MyInterfacePrx optProxy)
    {
        _optProxy = true;
        this.optProxy = optProxy;
    }

    public boolean hasOptProxy()
    {
        return _optProxy;
    }

    public void clearOptProxy()
    {
        _optProxy = false;
    }

    public void optionalOptProxy(java.util.Optional<MyInterfacePrx> v)
    {
        if(v == null || !v.isPresent())
        {
            _optProxy = false;
        }
        else
        {
            _optProxy = true;
            optProxy = v.get();
        }
    }

    public java.util.Optional<MyInterfacePrx> optionalOptProxy()
    {
        if(_optProxy)
        {
            return java.util.Optional.of(optProxy);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    /** @hidden */
    @Override
    protected void _writeImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice("::Test::MyException", -1, true);
        ostr_.writeString(name);
        ostr_.writeByte(b);
        ostr_.writeShort(s);
        ostr_.writeInt(i);
        ostr_.writeLong(l);
        ValStruct.ice_write(ostr_, vs);
        RefStruct.ice_write(ostr_, rs);
        ostr_.writeValue(c);
        ostr_.writeProxy(p);
        ValStructSHelper.write(ostr_, vss);
        ValStructListHelper.write(ostr_, vsl);
        ValStructLinkedListHelper.write(ostr_, vsll);
        ValStructStackHelper.write(ostr_, vssk);
        ValStructQueueHelper.write(ostr_, vsq);
        IntStringDHelper.write(ostr_, isd);
        IntValStructDHelper.write(ostr_, ivd);
        IntProxyDHelper.write(ostr_, ipd);
        IntStringSDHelper.write(ostr_, issd);
        if(_optName)
        {
            ostr_.writeString(1, optName);
        }
        if(_optInt)
        {
            ostr_.writeInt(2, optInt);
        }
        if(_optValStruct)
        {
            ValStruct.ice_write(ostr_, 3, optValStruct);
        }
        if(_optRefStruct)
        {
            RefStruct.ice_write(ostr_, 4, optRefStruct);
        }
        if(_optEnum)
        {
            MyEnum.ice_write(ostr_, 5, optEnum);
        }
        if(_optClass)
        {
            ostr_.writeValue(6, optClass);
        }
        if(_optProxy)
        {
            ostr_.writeProxy(7, optProxy);
        }
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _readImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        name = istr_.readString();
        b = istr_.readByte();
        s = istr_.readShort();
        i = istr_.readInt();
        l = istr_.readLong();
        vs = ValStruct.ice_read(istr_);
        rs = RefStruct.ice_read(istr_);
        istr_.readValue(v -> c = v, MyClass.class);
        p = MyInterfacePrx.uncheckedCast(istr_.readProxy());
        vss = ValStructSHelper.read(istr_);
        vsl = ValStructListHelper.read(istr_);
        vsll = ValStructLinkedListHelper.read(istr_);
        vssk = ValStructStackHelper.read(istr_);
        vsq = ValStructQueueHelper.read(istr_);
        isd = IntStringDHelper.read(istr_);
        ivd = IntValStructDHelper.read(istr_);
        ipd = IntProxyDHelper.read(istr_);
        issd = IntStringSDHelper.read(istr_);
        if(_optName = istr_.readOptional(1, com.zeroc.Ice.OptionalFormat.VSize))
        {
            optName = istr_.readString();
        }
        if(_optInt = istr_.readOptional(2, com.zeroc.Ice.OptionalFormat.F4))
        {
            optInt = istr_.readInt();
        }
        if(_optValStruct = istr_.readOptional(3, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr_.skip(4);
            optValStruct = ValStruct.ice_read(istr_);
        }
        if(_optRefStruct = istr_.readOptional(4, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr_.skip(4);
            optRefStruct = RefStruct.ice_read(istr_);
        }
        if(_optEnum = istr_.readOptional(5, com.zeroc.Ice.OptionalFormat.Size))
        {
            optEnum = MyEnum.ice_read(istr_);
        }
        if(_optClass = istr_.readOptional(6, com.zeroc.Ice.OptionalFormat.Class))
        {
            istr_.readValue(v -> optClass = v, MyClass.class);
        }
        if(_optProxy = istr_.readOptional(7, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr_.skip(4);
            optProxy = MyInterfacePrx.uncheckedCast(istr_.readProxy());
        }
        istr_.endSlice();
    }

    /** @hidden */
    @Override
    public boolean _usesClasses()
    {
        return true;
    }

    /** @hidden */
    public static final long serialVersionUID = 6109597336981075583L;
}
