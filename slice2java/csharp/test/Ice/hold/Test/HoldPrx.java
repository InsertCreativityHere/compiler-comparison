//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface HoldPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Puts the adapter on hold, and optionally reactivates it.
     * @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
     * immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
     * milliseconds, puts the adapter on hold and then immediately reactivates it.
     **/
    default void putOnHold(int delay)
    {
        putOnHold(delay, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Puts the adapter on hold, and optionally reactivates it.
     * @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
     * immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
     * milliseconds, puts the adapter on hold and then immediately reactivates it.
     * @param context The Context map to send with the invocation.
     **/
    default void putOnHold(int delay, java.util.Map<String, String> context)
    {
        _iceI_putOnHoldAsync(delay, context, true).waitForResponse();
    }

    /**
     * Puts the adapter on hold, and optionally reactivates it.
     * @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
     * immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
     * milliseconds, puts the adapter on hold and then immediately reactivates it.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> putOnHoldAsync(int delay)
    {
        return _iceI_putOnHoldAsync(delay, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Puts the adapter on hold, and optionally reactivates it.
     * @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
     * immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
     * milliseconds, puts the adapter on hold and then immediately reactivates it.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> putOnHoldAsync(int delay, java.util.Map<String, String> context)
    {
        return _iceI_putOnHoldAsync(delay, context, false);
    }

    /**
     * @hidden
     * @param iceP_delay -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_putOnHoldAsync(int iceP_delay, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "putOnHold", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_delay);
                 }, null);
        return f;
    }

    /**
     * Starts a background task that calls waitForHold and activate on the adapter.
     **/
    default void waitForHold()
    {
        waitForHold(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Starts a background task that calls waitForHold and activate on the adapter.
     * @param context The Context map to send with the invocation.
     **/
    default void waitForHold(java.util.Map<String, String> context)
    {
        _iceI_waitForHoldAsync(context, true).waitForResponse();
    }

    /**
     * Starts a background task that calls waitForHold and activate on the adapter.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> waitForHoldAsync()
    {
        return _iceI_waitForHoldAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Starts a background task that calls waitForHold and activate on the adapter.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> waitForHoldAsync(java.util.Map<String, String> context)
    {
        return _iceI_waitForHoldAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_waitForHoldAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "waitForHold", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Saves value as the last value.
     * @param value The new value.
     * @param expected The current value as expected by the caller.
     **/
    default void setOneway(int value, int expected)
    {
        setOneway(value, expected, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Saves value as the last value.
     * @param value The new value.
     * @param expected The current value as expected by the caller.
     * @param context The Context map to send with the invocation.
     **/
    default void setOneway(int value, int expected, java.util.Map<String, String> context)
    {
        _iceI_setOnewayAsync(value, expected, context, true).waitForResponse();
    }

    /**
     * Saves value as the last value.
     * @param value The new value.
     * @param expected The current value as expected by the caller.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setOnewayAsync(int value, int expected)
    {
        return _iceI_setOnewayAsync(value, expected, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Saves value as the last value.
     * @param value The new value.
     * @param expected The current value as expected by the caller.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setOnewayAsync(int value, int expected, java.util.Map<String, String> context)
    {
        return _iceI_setOnewayAsync(value, expected, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param iceP_expected -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setOnewayAsync(int iceP_value, int iceP_expected, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setOneway", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_value);
                     ostr.writeInt(iceP_expected);
                 }, null);
        return f;
    }

    /**
     * Saves value as the last value after a delay.
     * @param value The new value.
     * @param delay The delay in milliseconds.
     * @return The previous value.
     **/
    default int set(int value, int delay)
    {
        return set(value, delay, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Saves value as the last value after a delay.
     * @param value The new value.
     * @param delay The delay in milliseconds.
     * @param context The Context map to send with the invocation.
     * @return The previous value.
     **/
    default int set(int value, int delay, java.util.Map<String, String> context)
    {
        return _iceI_setAsync(value, delay, context, true).waitForResponse();
    }

    /**
     * Saves value as the last value after a delay.
     * @param value The new value.
     * @param delay The delay in milliseconds.
     * @return The previous value.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> setAsync(int value, int delay)
    {
        return _iceI_setAsync(value, delay, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Saves value as the last value after a delay.
     * @param value The new value.
     * @param delay The delay in milliseconds.
     * @param context The Context map to send with the invocation.
     * @return The previous value.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> setAsync(int value, int delay, java.util.Map<String, String> context)
    {
        return _iceI_setAsync(value, delay, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param iceP_delay -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_setAsync(int iceP_value, int iceP_delay, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "set", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_value);
                     ostr.writeInt(iceP_delay);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Shuts down the server.
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Shuts down the server.
     * @param context The Context map to send with the invocation.
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Shuts down the server.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Shuts down the server.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link HoldPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static HoldPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _HoldPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HoldPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HoldPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _HoldPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HoldPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static HoldPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static HoldPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _HoldPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static HoldPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _HoldPrxI(obj.ice_facet(facet));
    }

    @Override
    HoldPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    HoldPrx ice_adapterId(String newAdapterId);

    @Override
    HoldPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    HoldPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    HoldPrx ice_invocationTimeout(int newTimeout);

    @Override
    HoldPrx ice_connectionCached(boolean newCache);

    @Override
    HoldPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    HoldPrx ice_secure(boolean b);

    @Override
    HoldPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    HoldPrx ice_preferSecure(boolean b);

    @Override
    HoldPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    HoldPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    HoldPrx ice_collocationOptimized(boolean b);

    @Override
    HoldPrx ice_twoway();

    @Override
    HoldPrx ice_oneway();

    @Override
    HoldPrx ice_batchOneway();

    @Override
    HoldPrx ice_datagram();

    @Override
    HoldPrx ice_batchDatagram();

    @Override
    HoldPrx ice_compress(boolean co);

    @Override
    HoldPrx ice_connectionId(String connectionId);

    @Override
    HoldPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Hold";
    }

    /**
     * @hidden
     **/
    @Override
    default HoldPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _HoldPrxI(ref);
    }
}
