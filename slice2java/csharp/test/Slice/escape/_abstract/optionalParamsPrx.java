//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package _abstract;

public interface optionalParamsPrx extends com.zeroc.Ice.ObjectPrx
{
    default java.util.Optional<_break> _for(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
    {
        return _for(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<_break> _for(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace, java.util.Map<String, String> context)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, context, true).waitForResponse();
    }

    default java.util.Optional<_break> _for(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
    {
        return _for(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<_break> _for(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, java.util.Map<String, String> context)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> forAsync(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> forAsync(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace, java.util.Map<String, String> context)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, context, false);
    }

    /**
     * @hidden
     * @param iceP_goto -
     * @param iceP_if -
     * @param iceP_internal -
     * @param iceP_namespace -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> _iceI_forAsync(as iceP_goto, explicitPrx iceP_if, java.util.Map<java.lang.String, _break> iceP_internal, String iceP_namespace, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "for", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     as.ice_write(ostr, 2, iceP_goto);
                     ostr.writeProxy(3, iceP_if);
                     whileHelper.write(ostr, 5, iceP_internal);
                     ostr.writeString(7, iceP_namespace);
                 }, istr -> {
                     java.util.Optional<_break> ret;
                     ret = _break.ice_read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> forAsync(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> forAsync(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, java.util.Map<String, String> context)
    {
        return _iceI_forAsync(_goto, _if, internal, namespace, context, false);
    }

    /**
     * @hidden
     * @param iceP_goto -
     * @param iceP_if -
     * @param iceP_internal -
     * @param iceP_namespace -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> _iceI_forAsync(java.util.Optional<as> iceP_goto, java.util.Optional<explicitPrx> iceP_if, java.util.Optional<java.util.Map<java.lang.String, _break>> iceP_internal, java.util.Optional<java.lang.String> iceP_namespace, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "for", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     as.ice_write(ostr, 2, iceP_goto);
                     ostr.writeProxy(3, iceP_if);
                     whileHelper.write(ostr, 5, iceP_internal);
                     ostr.writeString(7, iceP_namespace);
                 }, istr -> {
                     java.util.Optional<_break> ret;
                     ret = _break.ice_read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default java.util.Optional<_break> _continue(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
    {
        return _continue(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<_break> _continue(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace, java.util.Map<String, String> context)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, context, true).waitForResponse();
    }

    default java.util.Optional<_break> _continue(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
    {
        return _continue(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Optional<_break> _continue(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, java.util.Map<String, String> context)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> continueAsync(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> continueAsync(as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace, java.util.Map<String, String> context)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, context, false);
    }

    /**
     * @hidden
     * @param iceP_goto -
     * @param iceP_if -
     * @param iceP_internal -
     * @param iceP_namespace -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> _iceI_continueAsync(as iceP_goto, explicitPrx iceP_if, java.util.Map<java.lang.String, _break> iceP_internal, String iceP_namespace, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "continue", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     as.ice_write(ostr, 2, iceP_goto);
                     ostr.writeProxy(3, iceP_if);
                     whileHelper.write(ostr, 5, iceP_internal);
                     ostr.writeString(7, iceP_namespace);
                 }, istr -> {
                     java.util.Optional<_break> ret;
                     ret = _break.ice_read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> continueAsync(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Optional<_break>> continueAsync(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, java.util.Map<String, String> context)
    {
        return _iceI_continueAsync(_goto, _if, internal, namespace, context, false);
    }

    /**
     * @hidden
     * @param iceP_goto -
     * @param iceP_if -
     * @param iceP_internal -
     * @param iceP_namespace -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> _iceI_continueAsync(java.util.Optional<as> iceP_goto, java.util.Optional<explicitPrx> iceP_if, java.util.Optional<java.util.Map<java.lang.String, _break>> iceP_internal, java.util.Optional<java.lang.String> iceP_namespace, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.Optional<_break>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "continue", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     as.ice_write(ostr, 2, iceP_goto);
                     ostr.writeProxy(3, iceP_if);
                     whileHelper.write(ostr, 5, iceP_internal);
                     ostr.writeString(7, iceP_namespace);
                 }, istr -> {
                     java.util.Optional<_break> ret;
                     ret = _break.ice_read(istr, 1);
                     return ret;
                 });
        return f;
    }

    default optionalParams.InResult in()
    {
        return in(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default optionalParams.InResult in(java.util.Map<String, String> context)
    {
        return _iceI_inAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<optionalParams.InResult> inAsync()
    {
        return _iceI_inAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<optionalParams.InResult> inAsync(java.util.Map<String, String> context)
    {
        return _iceI_inAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<optionalParams.InResult> _iceI_inAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<optionalParams.InResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "in", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     optionalParams.InResult ret = new optionalParams.InResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default optionalParams.ForeachResult foreach()
    {
        return foreach(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default optionalParams.ForeachResult foreach(java.util.Map<String, String> context)
    {
        return _iceI_foreachAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<optionalParams.ForeachResult> foreachAsync()
    {
        return _iceI_foreachAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<optionalParams.ForeachResult> foreachAsync(java.util.Map<String, String> context)
    {
        return _iceI_foreachAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<optionalParams.ForeachResult> _iceI_foreachAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<optionalParams.ForeachResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "foreach", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     optionalParams.ForeachResult ret = new optionalParams.ForeachResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static optionalParamsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static optionalParamsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static optionalParamsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static optionalParamsPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static optionalParamsPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static optionalParamsPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, optionalParamsPrx.class, _optionalParamsPrxI.class);
    }

    @Override
    optionalParamsPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    optionalParamsPrx ice_adapterId(String newAdapterId);

    @Override
    optionalParamsPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    optionalParamsPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    optionalParamsPrx ice_invocationTimeout(int newTimeout);

    @Override
    optionalParamsPrx ice_connectionCached(boolean newCache);

    @Override
    optionalParamsPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    optionalParamsPrx ice_secure(boolean b);

    @Override
    optionalParamsPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    optionalParamsPrx ice_preferSecure(boolean b);

    @Override
    optionalParamsPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    optionalParamsPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    optionalParamsPrx ice_collocationOptimized(boolean b);

    @Override
    optionalParamsPrx ice_twoway();

    @Override
    optionalParamsPrx ice_oneway();

    @Override
    optionalParamsPrx ice_batchOneway();

    @Override
    optionalParamsPrx ice_datagram();

    @Override
    optionalParamsPrx ice_batchDatagram();

    @Override
    optionalParamsPrx ice_compress(boolean co);

    @Override
    optionalParamsPrx ice_timeout(int t);

    @Override
    optionalParamsPrx ice_connectionId(String connectionId);

    @Override
    optionalParamsPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::abstract::optionalParams";
    }
}
