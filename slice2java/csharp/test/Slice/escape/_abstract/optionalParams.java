// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package _abstract;

public interface optionalParams extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation in.
     **/
    public static class InResult
    {
        /**
         * Default constructor.
         **/
        public InResult()
        {
        }

        public InResult(java.util.Optional<_break> returnValue, java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
        {
            this.returnValue = returnValue;
            this._goto = _goto;
            this._if = _if;
            this.internal = internal;
            this.namespace = namespace;
        }

        public InResult(_break returnValue, as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this._goto = java.util.Optional.ofNullable(_goto);
            this._if = java.util.Optional.ofNullable(_if);
            this.internal = java.util.Optional.ofNullable(internal);
            this.namespace = java.util.Optional.ofNullable(namespace);
        }

        public java.util.Optional<_break> returnValue;
        public java.util.Optional<as> _goto;
        public java.util.Optional<explicitPrx> _if;
        public java.util.Optional<java.util.Map<java.lang.String, _break>> internal;
        public java.util.Optional<java.lang.String> namespace;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            _break.ice_write(ostr, 1, returnValue);
            as.ice_write(ostr, 2, this._goto);
            ostr.writeProxy(3, this._if);
            whileHelper.write(ostr, 5, this.internal);
            ostr.writeString(7, this.namespace);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = _break.ice_read(istr, 1);
            this._goto = as.ice_read(istr, 2);
            this._if = istr.readProxy(3, explicitPrx::uncheckedCast);
            this.internal = whileHelper.read(istr, 5);
            this.namespace = istr.readString(7);
        }
    }

    /**
     * Holds the result of operation foreach.
     **/
    public static class ForeachResult
    {
        /**
         * Default constructor.
         **/
        public ForeachResult()
        {
        }

        public ForeachResult(java.util.Optional<_break> returnValue, java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace)
        {
            this.returnValue = returnValue;
            this._goto = _goto;
            this._if = _if;
            this.internal = internal;
            this.namespace = namespace;
        }

        public ForeachResult(_break returnValue, as _goto, explicitPrx _if, java.util.Map<java.lang.String, _break> internal, String namespace)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this._goto = java.util.Optional.ofNullable(_goto);
            this._if = java.util.Optional.ofNullable(_if);
            this.internal = java.util.Optional.ofNullable(internal);
            this.namespace = java.util.Optional.ofNullable(namespace);
        }

        public java.util.Optional<_break> returnValue;
        public java.util.Optional<as> _goto;
        public java.util.Optional<explicitPrx> _if;
        public java.util.Optional<java.util.Map<java.lang.String, _break>> internal;
        public java.util.Optional<java.lang.String> namespace;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            _break.ice_write(ostr, 1, returnValue);
            as.ice_write(ostr, 2, this._goto);
            ostr.writeProxy(3, this._if);
            whileHelper.write(ostr, 5, this.internal);
            ostr.writeString(7, this.namespace);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = _break.ice_read(istr, 1);
            this._goto = as.ice_read(istr, 2);
            this._if = istr.readProxy(3, explicitPrx::uncheckedCast);
            this.internal = whileHelper.read(istr, 5);
            this.namespace = istr.readString(7);
        }
    }

    java.util.Optional<_break> _for(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.util.Optional<_break>> continueAsync(java.util.Optional<as> _goto, java.util.Optional<explicitPrx> _if, java.util.Optional<java.util.Map<java.lang.String, _break>> internal, java.util.Optional<java.lang.String> namespace, com.zeroc.Ice.Current current);

    optionalParams.InResult in(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<optionalParams.ForeachResult> foreachAsync(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::abstract::optionalParams"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::abstract::optionalParams";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_for(optionalParams obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<as> iceP_goto;
        java.util.Optional<explicitPrx> iceP_if;
        java.util.Optional<java.util.Map<java.lang.String, _break>> iceP_internal;
        java.util.Optional<java.lang.String> iceP_namespace;
        iceP_goto = as.ice_read(istr, 2);
        iceP_if = istr.readProxy(3, explicitPrx::uncheckedCast);
        iceP_internal = whileHelper.read(istr, 5);
        iceP_namespace = istr.readString(7);
        istr.endEncapsulation();
        java.util.Optional<_break> ret = obj._for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        _break.ice_write(ostr, 1, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_continue(optionalParams obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<as> iceP_goto;
        java.util.Optional<explicitPrx> iceP_if;
        java.util.Optional<java.util.Map<java.lang.String, _break>> iceP_internal;
        java.util.Optional<java.lang.String> iceP_namespace;
        iceP_goto = as.ice_read(istr, 2);
        iceP_if = istr.readProxy(3, explicitPrx::uncheckedCast);
        iceP_internal = whileHelper.read(istr, 5);
        iceP_namespace = istr.readString(7);
        istr.endEncapsulation();
        var result = obj.continueAsync(iceP_goto, iceP_if, iceP_internal, iceP_namespace, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                _break.ice_write(ostr, 1, value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_in(optionalParams obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        optionalParams.InResult ret = obj.in(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_foreach(optionalParams obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.foreachAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "for" -> optionalParams._iceD_for(this, request);
            case "continue" -> optionalParams._iceD_continue(this, request);
            case "in" -> optionalParams._iceD_in(this, request);
            case "foreach" -> optionalParams._iceD_foreach(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
