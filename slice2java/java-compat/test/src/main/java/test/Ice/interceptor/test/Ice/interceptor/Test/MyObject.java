//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.interceptor.Test;

public interface MyObject extends com.zeroc.Ice.Object
{
    int add(int x, int y, com.zeroc.Ice.Current current);

    int addWithRetry(int x, int y, com.zeroc.Ice.Current current);

    int badAdd(int x, int y, com.zeroc.Ice.Current current)
        throws InvalidInputException;

    int notExistAdd(int x, int y, com.zeroc.Ice.Current current);

    int badSystemAdd(int x, int y, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> amdAddAsync(int x, int y, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> amdAddWithRetryAsync(int x, int y, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> amdBadAddAsync(int x, int y, com.zeroc.Ice.Current current)
        throws InvalidInputException;

    java.util.concurrent.CompletionStage<java.lang.Integer> amdNotExistAddAsync(int x, int y, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> amdBadSystemAddAsync(int x, int y, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyObject"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyObject";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_add(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        int ret = obj.add(iceP_x, iceP_y, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addWithRetry(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        int ret = obj.addWithRetry(iceP_x, iceP_y, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_badAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        int ret = obj.badAdd(iceP_x, iceP_y, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_notExistAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        int ret = obj.notExistAdd(iceP_x, iceP_y, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_badSystemAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        int ret = obj.badSystemAdd(iceP_x, iceP_y, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_amdAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.amdAddAsync(iceP_x, iceP_y, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_amdAddWithRetry(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.amdAddWithRetryAsync(iceP_x, iceP_y, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_amdBadAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.amdBadAddAsync(iceP_x, iceP_y, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_amdNotExistAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.amdNotExistAddAsync(iceP_x, iceP_y, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_amdBadSystemAdd(MyObject obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_x;
        int iceP_y;
        iceP_x = istr.readInt();
        iceP_y = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.amdBadSystemAddAsync(iceP_x, iceP_y, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "add",
        "addWithRetry",
        "amdAdd",
        "amdAddWithRetry",
        "amdBadAdd",
        "amdBadSystemAdd",
        "amdNotExistAdd",
        "badAdd",
        "badSystemAdd",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "notExistAdd"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_add(this, in, current);
            }
            case 1:
            {
                return _iceD_addWithRetry(this, in, current);
            }
            case 2:
            {
                return _iceD_amdAdd(this, in, current);
            }
            case 3:
            {
                return _iceD_amdAddWithRetry(this, in, current);
            }
            case 4:
            {
                return _iceD_amdBadAdd(this, in, current);
            }
            case 5:
            {
                return _iceD_amdBadSystemAdd(this, in, current);
            }
            case 6:
            {
                return _iceD_amdNotExistAdd(this, in, current);
            }
            case 7:
            {
                return _iceD_badAdd(this, in, current);
            }
            case 8:
            {
                return _iceD_badSystemAdd(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 12:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 13:
            {
                return _iceD_notExistAdd(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
