//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.custom.Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opCSeq.
     **/
    public static class OpCSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpCSeqResult()
        {
        }

        public OpCSeqResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CSeqHelper.write(ostr, this.outSeq);
            CSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = CSeqHelper.read(istr);
            returnValue = CSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCArray.
     **/
    public static class OpCArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpCArrayResult()
        {
        }

        public OpCArrayResult(java.util.List<C> returnValue, java.util.List<C> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<C> returnValue;
        public java.util.List<C> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CArrayHelper.write(ostr, this.outSeq);
            CArrayHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = CArrayHelper.read(istr);
            returnValue = CArrayHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCList.
     **/
    public static class OpCListResult
    {
        /**
         * Default constructor.
         **/
        public OpCListResult()
        {
        }

        public OpCListResult(java.util.List<C> returnValue, java.util.List<C> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<C> returnValue;
        public java.util.List<C> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CListHelper.write(ostr, this.outSeq);
            CListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = CListHelper.read(istr);
            returnValue = CListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(java.util.List<java.lang.Boolean> returnValue, java.util.List<java.lang.Boolean> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Boolean> returnValue;
        public java.util.List<java.lang.Boolean> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolSeqHelper.write(ostr, this.outSeq);
            BoolSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BoolSeqHelper.read(istr);
            returnValue = BoolSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(java.util.List<java.lang.Byte> returnValue, java.util.List<java.lang.Byte> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Byte> returnValue;
        public java.util.List<java.lang.Byte> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteSeqHelper.write(ostr, this.outSeq);
            ByteSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ByteSeqHelper.read(istr);
            returnValue = ByteSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(java.util.List<java.lang.Short> returnValue, java.util.List<java.lang.Short> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Short> returnValue;
        public java.util.List<java.lang.Short> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortSeqHelper.write(ostr, this.outSeq);
            ShortSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ShortSeqHelper.read(istr);
            returnValue = ShortSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(java.util.List<java.lang.Integer> returnValue, java.util.List<java.lang.Integer> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Integer> returnValue;
        public java.util.List<java.lang.Integer> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntSeqHelper.write(ostr, this.outSeq);
            IntSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = IntSeqHelper.read(istr);
            returnValue = IntSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(java.util.List<java.lang.Long> returnValue, java.util.List<java.lang.Long> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Long> returnValue;
        public java.util.List<java.lang.Long> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongSeqHelper.write(ostr, this.outSeq);
            LongSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = LongSeqHelper.read(istr);
            returnValue = LongSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(java.util.List<java.lang.Float> returnValue, java.util.List<java.lang.Float> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Float> returnValue;
        public java.util.List<java.lang.Float> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FloatSeqHelper.write(ostr, this.outSeq);
            FloatSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = FloatSeqHelper.read(istr);
            returnValue = FloatSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(java.util.List<java.lang.Double> returnValue, java.util.List<java.lang.Double> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.Double> returnValue;
        public java.util.List<java.lang.Double> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DoubleSeqHelper.write(ostr, this.outSeq);
            DoubleSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DoubleSeqHelper.read(istr);
            returnValue = DoubleSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSeq.
     **/
    public static class OpStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqResult()
        {
        }

        public OpStringSeqResult(java.util.List<java.lang.String> returnValue, java.util.List<java.lang.String> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.lang.String> returnValue;
        public java.util.List<java.lang.String> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqHelper.write(ostr, this.outSeq);
            StringSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringSeqHelper.read(istr);
            returnValue = StringSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opESeq.
     **/
    public static class OpESeqResult
    {
        /**
         * Default constructor.
         **/
        public OpESeqResult()
        {
        }

        public OpESeqResult(java.util.List<E> returnValue, java.util.List<E> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<E> returnValue;
        public java.util.List<E> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ESeqHelper.write(ostr, this.outSeq);
            ESeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ESeqHelper.read(istr);
            returnValue = ESeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opSSeq.
     **/
    public static class OpSSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpSSeqResult()
        {
        }

        public OpSSeqResult(java.util.List<S> returnValue, java.util.List<S> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<S> returnValue;
        public java.util.List<S> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SSeqHelper.write(ostr, this.outSeq);
            SSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = SSeqHelper.read(istr);
            returnValue = SSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDSeq.
     **/
    public static class OpDSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDSeqResult()
        {
        }

        public OpDSeqResult(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> returnValue, java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> returnValue;
        public java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DSeqHelper.write(ostr, this.outSeq);
            DSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DSeqHelper.read(istr);
            returnValue = DSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSeqSeq.
     **/
    public static class OpStringSeqSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqSeqResult()
        {
        }

        public OpStringSeqSeqResult(java.util.List<java.util.List<java.lang.String>> returnValue, java.util.List<java.util.List<java.lang.String>> outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.List<java.util.List<java.lang.String>> returnValue;
        public java.util.List<java.util.List<java.lang.String>> outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSeqSeqHelper.write(ostr, this.outSeq);
            StringSeqSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringSeqSeqHelper.read(istr);
            returnValue = StringSeqSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteBufferSeq.
     **/
    public static class OpByteBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteBufferSeqResult()
        {
        }

        public OpByteBufferSeqResult(java.nio.ByteBuffer returnValue, java.nio.ByteBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.ByteBuffer returnValue;
        public java.nio.ByteBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteBuffer(this.outSeq);
            ostr.writeByteBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteBuffer();
            returnValue = istr.readByteBuffer();
        }
    }

    /**
     * Holds the result of operation opShortBufferSeq.
     **/
    public static class OpShortBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortBufferSeqResult()
        {
        }

        public OpShortBufferSeqResult(java.nio.ShortBuffer returnValue, java.nio.ShortBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.ShortBuffer returnValue;
        public java.nio.ShortBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortBuffer(this.outSeq);
            ostr.writeShortBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readShortBuffer();
            returnValue = istr.readShortBuffer();
        }
    }

    /**
     * Holds the result of operation opIntBufferSeq.
     **/
    public static class OpIntBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntBufferSeqResult()
        {
        }

        public OpIntBufferSeqResult(java.nio.IntBuffer returnValue, java.nio.IntBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.IntBuffer returnValue;
        public java.nio.IntBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntBuffer(this.outSeq);
            ostr.writeIntBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readIntBuffer();
            returnValue = istr.readIntBuffer();
        }
    }

    /**
     * Holds the result of operation opLongBufferSeq.
     **/
    public static class OpLongBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongBufferSeqResult()
        {
        }

        public OpLongBufferSeqResult(java.nio.LongBuffer returnValue, java.nio.LongBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.LongBuffer returnValue;
        public java.nio.LongBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongBuffer(this.outSeq);
            ostr.writeLongBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readLongBuffer();
            returnValue = istr.readLongBuffer();
        }
    }

    /**
     * Holds the result of operation opFloatBufferSeq.
     **/
    public static class OpFloatBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatBufferSeqResult()
        {
        }

        public OpFloatBufferSeqResult(java.nio.FloatBuffer returnValue, java.nio.FloatBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.FloatBuffer returnValue;
        public java.nio.FloatBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatBuffer(this.outSeq);
            ostr.writeFloatBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readFloatBuffer();
            returnValue = istr.readFloatBuffer();
        }
    }

    /**
     * Holds the result of operation opDoubleBufferSeq.
     **/
    public static class OpDoubleBufferSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleBufferSeqResult()
        {
        }

        public OpDoubleBufferSeqResult(java.nio.DoubleBuffer returnValue, java.nio.DoubleBuffer outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.nio.DoubleBuffer returnValue;
        public java.nio.DoubleBuffer outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleBuffer(this.outSeq);
            ostr.writeDoubleBuffer(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readDoubleBuffer();
            returnValue = istr.readDoubleBuffer();
        }
    }

    TestIntf.OpCSeqResult opCSeq(C[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpCArrayResult opCArray(java.util.List<C> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpCListResult opCList(java.util.List<C> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolSeqResult opBoolSeq(java.util.List<java.lang.Boolean> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteSeqResult opByteSeq(java.util.List<java.lang.Byte> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpShortSeqResult opShortSeq(java.util.List<java.lang.Short> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpIntSeqResult opIntSeq(java.util.List<java.lang.Integer> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpLongSeqResult opLongSeq(java.util.List<java.lang.Long> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFloatSeqResult opFloatSeq(java.util.List<java.lang.Float> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDoubleSeqResult opDoubleSeq(java.util.List<java.lang.Double> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringSeqResult opStringSeq(java.util.List<java.lang.String> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpESeqResult opESeq(java.util.List<E> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpSSeqResult opSSeq(java.util.List<S> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDSeqResult opDSeq(java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringSeqSeqResult opStringSeqSeq(java.util.List<java.util.List<java.lang.String>> inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteBufferSeqResult opByteBufferSeq(java.nio.ByteBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpShortBufferSeqResult opShortBufferSeq(java.nio.ShortBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpIntBufferSeqResult opIntBufferSeq(java.nio.IntBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpLongBufferSeqResult opLongBufferSeq(java.nio.LongBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFloatBufferSeqResult opFloatBufferSeq(java.nio.FloatBuffer inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDoubleBufferSeqResult opDoubleBufferSeq(java.nio.DoubleBuffer inSeq, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        C[] iceP_inSeq;
        iceP_inSeq = CSeqHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        TestIntf.OpCSeqResult ret = obj.opCSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCArray(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<C> iceP_inSeq;
        iceP_inSeq = CArrayHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        TestIntf.OpCArrayResult ret = obj.opCArray(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opCList(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<C> iceP_inSeq;
        iceP_inSeq = CListHelper.read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        TestIntf.OpCListResult ret = obj.opCList(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Boolean> iceP_inSeq;
        iceP_inSeq = BoolSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpBoolSeqResult ret = obj.opBoolSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Byte> iceP_inSeq;
        iceP_inSeq = ByteSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpByteSeqResult ret = obj.opByteSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Short> iceP_inSeq;
        iceP_inSeq = ShortSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpShortSeqResult ret = obj.opShortSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Integer> iceP_inSeq;
        iceP_inSeq = IntSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpIntSeqResult ret = obj.opIntSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Long> iceP_inSeq;
        iceP_inSeq = LongSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpLongSeqResult ret = obj.opLongSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Float> iceP_inSeq;
        iceP_inSeq = FloatSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpFloatSeqResult ret = obj.opFloatSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.Double> iceP_inSeq;
        iceP_inSeq = DoubleSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.lang.String> iceP_inSeq;
        iceP_inSeq = StringSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpStringSeqResult ret = obj.opStringSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opESeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<E> iceP_inSeq;
        iceP_inSeq = ESeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpESeqResult ret = obj.opESeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opSSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<S> iceP_inSeq;
        iceP_inSeq = SSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpSSeqResult ret = obj.opSSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.Integer, java.lang.String>> iceP_inSeq;
        iceP_inSeq = DSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpDSeqResult ret = obj.opDSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSeqSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.List<java.lang.String>> iceP_inSeq;
        iceP_inSeq = StringSeqSeqHelper.read(istr);
        inS.endReadParams();
        TestIntf.OpStringSeqSeqResult ret = obj.opStringSeqSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.ByteBuffer iceP_inSeq;
        iceP_inSeq = istr.readByteBuffer();
        inS.endReadParams();
        TestIntf.OpByteBufferSeqResult ret = obj.opByteBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.ShortBuffer iceP_inSeq;
        iceP_inSeq = istr.readShortBuffer();
        inS.endReadParams();
        TestIntf.OpShortBufferSeqResult ret = obj.opShortBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.IntBuffer iceP_inSeq;
        iceP_inSeq = istr.readIntBuffer();
        inS.endReadParams();
        TestIntf.OpIntBufferSeqResult ret = obj.opIntBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.LongBuffer iceP_inSeq;
        iceP_inSeq = istr.readLongBuffer();
        inS.endReadParams();
        TestIntf.OpLongBufferSeqResult ret = obj.opLongBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.FloatBuffer iceP_inSeq;
        iceP_inSeq = istr.readFloatBuffer();
        inS.endReadParams();
        TestIntf.OpFloatBufferSeqResult ret = obj.opFloatBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleBufferSeq(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.nio.DoubleBuffer iceP_inSeq;
        iceP_inSeq = istr.readDoubleBuffer();
        inS.endReadParams();
        TestIntf.OpDoubleBufferSeqResult ret = obj.opDoubleBufferSeq(iceP_inSeq, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBoolSeq",
        "opByteBufferSeq",
        "opByteSeq",
        "opCArray",
        "opCList",
        "opCSeq",
        "opDSeq",
        "opDoubleBufferSeq",
        "opDoubleSeq",
        "opESeq",
        "opFloatBufferSeq",
        "opFloatSeq",
        "opIntBufferSeq",
        "opIntSeq",
        "opLongBufferSeq",
        "opLongSeq",
        "opSSeq",
        "opShortBufferSeq",
        "opShortSeq",
        "opStringSeq",
        "opStringSeqSeq",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opBoolSeq(this, in, current);
            }
            case 5:
            {
                return _iceD_opByteBufferSeq(this, in, current);
            }
            case 6:
            {
                return _iceD_opByteSeq(this, in, current);
            }
            case 7:
            {
                return _iceD_opCArray(this, in, current);
            }
            case 8:
            {
                return _iceD_opCList(this, in, current);
            }
            case 9:
            {
                return _iceD_opCSeq(this, in, current);
            }
            case 10:
            {
                return _iceD_opDSeq(this, in, current);
            }
            case 11:
            {
                return _iceD_opDoubleBufferSeq(this, in, current);
            }
            case 12:
            {
                return _iceD_opDoubleSeq(this, in, current);
            }
            case 13:
            {
                return _iceD_opESeq(this, in, current);
            }
            case 14:
            {
                return _iceD_opFloatBufferSeq(this, in, current);
            }
            case 15:
            {
                return _iceD_opFloatSeq(this, in, current);
            }
            case 16:
            {
                return _iceD_opIntBufferSeq(this, in, current);
            }
            case 17:
            {
                return _iceD_opIntSeq(this, in, current);
            }
            case 18:
            {
                return _iceD_opLongBufferSeq(this, in, current);
            }
            case 19:
            {
                return _iceD_opLongSeq(this, in, current);
            }
            case 20:
            {
                return _iceD_opSSeq(this, in, current);
            }
            case 21:
            {
                return _iceD_opShortBufferSeq(this, in, current);
            }
            case 22:
            {
                return _iceD_opShortSeq(this, in, current);
            }
            case 23:
            {
                return _iceD_opStringSeq(this, in, current);
            }
            case 24:
            {
                return _iceD_opStringSeqSeq(this, in, current);
            }
            case 25:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
