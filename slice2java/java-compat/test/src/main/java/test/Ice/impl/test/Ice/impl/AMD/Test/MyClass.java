//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package test.Ice.impl.AMD.Test;

public interface MyClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByte.
     **/
    public static class OpByteResult
    {
        /**
         * Default constructor.
         **/
        public OpByteResult()
        {
        }

        public OpByteResult(byte returnValue, byte p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public byte returnValue;
        public byte p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByte(this.p3);
            ostr.writeByte(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readByte();
            returnValue = istr.readByte();
        }
    }

    /**
     * Holds the result of operation opBool.
     **/
    public static class OpBoolResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolResult()
        {
        }

        public OpBoolResult(boolean returnValue, boolean p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public boolean returnValue;
        public boolean p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBool(this.p3);
            ostr.writeBool(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readBool();
            returnValue = istr.readBool();
        }
    }

    /**
     * Holds the result of operation opShortIntLong.
     **/
    public static class OpShortIntLongResult
    {
        /**
         * Default constructor.
         **/
        public OpShortIntLongResult()
        {
        }

        public OpShortIntLongResult(long returnValue, short p4, int p5, long p6)
        {
            this.returnValue = returnValue;
            this.p4 = p4;
            this.p5 = p5;
            this.p6 = p6;
        }

        public long returnValue;
        public short p4;
        public int p5;
        public long p6;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShort(this.p4);
            ostr.writeInt(this.p5);
            ostr.writeLong(this.p6);
            ostr.writeLong(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p4 = istr.readShort();
            this.p5 = istr.readInt();
            this.p6 = istr.readLong();
            returnValue = istr.readLong();
        }
    }

    /**
     * Holds the result of operation opFloatDouble.
     **/
    public static class OpFloatDoubleResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatDoubleResult()
        {
        }

        public OpFloatDoubleResult(double returnValue, float p3, double p4)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
            this.p4 = p4;
        }

        public double returnValue;
        public float p3;
        public double p4;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.p3);
            ostr.writeDouble(this.p4);
            ostr.writeDouble(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readFloat();
            this.p4 = istr.readDouble();
            returnValue = istr.readDouble();
        }
    }

    /**
     * Holds the result of operation opString.
     **/
    public static class OpStringResult
    {
        /**
         * Default constructor.
         **/
        public OpStringResult()
        {
        }

        public OpStringResult(String returnValue, String p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public String returnValue;
        public String p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(this.p3);
            ostr.writeString(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readString();
            returnValue = istr.readString();
        }
    }

    /**
     * Holds the result of operation opMyEnum.
     **/
    public static class OpMyEnumResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumResult()
        {
        }

        public OpMyEnumResult(MyEnum returnValue, MyEnum p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public MyEnum returnValue;
        public MyEnum p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnum.ice_write(ostr, this.p2);
            MyEnum.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p2 = MyEnum.ice_read(istr);
            returnValue = MyEnum.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opMyClass.
     **/
    public static class OpMyClassResult
    {
        /**
         * Default constructor.
         **/
        public OpMyClassResult()
        {
        }

        public OpMyClassResult(MyClassPrx returnValue, MyClassPrx p2, MyClassPrx p3)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
            this.p3 = p3;
        }

        public MyClassPrx returnValue;
        public MyClassPrx p2;
        public MyClassPrx p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(this.p2);
            ostr.writeProxy(this.p3);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p2 = MyClassPrx.uncheckedCast(istr.readProxy());
            this.p3 = MyClassPrx.uncheckedCast(istr.readProxy());
            returnValue = MyClassPrx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Holds the result of operation opStruct.
     **/
    public static class OpStructResult
    {
        /**
         * Default constructor.
         **/
        public OpStructResult()
        {
        }

        public OpStructResult(Structure returnValue, Structure p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public Structure returnValue;
        public Structure p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            Structure.ice_write(ostr, this.p3);
            Structure.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = Structure.ice_read(istr);
            returnValue = Structure.ice_read(istr);
        }
    }

    /**
     * Holds the result of operation opByteS.
     **/
    public static class OpByteSResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSResult()
        {
        }

        public OpByteSResult(byte[] returnValue, byte[] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public byte[] returnValue;
        public byte[] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.p3);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opBoolS.
     **/
    public static class OpBoolSResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSResult()
        {
        }

        public OpBoolSResult(boolean[] returnValue, boolean[] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public boolean[] returnValue;
        public boolean[] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.p3);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opShortIntLongS.
     **/
    public static class OpShortIntLongSResult
    {
        /**
         * Default constructor.
         **/
        public OpShortIntLongSResult()
        {
        }

        public OpShortIntLongSResult(long[] returnValue, short[] p4, int[] p5, long[] p6)
        {
            this.returnValue = returnValue;
            this.p4 = p4;
            this.p5 = p5;
            this.p6 = p6;
        }

        public long[] returnValue;
        public short[] p4;
        public int[] p5;
        public long[] p6;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.p4);
            ostr.writeIntSeq(this.p5);
            ostr.writeLongSeq(this.p6);
            ostr.writeLongSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p4 = istr.readShortSeq();
            this.p5 = istr.readIntSeq();
            this.p6 = istr.readLongSeq();
            returnValue = istr.readLongSeq();
        }
    }

    /**
     * Holds the result of operation opFloatDoubleS.
     **/
    public static class OpFloatDoubleSResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatDoubleSResult()
        {
        }

        public OpFloatDoubleSResult(double[] returnValue, float[] p3, double[] p4)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
            this.p4 = p4;
        }

        public double[] returnValue;
        public float[] p3;
        public double[] p4;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(this.p3);
            ostr.writeDoubleSeq(this.p4);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readFloatSeq();
            this.p4 = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opStringS.
     **/
    public static class OpStringSResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSResult()
        {
        }

        public OpStringSResult(String[] returnValue, String[] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public String[] returnValue;
        public String[] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.p3);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opByteSS.
     **/
    public static class OpByteSSResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSSResult()
        {
        }

        public OpByteSSResult(byte[][] returnValue, byte[][] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public byte[][] returnValue;
        public byte[][] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteSSHelper.write(ostr, this.p3);
            ByteSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ByteSSHelper.read(istr);
            returnValue = ByteSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolSS.
     **/
    public static class OpBoolSSResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSSResult()
        {
        }

        public OpBoolSSResult(boolean[][] returnValue, boolean[][] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public boolean[][] returnValue;
        public boolean[][] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolSSHelper.write(ostr, this.p3);
            BoolSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = BoolSSHelper.read(istr);
            returnValue = BoolSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortIntLongSS.
     **/
    public static class OpShortIntLongSSResult
    {
        /**
         * Default constructor.
         **/
        public OpShortIntLongSSResult()
        {
        }

        public OpShortIntLongSSResult(long[][] returnValue, short[][] p4, int[][] p5, long[][] p6)
        {
            this.returnValue = returnValue;
            this.p4 = p4;
            this.p5 = p5;
            this.p6 = p6;
        }

        public long[][] returnValue;
        public short[][] p4;
        public int[][] p5;
        public long[][] p6;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortSSHelper.write(ostr, this.p4);
            IntSSHelper.write(ostr, this.p5);
            LongSSHelper.write(ostr, this.p6);
            LongSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p4 = ShortSSHelper.read(istr);
            this.p5 = IntSSHelper.read(istr);
            this.p6 = LongSSHelper.read(istr);
            returnValue = LongSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opFloatDoubleSS.
     **/
    public static class OpFloatDoubleSSResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatDoubleSSResult()
        {
        }

        public OpFloatDoubleSSResult(double[][] returnValue, float[][] p3, double[][] p4)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
            this.p4 = p4;
        }

        public double[][] returnValue;
        public float[][] p3;
        public double[][] p4;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FloatSSHelper.write(ostr, this.p3);
            DoubleSSHelper.write(ostr, this.p4);
            DoubleSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = FloatSSHelper.read(istr);
            this.p4 = DoubleSSHelper.read(istr);
            returnValue = DoubleSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSS.
     **/
    public static class OpStringSSResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSSResult()
        {
        }

        public OpStringSSResult(String[][] returnValue, String[][] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public String[][] returnValue;
        public String[][] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSSHelper.write(ostr, this.p3);
            StringSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringSSHelper.read(istr);
            returnValue = StringSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringSSS.
     **/
    public static class OpStringSSSResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSSSResult()
        {
        }

        public OpStringSSSResult(String[][][] returnValue, String[][][] p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public String[][][] returnValue;
        public String[][][] p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringSSSHelper.write(ostr, this.p3);
            StringSSSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringSSSHelper.read(istr);
            returnValue = StringSSSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteBoolD.
     **/
    public static class OpByteBoolDResult
    {
        /**
         * Default constructor.
         **/
        public OpByteBoolDResult()
        {
        }

        public OpByteBoolDResult(java.util.Map<java.lang.Byte, java.lang.Boolean> returnValue, java.util.Map<java.lang.Byte, java.lang.Boolean> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Byte, java.lang.Boolean> returnValue;
        public java.util.Map<java.lang.Byte, java.lang.Boolean> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteBoolDHelper.write(ostr, this.p3);
            ByteBoolDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ByteBoolDHelper.read(istr);
            returnValue = ByteBoolDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortIntD.
     **/
    public static class OpShortIntDResult
    {
        /**
         * Default constructor.
         **/
        public OpShortIntDResult()
        {
        }

        public OpShortIntDResult(java.util.Map<java.lang.Short, java.lang.Integer> returnValue, java.util.Map<java.lang.Short, java.lang.Integer> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Short, java.lang.Integer> returnValue;
        public java.util.Map<java.lang.Short, java.lang.Integer> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortIntDHelper.write(ostr, this.p3);
            ShortIntDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ShortIntDHelper.read(istr);
            returnValue = ShortIntDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLongFloatD.
     **/
    public static class OpLongFloatDResult
    {
        /**
         * Default constructor.
         **/
        public OpLongFloatDResult()
        {
        }

        public OpLongFloatDResult(java.util.Map<java.lang.Long, java.lang.Float> returnValue, java.util.Map<java.lang.Long, java.lang.Float> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Long, java.lang.Float> returnValue;
        public java.util.Map<java.lang.Long, java.lang.Float> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongFloatDHelper.write(ostr, this.p3);
            LongFloatDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = LongFloatDHelper.read(istr);
            returnValue = LongFloatDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringStringD.
     **/
    public static class OpStringStringDResult
    {
        /**
         * Default constructor.
         **/
        public OpStringStringDResult()
        {
        }

        public OpStringStringDResult(java.util.Map<java.lang.String, java.lang.String> returnValue, java.util.Map<java.lang.String, java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.String, java.lang.String> returnValue;
        public java.util.Map<java.lang.String, java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringDHelper.write(ostr, this.p3);
            StringStringDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringStringDHelper.read(istr);
            returnValue = StringStringDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringMyEnumD.
     **/
    public static class OpStringMyEnumDResult
    {
        /**
         * Default constructor.
         **/
        public OpStringMyEnumDResult()
        {
        }

        public OpStringMyEnumDResult(java.util.Map<java.lang.String, MyEnum> returnValue, java.util.Map<java.lang.String, MyEnum> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.String, MyEnum> returnValue;
        public java.util.Map<java.lang.String, MyEnum> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringMyEnumDHelper.write(ostr, this.p3);
            StringMyEnumDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringMyEnumDHelper.read(istr);
            returnValue = StringMyEnumDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opMyEnumStringD.
     **/
    public static class OpMyEnumStringDResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumStringDResult()
        {
        }

        public OpMyEnumStringDResult(java.util.Map<MyEnum, java.lang.String> returnValue, java.util.Map<MyEnum, java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<MyEnum, java.lang.String> returnValue;
        public java.util.Map<MyEnum, java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnumStringDHelper.write(ostr, this.p3);
            MyEnumStringDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = MyEnumStringDHelper.read(istr);
            returnValue = MyEnumStringDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opMyStructMyEnumD.
     **/
    public static class OpMyStructMyEnumDResult
    {
        /**
         * Default constructor.
         **/
        public OpMyStructMyEnumDResult()
        {
        }

        public OpMyStructMyEnumDResult(java.util.Map<MyStruct, MyEnum> returnValue, java.util.Map<MyStruct, MyEnum> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<MyStruct, MyEnum> returnValue;
        public java.util.Map<MyStruct, MyEnum> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyStructMyEnumDHelper.write(ostr, this.p3);
            MyStructMyEnumDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = MyStructMyEnumDHelper.read(istr);
            returnValue = MyStructMyEnumDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteBoolDS.
     **/
    public static class OpByteBoolDSResult
    {
        /**
         * Default constructor.
         **/
        public OpByteBoolDSResult()
        {
        }

        public OpByteBoolDSResult(java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> returnValue, java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> returnValue;
        public java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteBoolDSHelper.write(ostr, this.p3);
            ByteBoolDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ByteBoolDSHelper.read(istr);
            returnValue = ByteBoolDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortIntDS.
     **/
    public static class OpShortIntDSResult
    {
        /**
         * Default constructor.
         **/
        public OpShortIntDSResult()
        {
        }

        public OpShortIntDSResult(java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> returnValue, java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> returnValue;
        public java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortIntDSHelper.write(ostr, this.p3);
            ShortIntDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ShortIntDSHelper.read(istr);
            returnValue = ShortIntDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLongFloatDS.
     **/
    public static class OpLongFloatDSResult
    {
        /**
         * Default constructor.
         **/
        public OpLongFloatDSResult()
        {
        }

        public OpLongFloatDSResult(java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> returnValue, java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> returnValue;
        public java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongFloatDSHelper.write(ostr, this.p3);
            LongFloatDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = LongFloatDSHelper.read(istr);
            returnValue = LongFloatDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringStringDS.
     **/
    public static class OpStringStringDSResult
    {
        /**
         * Default constructor.
         **/
        public OpStringStringDSResult()
        {
        }

        public OpStringStringDSResult(java.util.List<java.util.Map<java.lang.String, java.lang.String>> returnValue, java.util.List<java.util.Map<java.lang.String, java.lang.String>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<java.lang.String, java.lang.String>> returnValue;
        public java.util.List<java.util.Map<java.lang.String, java.lang.String>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringDSHelper.write(ostr, this.p3);
            StringStringDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringStringDSHelper.read(istr);
            returnValue = StringStringDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringMyEnumDS.
     **/
    public static class OpStringMyEnumDSResult
    {
        /**
         * Default constructor.
         **/
        public OpStringMyEnumDSResult()
        {
        }

        public OpStringMyEnumDSResult(java.util.List<java.util.Map<java.lang.String, MyEnum>> returnValue, java.util.List<java.util.Map<java.lang.String, MyEnum>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<java.lang.String, MyEnum>> returnValue;
        public java.util.List<java.util.Map<java.lang.String, MyEnum>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringMyEnumDSHelper.write(ostr, this.p3);
            StringMyEnumDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringMyEnumDSHelper.read(istr);
            returnValue = StringMyEnumDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opMyEnumStringDS.
     **/
    public static class OpMyEnumStringDSResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumStringDSResult()
        {
        }

        public OpMyEnumStringDSResult(java.util.List<java.util.Map<MyEnum, java.lang.String>> returnValue, java.util.List<java.util.Map<MyEnum, java.lang.String>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<MyEnum, java.lang.String>> returnValue;
        public java.util.List<java.util.Map<MyEnum, java.lang.String>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnumStringDSHelper.write(ostr, this.p3);
            MyEnumStringDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = MyEnumStringDSHelper.read(istr);
            returnValue = MyEnumStringDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opMyStructMyEnumDS.
     **/
    public static class OpMyStructMyEnumDSResult
    {
        /**
         * Default constructor.
         **/
        public OpMyStructMyEnumDSResult()
        {
        }

        public OpMyStructMyEnumDSResult(java.util.List<java.util.Map<MyStruct, MyEnum>> returnValue, java.util.List<java.util.Map<MyStruct, MyEnum>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.List<java.util.Map<MyStruct, MyEnum>> returnValue;
        public java.util.List<java.util.Map<MyStruct, MyEnum>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyStructMyEnumDSHelper.write(ostr, this.p3);
            MyStructMyEnumDSHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = MyStructMyEnumDSHelper.read(istr);
            returnValue = MyStructMyEnumDSHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteByteSD.
     **/
    public static class OpByteByteSDResult
    {
        /**
         * Default constructor.
         **/
        public OpByteByteSDResult()
        {
        }

        public OpByteByteSDResult(java.util.Map<java.lang.Byte, byte[]> returnValue, java.util.Map<java.lang.Byte, byte[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Byte, byte[]> returnValue;
        public java.util.Map<java.lang.Byte, byte[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ByteByteSDHelper.write(ostr, this.p3);
            ByteByteSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ByteByteSDHelper.read(istr);
            returnValue = ByteByteSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolBoolSD.
     **/
    public static class OpBoolBoolSDResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolBoolSDResult()
        {
        }

        public OpBoolBoolSDResult(java.util.Map<java.lang.Boolean, boolean[]> returnValue, java.util.Map<java.lang.Boolean, boolean[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Boolean, boolean[]> returnValue;
        public java.util.Map<java.lang.Boolean, boolean[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolBoolSDHelper.write(ostr, this.p3);
            BoolBoolSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = BoolBoolSDHelper.read(istr);
            returnValue = BoolBoolSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortShortSD.
     **/
    public static class OpShortShortSDResult
    {
        /**
         * Default constructor.
         **/
        public OpShortShortSDResult()
        {
        }

        public OpShortShortSDResult(java.util.Map<java.lang.Short, short[]> returnValue, java.util.Map<java.lang.Short, short[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Short, short[]> returnValue;
        public java.util.Map<java.lang.Short, short[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ShortShortSDHelper.write(ostr, this.p3);
            ShortShortSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = ShortShortSDHelper.read(istr);
            returnValue = ShortShortSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opIntIntSD.
     **/
    public static class OpIntIntSDResult
    {
        /**
         * Default constructor.
         **/
        public OpIntIntSDResult()
        {
        }

        public OpIntIntSDResult(java.util.Map<java.lang.Integer, int[]> returnValue, java.util.Map<java.lang.Integer, int[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Integer, int[]> returnValue;
        public java.util.Map<java.lang.Integer, int[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntIntSDHelper.write(ostr, this.p3);
            IntIntSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = IntIntSDHelper.read(istr);
            returnValue = IntIntSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opLongLongSD.
     **/
    public static class OpLongLongSDResult
    {
        /**
         * Default constructor.
         **/
        public OpLongLongSDResult()
        {
        }

        public OpLongLongSDResult(java.util.Map<java.lang.Long, long[]> returnValue, java.util.Map<java.lang.Long, long[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.Long, long[]> returnValue;
        public java.util.Map<java.lang.Long, long[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LongLongSDHelper.write(ostr, this.p3);
            LongLongSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = LongLongSDHelper.read(istr);
            returnValue = LongLongSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringFloatSD.
     **/
    public static class OpStringFloatSDResult
    {
        /**
         * Default constructor.
         **/
        public OpStringFloatSDResult()
        {
        }

        public OpStringFloatSDResult(java.util.Map<java.lang.String, float[]> returnValue, java.util.Map<java.lang.String, float[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.String, float[]> returnValue;
        public java.util.Map<java.lang.String, float[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringFloatSDHelper.write(ostr, this.p3);
            StringFloatSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringFloatSDHelper.read(istr);
            returnValue = StringFloatSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringDoubleSD.
     **/
    public static class OpStringDoubleSDResult
    {
        /**
         * Default constructor.
         **/
        public OpStringDoubleSDResult()
        {
        }

        public OpStringDoubleSDResult(java.util.Map<java.lang.String, double[]> returnValue, java.util.Map<java.lang.String, double[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.String, double[]> returnValue;
        public java.util.Map<java.lang.String, double[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringDoubleSDHelper.write(ostr, this.p3);
            StringDoubleSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringDoubleSDHelper.read(istr);
            returnValue = StringDoubleSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringStringSD.
     **/
    public static class OpStringStringSDResult
    {
        /**
         * Default constructor.
         **/
        public OpStringStringSDResult()
        {
        }

        public OpStringStringSDResult(java.util.Map<java.lang.String, String[]> returnValue, java.util.Map<java.lang.String, String[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<java.lang.String, String[]> returnValue;
        public java.util.Map<java.lang.String, String[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringSDHelper.write(ostr, this.p3);
            StringStringSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = StringStringSDHelper.read(istr);
            returnValue = StringStringSDHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opMyEnumMyEnumSD.
     **/
    public static class OpMyEnumMyEnumSDResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumMyEnumSDResult()
        {
        }

        public OpMyEnumMyEnumSDResult(java.util.Map<MyEnum, MyEnum[]> returnValue, java.util.Map<MyEnum, MyEnum[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public java.util.Map<MyEnum, MyEnum[]> returnValue;
        public java.util.Map<MyEnum, MyEnum[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnumMyEnumSDHelper.write(ostr, this.p3);
            MyEnumMyEnumSDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = MyEnumMyEnumSDHelper.read(istr);
            returnValue = MyEnumMyEnumSDHelper.read(istr);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct1.
     **/
    public static class OpMStruct1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct1MarshaledResult(Structure returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            Structure.ice_write(_ostr, returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMStruct2.
     **/
    public static class OpMStruct2Result
    {
        /**
         * Default constructor.
         **/
        public OpMStruct2Result()
        {
        }

        public OpMStruct2Result(Structure returnValue, Structure p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public Structure returnValue;
        public Structure p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            Structure.ice_write(ostr, this.p2);
            Structure.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p2 = Structure.ice_read(istr);
            returnValue = Structure.ice_read(istr);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct2.
     **/
    public static class OpMStruct2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct2MarshaledResult(Structure returnValue, Structure p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            Structure.ice_write(_ostr, p2);
            Structure.ice_write(_ostr, returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMSeq1.
     **/
    public static class OpMSeq1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq1MarshaledResult(String[] returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMSeq2.
     **/
    public static class OpMSeq2Result
    {
        /**
         * Default constructor.
         **/
        public OpMSeq2Result()
        {
        }

        public OpMSeq2Result(String[] returnValue, String[] p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public String[] returnValue;
        public String[] p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.p2);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p2 = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the marshaled result of operation opMSeq2.
     **/
    public static class OpMSeq2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq2MarshaledResult(String[] returnValue, String[] p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(p2);
            _ostr.writeStringSeq(returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMDict1.
     **/
    public static class OpMDict1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict1MarshaledResult(java.util.Map<java.lang.String, java.lang.String> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            StringStringDHelper.write(_ostr, returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMDict2.
     **/
    public static class OpMDict2Result
    {
        /**
         * Default constructor.
         **/
        public OpMDict2Result()
        {
        }

        public OpMDict2Result(java.util.Map<java.lang.String, java.lang.String> returnValue, java.util.Map<java.lang.String, java.lang.String> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public java.util.Map<java.lang.String, java.lang.String> returnValue;
        public java.util.Map<java.lang.String, java.lang.String> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringDHelper.write(ostr, this.p2);
            StringStringDHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p2 = StringStringDHelper.read(istr);
            returnValue = StringStringDHelper.read(istr);
        }
    }

    /**
     * Holds the marshaled result of operation opMDict2.
     **/
    public static class OpMDict2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict2MarshaledResult(java.util.Map<java.lang.String, java.lang.String> returnValue, java.util.Map<java.lang.String, java.lang.String> p2, com.zeroc.Ice.Current current)
        {
            _ostr = com.zeroc.IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, null);
            StringStringDHelper.write(_ostr, p2);
            StringStringDHelper.write(_ostr, returnValue);
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> opVoidAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteResult> opByteAsync(byte p1, byte p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpBoolResult> opBoolAsync(boolean p1, boolean p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringResult> opStringAsync(String p1, String p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyEnumResult> opMyEnumAsync(MyEnum p1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyClassResult> opMyClassAsync(MyClassPrx p1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStructResult> opStructAsync(Structure p1, Structure p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpBoolSResult> opBoolSAsync(boolean[] p1, boolean[] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringSResult> opStringSAsync(String[] p1, String[] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpBoolSSResult> opBoolSSAsync(boolean[][] p1, boolean[][] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringSSResult> opStringSSAsync(String[][] p1, String[][] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringSSSResult> opStringSSSAsync(String[][][] p1, String[][][] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteBoolDResult> opByteBoolDAsync(java.util.Map<java.lang.Byte, java.lang.Boolean> p1, java.util.Map<java.lang.Byte, java.lang.Boolean> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortIntDResult> opShortIntDAsync(java.util.Map<java.lang.Short, java.lang.Integer> p1, java.util.Map<java.lang.Short, java.lang.Integer> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLongFloatDResult> opLongFloatDAsync(java.util.Map<java.lang.Long, java.lang.Float> p1, java.util.Map<java.lang.Long, java.lang.Float> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringStringDResult> opStringStringDAsync(java.util.Map<java.lang.String, java.lang.String> p1, java.util.Map<java.lang.String, java.lang.String> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringMyEnumDResult> opStringMyEnumDAsync(java.util.Map<java.lang.String, MyEnum> p1, java.util.Map<java.lang.String, MyEnum> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyEnumStringDResult> opMyEnumStringDAsync(java.util.Map<MyEnum, java.lang.String> p1, java.util.Map<MyEnum, java.lang.String> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyStructMyEnumDResult> opMyStructMyEnumDAsync(java.util.Map<MyStruct, MyEnum> p1, java.util.Map<MyStruct, MyEnum> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteBoolDSResult> opByteBoolDSAsync(java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> p1, java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortIntDSResult> opShortIntDSAsync(java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> p1, java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLongFloatDSResult> opLongFloatDSAsync(java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> p1, java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringStringDSResult> opStringStringDSAsync(java.util.List<java.util.Map<java.lang.String, java.lang.String>> p1, java.util.List<java.util.Map<java.lang.String, java.lang.String>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringMyEnumDSResult> opStringMyEnumDSAsync(java.util.List<java.util.Map<java.lang.String, MyEnum>> p1, java.util.List<java.util.Map<java.lang.String, MyEnum>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyEnumStringDSResult> opMyEnumStringDSAsync(java.util.List<java.util.Map<MyEnum, java.lang.String>> p1, java.util.List<java.util.Map<MyEnum, java.lang.String>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyStructMyEnumDSResult> opMyStructMyEnumDSAsync(java.util.List<java.util.Map<MyStruct, MyEnum>> p1, java.util.List<java.util.Map<MyStruct, MyEnum>> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpByteByteSDResult> opByteByteSDAsync(java.util.Map<java.lang.Byte, byte[]> p1, java.util.Map<java.lang.Byte, byte[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpBoolBoolSDResult> opBoolBoolSDAsync(java.util.Map<java.lang.Boolean, boolean[]> p1, java.util.Map<java.lang.Boolean, boolean[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpShortShortSDResult> opShortShortSDAsync(java.util.Map<java.lang.Short, short[]> p1, java.util.Map<java.lang.Short, short[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpIntIntSDResult> opIntIntSDAsync(java.util.Map<java.lang.Integer, int[]> p1, java.util.Map<java.lang.Integer, int[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpLongLongSDResult> opLongLongSDAsync(java.util.Map<java.lang.Long, long[]> p1, java.util.Map<java.lang.Long, long[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringFloatSDResult> opStringFloatSDAsync(java.util.Map<java.lang.String, float[]> p1, java.util.Map<java.lang.String, float[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringDoubleSDResult> opStringDoubleSDAsync(java.util.Map<java.lang.String, double[]> p1, java.util.Map<java.lang.String, double[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpStringStringSDResult> opStringStringSDAsync(java.util.Map<java.lang.String, String[]> p1, java.util.Map<java.lang.String, String[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(java.util.Map<MyEnum, MyEnum[]> p1, java.util.Map<MyEnum, MyEnum[]> p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<int[]> opIntSAsync(int[] s, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> opByteSOnewayAsync(byte[] s, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> opByteSOnewayCallCountAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.util.Map<java.lang.String, java.lang.String>> opContextAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> opDoubleMarshalingAsync(double p1, double[] p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> opIdempotentAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> opNonmutatingAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Byte> opByte1Async(byte opByte1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Short> opShort1Async(short opShort1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Integer> opInt1Async(int opInt1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Long> opLong1Async(long opLong1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Float> opFloat1Async(float opFloat1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Double> opDouble1Async(double opDouble1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.String> opString1Async(String opString1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<String[]> opStringS1Async(String[] opStringS1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.util.Map<java.lang.Byte, java.lang.Boolean>> opByteBoolD1Async(java.util.Map<java.lang.Byte, java.lang.Boolean> opByteBoolD1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<String[]> opStringS2Async(String[] stringS, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.util.Map<java.lang.Byte, java.lang.Boolean>> opByteBoolD2Async(java.util.Map<java.lang.Byte, java.lang.Boolean> byteBoolD, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<String[]> opStringLiteralsAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<String[]> opWStringLiteralsAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMStruct1MarshaledResult> opMStruct1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMStruct2MarshaledResult> opMStruct2Async(Structure p1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMSeq1MarshaledResult> opMSeq1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMSeq2MarshaledResult> opMSeq2Async(String[] p1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMDict1MarshaledResult> opMDict1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<MyClass.OpMDict2MarshaledResult> opMDict2Async(java.util.Map<java.lang.String, java.lang.String> p1, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::MyClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.shutdownAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opVoid(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opVoidAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByte(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte iceP_p1;
        byte iceP_p2;
        iceP_p1 = istr.readByte();
        iceP_p2 = istr.readByte();
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBool(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_p1;
        boolean iceP_p2;
        iceP_p1 = istr.readBool();
        iceP_p2 = istr.readBool();
        inS.endReadParams();
        return inS.setResultFuture(obj.opBoolAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortIntLong(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short iceP_p1;
        int iceP_p2;
        long iceP_p3;
        iceP_p1 = istr.readShort();
        iceP_p2 = istr.readInt();
        iceP_p3 = istr.readLong();
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortIntLongAsync(iceP_p1, iceP_p2, iceP_p3, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatDouble(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_p1;
        double iceP_p2;
        iceP_p1 = istr.readFloat();
        iceP_p2 = istr.readDouble();
        inS.endReadParams();
        return inS.setResultFuture(obj.opFloatDoubleAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opString(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_p1;
        String iceP_p2;
        iceP_p1 = istr.readString();
        iceP_p2 = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnum(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MyEnum iceP_p1;
        iceP_p1 = MyEnum.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyEnumAsync(iceP_p1, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyClass(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        MyClassPrx iceP_p1;
        iceP_p1 = MyClassPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyClassAsync(iceP_p1, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStruct(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Structure iceP_p1;
        Structure iceP_p2;
        iceP_p1 = Structure.ice_read(istr);
        iceP_p2 = Structure.ice_read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStructAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_p1;
        byte[] iceP_p2;
        iceP_p1 = istr.readByteSeq();
        iceP_p2 = istr.readByteSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_p1;
        boolean[] iceP_p2;
        iceP_p1 = istr.readBoolSeq();
        iceP_p2 = istr.readBoolSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opBoolSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortIntLongS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_p1;
        int[] iceP_p2;
        long[] iceP_p3;
        iceP_p1 = istr.readShortSeq();
        iceP_p2 = istr.readIntSeq();
        iceP_p3 = istr.readLongSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortIntLongSAsync(iceP_p1, iceP_p2, iceP_p3, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatDoubleS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_p1;
        double[] iceP_p2;
        iceP_p1 = istr.readFloatSeq();
        iceP_p2 = istr.readDoubleSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opFloatDoubleSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_p1;
        String[] iceP_p2;
        iceP_p1 = istr.readStringSeq();
        iceP_p2 = istr.readStringSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[][] iceP_p1;
        byte[][] iceP_p2;
        iceP_p1 = ByteSSHelper.read(istr);
        iceP_p2 = ByteSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteSSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[][] iceP_p1;
        boolean[][] iceP_p2;
        iceP_p1 = BoolSSHelper.read(istr);
        iceP_p2 = BoolSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opBoolSSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortIntLongSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[][] iceP_p1;
        int[][] iceP_p2;
        long[][] iceP_p3;
        iceP_p1 = ShortSSHelper.read(istr);
        iceP_p2 = IntSSHelper.read(istr);
        iceP_p3 = LongSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortIntLongSSAsync(iceP_p1, iceP_p2, iceP_p3, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloatDoubleSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[][] iceP_p1;
        double[][] iceP_p2;
        iceP_p1 = FloatSSHelper.read(istr);
        iceP_p2 = DoubleSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opFloatDoubleSSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[][] iceP_p1;
        String[][] iceP_p2;
        iceP_p1 = StringSSHelper.read(istr);
        iceP_p2 = StringSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringSSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSSS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[][][] iceP_p1;
        String[][][] iceP_p2;
        iceP_p1 = StringSSSHelper.read(istr);
        iceP_p2 = StringSSSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringSSSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteBoolD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Byte, java.lang.Boolean> iceP_p1;
        java.util.Map<java.lang.Byte, java.lang.Boolean> iceP_p2;
        iceP_p1 = ByteBoolDHelper.read(istr);
        iceP_p2 = ByteBoolDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteBoolDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortIntD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Short, java.lang.Integer> iceP_p1;
        java.util.Map<java.lang.Short, java.lang.Integer> iceP_p2;
        iceP_p1 = ShortIntDHelper.read(istr);
        iceP_p2 = ShortIntDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortIntDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongFloatD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Long, java.lang.Float> iceP_p1;
        java.util.Map<java.lang.Long, java.lang.Float> iceP_p2;
        iceP_p1 = LongFloatDHelper.read(istr);
        iceP_p2 = LongFloatDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opLongFloatDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringStringD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> iceP_p1;
        java.util.Map<java.lang.String, java.lang.String> iceP_p2;
        iceP_p1 = StringStringDHelper.read(istr);
        iceP_p2 = StringStringDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringStringDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringMyEnumD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, MyEnum> iceP_p1;
        java.util.Map<java.lang.String, MyEnum> iceP_p2;
        iceP_p1 = StringMyEnumDHelper.read(istr);
        iceP_p2 = StringMyEnumDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringMyEnumDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnumStringD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<MyEnum, java.lang.String> iceP_p1;
        java.util.Map<MyEnum, java.lang.String> iceP_p2;
        iceP_p1 = MyEnumStringDHelper.read(istr);
        iceP_p2 = MyEnumStringDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyEnumStringDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyStructMyEnumD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<MyStruct, MyEnum> iceP_p1;
        java.util.Map<MyStruct, MyEnum> iceP_p2;
        iceP_p1 = MyStructMyEnumDHelper.read(istr);
        iceP_p2 = MyStructMyEnumDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyStructMyEnumDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteBoolDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> iceP_p1;
        java.util.List<java.util.Map<java.lang.Byte, java.lang.Boolean>> iceP_p2;
        iceP_p1 = ByteBoolDSHelper.read(istr);
        iceP_p2 = ByteBoolDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteBoolDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortIntDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> iceP_p1;
        java.util.List<java.util.Map<java.lang.Short, java.lang.Integer>> iceP_p2;
        iceP_p1 = ShortIntDSHelper.read(istr);
        iceP_p2 = ShortIntDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortIntDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongFloatDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> iceP_p1;
        java.util.List<java.util.Map<java.lang.Long, java.lang.Float>> iceP_p2;
        iceP_p1 = LongFloatDSHelper.read(istr);
        iceP_p2 = LongFloatDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opLongFloatDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringStringDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.String, java.lang.String>> iceP_p1;
        java.util.List<java.util.Map<java.lang.String, java.lang.String>> iceP_p2;
        iceP_p1 = StringStringDSHelper.read(istr);
        iceP_p2 = StringStringDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringStringDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringMyEnumDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<java.lang.String, MyEnum>> iceP_p1;
        java.util.List<java.util.Map<java.lang.String, MyEnum>> iceP_p2;
        iceP_p1 = StringMyEnumDSHelper.read(istr);
        iceP_p2 = StringMyEnumDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringMyEnumDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnumStringDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<MyEnum, java.lang.String>> iceP_p1;
        java.util.List<java.util.Map<MyEnum, java.lang.String>> iceP_p2;
        iceP_p1 = MyEnumStringDSHelper.read(istr);
        iceP_p2 = MyEnumStringDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyEnumStringDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyStructMyEnumDS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<java.util.Map<MyStruct, MyEnum>> iceP_p1;
        java.util.List<java.util.Map<MyStruct, MyEnum>> iceP_p2;
        iceP_p1 = MyStructMyEnumDSHelper.read(istr);
        iceP_p2 = MyStructMyEnumDSHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyStructMyEnumDSAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteByteSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Byte, byte[]> iceP_p1;
        java.util.Map<java.lang.Byte, byte[]> iceP_p2;
        iceP_p1 = ByteByteSDHelper.read(istr);
        iceP_p2 = ByteByteSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteByteSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opBoolBoolSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Boolean, boolean[]> iceP_p1;
        java.util.Map<java.lang.Boolean, boolean[]> iceP_p2;
        iceP_p1 = BoolBoolSDHelper.read(istr);
        iceP_p2 = BoolBoolSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opBoolBoolSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortShortSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Short, short[]> iceP_p1;
        java.util.Map<java.lang.Short, short[]> iceP_p2;
        iceP_p1 = ShortShortSDHelper.read(istr);
        iceP_p2 = ShortShortSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opShortShortSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntIntSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Integer, int[]> iceP_p1;
        java.util.Map<java.lang.Integer, int[]> iceP_p2;
        iceP_p1 = IntIntSDHelper.read(istr);
        iceP_p2 = IntIntSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opIntIntSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLongLongSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Long, long[]> iceP_p1;
        java.util.Map<java.lang.Long, long[]> iceP_p2;
        iceP_p1 = LongLongSDHelper.read(istr);
        iceP_p2 = LongLongSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opLongLongSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringFloatSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, float[]> iceP_p1;
        java.util.Map<java.lang.String, float[]> iceP_p2;
        iceP_p1 = StringFloatSDHelper.read(istr);
        iceP_p2 = StringFloatSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringFloatSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringDoubleSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, double[]> iceP_p1;
        java.util.Map<java.lang.String, double[]> iceP_p2;
        iceP_p1 = StringDoubleSDHelper.read(istr);
        iceP_p2 = StringDoubleSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringDoubleSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringStringSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, String[]> iceP_p1;
        java.util.Map<java.lang.String, String[]> iceP_p2;
        iceP_p1 = StringStringSDHelper.read(istr);
        iceP_p2 = StringStringSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringStringSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMyEnumMyEnumSD(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<MyEnum, MyEnum[]> iceP_p1;
        java.util.Map<MyEnum, MyEnum[]> iceP_p2;
        iceP_p1 = MyEnumMyEnumSDHelper.read(istr);
        iceP_p2 = MyEnumMyEnumSDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opMyEnumMyEnumSDAsync(iceP_p1, iceP_p2, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIntS(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_s;
        iceP_s = istr.readIntSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opIntSAsync(iceP_s, current), (ostr, ret) ->
            {
                ostr.writeIntSeq(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSOneway(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_s;
        iceP_s = istr.readByteSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteSOnewayAsync(iceP_s, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSOnewayCallCount(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opByteSOnewayCallCountAsync(current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opContext(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opContextAsync(current), (ostr, ret) ->
            {
                com.zeroc.Ice.ContextHelper.write(ostr, ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDoubleMarshaling(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_p1;
        double[] iceP_p2;
        iceP_p1 = istr.readDouble();
        iceP_p2 = istr.readDoubleSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opDoubleMarshalingAsync(iceP_p1, iceP_p2, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opIdempotent(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opIdempotentAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opNonmutating(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opNonmutatingAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByte1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte iceP_opByte1;
        iceP_opByte1 = istr.readByte();
        inS.endReadParams();
        return inS.setResultFuture(obj.opByte1Async(iceP_opByte1, current), (ostr, ret) ->
            {
                ostr.writeByte(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShort1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short iceP_opShort1;
        iceP_opShort1 = istr.readShort();
        inS.endReadParams();
        return inS.setResultFuture(obj.opShort1Async(iceP_opShort1, current), (ostr, ret) ->
            {
                ostr.writeShort(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opInt1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_opInt1;
        iceP_opInt1 = istr.readInt();
        inS.endReadParams();
        return inS.setResultFuture(obj.opInt1Async(iceP_opInt1, current), (ostr, ret) ->
            {
                ostr.writeInt(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opLong1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long iceP_opLong1;
        iceP_opLong1 = istr.readLong();
        inS.endReadParams();
        return inS.setResultFuture(obj.opLong1Async(iceP_opLong1, current), (ostr, ret) ->
            {
                ostr.writeLong(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opFloat1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_opFloat1;
        iceP_opFloat1 = istr.readFloat();
        inS.endReadParams();
        return inS.setResultFuture(obj.opFloat1Async(iceP_opFloat1, current), (ostr, ret) ->
            {
                ostr.writeFloat(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opDouble1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_opDouble1;
        iceP_opDouble1 = istr.readDouble();
        inS.endReadParams();
        return inS.setResultFuture(obj.opDouble1Async(iceP_opDouble1, current), (ostr, ret) ->
            {
                ostr.writeDouble(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opString1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_opString1;
        iceP_opString1 = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.opString1Async(iceP_opString1, current), (ostr, ret) ->
            {
                ostr.writeString(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringS1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_opStringS1;
        iceP_opStringS1 = istr.readStringSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringS1Async(iceP_opStringS1, current), (ostr, ret) ->
            {
                ostr.writeStringSeq(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteBoolD1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Byte, java.lang.Boolean> iceP_opByteBoolD1;
        iceP_opByteBoolD1 = ByteBoolDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteBoolD1Async(iceP_opByteBoolD1, current), (ostr, ret) ->
            {
                ByteBoolDHelper.write(ostr, ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringS2(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_stringS;
        iceP_stringS = istr.readStringSeq();
        inS.endReadParams();
        return inS.setResultFuture(obj.opStringS2Async(iceP_stringS, current), (ostr, ret) ->
            {
                ostr.writeStringSeq(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteBoolD2(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.Byte, java.lang.Boolean> iceP_byteBoolD;
        iceP_byteBoolD = ByteBoolDHelper.read(istr);
        inS.endReadParams();
        return inS.setResultFuture(obj.opByteBoolD2Async(iceP_byteBoolD, current), (ostr, ret) ->
            {
                ByteBoolDHelper.write(ostr, ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringLiterals(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opStringLiteralsAsync(current), (ostr, ret) ->
            {
                ostr.writeStringSeq(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opWStringLiterals(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.opWStringLiteralsAsync(current), (ostr, ret) ->
            {
                ostr.writeStringSeq(ret);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMStruct1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setMarshaledResultFuture(obj.opMStruct1Async(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMStruct2(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Structure iceP_p1;
        iceP_p1 = Structure.ice_read(istr);
        inS.endReadParams();
        return inS.setMarshaledResultFuture(obj.opMStruct2Async(iceP_p1, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMSeq1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setMarshaledResultFuture(obj.opMSeq1Async(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMSeq2(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_p1;
        iceP_p1 = istr.readStringSeq();
        inS.endReadParams();
        return inS.setMarshaledResultFuture(obj.opMSeq2Async(iceP_p1, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMDict1(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setMarshaledResultFuture(obj.opMDict1Async(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opMDict2(MyClass obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> iceP_p1;
        iceP_p1 = StringStringDHelper.read(istr);
        inS.endReadParams();
        return inS.setMarshaledResultFuture(obj.opMDict2Async(iceP_p1, current));
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opBool",
        "opBoolBoolSD",
        "opBoolS",
        "opBoolSS",
        "opByte",
        "opByte1",
        "opByteBoolD",
        "opByteBoolD1",
        "opByteBoolD2",
        "opByteBoolDS",
        "opByteByteSD",
        "opByteS",
        "opByteSOneway",
        "opByteSOnewayCallCount",
        "opByteSS",
        "opContext",
        "opDouble1",
        "opDoubleMarshaling",
        "opFloat1",
        "opFloatDouble",
        "opFloatDoubleS",
        "opFloatDoubleSS",
        "opIdempotent",
        "opInt1",
        "opIntIntSD",
        "opIntS",
        "opLong1",
        "opLongFloatD",
        "opLongFloatDS",
        "opLongLongSD",
        "opMDict1",
        "opMDict2",
        "opMSeq1",
        "opMSeq2",
        "opMStruct1",
        "opMStruct2",
        "opMyClass",
        "opMyEnum",
        "opMyEnumMyEnumSD",
        "opMyEnumStringD",
        "opMyEnumStringDS",
        "opMyStructMyEnumD",
        "opMyStructMyEnumDS",
        "opNonmutating",
        "opShort1",
        "opShortIntD",
        "opShortIntDS",
        "opShortIntLong",
        "opShortIntLongS",
        "opShortIntLongSS",
        "opShortShortSD",
        "opString",
        "opString1",
        "opStringDoubleSD",
        "opStringFloatSD",
        "opStringLiterals",
        "opStringMyEnumD",
        "opStringMyEnumDS",
        "opStringS",
        "opStringS1",
        "opStringS2",
        "opStringSS",
        "opStringSSS",
        "opStringStringD",
        "opStringStringDS",
        "opStringStringSD",
        "opStruct",
        "opVoid",
        "opWStringLiterals",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opBool(this, in, current);
            }
            case 5:
            {
                return _iceD_opBoolBoolSD(this, in, current);
            }
            case 6:
            {
                return _iceD_opBoolS(this, in, current);
            }
            case 7:
            {
                return _iceD_opBoolSS(this, in, current);
            }
            case 8:
            {
                return _iceD_opByte(this, in, current);
            }
            case 9:
            {
                return _iceD_opByte1(this, in, current);
            }
            case 10:
            {
                return _iceD_opByteBoolD(this, in, current);
            }
            case 11:
            {
                return _iceD_opByteBoolD1(this, in, current);
            }
            case 12:
            {
                return _iceD_opByteBoolD2(this, in, current);
            }
            case 13:
            {
                return _iceD_opByteBoolDS(this, in, current);
            }
            case 14:
            {
                return _iceD_opByteByteSD(this, in, current);
            }
            case 15:
            {
                return _iceD_opByteS(this, in, current);
            }
            case 16:
            {
                return _iceD_opByteSOneway(this, in, current);
            }
            case 17:
            {
                return _iceD_opByteSOnewayCallCount(this, in, current);
            }
            case 18:
            {
                return _iceD_opByteSS(this, in, current);
            }
            case 19:
            {
                return _iceD_opContext(this, in, current);
            }
            case 20:
            {
                return _iceD_opDouble1(this, in, current);
            }
            case 21:
            {
                return _iceD_opDoubleMarshaling(this, in, current);
            }
            case 22:
            {
                return _iceD_opFloat1(this, in, current);
            }
            case 23:
            {
                return _iceD_opFloatDouble(this, in, current);
            }
            case 24:
            {
                return _iceD_opFloatDoubleS(this, in, current);
            }
            case 25:
            {
                return _iceD_opFloatDoubleSS(this, in, current);
            }
            case 26:
            {
                return _iceD_opIdempotent(this, in, current);
            }
            case 27:
            {
                return _iceD_opInt1(this, in, current);
            }
            case 28:
            {
                return _iceD_opIntIntSD(this, in, current);
            }
            case 29:
            {
                return _iceD_opIntS(this, in, current);
            }
            case 30:
            {
                return _iceD_opLong1(this, in, current);
            }
            case 31:
            {
                return _iceD_opLongFloatD(this, in, current);
            }
            case 32:
            {
                return _iceD_opLongFloatDS(this, in, current);
            }
            case 33:
            {
                return _iceD_opLongLongSD(this, in, current);
            }
            case 34:
            {
                return _iceD_opMDict1(this, in, current);
            }
            case 35:
            {
                return _iceD_opMDict2(this, in, current);
            }
            case 36:
            {
                return _iceD_opMSeq1(this, in, current);
            }
            case 37:
            {
                return _iceD_opMSeq2(this, in, current);
            }
            case 38:
            {
                return _iceD_opMStruct1(this, in, current);
            }
            case 39:
            {
                return _iceD_opMStruct2(this, in, current);
            }
            case 40:
            {
                return _iceD_opMyClass(this, in, current);
            }
            case 41:
            {
                return _iceD_opMyEnum(this, in, current);
            }
            case 42:
            {
                return _iceD_opMyEnumMyEnumSD(this, in, current);
            }
            case 43:
            {
                return _iceD_opMyEnumStringD(this, in, current);
            }
            case 44:
            {
                return _iceD_opMyEnumStringDS(this, in, current);
            }
            case 45:
            {
                return _iceD_opMyStructMyEnumD(this, in, current);
            }
            case 46:
            {
                return _iceD_opMyStructMyEnumDS(this, in, current);
            }
            case 47:
            {
                return _iceD_opNonmutating(this, in, current);
            }
            case 48:
            {
                return _iceD_opShort1(this, in, current);
            }
            case 49:
            {
                return _iceD_opShortIntD(this, in, current);
            }
            case 50:
            {
                return _iceD_opShortIntDS(this, in, current);
            }
            case 51:
            {
                return _iceD_opShortIntLong(this, in, current);
            }
            case 52:
            {
                return _iceD_opShortIntLongS(this, in, current);
            }
            case 53:
            {
                return _iceD_opShortIntLongSS(this, in, current);
            }
            case 54:
            {
                return _iceD_opShortShortSD(this, in, current);
            }
            case 55:
            {
                return _iceD_opString(this, in, current);
            }
            case 56:
            {
                return _iceD_opString1(this, in, current);
            }
            case 57:
            {
                return _iceD_opStringDoubleSD(this, in, current);
            }
            case 58:
            {
                return _iceD_opStringFloatSD(this, in, current);
            }
            case 59:
            {
                return _iceD_opStringLiterals(this, in, current);
            }
            case 60:
            {
                return _iceD_opStringMyEnumD(this, in, current);
            }
            case 61:
            {
                return _iceD_opStringMyEnumDS(this, in, current);
            }
            case 62:
            {
                return _iceD_opStringS(this, in, current);
            }
            case 63:
            {
                return _iceD_opStringS1(this, in, current);
            }
            case 64:
            {
                return _iceD_opStringS2(this, in, current);
            }
            case 65:
            {
                return _iceD_opStringSS(this, in, current);
            }
            case 66:
            {
                return _iceD_opStringSSS(this, in, current);
            }
            case 67:
            {
                return _iceD_opStringStringD(this, in, current);
            }
            case 68:
            {
                return _iceD_opStringStringDS(this, in, current);
            }
            case 69:
            {
                return _iceD_opStringStringSD(this, in, current);
            }
            case 70:
            {
                return _iceD_opStruct(this, in, current);
            }
            case 71:
            {
                return _iceD_opVoid(this, in, current);
            }
            case 72:
            {
                return _iceD_opWStringLiterals(this, in, current);
            }
            case 73:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
