//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface MyClassPrx extends com.zeroc.Ice.ObjectPrx
{
    default void callCallback()
    {
        callCallback(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void callCallback(java.util.Map<String, String> context)
    {
        _iceI_callCallbackAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> callCallbackAsync()
    {
        return _iceI_callCallbackAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> callCallbackAsync(java.util.Map<String, String> context)
    {
        return _iceI_callCallbackAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_callCallbackAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "callCallback", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default int getCallbackCount()
    {
        return getCallbackCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getCallbackCount(java.util.Map<String, String> context)
    {
        return _iceI_getCallbackCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getCallbackCountAsync()
    {
        return _iceI_getCallbackCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getCallbackCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCallbackCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getCallbackCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getCallbackCount", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default void incCounter(int expected)
    {
        incCounter(expected, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void incCounter(int expected, java.util.Map<String, String> context)
    {
        _iceI_incCounterAsync(expected, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> incCounterAsync(int expected)
    {
        return _iceI_incCounterAsync(expected, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> incCounterAsync(int expected, java.util.Map<String, String> context)
    {
        return _iceI_incCounterAsync(expected, context, false);
    }

    /**
     * @hidden
     * @param iceP_expected -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_incCounterAsync(int iceP_expected, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "incCounter", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_expected);
                 }, null);
        return f;
    }

    default void waitCounter(int value)
    {
        waitCounter(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void waitCounter(int value, java.util.Map<String, String> context)
    {
        _iceI_waitCounterAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> waitCounterAsync(int value)
    {
        return _iceI_waitCounterAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> waitCounterAsync(int value, java.util.Map<String, String> context)
    {
        return _iceI_waitCounterAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_waitCounterAsync(int iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "waitCounter", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeInt(iceP_value);
                 }, null);
        return f;
    }

    default int getConnectionCount()
    {
        return getConnectionCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getConnectionCount(java.util.Map<String, String> context)
    {
        return _iceI_getConnectionCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getConnectionCountAsync()
    {
        return _iceI_getConnectionCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getConnectionCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getConnectionCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getConnectionCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getConnectionCount", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default String getConnectionInfo()
    {
        return getConnectionInfo(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getConnectionInfo(java.util.Map<String, String> context)
    {
        return _iceI_getConnectionInfoAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getConnectionInfoAsync()
    {
        return _iceI_getConnectionInfoAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getConnectionInfoAsync(java.util.Map<String, String> context)
    {
        return _iceI_getConnectionInfoAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_getConnectionInfoAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getConnectionInfo", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default void closeConnection(boolean force)
    {
        closeConnection(force, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void closeConnection(boolean force, java.util.Map<String, String> context)
    {
        _iceI_closeConnectionAsync(force, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> closeConnectionAsync(boolean force)
    {
        return _iceI_closeConnectionAsync(force, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> closeConnectionAsync(boolean force, java.util.Map<String, String> context)
    {
        return _iceI_closeConnectionAsync(force, context, false);
    }

    /**
     * @hidden
     * @param iceP_force -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_closeConnectionAsync(boolean iceP_force, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "closeConnection", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeBool(iceP_force);
                 }, null);
        return f;
    }

    default void datagram()
    {
        datagram(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void datagram(java.util.Map<String, String> context)
    {
        _iceI_datagramAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> datagramAsync()
    {
        return _iceI_datagramAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> datagramAsync(java.util.Map<String, String> context)
    {
        return _iceI_datagramAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_datagramAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "datagram", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default int getDatagramCount()
    {
        return getDatagramCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getDatagramCount(java.util.Map<String, String> context)
    {
        return _iceI_getDatagramCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getDatagramCountAsync()
    {
        return _iceI_getDatagramCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getDatagramCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getDatagramCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getDatagramCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getDatagramCount", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default void callDatagramCallback()
    {
        callDatagramCallback(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void callDatagramCallback(java.util.Map<String, String> context)
    {
        _iceI_callDatagramCallbackAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> callDatagramCallbackAsync()
    {
        return _iceI_callDatagramCallbackAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> callDatagramCallbackAsync(java.util.Map<String, String> context)
    {
        return _iceI_callDatagramCallbackAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_callDatagramCallbackAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "callDatagramCallback", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default int getCallbackDatagramCount()
    {
        return getCallbackDatagramCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getCallbackDatagramCount(java.util.Map<String, String> context)
    {
        return _iceI_getCallbackDatagramCountAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getCallbackDatagramCountAsync()
    {
        return _iceI_getCallbackDatagramCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getCallbackDatagramCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getCallbackDatagramCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getCallbackDatagramCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getCallbackDatagramCount", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link MyClassPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static MyClassPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _MyClassPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _MyClassPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static MyClassPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static MyClassPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _MyClassPrxI(obj.ice_facet(facet));
    }

    @Override
    MyClassPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    MyClassPrx ice_adapterId(String newAdapterId);

    @Override
    MyClassPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    MyClassPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    MyClassPrx ice_invocationTimeout(int newTimeout);

    @Override
    MyClassPrx ice_connectionCached(boolean newCache);

    @Override
    MyClassPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    MyClassPrx ice_secure(boolean b);

    @Override
    MyClassPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    MyClassPrx ice_preferSecure(boolean b);

    @Override
    MyClassPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    MyClassPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    MyClassPrx ice_collocationOptimized(boolean b);

    @Override
    MyClassPrx ice_twoway();

    @Override
    MyClassPrx ice_oneway();

    @Override
    MyClassPrx ice_batchOneway();

    @Override
    MyClassPrx ice_datagram();

    @Override
    MyClassPrx ice_batchDatagram();

    @Override
    MyClassPrx ice_compress(boolean co);

    @Override
    MyClassPrx ice_connectionId(String connectionId);

    @Override
    MyClassPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::MyClass";
    }

    /**
     * @hidden
     **/
    @Override
    default MyClassPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _MyClassPrxI(ref);
    }
}
