//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Callback extends com.zeroc.Ice.Object
{
    java.util.concurrent.CompletionStage<Void> initiateCallbackAsync(CallbackReceiverPrx proxy, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> initiateCallbackExAsync(CallbackReceiverPrx proxy, com.zeroc.Ice.Current current)
        throws CallbackException;

    java.util.concurrent.CompletionStage<java.lang.Integer> initiateConcurrentCallbackAsync(int number, CallbackReceiverPrx proxy, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> initiateWaitCallbackAsync(CallbackReceiverPrx proxy, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> initiateCallbackWithPayloadAsync(CallbackReceiverPrx proxy, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Callback"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Callback";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateCallback(Callback obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CallbackReceiverPrx iceP_proxy;
        iceP_proxy = CallbackReceiverPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.initiateCallbackAsync(iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateCallbackEx(Callback obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CallbackReceiverPrx iceP_proxy;
        iceP_proxy = CallbackReceiverPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.initiateCallbackExAsync(iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateConcurrentCallback(Callback obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_number;
        CallbackReceiverPrx iceP_proxy;
        iceP_number = istr.readInt();
        iceP_proxy = CallbackReceiverPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.initiateConcurrentCallbackAsync(iceP_number, iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeInt(value);
            },
            com.zeroc.Ice.FormatType.DefaultFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateWaitCallback(Callback obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CallbackReceiverPrx iceP_proxy;
        iceP_proxy = CallbackReceiverPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.initiateWaitCallbackAsync(iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateCallbackWithPayload(Callback obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        CallbackReceiverPrx iceP_proxy;
        iceP_proxy = CallbackReceiverPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.initiateCallbackWithPayloadAsync(iceP_proxy, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Callback obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "initiateCallback" -> Callback._iceD_initiateCallback(this, request);
            case "initiateCallbackEx" -> Callback._iceD_initiateCallbackEx(this, request);
            case "initiateConcurrentCallback" -> Callback._iceD_initiateConcurrentCallback(this, request);
            case "initiateWaitCallback" -> Callback._iceD_initiateWaitCallback(this, request);
            case "initiateCallbackWithPayload" -> Callback._iceD_initiateCallbackWithPayload(this, request);
            case "shutdown" -> Callback._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
