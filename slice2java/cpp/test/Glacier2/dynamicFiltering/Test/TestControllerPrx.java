//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

/**
 * The test controller interface permits coordination between the test
 * server and the test client. Prior to each call the client makes on
 * various backend references, it calls step on the controller. The
 * controller will manage the configuration of the system and return a
 * flag indicating whether the next call is meant to succeed or not.
 **/
public interface TestControllerPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestToken step(com.zeroc.Glacier2.SessionPrx currentSession, TestToken currentState)
    {
        return step(currentSession, currentState, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestToken step(com.zeroc.Glacier2.SessionPrx currentSession, TestToken currentState, java.util.Map<String, String> context)
    {
        return _iceI_stepAsync(currentSession, currentState, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestToken> stepAsync(com.zeroc.Glacier2.SessionPrx currentSession, TestToken currentState)
    {
        return _iceI_stepAsync(currentSession, currentState, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestToken> stepAsync(com.zeroc.Glacier2.SessionPrx currentSession, TestToken currentState, java.util.Map<String, String> context)
    {
        return _iceI_stepAsync(currentSession, currentState, context, false);
    }

    /**
     * @hidden
     * @param iceP_currentSession -
     * @param iceP_currentState -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestToken> _iceI_stepAsync(com.zeroc.Glacier2.SessionPrx iceP_currentSession, TestToken iceP_currentState, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestToken> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "step", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeProxy(iceP_currentSession);
                     TestToken.ice_write(ostr, iceP_currentState);
                 }, istr -> {
                     TestToken ret;
                     ret = TestToken.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestControllerPrx.class, _TestControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestControllerPrx.class, _TestControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestControllerPrx.class, _TestControllerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestControllerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestControllerPrx.class, _TestControllerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestControllerPrx.class, _TestControllerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestControllerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestControllerPrx.class, _TestControllerPrxI.class);
    }

    @Override
    TestControllerPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestControllerPrx ice_adapterId(String newAdapterId);

    @Override
    TestControllerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestControllerPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestControllerPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestControllerPrx ice_connectionCached(boolean newCache);

    @Override
    TestControllerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestControllerPrx ice_secure(boolean b);

    @Override
    TestControllerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestControllerPrx ice_preferSecure(boolean b);

    @Override
    TestControllerPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestControllerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestControllerPrx ice_collocationOptimized(boolean b);

    @Override
    TestControllerPrx ice_twoway();

    @Override
    TestControllerPrx ice_oneway();

    @Override
    TestControllerPrx ice_batchOneway();

    @Override
    TestControllerPrx ice_datagram();

    @Override
    TestControllerPrx ice_batchDatagram();

    @Override
    TestControllerPrx ice_compress(boolean co);

    @Override
    TestControllerPrx ice_connectionId(String connectionId);

    @Override
    TestControllerPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestController";
    }
}
