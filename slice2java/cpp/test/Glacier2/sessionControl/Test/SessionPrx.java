//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface SessionPrx extends com.zeroc.Glacier2.SessionPrx
{
    default void destroyFromClient()
    {
        destroyFromClient(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void destroyFromClient(java.util.Map<String, String> context)
    {
        _iceI_destroyFromClientAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> destroyFromClientAsync()
    {
        return _iceI_destroyFromClientAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> destroyFromClientAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyFromClientAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyFromClientAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroyFromClient", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), SessionPrx.class, _SessionPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), SessionPrx.class, _SessionPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), SessionPrx.class, _SessionPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), SessionPrx.class, _SessionPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, SessionPrx.class, _SessionPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, SessionPrx.class, _SessionPrxI.class);
    }

    @Override
    SessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SessionPrx ice_adapterId(String newAdapterId);

    @Override
    SessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    SessionPrx ice_connectionCached(boolean newCache);

    @Override
    SessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SessionPrx ice_secure(boolean b);

    @Override
    SessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SessionPrx ice_preferSecure(boolean b);

    @Override
    SessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SessionPrx ice_collocationOptimized(boolean b);

    @Override
    SessionPrx ice_twoway();

    @Override
    SessionPrx ice_oneway();

    @Override
    SessionPrx ice_batchOneway();

    @Override
    SessionPrx ice_datagram();

    @Override
    SessionPrx ice_batchDatagram();

    @Override
    SessionPrx ice_compress(boolean co);

    @Override
    SessionPrx ice_connectionId(String connectionId);

    @Override
    SessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Session";
    }
}
