//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation paramTest1.
     **/
    public static class ParamTest1Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest1Result()
        {
        }

        public ParamTest1Result(B p1, B p2)
        {
            this.p1 = p1;
            this.p2 = p2;
        }

        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest2.
     **/
    public static class ParamTest2Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest2Result()
        {
        }

        public ParamTest2Result(B p2, B p1)
        {
            this.p2 = p2;
            this.p1 = p1;
        }

        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest3.
     **/
    public static class ParamTest3Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest3Result()
        {
        }

        public ParamTest3Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation paramTest4.
     **/
    public static class ParamTest4Result
    {
        /**
         * Default constructor.
         **/
        public ParamTest4Result()
        {
        }

        public ParamTest4Result(B returnValue, B p)
        {
            this.returnValue = returnValue;
            this.p = p;
        }

        public B returnValue;
        public B p;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest1.
     **/
    public static class ReturnTest1Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest1Result()
        {
        }

        public ReturnTest1Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p1);
            ostr.writeValue(this.p2);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation returnTest2.
     **/
    public static class ReturnTest2Result
    {
        /**
         * Default constructor.
         **/
        public ReturnTest2Result()
        {
        }

        public ReturnTest2Result(B returnValue, B p2, B p1)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
            this.p1 = p1;
        }

        public B returnValue;
        public B p2;
        public B p1;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p2);
            ostr.writeValue(this.p1);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p2 = v, B.class);
            istr.readValue(v -> this.p1 = v, B.class);
            istr.readValue(v -> returnValue = v, B.class);
        }
    }

    /**
     * Holds the result of operation dictionaryTest.
     **/
    public static class DictionaryTestResult
    {
        /**
         * Default constructor.
         **/
        public DictionaryTestResult()
        {
        }

        public DictionaryTestResult(java.util.Map<java.lang.Integer, B> returnValue, java.util.Map<java.lang.Integer, B> bout)
        {
            this.returnValue = returnValue;
            this.bout = bout;
        }

        public java.util.Map<java.lang.Integer, B> returnValue;
        public java.util.Map<java.lang.Integer, B> bout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BDictHelper.write(ostr, this.bout);
            BDictHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.bout = BDictHelper.read(istr);
            returnValue = BDictHelper.read(istr);
        }
    }

    java.util.concurrent.CompletionStage<com.zeroc.Ice.Value> SBaseAsObjectAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBaseAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSKnownDerivedAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSUnknownDerivedAsSBaseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SBase> SBSUnknownDerivedAsSBaseCompactAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<com.zeroc.Ice.Value> SUnknownAsObjectAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkSUnknownAsync(com.zeroc.Ice.Value o, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> oneElementCycleAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> twoElementCycleAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> D1AsBAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<D1> D1AsD1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> D2AsBAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest1Result> paramTest1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest2Result> paramTest2Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest3Result> paramTest3Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ParamTest4Result> paramTest4Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ReturnTest1Result> returnTest1Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.ReturnTest2Result> returnTest2Async(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<B> returnTest3Async(B p1, B p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<SS3> sequenceTestAsync(SS1 p1, SS2 p2, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<TestIntf.DictionaryTestResult> dictionaryTestAsync(java.util.Map<java.lang.Integer, B> bin, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<PBase> exchangePBaseAsync(PBase pb, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknownAsPreservedAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknownAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknownAsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknownWithGraphAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Preserved> PBSUnknown2AsPreservedWithGraphAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> checkPBSUnknown2WithGraphAsync(Preserved p, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<PNode> exchangePNodeAsync(PNode pn, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwBaseAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwDerivedAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Void> throwDerivedAsDerivedAsync(com.zeroc.Ice.Current current)
        throws DerivedException;

    java.util.concurrent.CompletionStage<Void> throwUnknownDerivedAsBaseAsync(com.zeroc.Ice.Current current)
        throws BaseException;

    java.util.concurrent.CompletionStage<Forward> useForwardAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBaseAsObject(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBaseAsObjectAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBaseAsSBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBaseAsSBaseAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBSKnownDerivedAsSBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBSKnownDerivedAsSBaseAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBSKnownDerivedAsSBSKnownDerived(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBSKnownDerivedAsSBSKnownDerivedAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBSUnknownDerivedAsSBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBSUnknownDerivedAsSBaseAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SBSUnknownDerivedAsSBaseCompact(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SBSUnknownDerivedAsSBaseCompactAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.CompactFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_SUnknownAsObject(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.SUnknownAsObjectAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_checkSUnknown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<com.zeroc.Ice.Value> icePP_o = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_o.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        com.zeroc.Ice.Value iceP_o = icePP_o.value;
        var result = obj.checkSUnknownAsync(iceP_o, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_oneElementCycle(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.oneElementCycleAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_twoElementCycle(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.twoElementCycleAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_D1AsB(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.D1AsBAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_D1AsD1(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.D1AsD1Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_D2AsB(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.D2AsBAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_paramTest1(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.paramTest1Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_paramTest2(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.paramTest2Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_paramTest3(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.paramTest3Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_paramTest4(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.paramTest4Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_returnTest1(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.returnTest1Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_returnTest2(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.returnTest2Async(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_returnTest3(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<B> icePP_p1 = new com.zeroc.Ice.Holder<>();
        final com.zeroc.Ice.Holder<B> icePP_p2 = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, B.class);
        istr.readValue(v -> icePP_p2.value = v, B.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        B iceP_p1 = icePP_p1.value;
        B iceP_p2 = icePP_p2.value;
        var result = obj.returnTest3Async(iceP_p1, iceP_p2, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sequenceTest(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<SS1> icePP_p1 = new com.zeroc.Ice.Holder<>();
        final com.zeroc.Ice.Holder<SS2> icePP_p2 = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, SS1.class);
        istr.readValue(v -> icePP_p2.value = v, SS2.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        SS1 iceP_p1 = icePP_p1.value;
        SS2 iceP_p2 = icePP_p2.value;
        var result = obj.sequenceTestAsync(iceP_p1, iceP_p2, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                SS3.ice_write(ostr, value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_dictionaryTest(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.Integer, B> iceP_bin;
        iceP_bin = BDictHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        var result = obj.dictionaryTestAsync(iceP_bin, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_exchangePBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<PBase> icePP_pb = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_pb.value = v, PBase.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        PBase iceP_pb = icePP_pb.value;
        var result = obj.exchangePBaseAsync(iceP_pb, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_PBSUnknownAsPreserved(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.PBSUnknownAsPreservedAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_checkPBSUnknown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<Preserved> icePP_p = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        Preserved iceP_p = icePP_p.value;
        var result = obj.checkPBSUnknownAsync(iceP_p, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_PBSUnknownAsPreservedWithGraph(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.PBSUnknownAsPreservedWithGraphAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_checkPBSUnknownWithGraph(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<Preserved> icePP_p = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        Preserved iceP_p = icePP_p.value;
        var result = obj.checkPBSUnknownWithGraphAsync(iceP_p, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_PBSUnknown2AsPreservedWithGraph(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.PBSUnknown2AsPreservedWithGraphAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_checkPBSUnknown2WithGraph(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<Preserved> icePP_p = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p.value = v, Preserved.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        Preserved iceP_p = icePP_p.value;
        var result = obj.checkPBSUnknown2WithGraphAsync(iceP_p, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_exchangePNode(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<PNode> icePP_pn = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_pn.value = v, PNode.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        PNode iceP_pn = icePP_pn.value;
        var result = obj.exchangePNodeAsync(iceP_pn, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwBaseAsBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwBaseAsBaseAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwDerivedAsBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwDerivedAsBaseAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwDerivedAsDerived(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwDerivedAsDerivedAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwUnknownDerivedAsBase(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwUnknownDerivedAsBaseAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_useForward(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.useForwardAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeValue(value);
                ostr.writePendingValues();
            },
            com.zeroc.Ice.FormatType.SlicedFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.shutdownAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "SBaseAsObject" -> TestIntf._iceD_SBaseAsObject(this, request);
            case "SBaseAsSBase" -> TestIntf._iceD_SBaseAsSBase(this, request);
            case "SBSKnownDerivedAsSBase" -> TestIntf._iceD_SBSKnownDerivedAsSBase(this, request);
            case "SBSKnownDerivedAsSBSKnownDerived" -> TestIntf._iceD_SBSKnownDerivedAsSBSKnownDerived(this, request);
            case "SBSUnknownDerivedAsSBase" -> TestIntf._iceD_SBSUnknownDerivedAsSBase(this, request);
            case "SBSUnknownDerivedAsSBaseCompact" -> TestIntf._iceD_SBSUnknownDerivedAsSBaseCompact(this, request);
            case "SUnknownAsObject" -> TestIntf._iceD_SUnknownAsObject(this, request);
            case "checkSUnknown" -> TestIntf._iceD_checkSUnknown(this, request);
            case "oneElementCycle" -> TestIntf._iceD_oneElementCycle(this, request);
            case "twoElementCycle" -> TestIntf._iceD_twoElementCycle(this, request);
            case "D1AsB" -> TestIntf._iceD_D1AsB(this, request);
            case "D1AsD1" -> TestIntf._iceD_D1AsD1(this, request);
            case "D2AsB" -> TestIntf._iceD_D2AsB(this, request);
            case "paramTest1" -> TestIntf._iceD_paramTest1(this, request);
            case "paramTest2" -> TestIntf._iceD_paramTest2(this, request);
            case "paramTest3" -> TestIntf._iceD_paramTest3(this, request);
            case "paramTest4" -> TestIntf._iceD_paramTest4(this, request);
            case "returnTest1" -> TestIntf._iceD_returnTest1(this, request);
            case "returnTest2" -> TestIntf._iceD_returnTest2(this, request);
            case "returnTest3" -> TestIntf._iceD_returnTest3(this, request);
            case "sequenceTest" -> TestIntf._iceD_sequenceTest(this, request);
            case "dictionaryTest" -> TestIntf._iceD_dictionaryTest(this, request);
            case "exchangePBase" -> TestIntf._iceD_exchangePBase(this, request);
            case "PBSUnknownAsPreserved" -> TestIntf._iceD_PBSUnknownAsPreserved(this, request);
            case "checkPBSUnknown" -> TestIntf._iceD_checkPBSUnknown(this, request);
            case "PBSUnknownAsPreservedWithGraph" -> TestIntf._iceD_PBSUnknownAsPreservedWithGraph(this, request);
            case "checkPBSUnknownWithGraph" -> TestIntf._iceD_checkPBSUnknownWithGraph(this, request);
            case "PBSUnknown2AsPreservedWithGraph" -> TestIntf._iceD_PBSUnknown2AsPreservedWithGraph(this, request);
            case "checkPBSUnknown2WithGraph" -> TestIntf._iceD_checkPBSUnknown2WithGraph(this, request);
            case "exchangePNode" -> TestIntf._iceD_exchangePNode(this, request);
            case "throwBaseAsBase" -> TestIntf._iceD_throwBaseAsBase(this, request);
            case "throwDerivedAsBase" -> TestIntf._iceD_throwDerivedAsBase(this, request);
            case "throwDerivedAsDerived" -> TestIntf._iceD_throwDerivedAsDerived(this, request);
            case "throwUnknownDerivedAsBase" -> TestIntf._iceD_throwUnknownDerivedAsBase(this, request);
            case "useForward" -> TestIntf._iceD_useForward(this, request);
            case "shutdown" -> TestIntf._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
