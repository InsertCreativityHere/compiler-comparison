//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `WstringAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test1;

public interface WstringClass extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opString.
     **/
    public static class OpStringResult
    {
        /**
         * Default constructor.
         **/
        public OpStringResult()
        {
        }

        public OpStringResult(String returnValue, String s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public String returnValue;
        public String s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(this.s2);
            ostr.writeString(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = istr.readString();
            returnValue = istr.readString();
        }
    }

    /**
     * Holds the result of operation opStruct.
     **/
    public static class OpStructResult
    {
        /**
         * Default constructor.
         **/
        public OpStructResult()
        {
        }

        public OpStructResult(WstringStruct returnValue, WstringStruct s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public WstringStruct returnValue;
        public WstringStruct s2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            WstringStruct.ice_write(ostr, this.s2);
            WstringStruct.ice_write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.s2 = WstringStruct.ice_read(istr);
            returnValue = WstringStruct.ice_read(istr);
        }
    }

    java.util.concurrent.CompletionStage<WstringClass.OpStringResult> opStringAsync(String s1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<WstringClass.OpStructResult> opStructAsync(WstringStruct s1, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwExceptAsync(String reason, com.zeroc.Ice.Current current)
        throws WstringException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test1::WstringClass"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test1::WstringClass";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opString(WstringClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_s1;
        iceP_s1 = istr.readString();
        istr.endEncapsulation();
        var result = obj.opStringAsync(iceP_s1, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStruct(WstringClass obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        WstringStruct iceP_s1;
        iceP_s1 = WstringStruct.ice_read(istr);
        istr.endEncapsulation();
        var result = obj.opStructAsync(iceP_s1, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwExcept(WstringClass obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_reason;
        iceP_reason = istr.readString();
        istr.endEncapsulation();
        var result = obj.throwExceptAsync(iceP_reason, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opString" -> WstringClass._iceD_opString(this, request);
            case "opStruct" -> WstringClass._iceD_opStruct(this, request);
            case "throwExcept" -> WstringClass._iceD_throwExcept(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
