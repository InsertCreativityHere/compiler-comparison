//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestIntf.OpDoubleArrayResult opDoubleArray(double[] inSeq)
    {
        return opDoubleArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDoubleArrayResult opDoubleArray(double[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq)
    {
        return _iceI_opDoubleArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDoubleArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleArrayResult> _iceI_opDoubleArrayAsync(double[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDoubleArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDoubleArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDoubleArrayResult ret = new TestIntf.OpDoubleArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolArrayResult opBoolArray(boolean[] inSeq)
    {
        return opBoolArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolArrayResult opBoolArray(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolArrayResult> opBoolArrayAsync(boolean[] inSeq)
    {
        return _iceI_opBoolArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolArrayResult> opBoolArrayAsync(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolArrayResult> _iceI_opBoolArrayAsync(boolean[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolArrayResult ret = new TestIntf.OpBoolArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteArrayResult opByteArray(byte[] inSeq)
    {
        return opByteArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteArrayResult opByteArray(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteArrayResult> opByteArrayAsync(byte[] inSeq)
    {
        return _iceI_opByteArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteArrayResult> opByteArrayAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteArrayResult> _iceI_opByteArrayAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteArrayResult ret = new TestIntf.OpByteArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVariableArrayResult opVariableArray(Variable[] inSeq)
    {
        return opVariableArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVariableArrayResult opVariableArray(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq)
    {
        return _iceI_opVariableArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableArrayResult> _iceI_opVariableArrayAsync(Variable[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVariableArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VariableListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpVariableArrayResult ret = new TestIntf.OpVariableArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolRangeResult opBoolRange(boolean[] inSeq)
    {
        return opBoolRange(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolRangeResult opBoolRange(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolRangeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolRangeResult> opBoolRangeAsync(boolean[] inSeq)
    {
        return _iceI_opBoolRangeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolRangeResult> opBoolRangeAsync(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolRangeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolRangeResult> _iceI_opBoolRangeAsync(boolean[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolRangeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolRange", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolRangeResult ret = new TestIntf.OpBoolRangeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteRangeResult opByteRange(byte[] inSeq)
    {
        return opByteRange(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteRangeResult opByteRange(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteRangeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteRangeResult> opByteRangeAsync(byte[] inSeq)
    {
        return _iceI_opByteRangeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteRangeResult> opByteRangeAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteRangeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteRangeResult> _iceI_opByteRangeAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteRangeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteRange", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteRangeResult ret = new TestIntf.OpByteRangeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVariableRangeResult opVariableRange(Variable[] inSeq)
    {
        return opVariableRange(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVariableRangeResult opVariableRange(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableRangeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq)
    {
        return _iceI_opVariableRangeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableRangeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableRangeResult> _iceI_opVariableRangeAsync(Variable[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableRangeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVariableRange", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VariableListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpVariableRangeResult ret = new TestIntf.OpVariableRangeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteRangeTypeResult opByteRangeType(byte[] inSeq)
    {
        return opByteRangeType(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteRangeTypeResult opByteRangeType(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteRangeTypeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq)
    {
        return _iceI_opByteRangeTypeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteRangeTypeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteRangeTypeResult> _iceI_opByteRangeTypeAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteRangeTypeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteRangeType", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteRangeTypeResult ret = new TestIntf.OpByteRangeTypeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVariableRangeTypeResult opVariableRangeType(Variable[] inSeq)
    {
        return opVariableRangeType(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVariableRangeTypeResult opVariableRangeType(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableRangeTypeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq)
    {
        return _iceI_opVariableRangeTypeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableRangeTypeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableRangeTypeResult> _iceI_opVariableRangeTypeAsync(Variable[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableRangeTypeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVariableRangeType", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VariableListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpVariableRangeTypeResult ret = new TestIntf.OpVariableRangeTypeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolSeqResult opBoolSeq(boolean[] inSeq)
    {
        return opBoolSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolSeqResult opBoolSeq(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolSeqResult> opBoolSeqAsync(boolean[] inSeq)
    {
        return _iceI_opBoolSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolSeqResult> opBoolSeqAsync(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolSeqResult> _iceI_opBoolSeqAsync(boolean[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolSeqResult ret = new TestIntf.OpBoolSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolListResult opBoolList(boolean[] inSeq)
    {
        return opBoolList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolListResult opBoolList(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolListResult> opBoolListAsync(boolean[] inSeq)
    {
        return _iceI_opBoolListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolListResult> opBoolListAsync(boolean[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolListResult> _iceI_opBoolListAsync(boolean[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolListResult ret = new TestIntf.OpBoolListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolDequeListResult opBoolDequeList(boolean[][] inSeq)
    {
        return opBoolDequeList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolDequeListResult opBoolDequeList(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListResult> opBoolDequeListAsync(boolean[][] inSeq)
    {
        return _iceI_opBoolDequeListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListResult> opBoolDequeListAsync(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListResult> _iceI_opBoolDequeListAsync(boolean[][] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolDequeList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolDequeListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolDequeListResult ret = new TestIntf.OpBoolDequeListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolDequeListArrayResult opBoolDequeListArray(boolean[][] inSeq)
    {
        return opBoolDequeListArray(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolDequeListArrayResult opBoolDequeListArray(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListArrayAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListArrayResult> opBoolDequeListArrayAsync(boolean[][] inSeq)
    {
        return _iceI_opBoolDequeListArrayAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListArrayResult> opBoolDequeListArrayAsync(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListArrayAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListArrayResult> _iceI_opBoolDequeListArrayAsync(boolean[][] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListArrayResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolDequeListArray", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolDequeListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolDequeListArrayResult ret = new TestIntf.OpBoolDequeListArrayResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolDequeListRangeResult opBoolDequeListRange(boolean[][] inSeq)
    {
        return opBoolDequeListRange(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolDequeListRangeResult opBoolDequeListRange(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListRangeAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListRangeResult> opBoolDequeListRangeAsync(boolean[][] inSeq)
    {
        return _iceI_opBoolDequeListRangeAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolDequeListRangeResult> opBoolDequeListRangeAsync(boolean[][] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opBoolDequeListRangeAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListRangeResult> _iceI_opBoolDequeListRangeAsync(boolean[][] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolDequeListRangeResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolDequeListRange", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BoolDequeListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpBoolDequeListRangeResult ret = new TestIntf.OpBoolDequeListRangeResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteSeqResult opByteSeq(byte[] inSeq)
    {
        return opByteSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteSeqResult opByteSeq(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSeqResult> opByteSeqAsync(byte[] inSeq)
    {
        return _iceI_opByteSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSeqResult> opByteSeqAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteSeqResult ret = new TestIntf.OpByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpByteListResult opByteList(byte[] inSeq)
    {
        return opByteList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteListResult opByteList(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteListResult> opByteListAsync(byte[] inSeq)
    {
        return _iceI_opByteListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteListResult> opByteListAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opByteListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteListResult> _iceI_opByteListAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpByteListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opByteList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpByteListResult ret = new TestIntf.OpByteListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpMyByteSeqResult opMyByteSeq(byte[] inSeq)
    {
        return opMyByteSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpMyByteSeqResult opMyByteSeq(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opMyByteSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq)
    {
        return _iceI_opMyByteSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opMyByteSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpMyByteSeqResult> _iceI_opMyByteSeqAsync(byte[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpMyByteSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opMyByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpMyByteSeqResult ret = new TestIntf.OpMyByteSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringSeqResult opStringSeq(String[] inSeq)
    {
        return opStringSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringSeqResult opStringSeq(String[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqResult> opStringSeqAsync(String[] inSeq)
    {
        return _iceI_opStringSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSeqResult> opStringSeqAsync(String[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqResult> _iceI_opStringSeqAsync(String[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringSeqResult ret = new TestIntf.OpStringSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringListResult opStringList(String[] inSeq)
    {
        return opStringList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringListResult opStringList(String[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringListResult> opStringListAsync(String[] inSeq)
    {
        return _iceI_opStringListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringListResult> opStringListAsync(String[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringListResult> _iceI_opStringListAsync(String[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringListResult ret = new TestIntf.OpStringListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpFixedSeqResult opFixedSeq(Fixed[] inSeq)
    {
        return opFixedSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpFixedSeqResult opFixedSeq(Fixed[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFixedSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFixedSeqResult> opFixedSeqAsync(Fixed[] inSeq)
    {
        return _iceI_opFixedSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFixedSeqResult> opFixedSeqAsync(Fixed[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFixedSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFixedSeqResult> _iceI_opFixedSeqAsync(Fixed[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFixedSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpFixedSeqResult ret = new TestIntf.OpFixedSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpFixedListResult opFixedList(Fixed[] inSeq)
    {
        return opFixedList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpFixedListResult opFixedList(Fixed[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFixedListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFixedListResult> opFixedListAsync(Fixed[] inSeq)
    {
        return _iceI_opFixedListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpFixedListResult> opFixedListAsync(Fixed[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opFixedListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFixedListResult> _iceI_opFixedListAsync(Fixed[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpFixedListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opFixedList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     FixedListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpFixedListResult ret = new TestIntf.OpFixedListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVariableSeqResult opVariableSeq(Variable[] inSeq)
    {
        return opVariableSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVariableSeqResult opVariableSeq(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq)
    {
        return _iceI_opVariableSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableSeqResult> _iceI_opVariableSeqAsync(Variable[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVariableSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VariableSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpVariableSeqResult ret = new TestIntf.OpVariableSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVariableListResult opVariableList(Variable[] inSeq)
    {
        return opVariableList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVariableListResult opVariableList(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableListResult> opVariableListAsync(Variable[] inSeq)
    {
        return _iceI_opVariableListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVariableListResult> opVariableListAsync(Variable[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opVariableListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableListResult> _iceI_opVariableListAsync(Variable[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVariableListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVariableList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     VariableListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpVariableListResult ret = new TestIntf.OpVariableListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringStringDictSeqResult opStringStringDictSeq(java.util.Map<java.lang.String, java.lang.String>[] inSeq)
    {
        return opStringStringDictSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringStringDictSeqResult opStringStringDictSeq(java.util.Map<java.lang.String, java.lang.String>[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringStringDictSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringStringDictSeqResult> opStringStringDictSeqAsync(java.util.Map<java.lang.String, java.lang.String>[] inSeq)
    {
        return _iceI_opStringStringDictSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringStringDictSeqResult> opStringStringDictSeqAsync(java.util.Map<java.lang.String, java.lang.String>[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringStringDictSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringStringDictSeqResult> _iceI_opStringStringDictSeqAsync(java.util.Map<java.lang.String, java.lang.String>[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringStringDictSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringStringDictSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringStringDictSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringStringDictSeqResult ret = new TestIntf.OpStringStringDictSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringStringDictListResult opStringStringDictList(java.util.Map<java.lang.String, java.lang.String>[] inSeq)
    {
        return opStringStringDictList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringStringDictListResult opStringStringDictList(java.util.Map<java.lang.String, java.lang.String>[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringStringDictListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringStringDictListResult> opStringStringDictListAsync(java.util.Map<java.lang.String, java.lang.String>[] inSeq)
    {
        return _iceI_opStringStringDictListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringStringDictListResult> opStringStringDictListAsync(java.util.Map<java.lang.String, java.lang.String>[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opStringStringDictListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringStringDictListResult> _iceI_opStringStringDictListAsync(java.util.Map<java.lang.String, java.lang.String>[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpStringStringDictListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opStringStringDictList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringStringDictListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpStringStringDictListResult ret = new TestIntf.OpStringStringDictListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpESeqResult opESeq(E[] inSeq)
    {
        return opESeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpESeqResult opESeq(E[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opESeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpESeqResult> opESeqAsync(E[] inSeq)
    {
        return _iceI_opESeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpESeqResult> opESeqAsync(E[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opESeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpESeqResult> _iceI_opESeqAsync(E[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpESeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opESeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ESeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpESeqResult ret = new TestIntf.OpESeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpEListResult opEList(E[] inSeq)
    {
        return opEList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpEListResult opEList(E[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opEListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpEListResult> opEListAsync(E[] inSeq)
    {
        return _iceI_opEListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpEListResult> opEListAsync(E[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opEListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpEListResult> _iceI_opEListAsync(E[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpEListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opEList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     EListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpEListResult ret = new TestIntf.OpEListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpDPrxSeqResult opDPrxSeq(DPrx[] inSeq)
    {
        return opDPrxSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDPrxSeqResult opDPrxSeq(DPrx[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDPrxSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq)
    {
        return _iceI_opDPrxSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDPrxSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDPrxSeqResult> _iceI_opDPrxSeqAsync(DPrx[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDPrxSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDPrxSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DPrxSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDPrxSeqResult ret = new TestIntf.OpDPrxSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpDPrxListResult opDPrxList(DPrx[] inSeq)
    {
        return opDPrxList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpDPrxListResult opDPrxList(DPrx[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDPrxListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq)
    {
        return _iceI_opDPrxListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opDPrxListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDPrxListResult> _iceI_opDPrxListAsync(DPrx[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpDPrxListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opDPrxList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     DPrxListHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpDPrxListResult ret = new TestIntf.OpDPrxListResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpCSeqResult opCSeq(C[] inSeq)
    {
        return opCSeq(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpCSeqResult opCSeq(C[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opCSeqAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpCSeqResult> opCSeqAsync(C[] inSeq)
    {
        return _iceI_opCSeqAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpCSeqResult> opCSeqAsync(C[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opCSeqAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpCSeqResult> _iceI_opCSeqAsync(C[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpCSeqResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CSeqHelper.write(ostr, iceP_inSeq);
                     ostr.writePendingValues();
                 }, istr -> {
                     TestIntf.OpCSeqResult ret = new TestIntf.OpCSeqResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpCListResult opCList(C[] inSeq)
    {
        return opCList(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpCListResult opCList(C[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opCListAsync(inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpCListResult> opCListAsync(C[] inSeq)
    {
        return _iceI_opCListAsync(inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpCListResult> opCListAsync(C[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opCListAsync(inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpCListResult> _iceI_opCListAsync(C[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpCListResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opCList", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CListHelper.write(ostr, iceP_inSeq);
                     ostr.writePendingValues();
                 }, istr -> {
                     TestIntf.OpCListResult ret = new TestIntf.OpCListResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpClassStructResult opClassStruct(ClassStruct inS, ClassStruct[] inSeq)
    {
        return opClassStruct(inS, inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpClassStructResult opClassStruct(ClassStruct inS, ClassStruct[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opClassStructAsync(inS, inSeq, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq)
    {
        return _iceI_opClassStructAsync(inS, inSeq, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq, java.util.Map<String, String> context)
    {
        return _iceI_opClassStructAsync(inS, inSeq, context, false);
    }

    /**
     * @hidden
     * @param iceP_inS -
     * @param iceP_inSeq -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpClassStructResult> _iceI_opClassStructAsync(ClassStruct iceP_inS, ClassStruct[] iceP_inSeq, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpClassStructResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opClassStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ClassStruct.ice_write(ostr, iceP_inS);
                     ClassStructSeqHelper.write(ostr, iceP_inSeq);
                 }, istr -> {
                     TestIntf.OpClassStructResult ret = new TestIntf.OpClassStructResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default byte[] opOutArrayByteSeq(byte[] org)
    {
        return opOutArrayByteSeq(org, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] opOutArrayByteSeq(byte[] org, java.util.Map<String, String> context)
    {
        return _iceI_opOutArrayByteSeqAsync(org, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> opOutArrayByteSeqAsync(byte[] org)
    {
        return _iceI_opOutArrayByteSeqAsync(org, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> opOutArrayByteSeqAsync(byte[] org, java.util.Map<String, String> context)
    {
        return _iceI_opOutArrayByteSeqAsync(org, context, false);
    }

    /**
     * @hidden
     * @param iceP_org -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_opOutArrayByteSeqAsync(byte[] iceP_org, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOutArrayByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_org);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default byte[] opOutRangeByteSeq(byte[] org)
    {
        return opOutRangeByteSeq(org, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] opOutRangeByteSeq(byte[] org, java.util.Map<String, String> context)
    {
        return _iceI_opOutRangeByteSeqAsync(org, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> opOutRangeByteSeqAsync(byte[] org)
    {
        return _iceI_opOutRangeByteSeqAsync(org, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> opOutRangeByteSeqAsync(byte[] org, java.util.Map<String, String> context)
    {
        return _iceI_opOutRangeByteSeqAsync(org, context, false);
    }

    /**
     * @hidden
     * @param iceP_org -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_opOutRangeByteSeqAsync(byte[] iceP_org, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opOutRangeByteSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_org);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpIntStringDictResult opIntStringDict(java.util.Map<java.lang.Integer, java.lang.String> idict)
    {
        return opIntStringDict(idict, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpIntStringDictResult opIntStringDict(java.util.Map<java.lang.Integer, java.lang.String> idict, java.util.Map<String, String> context)
    {
        return _iceI_opIntStringDictAsync(idict, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntStringDictResult> opIntStringDictAsync(java.util.Map<java.lang.Integer, java.lang.String> idict)
    {
        return _iceI_opIntStringDictAsync(idict, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpIntStringDictResult> opIntStringDictAsync(java.util.Map<java.lang.Integer, java.lang.String> idict, java.util.Map<String, String> context)
    {
        return _iceI_opIntStringDictAsync(idict, context, false);
    }

    /**
     * @hidden
     * @param iceP_idict -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntStringDictResult> _iceI_opIntStringDictAsync(java.util.Map<java.lang.Integer, java.lang.String> iceP_idict, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpIntStringDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opIntStringDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     IntStringDictHelper.write(ostr, iceP_idict);
                 }, istr -> {
                     TestIntf.OpIntStringDictResult ret = new TestIntf.OpIntStringDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpVarDictResult opVarDict(java.util.Map<java.lang.String, java.lang.Integer> idict)
    {
        return opVarDict(idict, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpVarDictResult opVarDict(java.util.Map<java.lang.String, java.lang.Integer> idict, java.util.Map<String, String> context)
    {
        return _iceI_opVarDictAsync(idict, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVarDictResult> opVarDictAsync(java.util.Map<java.lang.String, java.lang.Integer> idict)
    {
        return _iceI_opVarDictAsync(idict, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpVarDictResult> opVarDictAsync(java.util.Map<java.lang.String, java.lang.Integer> idict, java.util.Map<String, String> context)
    {
        return _iceI_opVarDictAsync(idict, context, false);
    }

    /**
     * @hidden
     * @param iceP_idict -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVarDictResult> _iceI_opVarDictAsync(java.util.Map<java.lang.String, java.lang.Integer> iceP_idict, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpVarDictResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opVarDict", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StringIntDictHelper.write(ostr, iceP_idict);
                 }, istr -> {
                     TestIntf.OpVarDictResult ret = new TestIntf.OpVarDictResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpShortBufferResult opShortBuffer(short[] inS)
    {
        return opShortBuffer(inS, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpShortBufferResult opShortBuffer(short[] inS, java.util.Map<String, String> context)
    {
        return _iceI_opShortBufferAsync(inS, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortBufferResult> opShortBufferAsync(short[] inS)
    {
        return _iceI_opShortBufferAsync(inS, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortBufferResult> opShortBufferAsync(short[] inS, java.util.Map<String, String> context)
    {
        return _iceI_opShortBufferAsync(inS, context, false);
    }

    /**
     * @hidden
     * @param iceP_inS -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortBufferResult> _iceI_opShortBufferAsync(short[] iceP_inS, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpShortBufferResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opShortBuffer", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(iceP_inS);
                 }, istr -> {
                     TestIntf.OpShortBufferResult ret = new TestIntf.OpShortBufferResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpBoolBufferResult opBoolBuffer(boolean[] inS)
    {
        return opBoolBuffer(inS, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpBoolBufferResult opBoolBuffer(boolean[] inS, java.util.Map<String, String> context)
    {
        return _iceI_opBoolBufferAsync(inS, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolBufferResult> opBoolBufferAsync(boolean[] inS)
    {
        return _iceI_opBoolBufferAsync(inS, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpBoolBufferResult> opBoolBufferAsync(boolean[] inS, java.util.Map<String, String> context)
    {
        return _iceI_opBoolBufferAsync(inS, context, false);
    }

    /**
     * @hidden
     * @param iceP_inS -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolBufferResult> _iceI_opBoolBufferAsync(boolean[] iceP_inS, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TestIntf.OpBoolBufferResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBoolBuffer", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_inS);
                 }, istr -> {
                     TestIntf.OpBoolBufferResult ret = new TestIntf.OpBoolBufferResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default BufferStruct opBufferStruct(BufferStruct s)
    {
        return opBufferStruct(s, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default BufferStruct opBufferStruct(BufferStruct s, java.util.Map<String, String> context)
    {
        return _iceI_opBufferStructAsync(s, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<BufferStruct> opBufferStructAsync(BufferStruct s)
    {
        return _iceI_opBufferStructAsync(s, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<BufferStruct> opBufferStructAsync(BufferStruct s, java.util.Map<String, String> context)
    {
        return _iceI_opBufferStructAsync(s, context, false);
    }

    /**
     * @hidden
     * @param iceP_s -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<BufferStruct> _iceI_opBufferStructAsync(BufferStruct iceP_s, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<BufferStruct> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "opBufferStruct", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     BufferStruct.ice_write(ostr, iceP_s);
                 }, istr -> {
                     BufferStruct ret;
                     ret = BufferStruct.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, TestIntfPrx.class, _TestIntfPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default TestIntfPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (TestIntfPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default TestIntfPrx ice_adapterId(String newAdapterId)
    {
        return (TestIntfPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (TestIntfPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default TestIntfPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default TestIntfPrx ice_invocationTimeout(int newTimeout)
    {
        return (TestIntfPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default TestIntfPrx ice_connectionCached(boolean newCache)
    {
        return (TestIntfPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (TestIntfPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_secure(boolean b)
    {
        return (TestIntfPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (TestIntfPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default TestIntfPrx ice_preferSecure(boolean b)
    {
        return (TestIntfPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (TestIntfPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (TestIntfPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default TestIntfPrx ice_collocationOptimized(boolean b)
    {
        return (TestIntfPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default TestIntfPrx ice_twoway()
    {
        return (TestIntfPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_oneway()
    {
        return (TestIntfPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default TestIntfPrx ice_batchOneway()
    {
        return (TestIntfPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_datagram()
    {
        return (TestIntfPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default TestIntfPrx ice_batchDatagram()
    {
        return (TestIntfPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default TestIntfPrx ice_compress(boolean co)
    {
        return (TestIntfPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default TestIntfPrx ice_timeout(int t)
    {
        return (TestIntfPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default TestIntfPrx ice_connectionId(String connectionId)
    {
        return (TestIntfPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (TestIntfPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }
}
