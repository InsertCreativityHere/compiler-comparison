//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opShortArray.
     **/
    public static class OpShortArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpShortArrayResult()
        {
        }

        public OpShortArrayResult(short[] returnValue, short[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public short[] returnValue;
        public short[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.outSeq);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opDoubleArray.
     **/
    public static class OpDoubleArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleArrayResult()
        {
        }

        public OpDoubleArrayResult(double[] returnValue, double[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public double[] returnValue;
        public double[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(this.outSeq);
            ostr.writeDoubleSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readDoubleSeq();
            returnValue = istr.readDoubleSeq();
        }
    }

    /**
     * Holds the result of operation opBoolArray.
     **/
    public static class OpBoolArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolArrayResult()
        {
        }

        public OpBoolArrayResult(boolean[] returnValue, boolean[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public boolean[] returnValue;
        public boolean[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.outSeq);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opByteArray.
     **/
    public static class OpByteArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpByteArrayResult()
        {
        }

        public OpByteArrayResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.outSeq);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opVariableArray.
     **/
    public static class OpVariableArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpVariableArrayResult()
        {
        }

        public OpVariableArrayResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VariableListHelper.write(ostr, this.outSeq);
            VariableListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = VariableListHelper.read(istr);
            returnValue = VariableListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public boolean[] returnValue;
        public boolean[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.outSeq);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opBoolList.
     **/
    public static class OpBoolListResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolListResult()
        {
        }

        public OpBoolListResult(boolean[] returnValue, boolean[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public boolean[] returnValue;
        public boolean[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.outSeq);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    /**
     * Holds the result of operation opBoolDequeList.
     **/
    public static class OpBoolDequeListResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolDequeListResult()
        {
        }

        public OpBoolDequeListResult(boolean[][] returnValue, boolean[][] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public boolean[][] returnValue;
        public boolean[][] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolDequeListHelper.write(ostr, this.outSeq);
            BoolDequeListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BoolDequeListHelper.read(istr);
            returnValue = BoolDequeListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opBoolDequeListArray.
     **/
    public static class OpBoolDequeListArrayResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolDequeListArrayResult()
        {
        }

        public OpBoolDequeListArrayResult(boolean[][] returnValue, boolean[][] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public boolean[][] returnValue;
        public boolean[][] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            BoolDequeListHelper.write(ostr, this.outSeq);
            BoolDequeListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = BoolDequeListHelper.read(istr);
            returnValue = BoolDequeListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.outSeq);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opByteList.
     **/
    public static class OpByteListResult
    {
        /**
         * Default constructor.
         **/
        public OpByteListResult()
        {
        }

        public OpByteListResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.outSeq);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opMyByteSeq.
     **/
    public static class OpMyByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpMyByteSeqResult()
        {
        }

        public OpMyByteSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.outSeq);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opStringSeq.
     **/
    public static class OpStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqResult()
        {
        }

        public OpStringSeqResult(String[] returnValue, String[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public String[] returnValue;
        public String[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.outSeq);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opStringList.
     **/
    public static class OpStringListResult
    {
        /**
         * Default constructor.
         **/
        public OpStringListResult()
        {
        }

        public OpStringListResult(String[] returnValue, String[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public String[] returnValue;
        public String[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.outSeq);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opFixedSeq.
     **/
    public static class OpFixedSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedSeqResult()
        {
        }

        public OpFixedSeqResult(Fixed[] returnValue, Fixed[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Fixed[] returnValue;
        public Fixed[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedSeqHelper.write(ostr, this.outSeq);
            FixedSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = FixedSeqHelper.read(istr);
            returnValue = FixedSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opFixedList.
     **/
    public static class OpFixedListResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedListResult()
        {
        }

        public OpFixedListResult(Fixed[] returnValue, Fixed[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Fixed[] returnValue;
        public Fixed[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedListHelper.write(ostr, this.outSeq);
            FixedListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = FixedListHelper.read(istr);
            returnValue = FixedListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opVariableSeq.
     **/
    public static class OpVariableSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpVariableSeqResult()
        {
        }

        public OpVariableSeqResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VariableSeqHelper.write(ostr, this.outSeq);
            VariableSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = VariableSeqHelper.read(istr);
            returnValue = VariableSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opVariableList.
     **/
    public static class OpVariableListResult
    {
        /**
         * Default constructor.
         **/
        public OpVariableListResult()
        {
        }

        public OpVariableListResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VariableListHelper.write(ostr, this.outSeq);
            VariableListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = VariableListHelper.read(istr);
            returnValue = VariableListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringStringDictSeq.
     **/
    public static class OpStringStringDictSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringStringDictSeqResult()
        {
        }

        public OpStringStringDictSeqResult(java.util.Map<java.lang.String, java.lang.String>[] returnValue, java.util.Map<java.lang.String, java.lang.String>[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.Map<java.lang.String, java.lang.String>[] returnValue;
        public java.util.Map<java.lang.String, java.lang.String>[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringDictSeqHelper.write(ostr, this.outSeq);
            StringStringDictSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringStringDictSeqHelper.read(istr);
            returnValue = StringStringDictSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opStringStringDictList.
     **/
    public static class OpStringStringDictListResult
    {
        /**
         * Default constructor.
         **/
        public OpStringStringDictListResult()
        {
        }

        public OpStringStringDictListResult(java.util.Map<java.lang.String, java.lang.String>[] returnValue, java.util.Map<java.lang.String, java.lang.String>[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public java.util.Map<java.lang.String, java.lang.String>[] returnValue;
        public java.util.Map<java.lang.String, java.lang.String>[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringStringDictListHelper.write(ostr, this.outSeq);
            StringStringDictListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = StringStringDictListHelper.read(istr);
            returnValue = StringStringDictListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opESeq.
     **/
    public static class OpESeqResult
    {
        /**
         * Default constructor.
         **/
        public OpESeqResult()
        {
        }

        public OpESeqResult(E[] returnValue, E[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public E[] returnValue;
        public E[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ESeqHelper.write(ostr, this.outSeq);
            ESeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = ESeqHelper.read(istr);
            returnValue = ESeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opEList.
     **/
    public static class OpEListResult
    {
        /**
         * Default constructor.
         **/
        public OpEListResult()
        {
        }

        public OpEListResult(E[] returnValue, E[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public E[] returnValue;
        public E[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            EListHelper.write(ostr, this.outSeq);
            EListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = EListHelper.read(istr);
            returnValue = EListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDPrxSeq.
     **/
    public static class OpDPrxSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDPrxSeqResult()
        {
        }

        public OpDPrxSeqResult(DPrx[] returnValue, DPrx[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public DPrx[] returnValue;
        public DPrx[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DPrxSeqHelper.write(ostr, this.outSeq);
            DPrxSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DPrxSeqHelper.read(istr);
            returnValue = DPrxSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opDPrxList.
     **/
    public static class OpDPrxListResult
    {
        /**
         * Default constructor.
         **/
        public OpDPrxListResult()
        {
        }

        public OpDPrxListResult(DPrx[] returnValue, DPrx[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public DPrx[] returnValue;
        public DPrx[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            DPrxListHelper.write(ostr, this.outSeq);
            DPrxListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = DPrxListHelper.read(istr);
            returnValue = DPrxListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCSeq.
     **/
    public static class OpCSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpCSeqResult()
        {
        }

        public OpCSeqResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CSeqHelper.write(ostr, this.outSeq);
            CSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = CSeqHelper.read(istr);
            returnValue = CSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opCList.
     **/
    public static class OpCListResult
    {
        /**
         * Default constructor.
         **/
        public OpCListResult()
        {
        }

        public OpCListResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            CListHelper.write(ostr, this.outSeq);
            CListHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outSeq = CListHelper.read(istr);
            returnValue = CListHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opIntStringDict.
     **/
    public static class OpIntStringDictResult
    {
        /**
         * Default constructor.
         **/
        public OpIntStringDictResult()
        {
        }

        public OpIntStringDictResult(java.util.Map<java.lang.Integer, java.lang.String> returnValue, java.util.Map<java.lang.Integer, java.lang.String> odict)
        {
            this.returnValue = returnValue;
            this.odict = odict;
        }

        public java.util.Map<java.lang.Integer, java.lang.String> returnValue;
        public java.util.Map<java.lang.Integer, java.lang.String> odict;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntStringDictHelper.write(ostr, this.odict);
            IntStringDictHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.odict = IntStringDictHelper.read(istr);
            returnValue = IntStringDictHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opVarDict.
     **/
    public static class OpVarDictResult
    {
        /**
         * Default constructor.
         **/
        public OpVarDictResult()
        {
        }

        public OpVarDictResult(java.util.Map<java.lang.Long, java.lang.Long> returnValue, java.util.Map<java.lang.String, java.lang.Integer> odict)
        {
            this.returnValue = returnValue;
            this.odict = odict;
        }

        public java.util.Map<java.lang.Long, java.lang.Long> returnValue;
        public java.util.Map<java.lang.String, java.lang.Integer> odict;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, this.odict);
            LongLongDictHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.odict = StringIntDictHelper.read(istr);
            returnValue = LongLongDictHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation opShortBuffer.
     **/
    public static class OpShortBufferResult
    {
        /**
         * Default constructor.
         **/
        public OpShortBufferResult()
        {
        }

        public OpShortBufferResult(short[] returnValue, short[] outS)
        {
            this.returnValue = returnValue;
            this.outS = outS;
        }

        public short[] returnValue;
        public short[] outS;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.outS);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outS = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opBoolBuffer.
     **/
    public static class OpBoolBufferResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolBufferResult()
        {
        }

        public OpBoolBufferResult(boolean[] returnValue, boolean[] outS)
        {
            this.returnValue = returnValue;
            this.outS = outS;
        }

        public boolean[] returnValue;
        public boolean[] outS;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(this.outS);
            ostr.writeBoolSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.outS = istr.readBoolSeq();
            returnValue = istr.readBoolSeq();
        }
    }

    TestIntf.OpShortArrayResult opShortArray(short[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDoubleArrayResult opDoubleArray(boolean padding, double[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolArrayResult opBoolArray(boolean[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteArrayResult opByteArray(byte[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpVariableArrayResult opVariableArray(Variable[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolSeqResult opBoolSeq(boolean[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolListResult opBoolList(boolean[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolDequeListResult opBoolDequeList(boolean[][] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpBoolDequeListArrayResult opBoolDequeListArray(boolean[][] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteSeqResult opByteSeq(byte[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpByteListResult opByteList(byte[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpMyByteSeqResult opMyByteSeq(byte[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringSeqResult opStringSeq(String[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringListResult opStringList(String[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFixedSeqResult opFixedSeq(Fixed[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpFixedListResult opFixedList(Fixed[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpVariableSeqResult opVariableSeq(Variable[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpVariableListResult opVariableList(Variable[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringStringDictSeqResult opStringStringDictSeq(java.util.Map<java.lang.String, java.lang.String>[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpStringStringDictListResult opStringStringDictList(java.util.Map<java.lang.String, java.lang.String>[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpESeqResult opESeq(E[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpEListResult opEList(E[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDPrxSeqResult opDPrxSeq(DPrx[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpDPrxListResult opDPrxList(DPrx[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpCSeqResult opCSeq(C[] inSeq, com.zeroc.Ice.Current current);

    TestIntf.OpCListResult opCList(C[] inSeq, com.zeroc.Ice.Current current);

    byte[] opOutArrayByteSeq(byte[] org, com.zeroc.Ice.Current current);

    TestIntf.OpIntStringDictResult opIntStringDict(java.util.Map<java.lang.Integer, java.lang.String> idict, com.zeroc.Ice.Current current);

    TestIntf.OpVarDictResult opVarDict(java.util.Map<java.lang.String, java.lang.Integer> idict, com.zeroc.Ice.Current current);

    TestIntf.OpShortBufferResult opShortBuffer(short[] inS, com.zeroc.Ice.Current current);

    TestIntf.OpBoolBufferResult opBoolBuffer(boolean[] inS, com.zeroc.Ice.Current current);

    BufferStruct opBufferStruct(BufferStruct s, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_inSeq;
        iceP_inSeq = istr.readShortSeq();
        istr.endEncapsulation();
        TestIntf.OpShortArrayResult ret = obj.opShortArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean iceP_padding;
        double[] iceP_inSeq;
        iceP_padding = istr.readBool();
        iceP_inSeq = istr.readDoubleSeq();
        istr.endEncapsulation();
        TestIntf.OpDoubleArrayResult ret = obj.opDoubleArray(iceP_padding, iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_inSeq;
        iceP_inSeq = istr.readBoolSeq();
        istr.endEncapsulation();
        TestIntf.OpBoolArrayResult ret = obj.opBoolArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_inSeq;
        iceP_inSeq = istr.readByteSeq();
        istr.endEncapsulation();
        TestIntf.OpByteArrayResult ret = obj.opByteArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVariableArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Variable[] iceP_inSeq;
        iceP_inSeq = VariableListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpVariableArrayResult ret = obj.opVariableArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_inSeq;
        iceP_inSeq = istr.readBoolSeq();
        istr.endEncapsulation();
        TestIntf.OpBoolSeqResult ret = obj.opBoolSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_inSeq;
        iceP_inSeq = istr.readBoolSeq();
        istr.endEncapsulation();
        TestIntf.OpBoolListResult ret = obj.opBoolList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolDequeList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[][] iceP_inSeq;
        iceP_inSeq = BoolDequeListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpBoolDequeListResult ret = obj.opBoolDequeList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolDequeListArray(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[][] iceP_inSeq;
        iceP_inSeq = BoolDequeListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpBoolDequeListArrayResult ret = obj.opBoolDequeListArray(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_inSeq;
        iceP_inSeq = istr.readByteSeq();
        istr.endEncapsulation();
        TestIntf.OpByteSeqResult ret = obj.opByteSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_inSeq;
        iceP_inSeq = istr.readByteSeq();
        istr.endEncapsulation();
        TestIntf.OpByteListResult ret = obj.opByteList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMyByteSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_inSeq;
        iceP_inSeq = istr.readByteSeq();
        istr.endEncapsulation();
        TestIntf.OpMyByteSeqResult ret = obj.opMyByteSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_inSeq;
        iceP_inSeq = istr.readStringSeq();
        istr.endEncapsulation();
        TestIntf.OpStringSeqResult ret = obj.opStringSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_inSeq;
        iceP_inSeq = istr.readStringSeq();
        istr.endEncapsulation();
        TestIntf.OpStringListResult ret = obj.opStringList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFixedSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Fixed[] iceP_inSeq;
        iceP_inSeq = FixedSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpFixedSeqResult ret = obj.opFixedSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFixedList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Fixed[] iceP_inSeq;
        iceP_inSeq = FixedListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpFixedListResult ret = obj.opFixedList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVariableSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Variable[] iceP_inSeq;
        iceP_inSeq = VariableSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpVariableSeqResult ret = obj.opVariableSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVariableList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        Variable[] iceP_inSeq;
        iceP_inSeq = VariableListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpVariableListResult ret = obj.opVariableList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringStringDictSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.String, java.lang.String>[] iceP_inSeq;
        iceP_inSeq = StringStringDictSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpStringStringDictSeqResult ret = obj.opStringStringDictSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringStringDictList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.String, java.lang.String>[] iceP_inSeq;
        iceP_inSeq = StringStringDictListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpStringStringDictListResult ret = obj.opStringStringDictList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opESeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        E[] iceP_inSeq;
        iceP_inSeq = ESeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpESeqResult ret = obj.opESeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opEList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        E[] iceP_inSeq;
        iceP_inSeq = EListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpEListResult ret = obj.opEList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDPrxSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        DPrx[] iceP_inSeq;
        iceP_inSeq = DPrxSeqHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpDPrxSeqResult ret = obj.opDPrxSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDPrxList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        DPrx[] iceP_inSeq;
        iceP_inSeq = DPrxListHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpDPrxListResult ret = obj.opDPrxList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        C[] iceP_inSeq;
        iceP_inSeq = CSeqHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        TestIntf.OpCSeqResult ret = obj.opCSeq(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCList(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        C[] iceP_inSeq;
        iceP_inSeq = CListHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        TestIntf.OpCListResult ret = obj.opCList(iceP_inSeq, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOutArrayByteSeq(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_org;
        iceP_org = istr.readByteSeq();
        istr.endEncapsulation();
        byte[] ret = obj.opOutArrayByteSeq(iceP_org, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ostr.writeByteSeq(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntStringDict(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.Integer, java.lang.String> iceP_idict;
        iceP_idict = IntStringDictHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpIntStringDictResult ret = obj.opIntStringDict(iceP_idict, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVarDict(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Map<java.lang.String, java.lang.Integer> iceP_idict;
        iceP_idict = StringIntDictHelper.read(istr);
        istr.endEncapsulation();
        TestIntf.OpVarDictResult ret = obj.opVarDict(iceP_idict, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortBuffer(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        short[] iceP_inS;
        iceP_inS = istr.readShortSeq();
        istr.endEncapsulation();
        TestIntf.OpShortBufferResult ret = obj.opShortBuffer(iceP_inS, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolBuffer(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean[] iceP_inS;
        iceP_inS = istr.readBoolSeq();
        istr.endEncapsulation();
        TestIntf.OpBoolBufferResult ret = obj.opBoolBuffer(iceP_inS, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBufferStruct(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        BufferStruct iceP_s;
        iceP_s = BufferStruct.ice_read(istr);
        istr.endEncapsulation();
        BufferStruct ret = obj.opBufferStruct(iceP_s, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        BufferStruct.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(TestIntf obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "opShortArray" -> TestIntf._iceD_opShortArray(this, request);
            case "opDoubleArray" -> TestIntf._iceD_opDoubleArray(this, request);
            case "opBoolArray" -> TestIntf._iceD_opBoolArray(this, request);
            case "opByteArray" -> TestIntf._iceD_opByteArray(this, request);
            case "opVariableArray" -> TestIntf._iceD_opVariableArray(this, request);
            case "opBoolSeq" -> TestIntf._iceD_opBoolSeq(this, request);
            case "opBoolList" -> TestIntf._iceD_opBoolList(this, request);
            case "opBoolDequeList" -> TestIntf._iceD_opBoolDequeList(this, request);
            case "opBoolDequeListArray" -> TestIntf._iceD_opBoolDequeListArray(this, request);
            case "opByteSeq" -> TestIntf._iceD_opByteSeq(this, request);
            case "opByteList" -> TestIntf._iceD_opByteList(this, request);
            case "opMyByteSeq" -> TestIntf._iceD_opMyByteSeq(this, request);
            case "opStringSeq" -> TestIntf._iceD_opStringSeq(this, request);
            case "opStringList" -> TestIntf._iceD_opStringList(this, request);
            case "opFixedSeq" -> TestIntf._iceD_opFixedSeq(this, request);
            case "opFixedList" -> TestIntf._iceD_opFixedList(this, request);
            case "opVariableSeq" -> TestIntf._iceD_opVariableSeq(this, request);
            case "opVariableList" -> TestIntf._iceD_opVariableList(this, request);
            case "opStringStringDictSeq" -> TestIntf._iceD_opStringStringDictSeq(this, request);
            case "opStringStringDictList" -> TestIntf._iceD_opStringStringDictList(this, request);
            case "opESeq" -> TestIntf._iceD_opESeq(this, request);
            case "opEList" -> TestIntf._iceD_opEList(this, request);
            case "opDPrxSeq" -> TestIntf._iceD_opDPrxSeq(this, request);
            case "opDPrxList" -> TestIntf._iceD_opDPrxList(this, request);
            case "opCSeq" -> TestIntf._iceD_opCSeq(this, request);
            case "opCList" -> TestIntf._iceD_opCList(this, request);
            case "opOutArrayByteSeq" -> TestIntf._iceD_opOutArrayByteSeq(this, request);
            case "opIntStringDict" -> TestIntf._iceD_opIntStringDict(this, request);
            case "opVarDict" -> TestIntf._iceD_opVarDict(this, request);
            case "opShortBuffer" -> TestIntf._iceD_opShortBuffer(this, request);
            case "opBoolBuffer" -> TestIntf._iceD_opBoolBuffer(this, request);
            case "opBufferStruct" -> TestIntf._iceD_opBufferStruct(this, request);
            case "shutdown" -> TestIntf._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
