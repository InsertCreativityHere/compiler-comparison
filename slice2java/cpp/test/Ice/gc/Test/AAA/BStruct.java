//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test.AAA;

public class BStruct implements java.lang.Cloneable,
                                java.io.Serializable
{
    public B bMem;

    public BStruct()
    {
    }

    public BStruct(B bMem)
    {
        this.bMem = bMem;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BStruct r = null;
        if(rhs instanceof BStruct)
        {
            r = (BStruct)rhs;
        }

        if(r != null)
        {
            if(this.bMem != r.bMem)
            {
                if(this.bMem == null || r.bMem == null || !this.bMem.equals(r.bMem))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Test::AAA::BStruct");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, bMem);
        return h_;
    }

    public BStruct clone()
    {
        BStruct c = null;
        try
        {
            c = (BStruct)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeValue(this.bMem);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        istr.readValue(v -> bMem = v, B.class);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, BStruct v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public BStruct ice_read(com.zeroc.Ice.InputStream istr)
    {
        BStruct v = new BStruct();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<BStruct> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, BStruct v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<BStruct> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(BStruct.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final BStruct _nullMarshalValue = new BStruct();

    /** @hidden */
    public static final long serialVersionUID = 3746372689229144009L;
}
