//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public class CTest extends com.zeroc.Ice.Value
{
    public CTest()
    {
        this.theS = new S();
        this.theA = new A();
        this.theS2 = new S2();
        this.theB = new B();
    }

    public CTest(C[] theCSeq, S[] theSSeq, java.util.Map<java.lang.Integer, C2>[] theC2DictSeq, C[][] theCSeqSeq, S theS, A theA, S2 theS2, B theB, java.util.Map<java.lang.Integer, C> theCDict, java.util.Map<java.lang.Integer, C[]> theCSeqDict, java.util.Map<java.lang.Integer, S> theSDict, java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, C>> theCDictDict)
    {
        this.theCSeq = theCSeq;
        this.theSSeq = theSSeq;
        this.theC2DictSeq = theC2DictSeq;
        this.theCSeqSeq = theCSeqSeq;
        this.theS = theS;
        this.theA = theA;
        this.theS2 = theS2;
        this.theB = theB;
        this.theCDict = theCDict;
        this.theCSeqDict = theCSeqDict;
        this.theSDict = theSDict;
        this.theCDictDict = theCDictDict;
    }

    public C[] theCSeq;

    public S[] theSSeq;

    public java.util.Map<java.lang.Integer, C2>[] theC2DictSeq;

    public C[][] theCSeqSeq;

    public S theS;

    public A theA;

    public S2 theS2;

    public B theB;

    public java.util.Map<java.lang.Integer, C> theCDict;

    public java.util.Map<java.lang.Integer, C[]> theCSeqDict;

    public java.util.Map<java.lang.Integer, S> theSDict;

    public java.util.Map<java.lang.Integer, java.util.Map<java.lang.Integer, C>> theCDictDict;

    public CTest clone()
    {
        return (CTest)super.clone();
    }

    public static String ice_staticId()
    {
        return "::Test::CTest";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -8295884281754295102L;

    /** @hidden */
    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        CSeqHelper.write(ostr_, theCSeq);
        SSeqHelper.write(ostr_, theSSeq);
        C2DictSeqHelper.write(ostr_, theC2DictSeq);
        CSeqSeqHelper.write(ostr_, theCSeqSeq);
        S.ice_write(ostr_, theS);
        A.ice_write(ostr_, theA);
        S2.ice_write(ostr_, theS2);
        B.ice_write(ostr_, theB);
        CDictHelper.write(ostr_, theCDict);
        CSeqDictHelper.write(ostr_, theCSeqDict);
        SDictHelper.write(ostr_, theSDict);
        CDictDictHelper.write(ostr_, theCDictDict);
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        theCSeq = CSeqHelper.read(istr_);
        theSSeq = SSeqHelper.read(istr_);
        theC2DictSeq = C2DictSeqHelper.read(istr_);
        theCSeqSeq = CSeqSeqHelper.read(istr_);
        theS = S.ice_read(istr_);
        theA = A.ice_read(istr_);
        theS2 = S2.ice_read(istr_);
        theB = B.ice_read(istr_);
        theCDict = CDictHelper.read(istr_);
        theCSeqDict = CSeqDictHelper.read(istr_);
        theSDict = SDictHelper.read(istr_);
        theCDictDict = CDictDictHelper.read(istr_);
        istr_.endSlice();
    }
}
