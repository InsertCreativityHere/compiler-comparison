// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package Test;

public interface Thrower extends com.zeroc.Ice.Object
{
    java.util.concurrent.CompletionStage<Void> shutdownAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Boolean> supportsUndeclaredExceptionsAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<java.lang.Boolean> supportsAssertExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwAasAAsync(int a, com.zeroc.Ice.Current current)
        throws A;

    java.util.concurrent.CompletionStage<Void> throwAorDasAorDAsync(int a, com.zeroc.Ice.Current current)
        throws A,
               D;

    java.util.concurrent.CompletionStage<Void> throwBasAAsync(int a, int b, com.zeroc.Ice.Current current)
        throws A;

    java.util.concurrent.CompletionStage<Void> throwCasAAsync(int a, int b, int c, com.zeroc.Ice.Current current)
        throws A;

    java.util.concurrent.CompletionStage<Void> throwBasBAsync(int a, int b, com.zeroc.Ice.Current current)
        throws B;

    java.util.concurrent.CompletionStage<Void> throwCasBAsync(int a, int b, int c, com.zeroc.Ice.Current current)
        throws B;

    java.util.concurrent.CompletionStage<Void> throwCasCAsync(int a, int b, int c, com.zeroc.Ice.Current current)
        throws C;

    java.util.concurrent.CompletionStage<Void> throwModAAsync(int a, int a2, com.zeroc.Ice.Current current)
        throws Test.Mod.A;

    java.util.concurrent.CompletionStage<Void> throwUndeclaredAAsync(int a, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwUndeclaredBAsync(int a, int b, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwUndeclaredCAsync(int a, int b, int c, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwLocalExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwNonIceExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwAssertExceptionAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwLocalExceptionIdempotentAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwAfterResponseAsync(com.zeroc.Ice.Current current);

    java.util.concurrent.CompletionStage<Void> throwAfterExceptionAsync(com.zeroc.Ice.Current current)
        throws A;

    java.util.concurrent.CompletionStage<Void> throwEAsync(com.zeroc.Ice.Current current)
        throws E;

    java.util.concurrent.CompletionStage<Void> throwFAsync(com.zeroc.Ice.Current current)
        throws F;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Thrower"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Thrower";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.shutdownAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_supportsUndeclaredExceptions(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.supportsUndeclaredExceptionsAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeBool(value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_supportsAssertException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.supportsAssertExceptionAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeBool(value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwAasA(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        iceP_a = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwAasAAsync(iceP_a, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwAorDasAorD(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        iceP_a = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwAorDasAorDAsync(iceP_a, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwBasA(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwBasAAsync(iceP_a, iceP_b, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwCasA(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        int iceP_c;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        iceP_c = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwCasAAsync(iceP_a, iceP_b, iceP_c, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwBasB(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwBasBAsync(iceP_a, iceP_b, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwCasB(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        int iceP_c;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        iceP_c = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwCasBAsync(iceP_a, iceP_b, iceP_c, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwCasC(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        int iceP_c;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        iceP_c = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwCasCAsync(iceP_a, iceP_b, iceP_c, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwModA(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_a2;
        iceP_a = istr.readInt();
        iceP_a2 = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwModAAsync(iceP_a, iceP_a2, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwUndeclaredA(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        iceP_a = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwUndeclaredAAsync(iceP_a, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwUndeclaredB(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwUndeclaredBAsync(iceP_a, iceP_b, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwUndeclaredC(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        int iceP_a;
        int iceP_b;
        int iceP_c;
        iceP_a = istr.readInt();
        iceP_b = istr.readInt();
        iceP_c = istr.readInt();
        istr.endEncapsulation();
        var result = obj.throwUndeclaredCAsync(iceP_a, iceP_b, iceP_c, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwLocalException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwLocalExceptionAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwNonIceException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwNonIceExceptionAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwAssertException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwAssertExceptionAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwMemoryLimitException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        byte[] iceP_seq;
        iceP_seq = istr.readByteSeq();
        istr.endEncapsulation();
        var result = obj.throwMemoryLimitExceptionAsync(iceP_seq, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeByteSeq(value);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwLocalExceptionIdempotent(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwLocalExceptionIdempotentAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwAfterResponse(Thrower obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwAfterResponseAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwAfterException(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwAfterExceptionAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwE(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwEAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_throwF(Thrower obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.throwFAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "shutdown" -> Thrower._iceD_shutdown(this, request);
            case "supportsUndeclaredExceptions" -> Thrower._iceD_supportsUndeclaredExceptions(this, request);
            case "supportsAssertException" -> Thrower._iceD_supportsAssertException(this, request);
            case "throwAasA" -> Thrower._iceD_throwAasA(this, request);
            case "throwAorDasAorD" -> Thrower._iceD_throwAorDasAorD(this, request);
            case "throwBasA" -> Thrower._iceD_throwBasA(this, request);
            case "throwCasA" -> Thrower._iceD_throwCasA(this, request);
            case "throwBasB" -> Thrower._iceD_throwBasB(this, request);
            case "throwCasB" -> Thrower._iceD_throwCasB(this, request);
            case "throwCasC" -> Thrower._iceD_throwCasC(this, request);
            case "throwModA" -> Thrower._iceD_throwModA(this, request);
            case "throwUndeclaredA" -> Thrower._iceD_throwUndeclaredA(this, request);
            case "throwUndeclaredB" -> Thrower._iceD_throwUndeclaredB(this, request);
            case "throwUndeclaredC" -> Thrower._iceD_throwUndeclaredC(this, request);
            case "throwLocalException" -> Thrower._iceD_throwLocalException(this, request);
            case "throwNonIceException" -> Thrower._iceD_throwNonIceException(this, request);
            case "throwAssertException" -> Thrower._iceD_throwAssertException(this, request);
            case "throwMemoryLimitException" -> Thrower._iceD_throwMemoryLimitException(this, request);
            case "throwLocalExceptionIdempotent" -> Thrower._iceD_throwLocalExceptionIdempotent(this, request);
            case "throwAfterResponse" -> Thrower._iceD_throwAfterResponse(this, request);
            case "throwAfterException" -> Thrower._iceD_throwAfterException(this, request);
            case "throwE" -> Thrower._iceD_throwE(this, request);
            case "throwF" -> Thrower._iceD_throwF(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
