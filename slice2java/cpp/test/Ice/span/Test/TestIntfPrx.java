//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntfPrx extends com.zeroc.Ice.ObjectPrx
{
    default TestIntf.OpByteSpanResult opByteSpan(byte[] dataIn)
    {
        return opByteSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpByteSpanResult opByteSpan(byte[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opByteSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSpanResult> opByteSpanAsync(byte[] dataIn)
    {
        return _iceI_opByteSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpByteSpanResult> opByteSpanAsync(byte[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opByteSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpByteSpanResult> _iceI_opByteSpanAsync(byte[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpByteSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opByteSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpByteSpanResult ret = new TestIntf.OpByteSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpShortSpanResult opShortSpan(short[] dataIn)
    {
        return opShortSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpShortSpanResult opShortSpan(short[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opShortSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortSpanResult> opShortSpanAsync(short[] dataIn)
    {
        return _iceI_opShortSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpShortSpanResult> opShortSpanAsync(short[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opShortSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpShortSpanResult> _iceI_opShortSpanAsync(short[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpShortSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opShortSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpShortSpanResult ret = new TestIntf.OpShortSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpStringSpanResult opStringSpan(String[] dataIn)
    {
        return opStringSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpStringSpanResult opStringSpan(String[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opStringSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSpanResult> opStringSpanAsync(String[] dataIn)
    {
        return _iceI_opStringSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpStringSpanResult> opStringSpanAsync(String[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opStringSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpStringSpanResult> _iceI_opStringSpanAsync(String[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpStringSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opStringSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpStringSpanResult ret = new TestIntf.OpStringSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptionalByteSpanResult opOptionalByteSpan(byte[] dataIn)
    {
        return opOptionalByteSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalByteSpanResult opOptionalByteSpan(byte[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, context, true).waitForResponse();
    }

    default TestIntf.OpOptionalByteSpanResult opOptionalByteSpan(java.util.Optional<byte[]> dataIn)
    {
        return opOptionalByteSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalByteSpanResult opOptionalByteSpan(java.util.Optional<byte[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalByteSpanResult> _iceI_opOptionalByteSpanAsync(byte[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalByteSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalByteSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalByteSpanResult ret = new TestIntf.OpOptionalByteSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalByteSpanResult> opOptionalByteSpanAsync(java.util.Optional<byte[]> dataIn)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalByteSpanResult> opOptionalByteSpanAsync(java.util.Optional<byte[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalByteSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalByteSpanResult> _iceI_opOptionalByteSpanAsync(java.util.Optional<byte[]> iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalByteSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalByteSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalByteSpanResult ret = new TestIntf.OpOptionalByteSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptionalShortSpanResult opOptionalShortSpan(short[] dataIn)
    {
        return opOptionalShortSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalShortSpanResult opOptionalShortSpan(short[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, context, true).waitForResponse();
    }

    default TestIntf.OpOptionalShortSpanResult opOptionalShortSpan(java.util.Optional<short[]> dataIn)
    {
        return opOptionalShortSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalShortSpanResult opOptionalShortSpan(java.util.Optional<short[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalShortSpanResult> _iceI_opOptionalShortSpanAsync(short[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalShortSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalShortSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalShortSpanResult ret = new TestIntf.OpOptionalShortSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalShortSpanResult> opOptionalShortSpanAsync(java.util.Optional<short[]> dataIn)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalShortSpanResult> opOptionalShortSpanAsync(java.util.Optional<short[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalShortSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalShortSpanResult> _iceI_opOptionalShortSpanAsync(java.util.Optional<short[]> iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalShortSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalShortSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalShortSpanResult ret = new TestIntf.OpOptionalShortSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default TestIntf.OpOptionalStringSpanResult opOptionalStringSpan(String[] dataIn)
    {
        return opOptionalStringSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalStringSpanResult opOptionalStringSpan(String[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, context, true).waitForResponse();
    }

    default TestIntf.OpOptionalStringSpanResult opOptionalStringSpan(java.util.Optional<String[]> dataIn)
    {
        return opOptionalStringSpan(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default TestIntf.OpOptionalStringSpanResult opOptionalStringSpan(java.util.Optional<String[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalStringSpanResult> opOptionalStringSpanAsync(String[] dataIn)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalStringSpanResult> opOptionalStringSpanAsync(String[] dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalStringSpanResult> _iceI_opOptionalStringSpanAsync(String[] iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalStringSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalStringSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalStringSpanResult ret = new TestIntf.OpOptionalStringSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalStringSpanResult> opOptionalStringSpanAsync(java.util.Optional<String[]> dataIn)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<TestIntf.OpOptionalStringSpanResult> opOptionalStringSpanAsync(java.util.Optional<String[]> dataIn, java.util.Map<String, String> context)
    {
        return _iceI_opOptionalStringSpanAsync(dataIn, context, false);
    }

    /**
     * @hidden
     * @param iceP_dataIn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalStringSpanResult> _iceI_opOptionalStringSpanAsync(java.util.Optional<String[]> iceP_dataIn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<TestIntf.OpOptionalStringSpanResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opOptionalStringSpan", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(1, iceP_dataIn);
                 }, istr -> {
                     TestIntf.OpOptionalStringSpanResult ret = new TestIntf.OpOptionalStringSpanResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TestIntfPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TestIntfPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TestIntfPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TestIntfPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TestIntfPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TestIntfPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TestIntfPrxI(obj.ice_facet(facet));
    }

    @Override
    TestIntfPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TestIntfPrx ice_adapterId(String newAdapterId);

    @Override
    TestIntfPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TestIntfPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_invocationTimeout(int newTimeout);

    @Override
    TestIntfPrx ice_connectionCached(boolean newCache);

    @Override
    TestIntfPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TestIntfPrx ice_secure(boolean b);

    @Override
    TestIntfPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TestIntfPrx ice_preferSecure(boolean b);

    @Override
    TestIntfPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TestIntfPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TestIntfPrx ice_collocationOptimized(boolean b);

    @Override
    TestIntfPrx ice_twoway();

    @Override
    TestIntfPrx ice_oneway();

    @Override
    TestIntfPrx ice_batchOneway();

    @Override
    TestIntfPrx ice_datagram();

    @Override
    TestIntfPrx ice_batchDatagram();

    @Override
    TestIntfPrx ice_compress(boolean co);

    @Override
    TestIntfPrx ice_connectionId(String connectionId);

    @Override
    TestIntfPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     **/
    @Override
    default TestIntfPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _TestIntfPrxI(ref);
    }
}
