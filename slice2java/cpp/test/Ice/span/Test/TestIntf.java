//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface TestIntf extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation opByteSpan.
     **/
    public static class OpByteSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSpanResult()
        {
        }

        public OpByteSpanResult(byte[] returnValue, byte[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public byte[] returnValue;
        public byte[] dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(this.dataOut);
            ostr.writeByteSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.dataOut = istr.readByteSeq();
            returnValue = istr.readByteSeq();
        }
    }

    /**
     * Holds the result of operation opShortSpan.
     **/
    public static class OpShortSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSpanResult()
        {
        }

        public OpShortSpanResult(short[] returnValue, short[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public short[] returnValue;
        public short[] dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(this.dataOut);
            ostr.writeShortSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.dataOut = istr.readShortSeq();
            returnValue = istr.readShortSeq();
        }
    }

    /**
     * Holds the result of operation opStringSpan.
     **/
    public static class OpStringSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSpanResult()
        {
        }

        public OpStringSpanResult(String[] returnValue, String[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public String[] returnValue;
        public String[] dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(this.dataOut);
            ostr.writeStringSeq(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.dataOut = istr.readStringSeq();
            returnValue = istr.readStringSeq();
        }
    }

    /**
     * Holds the result of operation opOptionalByteSpan.
     **/
    public static class OpOptionalByteSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpOptionalByteSpanResult()
        {
        }

        public OpOptionalByteSpanResult(java.util.Optional<byte[]> returnValue, java.util.Optional<byte[]> dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public OpOptionalByteSpanResult(byte[] returnValue, byte[] dataOut)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.dataOut = java.util.Optional.ofNullable(dataOut);
        }

        public java.util.Optional<byte[]> returnValue;
        public java.util.Optional<byte[]> dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(10, returnValue);
            ostr.writeByteSeq(11, this.dataOut);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByteSeq(10);
            this.dataOut = istr.readByteSeq(11);
        }
    }

    /**
     * Holds the result of operation opOptionalShortSpan.
     **/
    public static class OpOptionalShortSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpOptionalShortSpanResult()
        {
        }

        public OpOptionalShortSpanResult(java.util.Optional<short[]> returnValue, java.util.Optional<short[]> dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public OpOptionalShortSpanResult(short[] returnValue, short[] dataOut)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.dataOut = java.util.Optional.ofNullable(dataOut);
        }

        public java.util.Optional<short[]> returnValue;
        public java.util.Optional<short[]> dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(10, returnValue);
            ostr.writeShortSeq(11, this.dataOut);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShortSeq(10);
            this.dataOut = istr.readShortSeq(11);
        }
    }

    /**
     * Holds the result of operation opOptionalStringSpan.
     **/
    public static class OpOptionalStringSpanResult
    {
        /**
         * Default constructor.
         **/
        public OpOptionalStringSpanResult()
        {
        }

        public OpOptionalStringSpanResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public OpOptionalStringSpanResult(String[] returnValue, String[] dataOut)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.dataOut = java.util.Optional.ofNullable(dataOut);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> dataOut;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(10, returnValue);
            ostr.writeStringSeq(11, this.dataOut);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(10);
            this.dataOut = istr.readStringSeq(11);
        }
    }

    TestIntf.OpByteSpanResult opByteSpan(byte[] dataIn, com.zeroc.Ice.Current current);

    TestIntf.OpShortSpanResult opShortSpan(short[] dataIn, com.zeroc.Ice.Current current);

    TestIntf.OpStringSpanResult opStringSpan(String[] dataIn, com.zeroc.Ice.Current current);

    TestIntf.OpOptionalByteSpanResult opOptionalByteSpan(java.util.Optional<byte[]> dataIn, com.zeroc.Ice.Current current);

    TestIntf.OpOptionalShortSpanResult opOptionalShortSpan(java.util.Optional<short[]> dataIn, com.zeroc.Ice.Current current);

    TestIntf.OpOptionalStringSpanResult opOptionalStringSpan(java.util.Optional<String[]> dataIn, com.zeroc.Ice.Current current);

    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::TestIntf"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::TestIntf";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opByteSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_dataIn;
        iceP_dataIn = istr.readByteSeq();
        inS.endReadParams();
        TestIntf.OpByteSpanResult ret = obj.opByteSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opShortSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_dataIn;
        iceP_dataIn = istr.readShortSeq();
        inS.endReadParams();
        TestIntf.OpShortSpanResult ret = obj.opShortSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opStringSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_dataIn;
        iceP_dataIn = istr.readStringSeq();
        inS.endReadParams();
        TestIntf.OpStringSpanResult ret = obj.opStringSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOptionalByteSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<byte[]> iceP_dataIn;
        iceP_dataIn = istr.readByteSeq(1);
        inS.endReadParams();
        TestIntf.OpOptionalByteSpanResult ret = obj.opOptionalByteSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOptionalShortSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<short[]> iceP_dataIn;
        iceP_dataIn = istr.readShortSeq(1);
        inS.endReadParams();
        TestIntf.OpOptionalShortSpanResult ret = obj.opOptionalShortSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_opOptionalStringSpan(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Optional<String[]> iceP_dataIn;
        iceP_dataIn = istr.readStringSeq(1);
        inS.endReadParams();
        TestIntf.OpOptionalStringSpanResult ret = obj.opOptionalStringSpan(iceP_dataIn, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(TestIntf obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "opByteSpan",
        "opOptionalByteSpan",
        "opOptionalShortSpan",
        "opOptionalStringSpan",
        "opShortSpan",
        "opStringSpan",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_opByteSpan(this, in, current);
            }
            case 5:
            {
                return _iceD_opOptionalByteSpan(this, in, current);
            }
            case 6:
            {
                return _iceD_opOptionalShortSpan(this, in, current);
            }
            case 7:
            {
                return _iceD_opOptionalStringSpan(this, in, current);
            }
            case 8:
            {
                return _iceD_opShortSpan(this, in, current);
            }
            case 9:
            {
                return _iceD_opStringSpan(this, in, current);
            }
            case 10:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
