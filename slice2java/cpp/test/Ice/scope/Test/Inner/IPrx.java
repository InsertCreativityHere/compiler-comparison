// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package Test.Inner;

public interface IPrx extends com.zeroc.Ice.ObjectPrx
{
    default I.OpSResult opS(Test.Inner.Inner2.S s1)
    {
        return opS(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpSResult opS(Test.Inner.Inner2.S s1, java.util.Map<String, String> context)
    {
        return _iceI_opSAsync(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpSResult> opSAsync(Test.Inner.Inner2.S s1)
    {
        return _iceI_opSAsync(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpSResult> opSAsync(Test.Inner.Inner2.S s1, java.util.Map<String, String> context)
    {
        return _iceI_opSAsync(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpSResult> _iceI_opSAsync(Test.Inner.Inner2.S iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpSResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opS", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Test.Inner.Inner2.S.ice_write(ostr, iceP_s1);
                 }, istr -> {
                     I.OpSResult ret = new I.OpSResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default I.OpSSeqResult opSSeq(Test.Inner.Inner2.S[] s1)
    {
        return opSSeq(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpSSeqResult opSSeq(Test.Inner.Inner2.S[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opSSeqAsync(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpSSeqResult> opSSeqAsync(Test.Inner.Inner2.S[] s1)
    {
        return _iceI_opSSeqAsync(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpSSeqResult> opSSeqAsync(Test.Inner.Inner2.S[] s1, java.util.Map<String, String> context)
    {
        return _iceI_opSSeqAsync(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpSSeqResult> _iceI_opSSeqAsync(Test.Inner.Inner2.S[] iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpSSeqResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opSSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s1);
                 }, istr -> {
                     I.OpSSeqResult ret = new I.OpSSeqResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default I.OpSMapResult opSMap(java.util.Map<java.lang.String, Test.Inner.Inner2.S> s1)
    {
        return opSMap(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpSMapResult opSMap(java.util.Map<java.lang.String, Test.Inner.Inner2.S> s1, java.util.Map<String, String> context)
    {
        return _iceI_opSMapAsync(s1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpSMapResult> opSMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.S> s1)
    {
        return _iceI_opSMapAsync(s1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpSMapResult> opSMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.S> s1, java.util.Map<String, String> context)
    {
        return _iceI_opSMapAsync(s1, context, false);
    }

    /**
     * @hidden
     * @param iceP_s1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpSMapResult> _iceI_opSMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.S> iceP_s1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpSMapResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opSMap", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s1);
                 }, istr -> {
                     I.OpSMapResult ret = new I.OpSMapResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default I.OpCResult opC(Test.Inner.Inner2.C c1)
    {
        return opC(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpCResult opC(Test.Inner.Inner2.C c1, java.util.Map<String, String> context)
    {
        return _iceI_opCAsync(c1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpCResult> opCAsync(Test.Inner.Inner2.C c1)
    {
        return _iceI_opCAsync(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpCResult> opCAsync(Test.Inner.Inner2.C c1, java.util.Map<String, String> context)
    {
        return _iceI_opCAsync(c1, context, false);
    }

    /**
     * @hidden
     * @param iceP_c1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpCResult> _iceI_opCAsync(Test.Inner.Inner2.C iceP_c1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpCResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opC", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_c1);
                     ostr.writePendingValues();
                 }, istr -> {
                     I.OpCResult ret = new I.OpCResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default I.OpCSeqResult opCSeq(Test.Inner.Inner2.C[] c1)
    {
        return opCSeq(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpCSeqResult opCSeq(Test.Inner.Inner2.C[] c1, java.util.Map<String, String> context)
    {
        return _iceI_opCSeqAsync(c1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpCSeqResult> opCSeqAsync(Test.Inner.Inner2.C[] c1)
    {
        return _iceI_opCSeqAsync(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpCSeqResult> opCSeqAsync(Test.Inner.Inner2.C[] c1, java.util.Map<String, String> context)
    {
        return _iceI_opCSeqAsync(c1, context, false);
    }

    /**
     * @hidden
     * @param iceP_c1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpCSeqResult> _iceI_opCSeqAsync(Test.Inner.Inner2.C[] iceP_c1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpCSeqResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opCSeq", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c1);
                     ostr.writePendingValues();
                 }, istr -> {
                     I.OpCSeqResult ret = new I.OpCSeqResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default I.OpCMapResult opCMap(java.util.Map<java.lang.String, Test.Inner.Inner2.C> c1)
    {
        return opCMap(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default I.OpCMapResult opCMap(java.util.Map<java.lang.String, Test.Inner.Inner2.C> c1, java.util.Map<String, String> context)
    {
        return _iceI_opCMapAsync(c1, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<I.OpCMapResult> opCMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.C> c1)
    {
        return _iceI_opCMapAsync(c1, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<I.OpCMapResult> opCMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.C> c1, java.util.Map<String, String> context)
    {
        return _iceI_opCMapAsync(c1, context, false);
    }

    /**
     * @hidden
     * @param iceP_c1 -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<I.OpCMapResult> _iceI_opCMapAsync(java.util.Map<java.lang.String, Test.Inner.Inner2.C> iceP_c1, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<I.OpCMapResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "opCMap", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c1);
                     ostr.writePendingValues();
                 }, istr -> {
                     I.OpCMapResult ret = new I.OpCMapResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link IPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static IPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _IPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static IPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static IPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _IPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static IPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static IPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static IPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _IPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static IPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _IPrxI(obj.ice_facet(facet));
    }

    @Override
    IPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    IPrx ice_adapterId(String newAdapterId);

    @Override
    IPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    IPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    IPrx ice_invocationTimeout(int newTimeout);

    @Override
    IPrx ice_connectionCached(boolean newCache);

    @Override
    IPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    IPrx ice_secure(boolean b);

    @Override
    IPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    IPrx ice_preferSecure(boolean b);

    @Override
    IPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    IPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    IPrx ice_collocationOptimized(boolean b);

    @Override
    IPrx ice_twoway();

    @Override
    IPrx ice_oneway();

    @Override
    IPrx ice_batchOneway();

    @Override
    IPrx ice_datagram();

    @Override
    IPrx ice_batchDatagram();

    @Override
    IPrx ice_compress(boolean co);

    @Override
    IPrx ice_connectionId(String connectionId);

    @Override
    IPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::Inner::I";
    }

    /**
     * @hidden
     **/
    @Override
    default IPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _IPrxI(ref);
    }
}
