//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

/**
 * The SubscriberSession servant is hosted by the subscriber node and is accessed by the publisher node.
 **/
public interface SubscriberSessionPrx extends SessionPrx
{
    /**
     * Queue a sample with the subscribers of the topic element.
     * @param topicId The unique identifier for the topic to which the sample belong.
     * @param elementId The unique identifier for the element to which the sample belong.
     * @param sample The sample to queue.
     **/
    default void s(long topicId, long elementId, DataSample sample)
    {
        s(topicId, elementId, sample, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Queue a sample with the subscribers of the topic element.
     * @param topicId The unique identifier for the topic to which the sample belong.
     * @param elementId The unique identifier for the element to which the sample belong.
     * @param sample The sample to queue.
     * @param context The Context map to send with the invocation.
     **/
    default void s(long topicId, long elementId, DataSample sample, java.util.Map<String, String> context)
    {
        _iceI_sAsync(topicId, elementId, sample, context, true).waitForResponse();
    }

    /**
     * Queue a sample with the subscribers of the topic element.
     * @param topicId The unique identifier for the topic to which the sample belong.
     * @param elementId The unique identifier for the element to which the sample belong.
     * @param sample The sample to queue.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> sAsync(long topicId, long elementId, DataSample sample)
    {
        return _iceI_sAsync(topicId, elementId, sample, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Queue a sample with the subscribers of the topic element.
     * @param topicId The unique identifier for the topic to which the sample belong.
     * @param elementId The unique identifier for the element to which the sample belong.
     * @param sample The sample to queue.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> sAsync(long topicId, long elementId, DataSample sample, java.util.Map<String, String> context)
    {
        return _iceI_sAsync(topicId, elementId, sample, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_elementId -
     * @param iceP_sample -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_sAsync(long iceP_topicId, long iceP_elementId, DataSample iceP_sample, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "s", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ostr.writeLong(iceP_elementId);
                     DataSample.ice_write(ostr, iceP_sample);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link SubscriberSessionPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static SubscriberSessionPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _SubscriberSessionPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SubscriberSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SubscriberSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _SubscriberSessionPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SubscriberSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SubscriberSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SubscriberSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _SubscriberSessionPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SubscriberSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _SubscriberSessionPrxI(obj.ice_facet(facet));
    }

    @Override
    SubscriberSessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SubscriberSessionPrx ice_adapterId(String newAdapterId);

    @Override
    SubscriberSessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SubscriberSessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SubscriberSessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    SubscriberSessionPrx ice_connectionCached(boolean newCache);

    @Override
    SubscriberSessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SubscriberSessionPrx ice_secure(boolean b);

    @Override
    SubscriberSessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SubscriberSessionPrx ice_preferSecure(boolean b);

    @Override
    SubscriberSessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SubscriberSessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SubscriberSessionPrx ice_collocationOptimized(boolean b);

    @Override
    SubscriberSessionPrx ice_twoway();

    @Override
    SubscriberSessionPrx ice_oneway();

    @Override
    SubscriberSessionPrx ice_batchOneway();

    @Override
    SubscriberSessionPrx ice_datagram();

    @Override
    SubscriberSessionPrx ice_batchDatagram();

    @Override
    SubscriberSessionPrx ice_compress(boolean co);

    @Override
    SubscriberSessionPrx ice_connectionId(String connectionId);

    @Override
    SubscriberSessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::DataStormContract::SubscriberSession";
    }

    /**
     * @hidden
     **/
    @Override
    default SubscriberSessionPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _SubscriberSessionPrxI(ref);
    }
}
