// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package DataStormContract;

/**
 * The Node interface allows DataStorm nodes to create publisher and subscriber sessions with each other.
 *
 * When a node has a writer for a topic that another node is reading, the node initiates the creation of a
 * publisher session. Likewise, when a node has a reader for a topic that another node is writing, the node
 * initiates the creation of a subscriber session.
 *
 * The publisher node hosts the publisher session servant, which is accessed by the subscriber node through a
 * PublisherSession proxy. The subscriber node hosts the subscriber session servant, which is accessed by the
 * publisher node through a SubscriberSession proxy.
 **/
public interface NodePrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Initiate the creation of a publisher session with a node, after the target node has announced a topic
     * reader for which this node has a corresponding topic writer.
     * @param publisher The publisher node initiating the session. The proxy is never null.
     *
     * @see Lookup::announceTopicReader
     **/
    default void initiateCreateSession(NodePrx publisher)
    {
        initiateCreateSession(publisher, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Initiate the creation of a publisher session with a node, after the target node has announced a topic
     * reader for which this node has a corresponding topic writer.
     * @param publisher The publisher node initiating the session. The proxy is never null.
     * @param context The Context map to send with the invocation.
     *
     * @see Lookup::announceTopicReader
     **/
    default void initiateCreateSession(NodePrx publisher, java.util.Map<String, String> context)
    {
        _iceI_initiateCreateSessionAsync(publisher, context, true).waitForResponse();
    }

    /**
     * Initiate the creation of a publisher session with a node, after the target node has announced a topic
     * reader for which this node has a corresponding topic writer.
     * @param publisher The publisher node initiating the session. The proxy is never null.
     * @return A future that will be completed when the invocation completes.
     *
     * @see Lookup::announceTopicReader
     **/
    default java.util.concurrent.CompletableFuture<Void> initiateCreateSessionAsync(NodePrx publisher)
    {
        return _iceI_initiateCreateSessionAsync(publisher, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Initiate the creation of a publisher session with a node, after the target node has announced a topic
     * reader for which this node has a corresponding topic writer.
     * @param publisher The publisher node initiating the session. The proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     *
     * @see Lookup::announceTopicReader
     **/
    default java.util.concurrent.CompletableFuture<Void> initiateCreateSessionAsync(NodePrx publisher, java.util.Map<String, String> context)
    {
        return _iceI_initiateCreateSessionAsync(publisher, context, false);
    }

    /**
     * @hidden
     * @param iceP_publisher -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_initiateCreateSessionAsync(NodePrx iceP_publisher, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "initiateCreateSession", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_publisher);
                 }, null);
        return f;
    }

    /**
     * Initiates the creation of a subscriber session with a node. The subscriber node sends this request to a
     * publisher node in one of the following scenarios:
     *
     * - The subscriber has received a topic writer announcement from the publisher and has a matching topic
     * reader.
     * - The publisher node has previously sent a initiateCreateSession request.
     *
     * The publisher node dispatching this request then sends a confirmCreateSession request to the subscriber node
     * to continue session establishment. If an active session already exists with the subscriber node, the
     * request is ignored.
     * @param subscriber The subscriber node initiating the session. This proxy is never null.
     * @param session The subscriber session being created. This proxy is never null.
     * @param fromRelay Indicates whether the session is being created from a relay node.
     **/
    default void createSession(NodePrx subscriber, SubscriberSessionPrx session, boolean fromRelay)
    {
        createSession(subscriber, session, fromRelay, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Initiates the creation of a subscriber session with a node. The subscriber node sends this request to a
     * publisher node in one of the following scenarios:
     *
     * - The subscriber has received a topic writer announcement from the publisher and has a matching topic
     * reader.
     * - The publisher node has previously sent a initiateCreateSession request.
     *
     * The publisher node dispatching this request then sends a confirmCreateSession request to the subscriber node
     * to continue session establishment. If an active session already exists with the subscriber node, the
     * request is ignored.
     * @param subscriber The subscriber node initiating the session. This proxy is never null.
     * @param session The subscriber session being created. This proxy is never null.
     * @param fromRelay Indicates whether the session is being created from a relay node.
     * @param context The Context map to send with the invocation.
     **/
    default void createSession(NodePrx subscriber, SubscriberSessionPrx session, boolean fromRelay, java.util.Map<String, String> context)
    {
        _iceI_createSessionAsync(subscriber, session, fromRelay, context, true).waitForResponse();
    }

    /**
     * Initiates the creation of a subscriber session with a node. The subscriber node sends this request to a
     * publisher node in one of the following scenarios:
     *
     * - The subscriber has received a topic writer announcement from the publisher and has a matching topic
     * reader.
     * - The publisher node has previously sent a initiateCreateSession request.
     *
     * The publisher node dispatching this request then sends a confirmCreateSession request to the subscriber node
     * to continue session establishment. If an active session already exists with the subscriber node, the
     * request is ignored.
     * @param subscriber The subscriber node initiating the session. This proxy is never null.
     * @param session The subscriber session being created. This proxy is never null.
     * @param fromRelay Indicates whether the session is being created from a relay node.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> createSessionAsync(NodePrx subscriber, SubscriberSessionPrx session, boolean fromRelay)
    {
        return _iceI_createSessionAsync(subscriber, session, fromRelay, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Initiates the creation of a subscriber session with a node. The subscriber node sends this request to a
     * publisher node in one of the following scenarios:
     *
     * - The subscriber has received a topic writer announcement from the publisher and has a matching topic
     * reader.
     * - The publisher node has previously sent a initiateCreateSession request.
     *
     * The publisher node dispatching this request then sends a confirmCreateSession request to the subscriber node
     * to continue session establishment. If an active session already exists with the subscriber node, the
     * request is ignored.
     * @param subscriber The subscriber node initiating the session. This proxy is never null.
     * @param session The subscriber session being created. This proxy is never null.
     * @param fromRelay Indicates whether the session is being created from a relay node.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> createSessionAsync(NodePrx subscriber, SubscriberSessionPrx session, boolean fromRelay, java.util.Map<String, String> context)
    {
        return _iceI_createSessionAsync(subscriber, session, fromRelay, context, false);
    }

    /**
     * @hidden
     * @param iceP_subscriber -
     * @param iceP_session -
     * @param iceP_fromRelay -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_createSessionAsync(NodePrx iceP_subscriber, SubscriberSessionPrx iceP_session, boolean iceP_fromRelay, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "createSession", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_subscriber);
                     ostr.writeProxy(iceP_session);
                     ostr.writeBool(iceP_fromRelay);
                 }, null);
        return f;
    }

    /**
     * Confirm the creation of a publisher session with a node.
     * @param publisher The publisher node confirming the session. The proxy is never null.
     * @param session The publisher session being confirmed. The proxy is never null.
     **/
    default void confirmCreateSession(NodePrx publisher, PublisherSessionPrx session)
    {
        confirmCreateSession(publisher, session, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Confirm the creation of a publisher session with a node.
     * @param publisher The publisher node confirming the session. The proxy is never null.
     * @param session The publisher session being confirmed. The proxy is never null.
     * @param context The Context map to send with the invocation.
     **/
    default void confirmCreateSession(NodePrx publisher, PublisherSessionPrx session, java.util.Map<String, String> context)
    {
        _iceI_confirmCreateSessionAsync(publisher, session, context, true).waitForResponse();
    }

    /**
     * Confirm the creation of a publisher session with a node.
     * @param publisher The publisher node confirming the session. The proxy is never null.
     * @param session The publisher session being confirmed. The proxy is never null.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> confirmCreateSessionAsync(NodePrx publisher, PublisherSessionPrx session)
    {
        return _iceI_confirmCreateSessionAsync(publisher, session, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Confirm the creation of a publisher session with a node.
     * @param publisher The publisher node confirming the session. The proxy is never null.
     * @param session The publisher session being confirmed. The proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> confirmCreateSessionAsync(NodePrx publisher, PublisherSessionPrx session, java.util.Map<String, String> context)
    {
        return _iceI_confirmCreateSessionAsync(publisher, session, context, false);
    }

    /**
     * @hidden
     * @param iceP_publisher -
     * @param iceP_session -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_confirmCreateSessionAsync(NodePrx iceP_publisher, PublisherSessionPrx iceP_session, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "confirmCreateSession", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_publisher);
                     ostr.writeProxy(iceP_session);
                 }, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link NodePrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static NodePrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _NodePrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _NodePrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _NodePrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _NodePrxI(obj.ice_facet(facet));
    }

    @Override
    NodePrx ice_context(java.util.Map<String, String> newContext);

    @Override
    NodePrx ice_adapterId(String newAdapterId);

    @Override
    NodePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    NodePrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    NodePrx ice_invocationTimeout(int newTimeout);

    @Override
    NodePrx ice_connectionCached(boolean newCache);

    @Override
    NodePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    NodePrx ice_secure(boolean b);

    @Override
    NodePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    NodePrx ice_preferSecure(boolean b);

    @Override
    NodePrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    NodePrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    NodePrx ice_collocationOptimized(boolean b);

    @Override
    NodePrx ice_twoway();

    @Override
    NodePrx ice_oneway();

    @Override
    NodePrx ice_batchOneway();

    @Override
    NodePrx ice_datagram();

    @Override
    NodePrx ice_batchDatagram();

    @Override
    NodePrx ice_compress(boolean co);

    @Override
    NodePrx ice_connectionId(String connectionId);

    @Override
    NodePrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::DataStormContract::Node";
    }

    /**
     * @hidden
     **/
    @Override
    default NodePrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _NodePrxI(ref);
    }
}
