//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

/**
 * The base interface for publisher and subscriber sessions.
 *
 * This interface specifies the operations for communication between publisher and subscriber sessions.
 *
 * @see PublisherSession
 * @see SubscriberSession
 **/
public interface SessionPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Announces topics to the peer during session establishment or when adding new topics.
     *
     * - During session establishment, announces existing topics.
     * - For established sessions, announces newly added topics.
     *
     * A publisher session announces the topics it writes, and a subscriber session announces the topics it reads.
     *
     * The receiving peer invokes attachTopic for topics it is interested in.
     * @param topics The sequence of topics to announce.
     * @param initialize Currently unused.
     *
     * @see attachTopic
     **/
    default void announceTopics(TopicInfo[] topics, boolean initialize)
    {
        announceTopics(topics, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Announces topics to the peer during session establishment or when adding new topics.
     *
     * - During session establishment, announces existing topics.
     * - For established sessions, announces newly added topics.
     *
     * A publisher session announces the topics it writes, and a subscriber session announces the topics it reads.
     *
     * The receiving peer invokes attachTopic for topics it is interested in.
     * @param topics The sequence of topics to announce.
     * @param initialize Currently unused.
     * @param context The Context map to send with the invocation.
     *
     * @see attachTopic
     **/
    default void announceTopics(TopicInfo[] topics, boolean initialize, java.util.Map<String, String> context)
    {
        _iceI_announceTopicsAsync(topics, initialize, context, true).waitForResponse();
    }

    /**
     * Announces topics to the peer during session establishment or when adding new topics.
     *
     * - During session establishment, announces existing topics.
     * - For established sessions, announces newly added topics.
     *
     * A publisher session announces the topics it writes, and a subscriber session announces the topics it reads.
     *
     * The receiving peer invokes attachTopic for topics it is interested in.
     * @param topics The sequence of topics to announce.
     * @param initialize Currently unused.
     * @return A future that will be completed when the invocation completes.
     *
     * @see attachTopic
     **/
    default java.util.concurrent.CompletableFuture<Void> announceTopicsAsync(TopicInfo[] topics, boolean initialize)
    {
        return _iceI_announceTopicsAsync(topics, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Announces topics to the peer during session establishment or when adding new topics.
     *
     * - During session establishment, announces existing topics.
     * - For established sessions, announces newly added topics.
     *
     * A publisher session announces the topics it writes, and a subscriber session announces the topics it reads.
     *
     * The receiving peer invokes attachTopic for topics it is interested in.
     * @param topics The sequence of topics to announce.
     * @param initialize Currently unused.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     *
     * @see attachTopic
     **/
    default java.util.concurrent.CompletableFuture<Void> announceTopicsAsync(TopicInfo[] topics, boolean initialize, java.util.Map<String, String> context)
    {
        return _iceI_announceTopicsAsync(topics, initialize, context, false);
    }

    /**
     * @hidden
     * @param iceP_topics -
     * @param iceP_initialize -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_announceTopicsAsync(TopicInfo[] iceP_topics, boolean iceP_initialize, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "announceTopics", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     TopicInfoSeqHelper.write(ostr, iceP_topics);
                     ostr.writeBool(iceP_initialize);
                 }, null);
        return f;
    }

    /**
     * This operation is invoked if the session is interested in the announced topic. Which occurs when:
     *
     * - The session has a reader for a topic that the peer writes, or
     * - The session has a writer for a topic that the peer reads.
     * @param topic The TopicSpec describing the topic to attach.
     **/
    default void attachTopic(TopicSpec topic)
    {
        attachTopic(topic, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * This operation is invoked if the session is interested in the announced topic. Which occurs when:
     *
     * - The session has a reader for a topic that the peer writes, or
     * - The session has a writer for a topic that the peer reads.
     * @param topic The TopicSpec describing the topic to attach.
     * @param context The Context map to send with the invocation.
     **/
    default void attachTopic(TopicSpec topic, java.util.Map<String, String> context)
    {
        _iceI_attachTopicAsync(topic, context, true).waitForResponse();
    }

    /**
     * This operation is invoked if the session is interested in the announced topic. Which occurs when:
     *
     * - The session has a reader for a topic that the peer writes, or
     * - The session has a writer for a topic that the peer reads.
     * @param topic The TopicSpec describing the topic to attach.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachTopicAsync(TopicSpec topic)
    {
        return _iceI_attachTopicAsync(topic, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * This operation is invoked if the session is interested in the announced topic. Which occurs when:
     *
     * - The session has a reader for a topic that the peer writes, or
     * - The session has a writer for a topic that the peer reads.
     * @param topic The TopicSpec describing the topic to attach.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachTopicAsync(TopicSpec topic, java.util.Map<String, String> context)
    {
        return _iceI_attachTopicAsync(topic, context, false);
    }

    /**
     * @hidden
     * @param iceP_topic -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_attachTopicAsync(TopicSpec iceP_topic, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "attachTopic", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     TopicSpec.ice_write(ostr, iceP_topic);
                 }, null);
        return f;
    }

    /**
     * Detaches a topic from the session, typically called when the topic is destroyed.
     *
     * This operation is invoked by the topic on listener sessions during its destruction.
     * @param topicId The unique identifier for the topic to detach.
     **/
    default void detachTopic(long topicId)
    {
        detachTopic(topicId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Detaches a topic from the session, typically called when the topic is destroyed.
     *
     * This operation is invoked by the topic on listener sessions during its destruction.
     * @param topicId The unique identifier for the topic to detach.
     * @param context The Context map to send with the invocation.
     **/
    default void detachTopic(long topicId, java.util.Map<String, String> context)
    {
        _iceI_detachTopicAsync(topicId, context, true).waitForResponse();
    }

    /**
     * Detaches a topic from the session, typically called when the topic is destroyed.
     *
     * This operation is invoked by the topic on listener sessions during its destruction.
     * @param topicId The unique identifier for the topic to detach.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachTopicAsync(long topicId)
    {
        return _iceI_detachTopicAsync(topicId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Detaches a topic from the session, typically called when the topic is destroyed.
     *
     * This operation is invoked by the topic on listener sessions during its destruction.
     * @param topicId The unique identifier for the topic to detach.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachTopicAsync(long topicId, java.util.Map<String, String> context)
    {
        return _iceI_detachTopicAsync(topicId, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_detachTopicAsync(long iceP_topicId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "detachTopic", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                 }, null);
        return f;
    }

    /**
     * Attaches the specified tags to the subscriber of a topic.
     *
     * Tags are used to support partial update samples.
     * @param topicId The unique identifier for the topic to which the tags will be attached.
     * @param tags The sequence of tags to attach, representing the partial update associations.
     * @param initialize Indicates whether the tags are being attached during session initialization.
     **/
    default void attachTags(long topicId, ElementInfo[] tags, boolean initialize)
    {
        attachTags(topicId, tags, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Attaches the specified tags to the subscriber of a topic.
     *
     * Tags are used to support partial update samples.
     * @param topicId The unique identifier for the topic to which the tags will be attached.
     * @param tags The sequence of tags to attach, representing the partial update associations.
     * @param initialize Indicates whether the tags are being attached during session initialization.
     * @param context The Context map to send with the invocation.
     **/
    default void attachTags(long topicId, ElementInfo[] tags, boolean initialize, java.util.Map<String, String> context)
    {
        _iceI_attachTagsAsync(topicId, tags, initialize, context, true).waitForResponse();
    }

    /**
     * Attaches the specified tags to the subscriber of a topic.
     *
     * Tags are used to support partial update samples.
     * @param topicId The unique identifier for the topic to which the tags will be attached.
     * @param tags The sequence of tags to attach, representing the partial update associations.
     * @param initialize Indicates whether the tags are being attached during session initialization.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachTagsAsync(long topicId, ElementInfo[] tags, boolean initialize)
    {
        return _iceI_attachTagsAsync(topicId, tags, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Attaches the specified tags to the subscriber of a topic.
     *
     * Tags are used to support partial update samples.
     * @param topicId The unique identifier for the topic to which the tags will be attached.
     * @param tags The sequence of tags to attach, representing the partial update associations.
     * @param initialize Indicates whether the tags are being attached during session initialization.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachTagsAsync(long topicId, ElementInfo[] tags, boolean initialize, java.util.Map<String, String> context)
    {
        return _iceI_attachTagsAsync(topicId, tags, initialize, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_tags -
     * @param iceP_initialize -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_attachTagsAsync(long iceP_topicId, ElementInfo[] iceP_tags, boolean iceP_initialize, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "attachTags", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ElementInfoSeqHelper.write(ostr, iceP_tags);
                     ostr.writeBool(iceP_initialize);
                 }, null);
        return f;
    }

    /**
     * Detaches tags from the session.
     * @param topicId The unique identifier for the topic.
     * @param tags The sequence of tag identifiers to detach.
     **/
    default void detachTags(long topicId, long[] tags)
    {
        detachTags(topicId, tags, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Detaches tags from the session.
     * @param topicId The unique identifier for the topic.
     * @param tags The sequence of tag identifiers to detach.
     * @param context The Context map to send with the invocation.
     **/
    default void detachTags(long topicId, long[] tags, java.util.Map<String, String> context)
    {
        _iceI_detachTagsAsync(topicId, tags, context, true).waitForResponse();
    }

    /**
     * Detaches tags from the session.
     * @param topicId The unique identifier for the topic.
     * @param tags The sequence of tag identifiers to detach.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachTagsAsync(long topicId, long[] tags)
    {
        return _iceI_detachTagsAsync(topicId, tags, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Detaches tags from the session.
     * @param topicId The unique identifier for the topic.
     * @param tags The sequence of tag identifiers to detach.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachTagsAsync(long topicId, long[] tags, java.util.Map<String, String> context)
    {
        return _iceI_detachTagsAsync(topicId, tags, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_tags -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_detachTagsAsync(long iceP_topicId, long[] iceP_tags, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "detachTags", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ostr.writeLongSeq(iceP_tags);
                 }, null);
        return f;
    }

    /**
     * Announces elements associated with a topic to the peer.
     *
     * This operation informs the peer about new data readers or data writers associated with the specified topic.
     * The receiving peer will invoke `attachElements` for any elements it is interested in.
     *
     * - A publisher session announces its data writers.
     * - A subscriber session announces its data readers.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of elements to announce, representing the data readers or data writers.
     *
     * @see attachElements
     **/
    default void announceElements(long topicId, ElementInfo[] elements)
    {
        announceElements(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Announces elements associated with a topic to the peer.
     *
     * This operation informs the peer about new data readers or data writers associated with the specified topic.
     * The receiving peer will invoke `attachElements` for any elements it is interested in.
     *
     * - A publisher session announces its data writers.
     * - A subscriber session announces its data readers.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of elements to announce, representing the data readers or data writers.
     * @param context The Context map to send with the invocation.
     *
     * @see attachElements
     **/
    default void announceElements(long topicId, ElementInfo[] elements, java.util.Map<String, String> context)
    {
        _iceI_announceElementsAsync(topicId, elements, context, true).waitForResponse();
    }

    /**
     * Announces elements associated with a topic to the peer.
     *
     * This operation informs the peer about new data readers or data writers associated with the specified topic.
     * The receiving peer will invoke `attachElements` for any elements it is interested in.
     *
     * - A publisher session announces its data writers.
     * - A subscriber session announces its data readers.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of elements to announce, representing the data readers or data writers.
     * @return A future that will be completed when the invocation completes.
     *
     * @see attachElements
     **/
    default java.util.concurrent.CompletableFuture<Void> announceElementsAsync(long topicId, ElementInfo[] elements)
    {
        return _iceI_announceElementsAsync(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Announces elements associated with a topic to the peer.
     *
     * This operation informs the peer about new data readers or data writers associated with the specified topic.
     * The receiving peer will invoke `attachElements` for any elements it is interested in.
     *
     * - A publisher session announces its data writers.
     * - A subscriber session announces its data readers.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of elements to announce, representing the data readers or data writers.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     *
     * @see attachElements
     **/
    default java.util.concurrent.CompletableFuture<Void> announceElementsAsync(long topicId, ElementInfo[] elements, java.util.Map<String, String> context)
    {
        return _iceI_announceElementsAsync(topicId, elements, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_elements -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_announceElementsAsync(long iceP_topicId, ElementInfo[] iceP_elements, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "announceElements", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ElementInfoSeqHelper.write(ostr, iceP_elements);
                 }, null);
        return f;
    }

    /**
     * Attaches the specified elements to the subscribers of a topic.
     *
     * This operation associates the provided elements, such as keys or filters, with the subscribers of the given
     * topic.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of `ElementSpec` objects representing the elements to attach.
     * @param initialize Indicates whether the elements are being attached during session initialization.
     **/
    default void attachElements(long topicId, ElementSpec[] elements, boolean initialize)
    {
        attachElements(topicId, elements, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Attaches the specified elements to the subscribers of a topic.
     *
     * This operation associates the provided elements, such as keys or filters, with the subscribers of the given
     * topic.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of `ElementSpec` objects representing the elements to attach.
     * @param initialize Indicates whether the elements are being attached during session initialization.
     * @param context The Context map to send with the invocation.
     **/
    default void attachElements(long topicId, ElementSpec[] elements, boolean initialize, java.util.Map<String, String> context)
    {
        _iceI_attachElementsAsync(topicId, elements, initialize, context, true).waitForResponse();
    }

    /**
     * Attaches the specified elements to the subscribers of a topic.
     *
     * This operation associates the provided elements, such as keys or filters, with the subscribers of the given
     * topic.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of `ElementSpec` objects representing the elements to attach.
     * @param initialize Indicates whether the elements are being attached during session initialization.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachElementsAsync(long topicId, ElementSpec[] elements, boolean initialize)
    {
        return _iceI_attachElementsAsync(topicId, elements, initialize, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Attaches the specified elements to the subscribers of a topic.
     *
     * This operation associates the provided elements, such as keys or filters, with the subscribers of the given
     * topic.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements The sequence of `ElementSpec` objects representing the elements to attach.
     * @param initialize Indicates whether the elements are being attached during session initialization.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachElementsAsync(long topicId, ElementSpec[] elements, boolean initialize, java.util.Map<String, String> context)
    {
        return _iceI_attachElementsAsync(topicId, elements, initialize, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_elements -
     * @param iceP_initialize -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_attachElementsAsync(long iceP_topicId, ElementSpec[] iceP_elements, boolean iceP_initialize, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "attachElements", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ElementSpecSeqHelper.write(ostr, iceP_elements);
                     ostr.writeBool(iceP_initialize);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * Acknowledges the attachment of elements to the session in response to a previous attachElements request.
     *
     * This method confirms that the specified elements, such as keys or filters, have been successfully attached
     * to the session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of `ElementSpecAck` objects representing the confirmed attachments.
     **/
    default void attachElementsAck(long topicId, ElementSpecAck[] elements)
    {
        attachElementsAck(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Acknowledges the attachment of elements to the session in response to a previous attachElements request.
     *
     * This method confirms that the specified elements, such as keys or filters, have been successfully attached
     * to the session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of `ElementSpecAck` objects representing the confirmed attachments.
     * @param context The Context map to send with the invocation.
     **/
    default void attachElementsAck(long topicId, ElementSpecAck[] elements, java.util.Map<String, String> context)
    {
        _iceI_attachElementsAckAsync(topicId, elements, context, true).waitForResponse();
    }

    /**
     * Acknowledges the attachment of elements to the session in response to a previous attachElements request.
     *
     * This method confirms that the specified elements, such as keys or filters, have been successfully attached
     * to the session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of `ElementSpecAck` objects representing the confirmed attachments.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachElementsAckAsync(long topicId, ElementSpecAck[] elements)
    {
        return _iceI_attachElementsAckAsync(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Acknowledges the attachment of elements to the session in response to a previous attachElements request.
     *
     * This method confirms that the specified elements, such as keys or filters, have been successfully attached
     * to the session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of `ElementSpecAck` objects representing the confirmed attachments.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> attachElementsAckAsync(long topicId, ElementSpecAck[] elements, java.util.Map<String, String> context)
    {
        return _iceI_attachElementsAckAsync(topicId, elements, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_elements -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_attachElementsAckAsync(long iceP_topicId, ElementSpecAck[] iceP_elements, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "attachElementsAck", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ElementSpecAckSeqHelper.write(ostr, iceP_elements);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * Instructs the peer to detach specific elements associated with a topic.
     *
     * This operation is invoked when the specified elements, such as keys or filters, are no longer valid
     * and should be removed from the peer's session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of element identifiers representing the keys or filters to detach.
     **/
    default void detachElements(long topicId, long[] elements)
    {
        detachElements(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Instructs the peer to detach specific elements associated with a topic.
     *
     * This operation is invoked when the specified elements, such as keys or filters, are no longer valid
     * and should be removed from the peer's session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of element identifiers representing the keys or filters to detach.
     * @param context The Context map to send with the invocation.
     **/
    default void detachElements(long topicId, long[] elements, java.util.Map<String, String> context)
    {
        _iceI_detachElementsAsync(topicId, elements, context, true).waitForResponse();
    }

    /**
     * Instructs the peer to detach specific elements associated with a topic.
     *
     * This operation is invoked when the specified elements, such as keys or filters, are no longer valid
     * and should be removed from the peer's session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of element identifiers representing the keys or filters to detach.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachElementsAsync(long topicId, long[] elements)
    {
        return _iceI_detachElementsAsync(topicId, elements, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Instructs the peer to detach specific elements associated with a topic.
     *
     * This operation is invoked when the specified elements, such as keys or filters, are no longer valid
     * and should be removed from the peer's session.
     * @param topicId The unique identifier for the topic to which the elements belong.
     * @param elements A sequence of element identifiers representing the keys or filters to detach.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> detachElementsAsync(long topicId, long[] elements, java.util.Map<String, String> context)
    {
        return _iceI_detachElementsAsync(topicId, elements, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_elements -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_detachElementsAsync(long iceP_topicId, long[] iceP_elements, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "detachElements", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     ostr.writeLongSeq(iceP_elements);
                 }, null);
        return f;
    }

    /**
     * Initializes the subscriber with the publisher queued samples for a topic during session establishment.
     * @param topicId The unique identifier for the topic.
     * @param samples A sequence of `DataSamples` containing the queued samples to initialize the subscriber.
     **/
    default void initSamples(long topicId, DataSamples[] samples)
    {
        initSamples(topicId, samples, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Initializes the subscriber with the publisher queued samples for a topic during session establishment.
     * @param topicId The unique identifier for the topic.
     * @param samples A sequence of `DataSamples` containing the queued samples to initialize the subscriber.
     * @param context The Context map to send with the invocation.
     **/
    default void initSamples(long topicId, DataSamples[] samples, java.util.Map<String, String> context)
    {
        _iceI_initSamplesAsync(topicId, samples, context, true).waitForResponse();
    }

    /**
     * Initializes the subscriber with the publisher queued samples for a topic during session establishment.
     * @param topicId The unique identifier for the topic.
     * @param samples A sequence of `DataSamples` containing the queued samples to initialize the subscriber.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> initSamplesAsync(long topicId, DataSamples[] samples)
    {
        return _iceI_initSamplesAsync(topicId, samples, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Initializes the subscriber with the publisher queued samples for a topic during session establishment.
     * @param topicId The unique identifier for the topic.
     * @param samples A sequence of `DataSamples` containing the queued samples to initialize the subscriber.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> initSamplesAsync(long topicId, DataSamples[] samples, java.util.Map<String, String> context)
    {
        return _iceI_initSamplesAsync(topicId, samples, context, false);
    }

    /**
     * @hidden
     * @param iceP_topicId -
     * @param iceP_samples -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_initSamplesAsync(long iceP_topicId, DataSamples[] iceP_samples, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "initSamples", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeLong(iceP_topicId);
                     DataSamplesSeqHelper.write(ostr, iceP_samples);
                 }, null);
        return f;
    }

    /**
     * Notifies the peer that the session is being disconnected.
     *
     * For sessions established through a relay node, this operation is invoked by the relay node if the connection
     * between the relay node and the target node is lost.
     **/
    default void disconnected()
    {
        disconnected(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Notifies the peer that the session is being disconnected.
     *
     * For sessions established through a relay node, this operation is invoked by the relay node if the connection
     * between the relay node and the target node is lost.
     * @param context The Context map to send with the invocation.
     **/
    default void disconnected(java.util.Map<String, String> context)
    {
        _iceI_disconnectedAsync(context, true).waitForResponse();
    }

    /**
     * Notifies the peer that the session is being disconnected.
     *
     * For sessions established through a relay node, this operation is invoked by the relay node if the connection
     * between the relay node and the target node is lost.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> disconnectedAsync()
    {
        return _iceI_disconnectedAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Notifies the peer that the session is being disconnected.
     *
     * For sessions established through a relay node, this operation is invoked by the relay node if the connection
     * between the relay node and the target node is lost.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> disconnectedAsync(java.util.Map<String, String> context)
    {
        return _iceI_disconnectedAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_disconnectedAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "disconnected", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link SessionPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static SessionPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _SessionPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _SessionPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static SessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _SessionPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static SessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _SessionPrxI(obj.ice_facet(facet));
    }

    @Override
    SessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    SessionPrx ice_adapterId(String newAdapterId);

    @Override
    SessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    SessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    SessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    SessionPrx ice_connectionCached(boolean newCache);

    @Override
    SessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    SessionPrx ice_secure(boolean b);

    @Override
    SessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    SessionPrx ice_preferSecure(boolean b);

    @Override
    SessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    SessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    SessionPrx ice_collocationOptimized(boolean b);

    @Override
    SessionPrx ice_twoway();

    @Override
    SessionPrx ice_oneway();

    @Override
    SessionPrx ice_batchOneway();

    @Override
    SessionPrx ice_datagram();

    @Override
    SessionPrx ice_batchDatagram();

    @Override
    SessionPrx ice_compress(boolean co);

    @Override
    SessionPrx ice_connectionId(String connectionId);

    @Override
    SessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::DataStormContract::Session";
    }

    /**
     * @hidden
     **/
    @Override
    default SessionPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _SessionPrxI(ref);
    }
}
