//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

/**
 * The lookup interface is used by DataStorm nodes to announce their topic readers and writers to other connected
 * nodes. When multicast is enabled, the lookup interface also broadcasts these announcements.
 * Each DataStorm node hosts a lookup servant with the identity "DataStorm/Lookup".
 **/
public interface Lookup extends com.zeroc.Ice.Object
{
    /**
     * Announce a topic reader.
     * @param topic The name of the topic.
     * @param subscriber The node reading the topic. The subscriber proxy is never null.
     * @param current The Current object for the invocation.
     **/
    void announceTopicReader(String topic, NodePrx subscriber, com.zeroc.Ice.Current current);

    /**
     * Announce a topic writer.
     * @param topic The name of the topic.
     * @param node The node writing the topic. The proxy is never null.
     * @param current The Current object for the invocation.
     **/
    void announceTopicWriter(String topic, NodePrx node, com.zeroc.Ice.Current current);

    /**
     * Announce a set of topic readers and writers.
     * @param readers A sequence of topic names for readers.
     * @param writers A sequence of topic names for writers.
     * @param node The node reading or writing the topics. The proxy is never null.
     * @param current The Current object for the invocation.
     **/
    void announceTopics(String[] readers, String[] writers, NodePrx node, com.zeroc.Ice.Current current);

    /**
     * Establish a connection between this node and another node.
     * @param node The node initiating the connection. The proxy is never null.
     * @param current The Current object for the invocation.
     * @return A proxy to this node. The proxy is never null.
     **/
    NodePrx createSession(NodePrx node, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::DataStormContract::Lookup",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::DataStormContract::Lookup";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_announceTopicReader(Lookup obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_topic;
        NodePrx iceP_subscriber;
        iceP_topic = istr.readString();
        iceP_subscriber = NodePrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.announceTopicReader(iceP_topic, iceP_subscriber, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_announceTopicWriter(Lookup obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_topic;
        NodePrx iceP_node;
        iceP_topic = istr.readString();
        iceP_node = NodePrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.announceTopicWriter(iceP_topic, iceP_node, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_announceTopics(Lookup obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String[] iceP_readers;
        String[] iceP_writers;
        NodePrx iceP_node;
        iceP_readers = istr.readStringSeq();
        iceP_writers = istr.readStringSeq();
        iceP_node = NodePrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.announceTopics(iceP_readers, iceP_writers, iceP_node, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_createSession(Lookup obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        NodePrx iceP_node;
        iceP_node = NodePrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        NodePrx ret = obj.createSession(iceP_node, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "announceTopicReader" -> Lookup._iceD_announceTopicReader(this, request);
            case "announceTopicWriter" -> Lookup._iceD_announceTopicWriter(this, request);
            case "announceTopics" -> Lookup._iceD_announceTopics(this, request);
            case "createSession" -> Lookup._iceD_createSession(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
