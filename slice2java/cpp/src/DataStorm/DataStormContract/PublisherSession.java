//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

/**
 * The PublisherSession servant is hosted by the publisher node and is accessed by the subscriber node.
 **/
public interface PublisherSession extends Session
{
    /** @hidden */
    static final String[] _iceIds =
    {
        "::DataStormContract::PublisherSession",
        "::DataStormContract::Session",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::DataStormContract::PublisherSession";
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "announceTopics" -> Session._iceD_announceTopics(this, request);
            case "attachTopic" -> Session._iceD_attachTopic(this, request);
            case "detachTopic" -> Session._iceD_detachTopic(this, request);
            case "attachTags" -> Session._iceD_attachTags(this, request);
            case "detachTags" -> Session._iceD_detachTags(this, request);
            case "announceElements" -> Session._iceD_announceElements(this, request);
            case "attachElements" -> Session._iceD_attachElements(this, request);
            case "attachElementsAck" -> Session._iceD_attachElementsAck(this, request);
            case "detachElements" -> Session._iceD_detachElements(this, request);
            case "initSamples" -> Session._iceD_initSamples(this, request);
            case "disconnected" -> Session._iceD_disconnected(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
