//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

/**
 * The SubscriberSession servant is hosted by the subscriber node and is accessed by the publisher node.
 **/
public interface SubscriberSession extends Session
{
    /**
     * Queue a sample with the subscribers of the topic element.
     * @param topicId The unique identifier for the topic to which the sample belong.
     * @param elementId The unique identifier for the element to which the sample belong.
     * @param sample The sample to queue.
     * @param current The Current object for the invocation.
     **/
    void s(long topicId, long elementId, DataSample sample, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::DataStormContract::Session",
        "::DataStormContract::SubscriberSession",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::DataStormContract::SubscriberSession";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_s(SubscriberSession obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topicId;
        long iceP_elementId;
        DataSample iceP_sample;
        iceP_topicId = istr.readLong();
        iceP_elementId = istr.readLong();
        iceP_sample = DataSample.ice_read(istr);
        istr.endEncapsulation();
        obj.s(iceP_topicId, iceP_elementId, iceP_sample, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "announceTopics" -> Session._iceD_announceTopics(this, request);
            case "attachTopic" -> Session._iceD_attachTopic(this, request);
            case "detachTopic" -> Session._iceD_detachTopic(this, request);
            case "attachTags" -> Session._iceD_attachTags(this, request);
            case "detachTags" -> Session._iceD_detachTags(this, request);
            case "announceElements" -> Session._iceD_announceElements(this, request);
            case "attachElements" -> Session._iceD_attachElements(this, request);
            case "attachElementsAck" -> Session._iceD_attachElementsAck(this, request);
            case "detachElements" -> Session._iceD_detachElements(this, request);
            case "initSamples" -> Session._iceD_initSamples(this, request);
            case "disconnected" -> Session._iceD_disconnected(this, request);
            case "s" -> SubscriberSession._iceD_s(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
