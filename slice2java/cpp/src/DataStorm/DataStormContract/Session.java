//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

public interface Session extends com.zeroc.Ice.Object
{
    /**
     * Announces existing topics to the peer during session establishment.
     * A publisher session announces the topics it writes, while a subscriber session announces the topics it reads.
     *
     * The peer receiving the announcement will invoke `attachTopic` for the topics it is interested in.
     * @param topics The sequence of topics to announce.
     * @param initialize Currently unused.
     * @param current The Current object for the invocation.
     *
     * @see attachTopic
     **/
    void announceTopics(TopicInfo[] topics, boolean initialize, com.zeroc.Ice.Current current);

    /**
     * Attaches a local topic to a remote topic when a session receives a topic announcement from a peer.
     *
     * This method is called if the session is interested in the announced topic, which occurs when:
     * - The session has a reader for a topic that the peer has a writer for, or
     * - The session has a writer for a topic that the peer has a reader for.
     * @param topic The TopicSpec object describing the topic being attached to the remote topic.
     * @param current The Current object for the invocation.
     **/
    void attachTopic(TopicSpec topic, com.zeroc.Ice.Current current);

    void detachTopic(long topic, com.zeroc.Ice.Current current);

    void attachTags(long topic, ElementInfo[] tags, boolean initialize, com.zeroc.Ice.Current current);

    void detachTags(long topic, long[] tags, com.zeroc.Ice.Current current);

    /**
     * Announces new elements to the peer.
     *
     * The peer will invoke `attachElements` for the elements it is interested in. The announced elements include
     * the readers and writers associated with the specified topic.
     * @param topic The ID of the topic associated with the elements.
     * @param elements The sequence of elements to announce.
     * @param current The Current object for the invocation.
     *
     * @see attachElements
     **/
    void announceElements(long topic, ElementInfo[] elements, com.zeroc.Ice.Current current);

    /**
     * Attaches the given topic elements to all subscribers of the specified topic.
     * @param topicId The ID of the topic to which the elements belong.
     * @param elements The sequence of elements to attach to the topic's subscribers.
     * @param initialize True if called from attachTopic, false otherwise.
     * @param current The Current object for the invocation.
     **/
    void attachElements(long topicId, ElementSpec[] elements, boolean initialize, com.zeroc.Ice.Current current);

    void attachElementsAck(long topic, ElementSpecAck[] elements, com.zeroc.Ice.Current current);

    void detachElements(long topic, long[] keys, com.zeroc.Ice.Current current);

    void initSamples(long topic, DataSamples[] samples, com.zeroc.Ice.Current current);

    void disconnected(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::DataStormContract::Session",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::DataStormContract::Session";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_announceTopics(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        TopicInfo[] iceP_topics;
        boolean iceP_initialize;
        iceP_topics = TopicInfoSeqHelper.read(istr);
        iceP_initialize = istr.readBool();
        istr.endEncapsulation();
        obj.announceTopics(iceP_topics, iceP_initialize, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_attachTopic(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        TopicSpec iceP_topic;
        iceP_topic = TopicSpec.ice_read(istr);
        istr.endEncapsulation();
        obj.attachTopic(iceP_topic, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_detachTopic(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        iceP_topic = istr.readLong();
        istr.endEncapsulation();
        obj.detachTopic(iceP_topic, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_attachTags(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        ElementInfo[] iceP_tags;
        boolean iceP_initialize;
        iceP_topic = istr.readLong();
        iceP_tags = ElementInfoSeqHelper.read(istr);
        iceP_initialize = istr.readBool();
        istr.endEncapsulation();
        obj.attachTags(iceP_topic, iceP_tags, iceP_initialize, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_detachTags(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        long[] iceP_tags;
        iceP_topic = istr.readLong();
        iceP_tags = istr.readLongSeq();
        istr.endEncapsulation();
        obj.detachTags(iceP_topic, iceP_tags, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_announceElements(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        ElementInfo[] iceP_elements;
        iceP_topic = istr.readLong();
        iceP_elements = ElementInfoSeqHelper.read(istr);
        istr.endEncapsulation();
        obj.announceElements(iceP_topic, iceP_elements, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_attachElements(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topicId;
        ElementSpec[] iceP_elements;
        boolean iceP_initialize;
        iceP_topicId = istr.readLong();
        iceP_elements = ElementSpecSeqHelper.read(istr);
        iceP_initialize = istr.readBool();
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.attachElements(iceP_topicId, iceP_elements, iceP_initialize, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_attachElementsAck(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        ElementSpecAck[] iceP_elements;
        iceP_topic = istr.readLong();
        iceP_elements = ElementSpecAckSeqHelper.read(istr);
        istr.readPendingValues();
        istr.endEncapsulation();
        obj.attachElementsAck(iceP_topic, iceP_elements, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_detachElements(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        long[] iceP_keys;
        iceP_topic = istr.readLong();
        iceP_keys = istr.readLongSeq();
        istr.endEncapsulation();
        obj.detachElements(iceP_topic, iceP_keys, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initSamples(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        long iceP_topic;
        DataSamples[] iceP_samples;
        iceP_topic = istr.readLong();
        iceP_samples = DataSamplesSeqHelper.read(istr);
        istr.endEncapsulation();
        obj.initSamples(iceP_topic, iceP_samples, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_disconnected(Session obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.disconnected(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "announceTopics" -> Session._iceD_announceTopics(this, request);
            case "attachTopic" -> Session._iceD_attachTopic(this, request);
            case "detachTopic" -> Session._iceD_detachTopic(this, request);
            case "attachTags" -> Session._iceD_attachTags(this, request);
            case "detachTags" -> Session._iceD_detachTags(this, request);
            case "announceElements" -> Session._iceD_announceElements(this, request);
            case "attachElements" -> Session._iceD_attachElements(this, request);
            case "attachElementsAck" -> Session._iceD_attachElementsAck(this, request);
            case "detachElements" -> Session._iceD_detachElements(this, request);
            case "initSamples" -> Session._iceD_initSamples(this, request);
            case "disconnected" -> Session._iceD_disconnected(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
