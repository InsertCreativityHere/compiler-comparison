//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Contract.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DataStormContract;

public interface Node extends com.zeroc.Ice.Object
{
    void initiateCreateSession(NodePrx publisher, com.zeroc.Ice.Current current);

    void createSession(NodePrx subscriber, SubscriberSessionPrx session, boolean fromRelay, com.zeroc.Ice.Current current);

    void confirmCreateSession(NodePrx publisher, PublisherSessionPrx session, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::DataStormContract::Node",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::DataStormContract::Node";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_initiateCreateSession(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        NodePrx iceP_publisher;
        iceP_publisher = NodePrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.initiateCreateSession(iceP_publisher, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_createSession(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        NodePrx iceP_subscriber;
        SubscriberSessionPrx iceP_session;
        boolean iceP_fromRelay;
        iceP_subscriber = NodePrx.uncheckedCast(istr.readProxy());
        iceP_session = SubscriberSessionPrx.uncheckedCast(istr.readProxy());
        iceP_fromRelay = istr.readBool();
        istr.endEncapsulation();
        obj.createSession(iceP_subscriber, iceP_session, iceP_fromRelay, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_confirmCreateSession(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        NodePrx iceP_publisher;
        PublisherSessionPrx iceP_session;
        iceP_publisher = NodePrx.uncheckedCast(istr.readProxy());
        iceP_session = PublisherSessionPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.confirmCreateSession(iceP_publisher, iceP_session, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "initiateCreateSession" -> Node._iceD_initiateCreateSession(this, request);
            case "createSession" -> Node._iceD_createSession(this, request);
            case "confirmCreateSession" -> Node._iceD_confirmCreateSession(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
