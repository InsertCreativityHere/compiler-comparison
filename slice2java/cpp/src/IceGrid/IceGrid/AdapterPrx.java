//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface AdapterPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
     * proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
     * adapter is inactive or the adapter direct proxy it's active.
     **/
    default com.zeroc.Ice.ObjectPrx activate()
    {
        return activate(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
     * proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
     * adapter is inactive or the adapter direct proxy it's active.
     * @param context The Context map to send with the invocation.
     **/
    default com.zeroc.Ice.ObjectPrx activate(java.util.Map<String, String> context)
    {
        return _iceI_activateAsync(context, true).waitForResponse();
    }

    /**
     * Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
     * proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
     * adapter is inactive or the adapter direct proxy it's active.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> activateAsync()
    {
        return _iceI_activateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
     * proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
     * adapter is inactive or the adapter direct proxy it's active.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> activateAsync(java.util.Map<String, String> context)
    {
        return _iceI_activateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_activateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "activate", null, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
     * contains the last known adapter endpoints.
     * @return A direct proxy containing the last known adapter endpoints if the adapter is already active.
     **/
    default com.zeroc.Ice.ObjectPrx getDirectProxy()
        throws AdapterNotActiveException
    {
        return getDirectProxy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
     * contains the last known adapter endpoints.
     * @param context The Context map to send with the invocation.
     * @return A direct proxy containing the last known adapter endpoints if the adapter is already active.
     **/
    default com.zeroc.Ice.ObjectPrx getDirectProxy(java.util.Map<String, String> context)
        throws AdapterNotActiveException
    {
        try
        {
            return _iceI_getDirectProxyAsync(context, true).waitForResponseOrUserEx();
        }
        catch(AdapterNotActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
     * contains the last known adapter endpoints.
     * @return A direct proxy containing the last known adapter endpoints if the adapter is already active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getDirectProxyAsync()
    {
        return _iceI_getDirectProxyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
     * contains the last known adapter endpoints.
     * @param context The Context map to send with the invocation.
     * @return A direct proxy containing the last known adapter endpoints if the adapter is already active.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getDirectProxyAsync(java.util.Map<String, String> context)
    {
        return _iceI_getDirectProxyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getDirectProxyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDirectProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_getDirectProxy);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getDirectProxy =
    {
        AdapterNotActiveException.class
    };

    /**
     * Set the direct proxy for this adapter.
     * @throws AdapterActiveException The adapter is already active. It's not possible to override the direct proxy of
     * an active adapter.
     **/
    default void setDirectProxy(com.zeroc.Ice.ObjectPrx proxy)
        throws AdapterActiveException
    {
        setDirectProxy(proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the direct proxy for this adapter.
     * @param context The Context map to send with the invocation.
     * @throws AdapterActiveException The adapter is already active. It's not possible to override the direct proxy of
     * an active adapter.
     **/
    default void setDirectProxy(com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
        throws AdapterActiveException
    {
        try
        {
            _iceI_setDirectProxyAsync(proxy, context, true).waitForResponseOrUserEx();
        }
        catch(AdapterActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Set the direct proxy for this adapter.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDirectProxyAsync(com.zeroc.Ice.ObjectPrx proxy)
    {
        return _iceI_setDirectProxyAsync(proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the direct proxy for this adapter.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDirectProxyAsync(com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_setDirectProxyAsync(proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setDirectProxyAsync(com.zeroc.Ice.ObjectPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setDirectProxy", null, sync, _iceE_setDirectProxy);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeProxy(iceP_proxy);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setDirectProxy =
    {
        AdapterActiveException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), AdapterPrx.class, _AdapterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), AdapterPrx.class, _AdapterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), AdapterPrx.class, _AdapterPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdapterPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), AdapterPrx.class, _AdapterPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static AdapterPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, AdapterPrx.class, _AdapterPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static AdapterPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, AdapterPrx.class, _AdapterPrxI.class);
    }

    @Override
    AdapterPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    AdapterPrx ice_adapterId(String newAdapterId);

    @Override
    AdapterPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    AdapterPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    AdapterPrx ice_invocationTimeout(int newTimeout);

    @Override
    AdapterPrx ice_connectionCached(boolean newCache);

    @Override
    AdapterPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    AdapterPrx ice_secure(boolean b);

    @Override
    AdapterPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    AdapterPrx ice_preferSecure(boolean b);

    @Override
    AdapterPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    AdapterPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    AdapterPrx ice_collocationOptimized(boolean b);

    @Override
    AdapterPrx ice_twoway();

    @Override
    AdapterPrx ice_oneway();

    @Override
    AdapterPrx ice_batchOneway();

    @Override
    AdapterPrx ice_datagram();

    @Override
    AdapterPrx ice_batchDatagram();

    @Override
    AdapterPrx ice_compress(boolean co);

    @Override
    AdapterPrx ice_connectionId(String connectionId);

    @Override
    AdapterPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::Adapter";
    }
}
