//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface Server extends FileReader
{
    /**
     * Start the server.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> startAsync(com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.ServerStartException;

    /**
     * Stop the server. This methods returns only when the server is
     * deactivated. If the server doesn't stop after a configurable
     * amount of time, it will be killed.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> stopAsync(com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.ServerStopException;

    /**
     * Check if the given server can be loaded on this node.
     * @param current The Current object for the invocation.
     * @return True if the server is inactive.
     * @throws DeploymentException Raised if the server can't be updated.
     **/
    boolean checkUpdate(InternalServerDescriptor svr, boolean noRestart, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Enable or disable the server.
     * @param current The Current object for the invocation.
     **/
    void setEnabled(boolean enable, com.zeroc.Ice.Current current);

    /**
     * Check if the server is enabled.
     * @param current The Current object for the invocation.
     **/
    boolean isEnabled(com.zeroc.Ice.Current current);

    /**
     * Send signal to the server
     * @param current The Current object for the invocation.
     **/
    void sendSignal(String signal, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.BadSignalException;

    /**
     * Write message on servers' stdout or stderr.
     * @param current The Current object for the invocation.
     **/
    void writeMessage(String message, int fd, com.zeroc.Ice.Current current);

    /**
     * Return the server state.
     * @param current The Current object for the invocation.
     * @return The server state.
     *
     * @see ServerState
     **/
    com.zeroc.IceGrid.ServerState getState(com.zeroc.Ice.Current current);

    /**
     * Get the server pid. Note that the value returned by this method
     * is system dependant. On Unix operating systems, it's the pid
     * value returned by the fork() system call and converted to an
     * integer.
     * @param current The Current object for the invocation.
     **/
    int getPid(com.zeroc.Ice.Current current);

    /**
     * Set the process proxy.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setProcessAsync(com.zeroc.Ice.ProcessPrx proc, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileReader",
        "::IceGrid::Server"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Server";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_start(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.startAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stop(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        return inS.setResultFuture(obj.stopAsync(current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_checkUpdate(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.IceInternal.Holder<>();
        boolean iceP_noRestart;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_noRestart = istr.readBool();
        istr.readPendingValues();
        inS.endReadParams();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        boolean ret = obj.checkUpdate(iceP_svr, iceP_noRestart, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setEnabled(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_enable;
        iceP_enable = istr.readBool();
        inS.endReadParams();
        obj.setEnabled(iceP_enable, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isEnabled(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.isEnabled(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sendSignal(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_signal;
        iceP_signal = istr.readString();
        inS.endReadParams();
        obj.sendSignal(iceP_signal, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_writeMessage(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_message;
        int iceP_fd;
        iceP_message = istr.readString();
        iceP_fd = istr.readInt();
        inS.endReadParams();
        obj.writeMessage(iceP_message, iceP_fd, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getState(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        com.zeroc.IceGrid.ServerState ret = obj.getState(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.zeroc.IceGrid.ServerState.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getPid(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        int ret = obj.getPid(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setProcess(Server obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.ProcessPrx iceP_proc;
        iceP_proc = com.zeroc.Ice.ProcessPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        return inS.setResultFuture(obj.setProcessAsync(iceP_proc, current));
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "checkUpdate",
        "getOffsetFromEnd",
        "getPid",
        "getState",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isEnabled",
        "read",
        "sendSignal",
        "setEnabled",
        "setProcess",
        "start",
        "stop",
        "writeMessage"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_checkUpdate(this, in, current);
            }
            case 1:
            {
                return FileReader._iceD_getOffsetFromEnd(this, in, current);
            }
            case 2:
            {
                return _iceD_getPid(this, in, current);
            }
            case 3:
            {
                return _iceD_getState(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_isEnabled(this, in, current);
            }
            case 9:
            {
                return FileReader._iceD_read(this, in, current);
            }
            case 10:
            {
                return _iceD_sendSignal(this, in, current);
            }
            case 11:
            {
                return _iceD_setEnabled(this, in, current);
            }
            case 12:
            {
                return _iceD_setProcess(this, in, current);
            }
            case 13:
            {
                return _iceD_start(this, in, current);
            }
            case 14:
            {
                return _iceD_stop(this, in, current);
            }
            case 15:
            {
                return _iceD_writeMessage(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
