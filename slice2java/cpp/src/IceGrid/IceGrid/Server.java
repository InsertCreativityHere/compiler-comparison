//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface Server extends FileReader
{
    /**
     * Start the server.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> startAsync(com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.ServerStartException;

    /**
     * Stop the server. This methods returns only when the server is deactivated. If the server doesn't stop after a
     * configurable amount of time, it will be killed.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> stopAsync(com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.ServerStopException;

    /**
     * Check if the given server can be loaded on this node.
     * @param current The Current object for the invocation.
     * @return True if the server is inactive.
     * @throws DeploymentException Raised if the server can't be updated.
     **/
    boolean checkUpdate(InternalServerDescriptor svr, boolean noRestart, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Enable or disable the server.
     * @param current The Current object for the invocation.
     **/
    void setEnabled(boolean enable, com.zeroc.Ice.Current current);

    /**
     * Check if the server is enabled.
     * @param current The Current object for the invocation.
     **/
    boolean isEnabled(com.zeroc.Ice.Current current);

    /**
     * Send signal to the server
     * @param current The Current object for the invocation.
     **/
    void sendSignal(String signal, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.BadSignalException;

    /**
     * Write message on servers' stdout or stderr.
     * @param current The Current object for the invocation.
     **/
    void writeMessage(String message, int fd, com.zeroc.Ice.Current current);

    /**
     * Return the server state.
     * @param current The Current object for the invocation.
     * @return The server state.
     *
     * @see ServerState
     **/
    com.zeroc.IceGrid.ServerState getState(com.zeroc.Ice.Current current);

    /**
     * Get the server pid. Note that the value returned by this method is system dependant. On Unix operating systems,
     * it's the pid value returned by the fork() system call and converted to an integer.
     * @param current The Current object for the invocation.
     **/
    int getPid(com.zeroc.Ice.Current current);

    /**
     * Set the process proxy.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> setProcessAsync(com.zeroc.Ice.ProcessPrx proc, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileReader",
        "::IceGrid::Server"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Server";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_start(Server obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.startAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_stop(Server obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.stopAsync(request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_checkUpdate(Server obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.Ice.Holder<>();
        boolean iceP_noRestart;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_noRestart = istr.readBool();
        istr.readPendingValues();
        istr.endEncapsulation();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        boolean ret = obj.checkUpdate(iceP_svr, iceP_noRestart, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setEnabled(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        boolean iceP_enable;
        iceP_enable = istr.readBool();
        istr.endEncapsulation();
        obj.setEnabled(iceP_enable, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_isEnabled(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean ret = obj.isEnabled(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_sendSignal(Server obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_signal;
        iceP_signal = istr.readString();
        istr.endEncapsulation();
        obj.sendSignal(iceP_signal, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_writeMessage(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_message;
        int iceP_fd;
        iceP_message = istr.readString();
        iceP_fd = istr.readInt();
        istr.endEncapsulation();
        obj.writeMessage(iceP_message, iceP_fd, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getState(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        com.zeroc.IceGrid.ServerState ret = obj.getState(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        com.zeroc.IceGrid.ServerState.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getPid(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        int ret = obj.getPid(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeInt(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setProcess(Server obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ProcessPrx iceP_proc;
        iceP_proc = com.zeroc.Ice.ProcessPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        var result = obj.setProcessAsync(iceP_proc, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getOffsetFromEnd" -> FileReader._iceD_getOffsetFromEnd(this, request);
            case "read" -> FileReader._iceD_read(this, request);
            case "start" -> Server._iceD_start(this, request);
            case "stop" -> Server._iceD_stop(this, request);
            case "checkUpdate" -> Server._iceD_checkUpdate(this, request);
            case "setEnabled" -> Server._iceD_setEnabled(this, request);
            case "isEnabled" -> Server._iceD_isEnabled(this, request);
            case "sendSignal" -> Server._iceD_sendSignal(this, request);
            case "writeMessage" -> Server._iceD_writeMessage(this, request);
            case "getState" -> Server._iceD_getState(this, request);
            case "getPid" -> Server._iceD_getPid(this, request);
            case "setProcess" -> Server._iceD_setProcess(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
