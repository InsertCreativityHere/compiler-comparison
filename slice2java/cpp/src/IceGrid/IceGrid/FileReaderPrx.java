// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package IceGrid;

public interface FileReaderPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Count the number of given lines from the end of the file and return the file offset.
     **/
    default long getOffsetFromEnd(String filename, int lines)
        throws com.zeroc.IceGrid.FileNotAvailableException
    {
        return getOffsetFromEnd(filename, lines, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Count the number of given lines from the end of the file and return the file offset.
     * @param context The Context map to send with the invocation.
     **/
    default long getOffsetFromEnd(String filename, int lines, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.FileNotAvailableException
    {
        try
        {
            return _iceI_getOffsetFromEndAsync(filename, lines, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Count the number of given lines from the end of the file and return the file offset.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Long> getOffsetFromEndAsync(String filename, int lines)
    {
        return _iceI_getOffsetFromEndAsync(filename, lines, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Count the number of given lines from the end of the file and return the file offset.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Long> getOffsetFromEndAsync(String filename, int lines, java.util.Map<String, String> context)
    {
        return _iceI_getOffsetFromEndAsync(filename, lines, context, false);
    }

    /**
     * @hidden
     * @param iceP_filename -
     * @param iceP_lines -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Long> _iceI_getOffsetFromEndAsync(String iceP_filename, int iceP_lines, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Long> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getOffsetFromEnd", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_getOffsetFromEnd);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_filename);
                     ostr.writeInt(iceP_lines);
                 }, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_getOffsetFromEnd =
    {
        com.zeroc.IceGrid.FileNotAvailableException.class
    };

    /**
     * Read lines (or size bytes) at the specified position from the given file.
     * @return An instance of FileReader.ReadResult.
     **/
    default FileReader.ReadResult read(String filename, long pos, int size)
        throws com.zeroc.IceGrid.FileNotAvailableException
    {
        return read(filename, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Read lines (or size bytes) at the specified position from the given file.
     * @param context The Context map to send with the invocation.
     * @return An instance of FileReader.ReadResult.
     **/
    default FileReader.ReadResult read(String filename, long pos, int size, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.FileNotAvailableException
    {
        try
        {
            return _iceI_readAsync(filename, pos, size, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.FileNotAvailableException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Read lines (or size bytes) at the specified position from the given file.
     * @return A future that will be completed with an instance of FileReader.ReadResult.
     **/
    default java.util.concurrent.CompletableFuture<FileReader.ReadResult> readAsync(String filename, long pos, int size)
    {
        return _iceI_readAsync(filename, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Read lines (or size bytes) at the specified position from the given file.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of FileReader.ReadResult.
     **/
    default java.util.concurrent.CompletableFuture<FileReader.ReadResult> readAsync(String filename, long pos, int size, java.util.Map<String, String> context)
    {
        return _iceI_readAsync(filename, pos, size, context, false);
    }

    /**
     * @hidden
     * @param iceP_filename -
     * @param iceP_pos -
     * @param iceP_size -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<FileReader.ReadResult> _iceI_readAsync(String iceP_filename, long iceP_pos, int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<FileReader.ReadResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "read", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_read);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_filename);
                     ostr.writeLong(iceP_pos);
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileReader.ReadResult ret = new FileReader.ReadResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_read =
    {
        com.zeroc.IceGrid.FileNotAvailableException.class
    };

    /**
     * Creates a new proxy that implements {@link FileReaderPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static FileReaderPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _FileReaderPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileReaderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileReaderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _FileReaderPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileReaderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileReaderPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FileReaderPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _FileReaderPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FileReaderPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _FileReaderPrxI(obj.ice_facet(facet));
    }

    @Override
    FileReaderPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    FileReaderPrx ice_adapterId(String newAdapterId);

    @Override
    FileReaderPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    FileReaderPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    FileReaderPrx ice_invocationTimeout(int newTimeout);

    @Override
    FileReaderPrx ice_connectionCached(boolean newCache);

    @Override
    FileReaderPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    FileReaderPrx ice_secure(boolean b);

    @Override
    FileReaderPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    FileReaderPrx ice_preferSecure(boolean b);

    @Override
    FileReaderPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    FileReaderPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    FileReaderPrx ice_collocationOptimized(boolean b);

    @Override
    FileReaderPrx ice_twoway();

    @Override
    FileReaderPrx ice_oneway();

    @Override
    FileReaderPrx ice_batchOneway();

    @Override
    FileReaderPrx ice_datagram();

    @Override
    FileReaderPrx ice_batchDatagram();

    @Override
    FileReaderPrx ice_compress(boolean co);

    @Override
    FileReaderPrx ice_connectionId(String connectionId);

    @Override
    FileReaderPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::FileReader";
    }

    /**
     * @hidden
     **/
    @Override
    default FileReaderPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _FileReaderPrxI(ref);
    }
}
