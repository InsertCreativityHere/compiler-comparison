//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface ServerPrx extends FileReaderPrx
{
    /**
     * Start the server.
     **/
    default void start()
        throws com.zeroc.IceGrid.ServerStartException
    {
        start(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Start the server.
     * @param context The Context map to send with the invocation.
     **/
    default void start(java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.ServerStartException
    {
        try
        {
            _iceI_startAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.ServerStartException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Start the server.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> startAsync()
    {
        return _iceI_startAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Start the server.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> startAsync(java.util.Map<String, String> context)
    {
        return _iceI_startAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_startAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "start", null, sync, _iceE_start);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_start =
    {
        com.zeroc.IceGrid.ServerStartException.class
    };

    /**
     * Stop the server. This methods returns only when the server is deactivated. If the server doesn't stop after a
     * configurable amount of time, it will be killed.
     **/
    default void stop()
        throws com.zeroc.IceGrid.ServerStopException
    {
        stop(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Stop the server. This methods returns only when the server is deactivated. If the server doesn't stop after a
     * configurable amount of time, it will be killed.
     * @param context The Context map to send with the invocation.
     **/
    default void stop(java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.ServerStopException
    {
        try
        {
            _iceI_stopAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.ServerStopException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Stop the server. This methods returns only when the server is deactivated. If the server doesn't stop after a
     * configurable amount of time, it will be killed.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> stopAsync()
    {
        return _iceI_stopAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Stop the server. This methods returns only when the server is deactivated. If the server doesn't stop after a
     * configurable amount of time, it will be killed.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> stopAsync(java.util.Map<String, String> context)
    {
        return _iceI_stopAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_stopAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "stop", null, sync, _iceE_stop);
        f.invoke(true, context, null, null, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_stop =
    {
        com.zeroc.IceGrid.ServerStopException.class
    };

    /**
     * Check if the given server can be loaded on this node.
     * @return True if the server is inactive.
     * @throws DeploymentException Raised if the server can't be updated.
     **/
    default boolean checkUpdate(InternalServerDescriptor svr, boolean noRestart)
        throws com.zeroc.IceGrid.DeploymentException
    {
        return checkUpdate(svr, noRestart, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Check if the given server can be loaded on this node.
     * @param context The Context map to send with the invocation.
     * @return True if the server is inactive.
     * @throws DeploymentException Raised if the server can't be updated.
     **/
    default boolean checkUpdate(InternalServerDescriptor svr, boolean noRestart, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            return _iceI_checkUpdateAsync(svr, noRestart, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Check if the given server can be loaded on this node.
     * @return True if the server is inactive.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> checkUpdateAsync(InternalServerDescriptor svr, boolean noRestart)
    {
        return _iceI_checkUpdateAsync(svr, noRestart, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Check if the given server can be loaded on this node.
     * @param context The Context map to send with the invocation.
     * @return True if the server is inactive.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> checkUpdateAsync(InternalServerDescriptor svr, boolean noRestart, java.util.Map<String, String> context)
    {
        return _iceI_checkUpdateAsync(svr, noRestart, context, false);
    }

    /**
     * @hidden
     * @param iceP_svr -
     * @param iceP_noRestart -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_checkUpdateAsync(InternalServerDescriptor iceP_svr, boolean iceP_noRestart, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkUpdate", null, sync, _iceE_checkUpdate);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_svr);
                     ostr.writeBool(iceP_noRestart);
                     ostr.writePendingValues();
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_checkUpdate =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Enable or disable the server.
     **/
    default void setEnabled(boolean enable)
    {
        setEnabled(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Enable or disable the server.
     * @param context The Context map to send with the invocation.
     **/
    default void setEnabled(boolean enable, java.util.Map<String, String> context)
    {
        _iceI_setEnabledAsync(enable, context, true).waitForResponse();
    }

    /**
     * Enable or disable the server.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setEnabledAsync(boolean enable)
    {
        return _iceI_setEnabledAsync(enable, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Enable or disable the server.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setEnabledAsync(boolean enable, java.util.Map<String, String> context)
    {
        return _iceI_setEnabledAsync(enable, context, false);
    }

    /**
     * @hidden
     * @param iceP_enable -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setEnabledAsync(boolean iceP_enable, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setEnabled", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeBool(iceP_enable);
                 }, null);
        return f;
    }

    /**
     * Check if the server is enabled.
     **/
    default boolean isEnabled()
    {
        return isEnabled(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Check if the server is enabled.
     * @param context The Context map to send with the invocation.
     **/
    default boolean isEnabled(java.util.Map<String, String> context)
    {
        return _iceI_isEnabledAsync(context, true).waitForResponse();
    }

    /**
     * Check if the server is enabled.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isEnabledAsync()
    {
        return _iceI_isEnabledAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Check if the server is enabled.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isEnabledAsync(java.util.Map<String, String> context)
    {
        return _iceI_isEnabledAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_isEnabledAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isEnabled", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Send signal to the server
     **/
    default void sendSignal(String signal)
        throws com.zeroc.IceGrid.BadSignalException
    {
        sendSignal(signal, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Send signal to the server
     * @param context The Context map to send with the invocation.
     **/
    default void sendSignal(String signal, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.BadSignalException
    {
        try
        {
            _iceI_sendSignalAsync(signal, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.BadSignalException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Send signal to the server
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> sendSignalAsync(String signal)
    {
        return _iceI_sendSignalAsync(signal, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Send signal to the server
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> sendSignalAsync(String signal, java.util.Map<String, String> context)
    {
        return _iceI_sendSignalAsync(signal, context, false);
    }

    /**
     * @hidden
     * @param iceP_signal -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_sendSignalAsync(String iceP_signal, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sendSignal", null, sync, _iceE_sendSignal);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_signal);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_sendSignal =
    {
        com.zeroc.IceGrid.BadSignalException.class
    };

    /**
     * Write message on servers' stdout or stderr.
     **/
    default void writeMessage(String message, int fd)
    {
        writeMessage(message, fd, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Write message on servers' stdout or stderr.
     * @param context The Context map to send with the invocation.
     **/
    default void writeMessage(String message, int fd, java.util.Map<String, String> context)
    {
        _iceI_writeMessageAsync(message, fd, context, true).waitForResponse();
    }

    /**
     * Write message on servers' stdout or stderr.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> writeMessageAsync(String message, int fd)
    {
        return _iceI_writeMessageAsync(message, fd, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Write message on servers' stdout or stderr.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> writeMessageAsync(String message, int fd, java.util.Map<String, String> context)
    {
        return _iceI_writeMessageAsync(message, fd, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param iceP_fd -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_writeMessageAsync(String iceP_message, int iceP_fd, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeMessage", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_message);
                     ostr.writeInt(iceP_fd);
                 }, null);
        return f;
    }

    /**
     * Return the server state.
     * @return The server state.
     *
     * @see ServerState
     **/
    default com.zeroc.IceGrid.ServerState getState()
    {
        return getState(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Return the server state.
     * @param context The Context map to send with the invocation.
     * @return The server state.
     *
     * @see ServerState
     **/
    default com.zeroc.IceGrid.ServerState getState(java.util.Map<String, String> context)
    {
        return _iceI_getStateAsync(context, true).waitForResponse();
    }

    /**
     * Return the server state.
     * @return The server state.
     *
     * @see ServerState
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.ServerState> getStateAsync()
    {
        return _iceI_getStateAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Return the server state.
     * @param context The Context map to send with the invocation.
     * @return The server state.
     *
     * @see ServerState
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.ServerState> getStateAsync(java.util.Map<String, String> context)
    {
        return _iceI_getStateAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.IceGrid.ServerState> _iceI_getStateAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.IceGrid.ServerState> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getState", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.IceGrid.ServerState ret;
                     ret = com.zeroc.IceGrid.ServerState.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Get the server pid. Note that the value returned by this method is system dependant. On Unix operating systems,
     * it's the pid value returned by the fork() system call and converted to an integer.
     **/
    default int getPid()
    {
        return getPid(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the server pid. Note that the value returned by this method is system dependant. On Unix operating systems,
     * it's the pid value returned by the fork() system call and converted to an integer.
     * @param context The Context map to send with the invocation.
     **/
    default int getPid(java.util.Map<String, String> context)
    {
        return _iceI_getPidAsync(context, true).waitForResponse();
    }

    /**
     * Get the server pid. Note that the value returned by this method is system dependant. On Unix operating systems,
     * it's the pid value returned by the fork() system call and converted to an integer.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getPidAsync()
    {
        return _iceI_getPidAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the server pid. Note that the value returned by this method is system dependant. On Unix operating systems,
     * it's the pid value returned by the fork() system call and converted to an integer.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getPidAsync(java.util.Map<String, String> context)
    {
        return _iceI_getPidAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getPidAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getPid", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Set the process proxy.
     **/
    default void setProcess(com.zeroc.Ice.ProcessPrx proc)
    {
        setProcess(proc, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the process proxy.
     * @param context The Context map to send with the invocation.
     **/
    default void setProcess(com.zeroc.Ice.ProcessPrx proc, java.util.Map<String, String> context)
    {
        _iceI_setProcessAsync(proc, context, true).waitForResponse();
    }

    /**
     * Set the process proxy.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setProcessAsync(com.zeroc.Ice.ProcessPrx proc)
    {
        return _iceI_setProcessAsync(proc, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the process proxy.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setProcessAsync(com.zeroc.Ice.ProcessPrx proc, java.util.Map<String, String> context)
    {
        return _iceI_setProcessAsync(proc, context, false);
    }

    /**
     * @hidden
     * @param iceP_proc -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_setProcessAsync(com.zeroc.Ice.ProcessPrx iceP_proc, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setProcess", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_proc);
                 }, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, ServerPrx.class, _ServerPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default ServerPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (ServerPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default ServerPrx ice_adapterId(String newAdapterId)
    {
        return (ServerPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default ServerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (ServerPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default ServerPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (ServerPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default ServerPrx ice_invocationTimeout(int newTimeout)
    {
        return (ServerPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default ServerPrx ice_connectionCached(boolean newCache)
    {
        return (ServerPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default ServerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (ServerPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default ServerPrx ice_secure(boolean b)
    {
        return (ServerPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default ServerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (ServerPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default ServerPrx ice_preferSecure(boolean b)
    {
        return (ServerPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default ServerPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (ServerPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default ServerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (ServerPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default ServerPrx ice_collocationOptimized(boolean b)
    {
        return (ServerPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default ServerPrx ice_twoway()
    {
        return (ServerPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default ServerPrx ice_oneway()
    {
        return (ServerPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default ServerPrx ice_batchOneway()
    {
        return (ServerPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default ServerPrx ice_datagram()
    {
        return (ServerPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default ServerPrx ice_batchDatagram()
    {
        return (ServerPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default ServerPrx ice_compress(boolean co)
    {
        return (ServerPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default ServerPrx ice_timeout(int t)
    {
        return (ServerPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default ServerPrx ice_connectionId(String connectionId)
    {
        return (ServerPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default ServerPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (ServerPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::IceGrid::Server";
    }
}
