//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface NodePrx extends FileReaderPrx,
                                 ReplicaObserverPrx
{
    /**
     * Load the given server. If the server resources weren't already
     * created (database environment directories, property files, etc),
     * they will be created.
     * @return An instance of Node.LoadServerResult.
     **/
    default Node.LoadServerResult loadServer(InternalServerDescriptor svr, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        return loadServer(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Load the given server. If the server resources weren't already
     * created (database environment directories, property files, etc),
     * they will be created.
     * @param context The Context map to send with the invocation.
     * @return An instance of Node.LoadServerResult.
     **/
    default Node.LoadServerResult loadServer(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            return _iceI_loadServerAsync(svr, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Load the given server. If the server resources weren't already
     * created (database environment directories, property files, etc),
     * they will be created.
     * @return A future that will be completed with an instance of Node.LoadServerResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName)
    {
        return _iceI_loadServerAsync(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Load the given server. If the server resources weren't already
     * created (database environment directories, property files, etc),
     * they will be created.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of Node.LoadServerResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_loadServerAsync(svr, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_svr -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Node.LoadServerResult> _iceI_loadServerAsync(InternalServerDescriptor iceP_svr, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Node.LoadServerResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "loadServer", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_loadServer);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_svr);
                     ostr.writeString(iceP_replicaName);
                     ostr.writePendingValues();
                 }, istr -> {
                     Node.LoadServerResult ret = new Node.LoadServerResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_loadServer =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Load the given server and ensure the server won't be
     * restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they
     * will be created. If the server can't be updated without a
     * restart, a DeploymentException is raised.
     * @return An instance of Node.LoadServerWithoutRestartResult.
     **/
    default Node.LoadServerWithoutRestartResult loadServerWithoutRestart(InternalServerDescriptor svr, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        return loadServerWithoutRestart(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Load the given server and ensure the server won't be
     * restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they
     * will be created. If the server can't be updated without a
     * restart, a DeploymentException is raised.
     * @param context The Context map to send with the invocation.
     * @return An instance of Node.LoadServerWithoutRestartResult.
     **/
    default Node.LoadServerWithoutRestartResult loadServerWithoutRestart(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            return _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Load the given server and ensure the server won't be
     * restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they
     * will be created. If the server can't be updated without a
     * restart, a DeploymentException is raised.
     * @return A future that will be completed with an instance of Node.LoadServerWithoutRestartResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName)
    {
        return _iceI_loadServerWithoutRestartAsync(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Load the given server and ensure the server won't be
     * restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they
     * will be created. If the server can't be updated without a
     * restart, a DeploymentException is raised.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of Node.LoadServerWithoutRestartResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_svr -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Node.LoadServerWithoutRestartResult> _iceI_loadServerWithoutRestartAsync(InternalServerDescriptor iceP_svr, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Node.LoadServerWithoutRestartResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "loadServerWithoutRestart", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_loadServerWithoutRestart);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_svr);
                     ostr.writeString(iceP_replicaName);
                     ostr.writePendingValues();
                 }, istr -> {
                     Node.LoadServerWithoutRestartResult ret = new Node.LoadServerWithoutRestartResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_loadServerWithoutRestart =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Destroy the given server.
     **/
    default void destroyServer(String name, String uuid, int revision, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        destroyServer(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the given server.
     * @param context The Context map to send with the invocation.
     **/
    default void destroyServer(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Destroy the given server.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName)
    {
        return _iceI_destroyServerAsync(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the given server.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_uuid -
     * @param iceP_revision -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyServerAsync(String iceP_name, String iceP_uuid, int iceP_revision, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroyServer", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_destroyServer);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_revision);
                     ostr.writeString(iceP_replicaName);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_destroyServer =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Destroy the server if it's not active.
     **/
    default void destroyServerWithoutRestart(String name, String uuid, int revision, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        destroyServerWithoutRestart(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the server if it's not active.
     * @param context The Context map to send with the invocation.
     **/
    default void destroyServerWithoutRestart(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Destroy the server if it's not active.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName)
    {
        return _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the server if it's not active.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_uuid -
     * @param iceP_revision -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_destroyServerWithoutRestartAsync(String iceP_name, String iceP_uuid, int iceP_revision, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "destroyServerWithoutRestart", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_destroyServerWithoutRestart);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_revision);
                     ostr.writeString(iceP_replicaName);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_destroyServerWithoutRestart =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Patch application and server distributions. If some servers
     * using a distribution directory to patch are active, this method
     * will raise a PatchException unless shutdown is set to true. In
     * which case the servers will be shutdown.
     **/
    default void patch(PatcherFeedbackPrx feedback, String application, String server, InternalDistributionDescriptor appDistrib, boolean shutdown)
    {
        patch(feedback, application, server, appDistrib, shutdown, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Patch application and server distributions. If some servers
     * using a distribution directory to patch are active, this method
     * will raise a PatchException unless shutdown is set to true. In
     * which case the servers will be shutdown.
     * @param context The Context map to send with the invocation.
     **/
    default void patch(PatcherFeedbackPrx feedback, String application, String server, InternalDistributionDescriptor appDistrib, boolean shutdown, java.util.Map<String, String> context)
    {
        _iceI_patchAsync(feedback, application, server, appDistrib, shutdown, context, true).waitForResponse();
    }

    /**
     * Patch application and server distributions. If some servers
     * using a distribution directory to patch are active, this method
     * will raise a PatchException unless shutdown is set to true. In
     * which case the servers will be shutdown.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> patchAsync(PatcherFeedbackPrx feedback, String application, String server, InternalDistributionDescriptor appDistrib, boolean shutdown)
    {
        return _iceI_patchAsync(feedback, application, server, appDistrib, shutdown, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Patch application and server distributions. If some servers
     * using a distribution directory to patch are active, this method
     * will raise a PatchException unless shutdown is set to true. In
     * which case the servers will be shutdown.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> patchAsync(PatcherFeedbackPrx feedback, String application, String server, InternalDistributionDescriptor appDistrib, boolean shutdown, java.util.Map<String, String> context)
    {
        return _iceI_patchAsync(feedback, application, server, appDistrib, shutdown, context, false);
    }

    /**
     * @hidden
     * @param iceP_feedback -
     * @param iceP_application -
     * @param iceP_server -
     * @param iceP_appDistrib -
     * @param iceP_shutdown -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_patchAsync(PatcherFeedbackPrx iceP_feedback, String iceP_application, String iceP_server, InternalDistributionDescriptor iceP_appDistrib, boolean iceP_shutdown, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "patch", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_feedback);
                     ostr.writeString(iceP_application);
                     ostr.writeString(iceP_server);
                     ostr.writeValue(iceP_appDistrib);
                     ostr.writeBool(iceP_shutdown);
                     ostr.writePendingValues();
                 }, null);
        return f;
    }

    /**
     * Establish a session to the given replica, this method only
     * returns once the registration was attempted (unlike
     * replicaAdded below).
     **/
    default void registerWithReplica(InternalRegistryPrx replica)
    {
        registerWithReplica(replica, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Establish a session to the given replica, this method only
     * returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param context The Context map to send with the invocation.
     **/
    default void registerWithReplica(InternalRegistryPrx replica, java.util.Map<String, String> context)
    {
        _iceI_registerWithReplicaAsync(replica, context, true).waitForResponse();
    }

    /**
     * Establish a session to the given replica, this method only
     * returns once the registration was attempted (unlike
     * replicaAdded below).
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx replica)
    {
        return _iceI_registerWithReplicaAsync(replica, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Establish a session to the given replica, this method only
     * returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx replica, java.util.Map<String, String> context)
    {
        return _iceI_registerWithReplicaAsync(replica, context, false);
    }

    /**
     * @hidden
     * @param iceP_replica -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registerWithReplicaAsync(InternalRegistryPrx iceP_replica, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registerWithReplica", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_replica);
                 }, null);
        return f;
    }

    /**
     * Get the node name.
     **/
    default String getName()
    {
        return getName(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node name.
     * @param context The Context map to send with the invocation.
     **/
    default String getName(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, true).waitForResponse();
    }

    /**
     * Get the node name.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync()
    {
        return _iceI_getNameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getNameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getName", com.zeroc.Ice.OperationMode.Nonmutating, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the node hostname.
     **/
    default String getHostname()
    {
        return getHostname(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node hostname.
     * @param context The Context map to send with the invocation.
     **/
    default String getHostname(java.util.Map<String, String> context)
    {
        return _iceI_getHostnameAsync(context, true).waitForResponse();
    }

    /**
     * Get the node hostname.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getHostnameAsync()
    {
        return _iceI_getHostnameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node hostname.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getHostnameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getHostnameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getHostnameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getHostname", com.zeroc.Ice.OperationMode.Nonmutating, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the node load.
     **/
    default com.zeroc.IceGrid.LoadInfo getLoad()
    {
        return getLoad(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node load.
     * @param context The Context map to send with the invocation.
     **/
    default com.zeroc.IceGrid.LoadInfo getLoad(java.util.Map<String, String> context)
    {
        return _iceI_getLoadAsync(context, true).waitForResponse();
    }

    /**
     * Get the node load.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.LoadInfo> getLoadAsync()
    {
        return _iceI_getLoadAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node load.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.LoadInfo> getLoadAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLoadAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.IceGrid.LoadInfo> _iceI_getLoadAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.IceGrid.LoadInfo> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLoad", com.zeroc.Ice.OperationMode.Nonmutating, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.IceGrid.LoadInfo ret;
                     ret = com.zeroc.IceGrid.LoadInfo.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Get the number of processor sockets for the machine where this
     * node is running.
     **/
    default int getProcessorSocketCount()
    {
        return getProcessorSocketCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the number of processor sockets for the machine where this
     * node is running.
     * @param context The Context map to send with the invocation.
     **/
    default int getProcessorSocketCount(java.util.Map<String, String> context)
    {
        return _iceI_getProcessorSocketCountAsync(context, true).waitForResponse();
    }

    /**
     * Get the number of processor sockets for the machine where this
     * node is running.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getProcessorSocketCountAsync()
    {
        return _iceI_getProcessorSocketCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the number of processor sockets for the machine where this
     * node is running.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getProcessorSocketCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getProcessorSocketCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getProcessorSocketCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProcessorSocketCount", com.zeroc.Ice.OperationMode.Nonmutating, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Shutdown the node.
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Shutdown the node.
     * @param context The Context map to send with the invocation.
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Shutdown the node.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Shutdown the node.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", com.zeroc.Ice.OperationMode.Nonmutating, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), NodePrx.class, _NodePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), NodePrx.class, _NodePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), NodePrx.class, _NodePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), NodePrx.class, _NodePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, NodePrx.class, _NodePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, NodePrx.class, _NodePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default NodePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (NodePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default NodePrx ice_adapterId(String newAdapterId)
    {
        return (NodePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default NodePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (NodePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default NodePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (NodePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default NodePrx ice_invocationTimeout(int newTimeout)
    {
        return (NodePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default NodePrx ice_connectionCached(boolean newCache)
    {
        return (NodePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default NodePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (NodePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default NodePrx ice_secure(boolean b)
    {
        return (NodePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default NodePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (NodePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default NodePrx ice_preferSecure(boolean b)
    {
        return (NodePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default NodePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (NodePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default NodePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (NodePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default NodePrx ice_collocationOptimized(boolean b)
    {
        return (NodePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default NodePrx ice_twoway()
    {
        return (NodePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default NodePrx ice_oneway()
    {
        return (NodePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default NodePrx ice_batchOneway()
    {
        return (NodePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default NodePrx ice_datagram()
    {
        return (NodePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default NodePrx ice_batchDatagram()
    {
        return (NodePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default NodePrx ice_compress(boolean co)
    {
        return (NodePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default NodePrx ice_timeout(int t)
    {
        return (NodePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default NodePrx ice_connectionId(String connectionId)
    {
        return (NodePrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default NodePrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (NodePrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::IceGrid::Node";
    }
}
