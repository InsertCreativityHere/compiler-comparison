//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface NodePrx extends FileReaderPrx,
                                 ReplicaObserverPrx
{
    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created. The returned proxy is never null.
     * @return An instance of Node.LoadServerResult.
     **/
    default Node.LoadServerResult loadServer(InternalServerDescriptor svr, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        return loadServer(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return An instance of Node.LoadServerResult.
     **/
    default Node.LoadServerResult loadServer(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            return _iceI_loadServerAsync(svr, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created. The returned proxy is never null.
     * @return A future that will be completed with an instance of Node.LoadServerResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName)
    {
        return _iceI_loadServerAsync(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of Node.LoadServerResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_loadServerAsync(svr, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_svr -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Node.LoadServerResult> _iceI_loadServerAsync(InternalServerDescriptor iceP_svr, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Node.LoadServerResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "loadServer", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_loadServer);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_svr);
                     ostr.writeString(iceP_replicaName);
                     ostr.writePendingValues();
                 }, istr -> {
                     Node.LoadServerResult ret = new Node.LoadServerResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_loadServer =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised. The returned proxy is never null.
     * @return An instance of Node.LoadServerWithoutRestartResult.
     **/
    default Node.LoadServerWithoutRestartResult loadServerWithoutRestart(InternalServerDescriptor svr, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        return loadServerWithoutRestart(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return An instance of Node.LoadServerWithoutRestartResult.
     **/
    default Node.LoadServerWithoutRestartResult loadServerWithoutRestart(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            return _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised. The returned proxy is never null.
     * @return A future that will be completed with an instance of Node.LoadServerWithoutRestartResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName)
    {
        return _iceI_loadServerWithoutRestartAsync(svr, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised. The returned proxy is never null.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of Node.LoadServerWithoutRestartResult.
     **/
    default java.util.concurrent.CompletableFuture<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_svr -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Node.LoadServerWithoutRestartResult> _iceI_loadServerWithoutRestartAsync(InternalServerDescriptor iceP_svr, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Node.LoadServerWithoutRestartResult> f = new com.zeroc.Ice.OutgoingAsync<>(this, "loadServerWithoutRestart", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_loadServerWithoutRestart);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_svr);
                     ostr.writeString(iceP_replicaName);
                     ostr.writePendingValues();
                 }, istr -> {
                     Node.LoadServerWithoutRestartResult ret = new Node.LoadServerWithoutRestartResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_loadServerWithoutRestart =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Destroy the given server.
     **/
    default void destroyServer(String name, String uuid, int revision, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        destroyServer(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the given server.
     * @param context The Context map to send with the invocation.
     **/
    default void destroyServer(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Destroy the given server.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName)
    {
        return _iceI_destroyServerAsync(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the given server.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_uuid -
     * @param iceP_revision -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_destroyServerAsync(String iceP_name, String iceP_uuid, int iceP_revision, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "destroyServer", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_destroyServer);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_revision);
                     ostr.writeString(iceP_replicaName);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_destroyServer =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Destroy the server if it's not active.
     **/
    default void destroyServerWithoutRestart(String name, String uuid, int revision, String replicaName)
        throws com.zeroc.IceGrid.DeploymentException
    {
        destroyServerWithoutRestart(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the server if it's not active.
     * @param context The Context map to send with the invocation.
     **/
    default void destroyServerWithoutRestart(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Destroy the server if it's not active.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName)
    {
        return _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the server if it's not active.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName, java.util.Map<String, String> context)
    {
        return _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_uuid -
     * @param iceP_revision -
     * @param iceP_replicaName -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_destroyServerWithoutRestartAsync(String iceP_name, String iceP_uuid, int iceP_revision, String iceP_replicaName, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "destroyServerWithoutRestart", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_destroyServerWithoutRestart);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_name);
                     ostr.writeString(iceP_uuid);
                     ostr.writeInt(iceP_revision);
                     ostr.writeString(iceP_replicaName);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_destroyServerWithoutRestart =
    {
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     **/
    default void registerWithReplica(InternalRegistryPrx replica)
    {
        registerWithReplica(replica, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param context The Context map to send with the invocation.
     **/
    default void registerWithReplica(InternalRegistryPrx replica, java.util.Map<String, String> context)
    {
        _iceI_registerWithReplicaAsync(replica, context, true).waitForResponse();
    }

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx replica)
    {
        return _iceI_registerWithReplicaAsync(replica, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx replica, java.util.Map<String, String> context)
    {
        return _iceI_registerWithReplicaAsync(replica, context, false);
    }

    /**
     * @hidden
     * @param iceP_replica -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_registerWithReplicaAsync(InternalRegistryPrx iceP_replica, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "registerWithReplica", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_replica);
                 }, null);
        return f;
    }

    /**
     * Get the node name.
     **/
    default String getName()
    {
        return getName(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node name.
     * @param context The Context map to send with the invocation.
     **/
    default String getName(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, true).waitForResponse();
    }

    /**
     * Get the node name.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync()
    {
        return _iceI_getNameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getNameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getNameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_getNameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getName", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the node hostname.
     **/
    default String getHostname()
    {
        return getHostname(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node hostname.
     * @param context The Context map to send with the invocation.
     **/
    default String getHostname(java.util.Map<String, String> context)
    {
        return _iceI_getHostnameAsync(context, true).waitForResponse();
    }

    /**
     * Get the node hostname.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getHostnameAsync()
    {
        return _iceI_getHostnameAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node hostname.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.String> getHostnameAsync(java.util.Map<String, String> context)
    {
        return _iceI_getHostnameAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.String> _iceI_getHostnameAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.String> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getHostname", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the node load.
     **/
    default com.zeroc.IceGrid.LoadInfo getLoad()
    {
        return getLoad(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the node load.
     * @param context The Context map to send with the invocation.
     **/
    default com.zeroc.IceGrid.LoadInfo getLoad(java.util.Map<String, String> context)
    {
        return _iceI_getLoadAsync(context, true).waitForResponse();
    }

    /**
     * Get the node load.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.LoadInfo> getLoadAsync()
    {
        return _iceI_getLoadAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the node load.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.IceGrid.LoadInfo> getLoadAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLoadAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.IceGrid.LoadInfo> _iceI_getLoadAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.IceGrid.LoadInfo> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getLoad", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.IceGrid.LoadInfo ret;
                     ret = com.zeroc.IceGrid.LoadInfo.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Get the number of processor sockets for the machine where this node is running.
     **/
    default int getProcessorSocketCount()
    {
        return getProcessorSocketCount(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the number of processor sockets for the machine where this node is running.
     * @param context The Context map to send with the invocation.
     **/
    default int getProcessorSocketCount(java.util.Map<String, String> context)
    {
        return _iceI_getProcessorSocketCountAsync(context, true).waitForResponse();
    }

    /**
     * Get the number of processor sockets for the machine where this node is running.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getProcessorSocketCountAsync()
    {
        return _iceI_getProcessorSocketCountAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the number of processor sockets for the machine where this node is running.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getProcessorSocketCountAsync(java.util.Map<String, String> context)
    {
        return _iceI_getProcessorSocketCountAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getProcessorSocketCountAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getProcessorSocketCount", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Shutdown the node.
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Shutdown the node.
     * @param context The Context map to send with the invocation.
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Shutdown the node.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Shutdown the node.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link NodePrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static NodePrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _NodePrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _NodePrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _NodePrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _NodePrxI(obj.ice_facet(facet));
    }

    @Override
    NodePrx ice_context(java.util.Map<String, String> newContext);

    @Override
    NodePrx ice_adapterId(String newAdapterId);

    @Override
    NodePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    NodePrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    NodePrx ice_invocationTimeout(int newTimeout);

    @Override
    NodePrx ice_connectionCached(boolean newCache);

    @Override
    NodePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    NodePrx ice_secure(boolean b);

    @Override
    NodePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    NodePrx ice_preferSecure(boolean b);

    @Override
    NodePrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    NodePrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    NodePrx ice_collocationOptimized(boolean b);

    @Override
    NodePrx ice_twoway();

    @Override
    NodePrx ice_oneway();

    @Override
    NodePrx ice_batchOneway();

    @Override
    NodePrx ice_datagram();

    @Override
    NodePrx ice_batchDatagram();

    @Override
    NodePrx ice_compress(boolean co);

    @Override
    NodePrx ice_connectionId(String connectionId);

    @Override
    NodePrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::Node";
    }

    /**
     * @hidden
     **/
    @Override
    default NodePrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _NodePrxI(ref);
    }
}
