//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface ReplicaSession extends com.zeroc.Ice.Object
{
    /**
     * The replica call this method to keep the session alive.
     * @param current The Current object for the invocation.
     **/
    void keepAlive(com.zeroc.Ice.Current current);

    /**
     * Return the replica session timeout.
     * @param current The Current object for the invocation.
     **/
    int getTimeout(com.zeroc.Ice.Current current);

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @param current The Current object for the invocation.
     **/
    void setDatabaseObserver(DatabaseObserverPrx dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> serials, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException,
               com.zeroc.IceGrid.ObserverAlreadyRegisteredException;

    /**
     * This method sets the endpoints of the replica. This allows the master to create proxies with multiple endpoints
     * for replicated objects (e.g.: IceGrid::Query object).
     * @param current The Current object for the invocation.
     **/
    void setEndpoints(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> endpoints, com.zeroc.Ice.Current current);

    /**
     * Registers the replica well-known objects with the master.
     * @param current The Current object for the invocation.
     **/
    void registerWellKnownObjects(com.zeroc.IceGrid.ObjectInfo[] objects, com.zeroc.Ice.Current current);

    /**
     * Set the adapter direct proxy of the given adapter in the master. This is used to support dynamic registration
     * with the locator registry interface.
     * @param current The Current object for the invocation.
     **/
    void setAdapterDirectProxy(String adapterId, String replicaGroupId, com.zeroc.Ice.ObjectPrx proxy, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.AdapterNotExistException,
               AdapterExistsException;

    /**
     * Notify the master that an update was received. The master might wait for replication updates to be received by
     * all the replicas before to continue.
     * @param current The Current object for the invocation.
     **/
    void receivedUpdate(TopicName name, int serial, String failure, com.zeroc.Ice.Current current);

    /**
     * Destroy the session.
     * @param current The Current object for the invocation.
     **/
    void destroy(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::ReplicaSession"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::ReplicaSession";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_keepAlive(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.keepAlive(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTimeout(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        int ret = obj.getTimeout(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setDatabaseObserver(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DatabaseObserverPrx iceP_dbObs;
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> iceP_serials;
        iceP_dbObs = DatabaseObserverPrx.uncheckedCast(istr.readProxy());
        iceP_serials = StringLongDictHelper.read(istr, 1);
        inS.endReadParams();
        obj.setDatabaseObserver(iceP_dbObs, iceP_serials, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setEndpoints(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> iceP_endpoints;
        iceP_endpoints = com.zeroc.IceGrid.StringObjectProxyDictHelper.read(istr);
        inS.endReadParams();
        obj.setEndpoints(iceP_endpoints, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerWellKnownObjects(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.IceGrid.ObjectInfo[] iceP_objects;
        iceP_objects = com.zeroc.IceGrid.ObjectInfoSeqHelper.read(istr);
        inS.endReadParams();
        obj.registerWellKnownObjects(iceP_objects, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setAdapterDirectProxy(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_adapterId;
        String iceP_replicaGroupId;
        com.zeroc.Ice.ObjectPrx iceP_proxy;
        iceP_adapterId = istr.readString();
        iceP_replicaGroupId = istr.readString();
        iceP_proxy = istr.readProxy();
        inS.endReadParams();
        obj.setAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_receivedUpdate(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        TopicName iceP_name;
        int iceP_serial;
        String iceP_failure;
        iceP_name = TopicName.ice_read(istr);
        iceP_serial = istr.readInt();
        iceP_failure = istr.readString();
        inS.endReadParams();
        obj.receivedUpdate(iceP_name, iceP_serial, iceP_failure, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_destroy(ReplicaSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.destroy(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "destroy",
        "getTimeout",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "keepAlive",
        "receivedUpdate",
        "registerWellKnownObjects",
        "setAdapterDirectProxy",
        "setDatabaseObserver",
        "setEndpoints"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_destroy(this, in, current);
            }
            case 1:
            {
                return _iceD_getTimeout(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_keepAlive(this, in, current);
            }
            case 7:
            {
                return _iceD_receivedUpdate(this, in, current);
            }
            case 8:
            {
                return _iceD_registerWellKnownObjects(this, in, current);
            }
            case 9:
            {
                return _iceD_setAdapterDirectProxy(this, in, current);
            }
            case 10:
            {
                return _iceD_setDatabaseObserver(this, in, current);
            }
            case 11:
            {
                return _iceD_setEndpoints(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
