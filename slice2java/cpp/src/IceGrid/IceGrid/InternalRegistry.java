//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface InternalRegistry extends FileReader
{
    /**
     * Holds the result of operation getApplications.
     **/
    public static class GetApplicationsResult
    {
        /**
         * Default constructor.
         **/
        public GetApplicationsResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetApplications.
         **/
        public GetApplicationsResult(java.util.List<com.zeroc.IceGrid.ApplicationInfo> returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public java.util.List<com.zeroc.IceGrid.ApplicationInfo> returnValue;
        public long serial;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(this.serial);
            com.zeroc.IceGrid.ApplicationInfoSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.serial = istr.readLong();
            returnValue = com.zeroc.IceGrid.ApplicationInfoSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation getAdapters.
     **/
    public static class GetAdaptersResult
    {
        /**
         * Default constructor.
         **/
        public GetAdaptersResult()
        {
        }

        public GetAdaptersResult(com.zeroc.IceGrid.AdapterInfo[] returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public com.zeroc.IceGrid.AdapterInfo[] returnValue;
        public long serial;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(this.serial);
            com.zeroc.IceGrid.AdapterInfoSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.serial = istr.readLong();
            returnValue = com.zeroc.IceGrid.AdapterInfoSeqHelper.read(istr);
        }
    }

    /**
     * Holds the result of operation getObjects.
     **/
    public static class GetObjectsResult
    {
        /**
         * Default constructor.
         **/
        public GetObjectsResult()
        {
        }

        public GetObjectsResult(com.zeroc.IceGrid.ObjectInfo[] returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public com.zeroc.IceGrid.ObjectInfo[] returnValue;
        public long serial;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(this.serial);
            com.zeroc.IceGrid.ObjectInfoSeqHelper.write(ostr, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.serial = istr.readLong();
            returnValue = com.zeroc.IceGrid.ObjectInfoSeqHelper.read(istr);
        }
    }

    /**
     * Register a node with the registry. If a node with the same name is already registered,
     * <code>registerNode</code> overrides the existing registration only when the previously
     * registered node is not active.
     * @param info Some information on the node.
     * @param prx The proxy of the node.
     * @param loadInf The load information of the node.
     * @param current The Current object for the invocation.
     * @return The node session proxy.
     * @throws NodeActiveException Raised if the node is already registered and currently active.
     **/
    NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, com.zeroc.IceGrid.LoadInfo loadInf, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               NodeActiveException;

    /**
     * Register a replica with the registry. If a replica with the same name is already registered,
     * <code>registerReplica</code> overrides the existing registration only when the previously
     * registered node is not active.
     * @param info Some information on the replica.
     * @param prx The proxy of the replica.
     * @param current The Current object for the invocation.
     * @return The replica session proxy.
     * @throws ReplicaActiveException Raised if the replica is already registered and currently active.
     **/
    ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               ReplicaActiveException;

    /**
     * Create a session with the given registry replica. This method returns only once the session creation has been
     * attempted.
     * @param current The Current object for the invocation.
     **/
    void registerWithReplica(InternalRegistryPrx prx, com.zeroc.Ice.Current current);

    /**
     * Return the proxies of all the nodes known by this registry.
     * @param current The Current object for the invocation.
     **/
    NodePrx[] getNodes(com.zeroc.Ice.Current current);

    /**
     * Return the proxies of all the registry replicas known by this registry.
     * @param current The Current object for the invocation.
     **/
    InternalRegistryPrx[] getReplicas(com.zeroc.Ice.Current current);

    /**
     * Return applications, adapters, objects from this replica.
     * @param current The Current object for the invocation.
     * @return An instance of InternalRegistry.GetApplicationsResult.
     **/
    InternalRegistry.GetApplicationsResult getApplications(com.zeroc.Ice.Current current);

    InternalRegistry.GetAdaptersResult getAdapters(com.zeroc.Ice.Current current);

    InternalRegistry.GetObjectsResult getObjects(com.zeroc.Ice.Current current);

    /**
     * Shutdown this registry.
     * @param current The Current object for the invocation.
     **/
    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileReader",
        "::IceGrid::InternalRegistry"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::InternalRegistry";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerNode(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<InternalNodeInfo> icePP_info = new com.zeroc.IceInternal.Holder<>();
        NodePrx iceP_prx;
        com.zeroc.IceGrid.LoadInfo iceP_loadInf;
        istr.readValue(v -> icePP_info.value = v, InternalNodeInfo.class);
        iceP_prx = NodePrx.uncheckedCast(istr.readProxy());
        iceP_loadInf = com.zeroc.IceGrid.LoadInfo.ice_read(istr);
        istr.readPendingValues();
        inS.endReadParams();
        InternalNodeInfo iceP_info = icePP_info.value;
        NodeSessionPrx ret = obj.registerNode(iceP_info, iceP_prx, iceP_loadInf, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerReplica(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<InternalReplicaInfo> icePP_info = new com.zeroc.IceInternal.Holder<>();
        InternalRegistryPrx iceP_prx;
        istr.readValue(v -> icePP_info.value = v, InternalReplicaInfo.class);
        iceP_prx = InternalRegistryPrx.uncheckedCast(istr.readProxy());
        istr.readPendingValues();
        inS.endReadParams();
        InternalReplicaInfo iceP_info = icePP_info.value;
        ReplicaSessionPrx ret = obj.registerReplica(iceP_info, iceP_prx, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerWithReplica(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        InternalRegistryPrx iceP_prx;
        iceP_prx = InternalRegistryPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.registerWithReplica(iceP_prx, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodes(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        NodePrx[] ret = obj.getNodes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodePrxSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getReplicas(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        InternalRegistryPrx[] ret = obj.getReplicas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        InternalRegistryPrxSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getApplications(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        InternalRegistry.GetApplicationsResult ret = obj.getApplications(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAdapters(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        InternalRegistry.GetAdaptersResult ret = obj.getAdapters(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getObjects(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        InternalRegistry.GetObjectsResult ret = obj.getObjects(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ret.write(ostr);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(InternalRegistry obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        return switch (current.operation)
        {
            case "getOffsetFromEnd" -> FileReader._iceD_getOffsetFromEnd(this, in, current);
            case "read" -> FileReader._iceD_read(this, in, current);
            case "registerNode" -> InternalRegistry._iceD_registerNode(this, in, current);
            case "registerReplica" -> InternalRegistry._iceD_registerReplica(this, in, current);
            case "registerWithReplica" -> InternalRegistry._iceD_registerWithReplica(this, in, current);
            case "getNodes" -> InternalRegistry._iceD_getNodes(this, in, current);
            case "getReplicas" -> InternalRegistry._iceD_getReplicas(this, in, current);
            case "getApplications" -> InternalRegistry._iceD_getApplications(this, in, current);
            case "getAdapters" -> InternalRegistry._iceD_getAdapters(this, in, current);
            case "getObjects" -> InternalRegistry._iceD_getObjects(this, in, current);
            case "shutdown" -> InternalRegistry._iceD_shutdown(this, in, current);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
