//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface Node extends FileReader,
                              ReplicaObserver
{
    /**
     * Holds the result of operation loadServer.
     **/
    public static class LoadServerResult
    {
        /**
         * Default constructor.
         **/
        public LoadServerResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation LoadServer.
         **/
        public LoadServerResult(ServerPrx returnValue, java.util.Map<java.lang.String, AdapterPrx> adapters, int actTimeout, int deactTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.actTimeout = actTimeout;
            this.deactTimeout = deactTimeout;
        }

        public ServerPrx returnValue;
        public java.util.Map<java.lang.String, AdapterPrx> adapters;
        public int actTimeout;
        public int deactTimeout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AdapterPrxDictHelper.write(ostr, this.adapters);
            ostr.writeInt(this.actTimeout);
            ostr.writeInt(this.deactTimeout);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.adapters = AdapterPrxDictHelper.read(istr);
            this.actTimeout = istr.readInt();
            this.deactTimeout = istr.readInt();
            returnValue = ServerPrx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Holds the result of operation loadServerWithoutRestart.
     **/
    public static class LoadServerWithoutRestartResult
    {
        /**
         * Default constructor.
         **/
        public LoadServerWithoutRestartResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation LoadServerWithoutRestart.
         **/
        public LoadServerWithoutRestartResult(ServerPrx returnValue, java.util.Map<java.lang.String, AdapterPrx> adapters, int actTimeout, int deactTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.actTimeout = actTimeout;
            this.deactTimeout = deactTimeout;
        }

        public ServerPrx returnValue;
        public java.util.Map<java.lang.String, AdapterPrx> adapters;
        public int actTimeout;
        public int deactTimeout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AdapterPrxDictHelper.write(ostr, this.adapters);
            ostr.writeInt(this.actTimeout);
            ostr.writeInt(this.deactTimeout);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.adapters = AdapterPrxDictHelper.read(istr);
            this.actTimeout = istr.readInt();
            this.deactTimeout = istr.readInt();
            returnValue = ServerPrx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Node.LoadServerResult.
     **/
    java.util.concurrent.CompletionStage<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Node.LoadServerWithoutRestartResult.
     **/
    java.util.concurrent.CompletionStage<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Destroy the given server.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Destroy the server if it's not active.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Patch application and server distributions. If some servers using a distribution directory to patch are active,
     * this method will raise a PatchException unless shutdown is set to true. In which case the servers will be
     * shutdown.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> patchAsync(PatcherFeedbackPrx feedback, String application, String server, InternalDistributionDescriptor appDistrib, boolean shutdown, com.zeroc.Ice.Current current);

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param current The Current object for the invocation.
     **/
    void registerWithReplica(InternalRegistryPrx replica, com.zeroc.Ice.Current current);

    /**
     * Get the node name.
     * @param current The Current object for the invocation.
     **/
    String getName(com.zeroc.Ice.Current current);

    /**
     * Get the node hostname.
     * @param current The Current object for the invocation.
     **/
    String getHostname(com.zeroc.Ice.Current current);

    /**
     * Get the node load.
     * @param current The Current object for the invocation.
     **/
    com.zeroc.IceGrid.LoadInfo getLoad(com.zeroc.Ice.Current current);

    /**
     * Get the number of processor sockets for the machine where this node is running.
     * @param current The Current object for the invocation.
     **/
    int getProcessorSocketCount(com.zeroc.Ice.Current current);

    /**
     * Shutdown the node.
     * @param current The Current object for the invocation.
     **/
    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileReader",
        "::IceGrid::Node",
        "::IceGrid::ReplicaObserver"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Node";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_loadServer(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.IceInternal.Holder<>();
        String iceP_replicaName;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_replicaName = istr.readString();
        istr.readPendingValues();
        inS.endReadParams();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        return inS.setResultFuture(obj.loadServerAsync(iceP_svr, iceP_replicaName, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_loadServerWithoutRestart(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.IceInternal.Holder<>();
        String iceP_replicaName;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_replicaName = istr.readString();
        istr.readPendingValues();
        inS.endReadParams();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        return inS.setResultFuture(obj.loadServerWithoutRestartAsync(iceP_svr, iceP_replicaName, current), (ostr, ret) ->
            {
                ret.write(ostr);
            });
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_destroyServer(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        String iceP_uuid;
        int iceP_revision;
        String iceP_replicaName;
        iceP_name = istr.readString();
        iceP_uuid = istr.readString();
        iceP_revision = istr.readInt();
        iceP_replicaName = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.destroyServerAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_destroyServerWithoutRestart(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        String iceP_uuid;
        int iceP_revision;
        String iceP_replicaName;
        iceP_name = istr.readString();
        iceP_uuid = istr.readString();
        iceP_revision = istr.readInt();
        iceP_replicaName = istr.readString();
        inS.endReadParams();
        return inS.setResultFuture(obj.destroyServerWithoutRestartAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_patch(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        PatcherFeedbackPrx iceP_feedback;
        String iceP_application;
        String iceP_server;
        final com.zeroc.IceInternal.Holder<InternalDistributionDescriptor> icePP_appDistrib = new com.zeroc.IceInternal.Holder<>();
        boolean iceP_shutdown;
        iceP_feedback = PatcherFeedbackPrx.uncheckedCast(istr.readProxy());
        iceP_application = istr.readString();
        iceP_server = istr.readString();
        istr.readValue(v -> icePP_appDistrib.value = v, InternalDistributionDescriptor.class);
        iceP_shutdown = istr.readBool();
        istr.readPendingValues();
        inS.endReadParams();
        InternalDistributionDescriptor iceP_appDistrib = icePP_appDistrib.value;
        return inS.setResultFuture(obj.patchAsync(iceP_feedback, iceP_application, iceP_server, iceP_appDistrib, iceP_shutdown, current));
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerWithReplica(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        InternalRegistryPrx iceP_replica;
        iceP_replica = InternalRegistryPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.registerWithReplica(iceP_replica, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getName(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        String ret = obj.getName(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getHostname(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        String ret = obj.getHostname(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLoad(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        com.zeroc.IceGrid.LoadInfo ret = obj.getLoad(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.zeroc.IceGrid.LoadInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getProcessorSocketCount(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        int ret = obj.getProcessorSocketCount(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_shutdown(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        obj.shutdown(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "destroyServer",
        "destroyServerWithoutRestart",
        "getHostname",
        "getLoad",
        "getName",
        "getOffsetFromEnd",
        "getProcessorSocketCount",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "loadServer",
        "loadServerWithoutRestart",
        "patch",
        "read",
        "registerWithReplica",
        "replicaAdded",
        "replicaInit",
        "replicaRemoved",
        "shutdown"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_destroyServer(this, in, current);
            }
            case 1:
            {
                return _iceD_destroyServerWithoutRestart(this, in, current);
            }
            case 2:
            {
                return _iceD_getHostname(this, in, current);
            }
            case 3:
            {
                return _iceD_getLoad(this, in, current);
            }
            case 4:
            {
                return _iceD_getName(this, in, current);
            }
            case 5:
            {
                return FileReader._iceD_getOffsetFromEnd(this, in, current);
            }
            case 6:
            {
                return _iceD_getProcessorSocketCount(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 11:
            {
                return _iceD_loadServer(this, in, current);
            }
            case 12:
            {
                return _iceD_loadServerWithoutRestart(this, in, current);
            }
            case 13:
            {
                return _iceD_patch(this, in, current);
            }
            case 14:
            {
                return FileReader._iceD_read(this, in, current);
            }
            case 15:
            {
                return _iceD_registerWithReplica(this, in, current);
            }
            case 16:
            {
                return ReplicaObserver._iceD_replicaAdded(this, in, current);
            }
            case 17:
            {
                return ReplicaObserver._iceD_replicaInit(this, in, current);
            }
            case 18:
            {
                return ReplicaObserver._iceD_replicaRemoved(this, in, current);
            }
            case 19:
            {
                return _iceD_shutdown(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
