// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package IceGrid;

public interface Node extends FileReader,
                              ReplicaObserver
{
    /**
     * Holds the result of operation loadServer.
     **/
    public static class LoadServerResult
    {
        /**
         * Default constructor.
         **/
        public LoadServerResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation LoadServer.
         **/
        public LoadServerResult(ServerPrx returnValue, java.util.Map<java.lang.String, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.activateTimeout = activateTimeout;
            this.deactivateTimeout = deactivateTimeout;
        }

        public ServerPrx returnValue;
        public java.util.Map<java.lang.String, AdapterPrx> adapters;
        public int activateTimeout;
        public int deactivateTimeout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AdapterPrxDictHelper.write(ostr, this.adapters);
            ostr.writeInt(this.activateTimeout);
            ostr.writeInt(this.deactivateTimeout);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.adapters = AdapterPrxDictHelper.read(istr);
            this.activateTimeout = istr.readInt();
            this.deactivateTimeout = istr.readInt();
            returnValue = ServerPrx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Holds the result of operation loadServerWithoutRestart.
     **/
    public static class LoadServerWithoutRestartResult
    {
        /**
         * Default constructor.
         **/
        public LoadServerWithoutRestartResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation LoadServerWithoutRestart.
         **/
        public LoadServerWithoutRestartResult(ServerPrx returnValue, java.util.Map<java.lang.String, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.activateTimeout = activateTimeout;
            this.deactivateTimeout = deactivateTimeout;
        }

        public ServerPrx returnValue;
        public java.util.Map<java.lang.String, AdapterPrx> adapters;
        public int activateTimeout;
        public int deactivateTimeout;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            AdapterPrxDictHelper.write(ostr, this.adapters);
            ostr.writeInt(this.activateTimeout);
            ostr.writeInt(this.deactivateTimeout);
            ostr.writeProxy(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.adapters = AdapterPrxDictHelper.read(istr);
            this.activateTimeout = istr.readInt();
            this.deactivateTimeout = istr.readInt();
            returnValue = ServerPrx.uncheckedCast(istr.readProxy());
        }
    }

    /**
     * Load the given server. If the server resources weren't already created (database environment directories,
     * property files, etc), they will be created. The returned proxy is never null.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Node.LoadServerResult.
     **/
    java.util.concurrent.CompletionStage<Node.LoadServerResult> loadServerAsync(InternalServerDescriptor svr, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Load the given server and ensure the server won't be restarted. If the server resources weren't already created
     * (database environment directories, property files, etc), they will be created. If the server can't be updated
     * without a restart, a DeploymentException is raised. The returned proxy is never null.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with an instance of Node.LoadServerWithoutRestartResult.
     **/
    java.util.concurrent.CompletionStage<Node.LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Destroy the given server.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> destroyServerAsync(String name, String uuid, int revision, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Destroy the server if it's not active.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete when the invocation completes.
     **/
    java.util.concurrent.CompletionStage<Void> destroyServerWithoutRestartAsync(String name, String uuid, int revision, String replicaName, com.zeroc.Ice.Current current)
        throws com.zeroc.IceGrid.DeploymentException;

    /**
     * Establish a session to the given replica, this method only returns once the registration was attempted (unlike
     * replicaAdded below).
     * @param current The Current object for the invocation.
     **/
    void registerWithReplica(InternalRegistryPrx replica, com.zeroc.Ice.Current current);

    /**
     * Get the node name.
     * @param current The Current object for the invocation.
     **/
    String getName(com.zeroc.Ice.Current current);

    /**
     * Get the node hostname.
     * @param current The Current object for the invocation.
     **/
    String getHostname(com.zeroc.Ice.Current current);

    /**
     * Get the node load.
     * @param current The Current object for the invocation.
     **/
    com.zeroc.IceGrid.LoadInfo getLoad(com.zeroc.Ice.Current current);

    /**
     * Get the number of processor sockets for the machine where this node is running.
     * @param current The Current object for the invocation.
     **/
    int getProcessorSocketCount(com.zeroc.Ice.Current current);

    /**
     * Shutdown the node.
     * @param current The Current object for the invocation.
     **/
    void shutdown(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::FileReader",
        "::IceGrid::Node",
        "::IceGrid::ReplicaObserver"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Node";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_loadServer(Node obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.Ice.Holder<>();
        String iceP_replicaName;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_replicaName = istr.readString();
        istr.readPendingValues();
        istr.endEncapsulation();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        var result = obj.loadServerAsync(iceP_svr, iceP_replicaName, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_loadServerWithoutRestart(Node obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<InternalServerDescriptor> icePP_svr = new com.zeroc.Ice.Holder<>();
        String iceP_replicaName;
        istr.readValue(v -> icePP_svr.value = v, InternalServerDescriptor.class);
        iceP_replicaName = istr.readString();
        istr.readPendingValues();
        istr.endEncapsulation();
        InternalServerDescriptor iceP_svr = icePP_svr.value;
        var result = obj.loadServerWithoutRestartAsync(iceP_svr, iceP_replicaName, request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                value.write(ostr);
            },
            null));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_destroyServer(Node obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        String iceP_uuid;
        int iceP_revision;
        String iceP_replicaName;
        iceP_name = istr.readString();
        iceP_uuid = istr.readString();
        iceP_revision = istr.readInt();
        iceP_replicaName = istr.readString();
        istr.endEncapsulation();
        var result = obj.destroyServerAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_destroyServerWithoutRestart(Node obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        String iceP_name;
        String iceP_uuid;
        int iceP_revision;
        String iceP_replicaName;
        iceP_name = istr.readString();
        iceP_uuid = istr.readString();
        iceP_revision = istr.readInt();
        iceP_replicaName = istr.readString();
        istr.endEncapsulation();
        var result = obj.destroyServerWithoutRestartAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, request.current);
        return result.thenApply(r -> request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_registerWithReplica(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        InternalRegistryPrx iceP_replica;
        iceP_replica = InternalRegistryPrx.uncheckedCast(istr.readProxy());
        istr.endEncapsulation();
        obj.registerWithReplica(iceP_replica, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getName(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String ret = obj.getName(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeString(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getHostname(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        String ret = obj.getHostname(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeString(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getLoad(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        com.zeroc.IceGrid.LoadInfo ret = obj.getLoad(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        com.zeroc.IceGrid.LoadInfo.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getProcessorSocketCount(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        int ret = obj.getProcessorSocketCount(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeInt(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Node obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getOffsetFromEnd" -> FileReader._iceD_getOffsetFromEnd(this, request);
            case "read" -> FileReader._iceD_read(this, request);
            case "replicaInit" -> ReplicaObserver._iceD_replicaInit(this, request);
            case "replicaAdded" -> ReplicaObserver._iceD_replicaAdded(this, request);
            case "replicaRemoved" -> ReplicaObserver._iceD_replicaRemoved(this, request);
            case "loadServer" -> Node._iceD_loadServer(this, request);
            case "loadServerWithoutRestart" -> Node._iceD_loadServerWithoutRestart(this, request);
            case "destroyServer" -> Node._iceD_destroyServer(this, request);
            case "destroyServerWithoutRestart" -> Node._iceD_destroyServerWithoutRestart(this, request);
            case "registerWithReplica" -> Node._iceD_registerWithReplica(this, request);
            case "getName" -> Node._iceD_getName(this, request);
            case "getHostname" -> Node._iceD_getHostname(this, request);
            case "getLoad" -> Node._iceD_getLoad(this, request);
            case "getProcessorSocketCount" -> Node._iceD_getProcessorSocketCount(this, request);
            case "shutdown" -> Node._iceD_shutdown(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
