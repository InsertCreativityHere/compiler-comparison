//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface Adapter extends com.zeroc.Ice.Object
{
    /**
     * Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
     * proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
     * adapter is inactive or the adapter direct proxy it's active.
     * @param current The Current object for the invocation.
     * @return A completion stage that the servant will complete with the result.
     **/
    java.util.concurrent.CompletionStage<com.zeroc.Ice.ObjectPrx> activateAsync(com.zeroc.Ice.Current current);

    /**
     * Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
     * contains the last known adapter endpoints.
     * @param current The Current object for the invocation.
     * @return A direct proxy containing the last known adapter endpoints if the adapter is already active.
     **/
    com.zeroc.Ice.ObjectPrx getDirectProxy(com.zeroc.Ice.Current current)
        throws AdapterNotActiveException;

    /**
     * Set the direct proxy for this adapter.
     * @param current The Current object for the invocation.
     * @throws AdapterActiveException The adapter is already active. It's not possible to override the direct proxy of
     * an active adapter.
     **/
    void setDirectProxy(com.zeroc.Ice.ObjectPrx proxy, com.zeroc.Ice.Current current)
        throws AdapterActiveException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceGrid::Adapter"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceGrid::Adapter";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_activate(Adapter obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.activateAsync(request.current);
        return result.thenApply(r -> request.current.createOutgoingResponse(
            r,
            (ostr, value) -> 
            {
                ostr.writeProxy(value);
            },
            com.zeroc.Ice.FormatType.DefaultFormat));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getDirectProxy(Adapter obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        com.zeroc.Ice.ObjectPrx ret = obj.getDirectProxy(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, com.zeroc.Ice.FormatType.DefaultFormat);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_setDirectProxy(Adapter obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.ObjectPrx iceP_proxy;
        iceP_proxy = istr.readProxy();
        istr.endEncapsulation();
        obj.setDirectProxy(iceP_proxy, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "activate" -> Adapter._iceD_activate(this, request);
            case "getDirectProxy" -> Adapter._iceD_getDirectProxy(this, request);
            case "setDirectProxy" -> Adapter._iceD_setDirectProxy(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
