//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface InternalRegistryPrx extends FileReaderPrx
{
    /**
     * Register a node with the registry. If a node with the same name is already registered, [registerNode] will
     * overide the previous node only if it's not active.
     * @param info Some information on the node.
     * @param prx The proxy of the node.
     * @param loadInf The load information of the node.
     * @return The node session proxy.
     * @throws NodeActiveException Raised if the node is already registered and currently active.
     **/
    default NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, com.zeroc.IceGrid.LoadInfo loadInf)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               NodeActiveException
    {
        return registerNode(info, prx, loadInf, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Register a node with the registry. If a node with the same name is already registered, [registerNode] will
     * overide the previous node only if it's not active.
     * @param info Some information on the node.
     * @param prx The proxy of the node.
     * @param loadInf The load information of the node.
     * @param context The Context map to send with the invocation.
     * @return The node session proxy.
     * @throws NodeActiveException Raised if the node is already registered and currently active.
     **/
    default NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, com.zeroc.IceGrid.LoadInfo loadInf, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               NodeActiveException
    {
        try
        {
            return _iceI_registerNodeAsync(info, prx, loadInf, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(NodeActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Register a node with the registry. If a node with the same name is already registered, [registerNode] will
     * overide the previous node only if it's not active.
     * @param info Some information on the node.
     * @param prx The proxy of the node.
     * @param loadInf The load information of the node.
     * @return The node session proxy.
     **/
    default java.util.concurrent.CompletableFuture<NodeSessionPrx> registerNodeAsync(InternalNodeInfo info, NodePrx prx, com.zeroc.IceGrid.LoadInfo loadInf)
    {
        return _iceI_registerNodeAsync(info, prx, loadInf, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Register a node with the registry. If a node with the same name is already registered, [registerNode] will
     * overide the previous node only if it's not active.
     * @param info Some information on the node.
     * @param prx The proxy of the node.
     * @param loadInf The load information of the node.
     * @param context The Context map to send with the invocation.
     * @return The node session proxy.
     **/
    default java.util.concurrent.CompletableFuture<NodeSessionPrx> registerNodeAsync(InternalNodeInfo info, NodePrx prx, com.zeroc.IceGrid.LoadInfo loadInf, java.util.Map<String, String> context)
    {
        return _iceI_registerNodeAsync(info, prx, loadInf, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param iceP_prx -
     * @param iceP_loadInf -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<NodeSessionPrx> _iceI_registerNodeAsync(InternalNodeInfo iceP_info, NodePrx iceP_prx, com.zeroc.IceGrid.LoadInfo iceP_loadInf, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodeSessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registerNode", null, sync, _iceE_registerNode);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_info);
                     ostr.writeProxy(iceP_prx);
                     com.zeroc.IceGrid.LoadInfo.ice_write(ostr, iceP_loadInf);
                     ostr.writePendingValues();
                 }, istr -> {
                     NodeSessionPrx ret;
                     ret = NodeSessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_registerNode =
    {
        com.zeroc.IceGrid.PermissionDeniedException.class,
        NodeActiveException.class
    };

    /**
     * Register a replica with the registry. If a replica with the  same name is already registered, [registerReplica]
     * will overide the previous replica only if it's not active.
     * @param info Some information on the replica.
     * @param prx The proxy of the replica.
     * @return The replica session proxy.
     * @throws ReplicaActiveException Raised if the replica is already registered and currently active.
     **/
    default ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               ReplicaActiveException
    {
        return registerReplica(info, prx, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Register a replica with the registry. If a replica with the  same name is already registered, [registerReplica]
     * will overide the previous replica only if it's not active.
     * @param info Some information on the replica.
     * @param prx The proxy of the replica.
     * @param context The Context map to send with the invocation.
     * @return The replica session proxy.
     * @throws ReplicaActiveException Raised if the replica is already registered and currently active.
     **/
    default ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.PermissionDeniedException,
               ReplicaActiveException
    {
        try
        {
            return _iceI_registerReplicaAsync(info, prx, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.PermissionDeniedException ex)
        {
            throw ex;
        }
        catch(ReplicaActiveException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Register a replica with the registry. If a replica with the  same name is already registered, [registerReplica]
     * will overide the previous replica only if it's not active.
     * @param info Some information on the replica.
     * @param prx The proxy of the replica.
     * @return The replica session proxy.
     **/
    default java.util.concurrent.CompletableFuture<ReplicaSessionPrx> registerReplicaAsync(InternalReplicaInfo info, InternalRegistryPrx prx)
    {
        return _iceI_registerReplicaAsync(info, prx, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Register a replica with the registry. If a replica with the  same name is already registered, [registerReplica]
     * will overide the previous replica only if it's not active.
     * @param info Some information on the replica.
     * @param prx The proxy of the replica.
     * @param context The Context map to send with the invocation.
     * @return The replica session proxy.
     **/
    default java.util.concurrent.CompletableFuture<ReplicaSessionPrx> registerReplicaAsync(InternalReplicaInfo info, InternalRegistryPrx prx, java.util.Map<String, String> context)
    {
        return _iceI_registerReplicaAsync(info, prx, context, false);
    }

    /**
     * @hidden
     * @param iceP_info -
     * @param iceP_prx -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<ReplicaSessionPrx> _iceI_registerReplicaAsync(InternalReplicaInfo iceP_info, InternalRegistryPrx iceP_prx, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<ReplicaSessionPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registerReplica", null, sync, _iceE_registerReplica);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeValue(iceP_info);
                     ostr.writeProxy(iceP_prx);
                     ostr.writePendingValues();
                 }, istr -> {
                     ReplicaSessionPrx ret;
                     ret = ReplicaSessionPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_registerReplica =
    {
        com.zeroc.IceGrid.PermissionDeniedException.class,
        ReplicaActiveException.class
    };

    /**
     * Create a session with the given registry replica. This method returns only once the session creation has been
     * attempted.
     **/
    default void registerWithReplica(InternalRegistryPrx prx)
    {
        registerWithReplica(prx, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Create a session with the given registry replica. This method returns only once the session creation has been
     * attempted.
     * @param context The Context map to send with the invocation.
     **/
    default void registerWithReplica(InternalRegistryPrx prx, java.util.Map<String, String> context)
    {
        _iceI_registerWithReplicaAsync(prx, context, true).waitForResponse();
    }

    /**
     * Create a session with the given registry replica. This method returns only once the session creation has been
     * attempted.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx prx)
    {
        return _iceI_registerWithReplicaAsync(prx, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Create a session with the given registry replica. This method returns only once the session creation has been
     * attempted.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWithReplicaAsync(InternalRegistryPrx prx, java.util.Map<String, String> context)
    {
        return _iceI_registerWithReplicaAsync(prx, context, false);
    }

    /**
     * @hidden
     * @param iceP_prx -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registerWithReplicaAsync(InternalRegistryPrx iceP_prx, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registerWithReplica", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeProxy(iceP_prx);
                 }, null);
        return f;
    }

    /**
     * Return the proxies of all the nodes known by this registry.
     **/
    default NodePrx[] getNodes()
    {
        return getNodes(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Return the proxies of all the nodes known by this registry.
     * @param context The Context map to send with the invocation.
     **/
    default NodePrx[] getNodes(java.util.Map<String, String> context)
    {
        return _iceI_getNodesAsync(context, true).waitForResponse();
    }

    /**
     * Return the proxies of all the nodes known by this registry.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<NodePrx[]> getNodesAsync()
    {
        return _iceI_getNodesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Return the proxies of all the nodes known by this registry.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<NodePrx[]> getNodesAsync(java.util.Map<String, String> context)
    {
        return _iceI_getNodesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<NodePrx[]> _iceI_getNodesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodePrx[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodes", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     NodePrx[] ret;
                     ret = NodePrxSeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Return the proxies of all the registry replicas known by this registry.
     **/
    default InternalRegistryPrx[] getReplicas()
    {
        return getReplicas(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Return the proxies of all the registry replicas known by this registry.
     * @param context The Context map to send with the invocation.
     **/
    default InternalRegistryPrx[] getReplicas(java.util.Map<String, String> context)
    {
        return _iceI_getReplicasAsync(context, true).waitForResponse();
    }

    /**
     * Return the proxies of all the registry replicas known by this registry.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<InternalRegistryPrx[]> getReplicasAsync()
    {
        return _iceI_getReplicasAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Return the proxies of all the registry replicas known by this registry.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<InternalRegistryPrx[]> getReplicasAsync(java.util.Map<String, String> context)
    {
        return _iceI_getReplicasAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<InternalRegistryPrx[]> _iceI_getReplicasAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<InternalRegistryPrx[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getReplicas", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     InternalRegistryPrx[] ret;
                     ret = InternalRegistryPrxSeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Return applications, adapters, objects from this replica.
     * @return An instance of InternalRegistry.GetApplicationsResult.
     **/
    default InternalRegistry.GetApplicationsResult getApplications()
    {
        return getApplications(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Return applications, adapters, objects from this replica.
     * @param context The Context map to send with the invocation.
     * @return An instance of InternalRegistry.GetApplicationsResult.
     **/
    default InternalRegistry.GetApplicationsResult getApplications(java.util.Map<String, String> context)
    {
        return _iceI_getApplicationsAsync(context, true).waitForResponse();
    }

    /**
     * Return applications, adapters, objects from this replica.
     * @return A future that will be completed with an instance of InternalRegistry.GetApplicationsResult.
     **/
    default java.util.concurrent.CompletableFuture<InternalRegistry.GetApplicationsResult> getApplicationsAsync()
    {
        return _iceI_getApplicationsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Return applications, adapters, objects from this replica.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of InternalRegistry.GetApplicationsResult.
     **/
    default java.util.concurrent.CompletableFuture<InternalRegistry.GetApplicationsResult> getApplicationsAsync(java.util.Map<String, String> context)
    {
        return _iceI_getApplicationsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetApplicationsResult> _iceI_getApplicationsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetApplicationsResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getApplications", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     InternalRegistry.GetApplicationsResult ret = new InternalRegistry.GetApplicationsResult();
                     ret.read(istr);
                     istr.readPendingValues();
                     return ret;
                 });
        return f;
    }

    default InternalRegistry.GetAdaptersResult getAdapters()
    {
        return getAdapters(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default InternalRegistry.GetAdaptersResult getAdapters(java.util.Map<String, String> context)
    {
        return _iceI_getAdaptersAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<InternalRegistry.GetAdaptersResult> getAdaptersAsync()
    {
        return _iceI_getAdaptersAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<InternalRegistry.GetAdaptersResult> getAdaptersAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAdaptersAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetAdaptersResult> _iceI_getAdaptersAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetAdaptersResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getAdapters", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     InternalRegistry.GetAdaptersResult ret = new InternalRegistry.GetAdaptersResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    default InternalRegistry.GetObjectsResult getObjects()
    {
        return getObjects(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default InternalRegistry.GetObjectsResult getObjects(java.util.Map<String, String> context)
    {
        return _iceI_getObjectsAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<InternalRegistry.GetObjectsResult> getObjectsAsync()
    {
        return _iceI_getObjectsAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<InternalRegistry.GetObjectsResult> getObjectsAsync(java.util.Map<String, String> context)
    {
        return _iceI_getObjectsAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetObjectsResult> _iceI_getObjectsAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<InternalRegistry.GetObjectsResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getObjects", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     InternalRegistry.GetObjectsResult ret = new InternalRegistry.GetObjectsResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Shutdown this registry.
     **/
    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Shutdown this registry.
     * @param context The Context map to send with the invocation.
     **/
    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    /**
     * Shutdown this registry.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Shutdown this registry.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "shutdown", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InternalRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InternalRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InternalRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static InternalRegistryPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static InternalRegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static InternalRegistryPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, InternalRegistryPrx.class, _InternalRegistryPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default InternalRegistryPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (InternalRegistryPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default InternalRegistryPrx ice_adapterId(String newAdapterId)
    {
        return (InternalRegistryPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default InternalRegistryPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (InternalRegistryPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default InternalRegistryPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (InternalRegistryPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default InternalRegistryPrx ice_invocationTimeout(int newTimeout)
    {
        return (InternalRegistryPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default InternalRegistryPrx ice_connectionCached(boolean newCache)
    {
        return (InternalRegistryPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default InternalRegistryPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (InternalRegistryPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default InternalRegistryPrx ice_secure(boolean b)
    {
        return (InternalRegistryPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default InternalRegistryPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (InternalRegistryPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default InternalRegistryPrx ice_preferSecure(boolean b)
    {
        return (InternalRegistryPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default InternalRegistryPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (InternalRegistryPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default InternalRegistryPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (InternalRegistryPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default InternalRegistryPrx ice_collocationOptimized(boolean b)
    {
        return (InternalRegistryPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default InternalRegistryPrx ice_twoway()
    {
        return (InternalRegistryPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default InternalRegistryPrx ice_oneway()
    {
        return (InternalRegistryPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default InternalRegistryPrx ice_batchOneway()
    {
        return (InternalRegistryPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default InternalRegistryPrx ice_datagram()
    {
        return (InternalRegistryPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default InternalRegistryPrx ice_batchDatagram()
    {
        return (InternalRegistryPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default InternalRegistryPrx ice_compress(boolean co)
    {
        return (InternalRegistryPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default InternalRegistryPrx ice_timeout(int t)
    {
        return (InternalRegistryPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default InternalRegistryPrx ice_connectionId(String connectionId)
    {
        return (InternalRegistryPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default InternalRegistryPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (InternalRegistryPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::IceGrid::InternalRegistry";
    }
}
