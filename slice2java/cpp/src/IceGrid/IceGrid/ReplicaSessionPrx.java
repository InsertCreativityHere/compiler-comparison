//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceGrid;

public interface ReplicaSessionPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * The replica call this method to keep the session alive.
     **/
    default void keepAlive()
    {
        keepAlive(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * The replica call this method to keep the session alive.
     * @param context The Context map to send with the invocation.
     **/
    default void keepAlive(java.util.Map<String, String> context)
    {
        _iceI_keepAliveAsync(context, true).waitForResponse();
    }

    /**
     * The replica call this method to keep the session alive.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync()
    {
        return _iceI_keepAliveAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * The replica call this method to keep the session alive.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> keepAliveAsync(java.util.Map<String, String> context)
    {
        return _iceI_keepAliveAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_keepAliveAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "keepAlive", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Return the replica session timeout.
     **/
    default int getTimeout()
    {
        return getTimeout(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Return the replica session timeout.
     * @param context The Context map to send with the invocation.
     **/
    default int getTimeout(java.util.Map<String, String> context)
    {
        return _iceI_getTimeoutAsync(context, true).waitForResponse();
    }

    /**
     * Return the replica session timeout.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getTimeoutAsync()
    {
        return _iceI_getTimeoutAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Return the replica session timeout.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Integer> getTimeoutAsync(java.util.Map<String, String> context)
    {
        return _iceI_getTimeoutAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.lang.Integer> _iceI_getTimeoutAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.lang.Integer> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getTimeout", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     **/
    default void setDatabaseObserver(DatabaseObserverPrx dbObs, java.util.Map<java.lang.String, java.lang.Long> serials)
        throws com.zeroc.IceGrid.ObserverAlreadyRegisteredException,
               com.zeroc.IceGrid.DeploymentException
    {
        setDatabaseObserver(dbObs, serials, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @param context The Context map to send with the invocation.
     **/
    default void setDatabaseObserver(DatabaseObserverPrx dbObs, java.util.Map<java.lang.String, java.lang.Long> serials, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.ObserverAlreadyRegisteredException,
               com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_setDatabaseObserverAsync(dbObs, serials, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.ObserverAlreadyRegisteredException ex)
        {
            throw ex;
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     **/
    default void setDatabaseObserver(DatabaseObserverPrx dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> serials)
        throws com.zeroc.IceGrid.ObserverAlreadyRegisteredException,
               com.zeroc.IceGrid.DeploymentException
    {
        setDatabaseObserver(dbObs, serials, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @param context The Context map to send with the invocation.
     **/
    default void setDatabaseObserver(DatabaseObserverPrx dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> serials, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.ObserverAlreadyRegisteredException,
               com.zeroc.IceGrid.DeploymentException
    {
        try
        {
            _iceI_setDatabaseObserverAsync(dbObs, serials, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.ObserverAlreadyRegisteredException ex)
        {
            throw ex;
        }
        catch(com.zeroc.IceGrid.DeploymentException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDatabaseObserverAsync(DatabaseObserverPrx dbObs, java.util.Map<java.lang.String, java.lang.Long> serials)
    {
        return _iceI_setDatabaseObserverAsync(dbObs, serials, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDatabaseObserverAsync(DatabaseObserverPrx dbObs, java.util.Map<java.lang.String, java.lang.Long> serials, java.util.Map<String, String> context)
    {
        return _iceI_setDatabaseObserverAsync(dbObs, serials, context, false);
    }

    /**
     * @hidden
     * @param iceP_dbObs -
     * @param iceP_serials -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setDatabaseObserverAsync(DatabaseObserverPrx iceP_dbObs, java.util.Map<java.lang.String, java.lang.Long> iceP_serials, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setDatabaseObserver", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setDatabaseObserver);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_dbObs);
                     StringLongDictHelper.write(ostr, 1, iceP_serials);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setDatabaseObserver =
    {
        com.zeroc.IceGrid.ObserverAlreadyRegisteredException.class,
        com.zeroc.IceGrid.DeploymentException.class
    };

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDatabaseObserverAsync(DatabaseObserverPrx dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> serials)
    {
        return _iceI_setDatabaseObserverAsync(dbObs, serials, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the database observer. Once the observer is subscribed, it will receive the database and database updates.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setDatabaseObserverAsync(DatabaseObserverPrx dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> serials, java.util.Map<String, String> context)
    {
        return _iceI_setDatabaseObserverAsync(dbObs, serials, context, false);
    }

    /**
     * @hidden
     * @param iceP_dbObs -
     * @param iceP_serials -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setDatabaseObserverAsync(DatabaseObserverPrx iceP_dbObs, java.util.Optional<java.util.Map<java.lang.String, java.lang.Long>> iceP_serials, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setDatabaseObserver", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setDatabaseObserver);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeProxy(iceP_dbObs);
                     StringLongDictHelper.write(ostr, 1, iceP_serials);
                 }, null);
        return f;
    }

    /**
     * This method sets the endpoints of the replica. This allows the master to create proxies with multiple endpoints
     * for replicated objects (e.g.: IceGrid::Query object).
     **/
    default void setEndpoints(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> endpoints)
    {
        setEndpoints(endpoints, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * This method sets the endpoints of the replica. This allows the master to create proxies with multiple endpoints
     * for replicated objects (e.g.: IceGrid::Query object).
     * @param context The Context map to send with the invocation.
     **/
    default void setEndpoints(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> endpoints, java.util.Map<String, String> context)
    {
        _iceI_setEndpointsAsync(endpoints, context, true).waitForResponse();
    }

    /**
     * This method sets the endpoints of the replica. This allows the master to create proxies with multiple endpoints
     * for replicated objects (e.g.: IceGrid::Query object).
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setEndpointsAsync(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> endpoints)
    {
        return _iceI_setEndpointsAsync(endpoints, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * This method sets the endpoints of the replica. This allows the master to create proxies with multiple endpoints
     * for replicated objects (e.g.: IceGrid::Query object).
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setEndpointsAsync(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> endpoints, java.util.Map<String, String> context)
    {
        return _iceI_setEndpointsAsync(endpoints, context, false);
    }

    /**
     * @hidden
     * @param iceP_endpoints -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setEndpointsAsync(java.util.Map<java.lang.String, com.zeroc.Ice.ObjectPrx> iceP_endpoints, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setEndpoints", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     com.zeroc.IceGrid.StringObjectProxyDictHelper.write(ostr, iceP_endpoints);
                 }, null);
        return f;
    }

    /**
     * Registers the replica well-known objects with the master.
     **/
    default void registerWellKnownObjects(com.zeroc.IceGrid.ObjectInfo[] objects)
    {
        registerWellKnownObjects(objects, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Registers the replica well-known objects with the master.
     * @param context The Context map to send with the invocation.
     **/
    default void registerWellKnownObjects(com.zeroc.IceGrid.ObjectInfo[] objects, java.util.Map<String, String> context)
    {
        _iceI_registerWellKnownObjectsAsync(objects, context, true).waitForResponse();
    }

    /**
     * Registers the replica well-known objects with the master.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWellKnownObjectsAsync(com.zeroc.IceGrid.ObjectInfo[] objects)
    {
        return _iceI_registerWellKnownObjectsAsync(objects, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Registers the replica well-known objects with the master.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> registerWellKnownObjectsAsync(com.zeroc.IceGrid.ObjectInfo[] objects, java.util.Map<String, String> context)
    {
        return _iceI_registerWellKnownObjectsAsync(objects, context, false);
    }

    /**
     * @hidden
     * @param iceP_objects -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_registerWellKnownObjectsAsync(com.zeroc.IceGrid.ObjectInfo[] iceP_objects, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "registerWellKnownObjects", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(false, context, null, ostr -> {
                     com.zeroc.IceGrid.ObjectInfoSeqHelper.write(ostr, iceP_objects);
                 }, null);
        return f;
    }

    /**
     * Set the adapter direct proxy of the given adapter in the master. This is used to support dynamic registration
     * with the locator registry interface.
     **/
    default void setAdapterDirectProxy(String adapterId, String replicaGroupId, com.zeroc.Ice.ObjectPrx proxy)
        throws com.zeroc.IceGrid.AdapterNotExistException,
               AdapterExistsException
    {
        setAdapterDirectProxy(adapterId, replicaGroupId, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Set the adapter direct proxy of the given adapter in the master. This is used to support dynamic registration
     * with the locator registry interface.
     * @param context The Context map to send with the invocation.
     **/
    default void setAdapterDirectProxy(String adapterId, String replicaGroupId, com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
        throws com.zeroc.IceGrid.AdapterNotExistException,
               AdapterExistsException
    {
        try
        {
            _iceI_setAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, true).waitForResponseOrUserEx();
        }
        catch(com.zeroc.IceGrid.AdapterNotExistException ex)
        {
            throw ex;
        }
        catch(AdapterExistsException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw com.zeroc.Ice.UnknownUserException.fromTypeId(ex.ice_id());
        }
    }

    /**
     * Set the adapter direct proxy of the given adapter in the master. This is used to support dynamic registration
     * with the locator registry interface.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAdapterDirectProxyAsync(String adapterId, String replicaGroupId, com.zeroc.Ice.ObjectPrx proxy)
    {
        return _iceI_setAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Set the adapter direct proxy of the given adapter in the master. This is used to support dynamic registration
     * with the locator registry interface.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> setAdapterDirectProxyAsync(String adapterId, String replicaGroupId, com.zeroc.Ice.ObjectPrx proxy, java.util.Map<String, String> context)
    {
        return _iceI_setAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, false);
    }

    /**
     * @hidden
     * @param iceP_adapterId -
     * @param iceP_replicaGroupId -
     * @param iceP_proxy -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_setAdapterDirectProxyAsync(String iceP_adapterId, String iceP_replicaGroupId, com.zeroc.Ice.ObjectPrx iceP_proxy, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "setAdapterDirectProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, _iceE_setAdapterDirectProxy);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_adapterId);
                     ostr.writeString(iceP_replicaGroupId);
                     ostr.writeProxy(iceP_proxy);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_setAdapterDirectProxy =
    {
        com.zeroc.IceGrid.AdapterNotExistException.class,
        AdapterExistsException.class
    };

    /**
     * Notify the master that an update was received. The master might wait for replication updates to be received by
     * all the replicas before to continue.
     **/
    default void receivedUpdate(TopicName name, int serial, String failure)
    {
        receivedUpdate(name, serial, failure, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Notify the master that an update was received. The master might wait for replication updates to be received by
     * all the replicas before to continue.
     * @param context The Context map to send with the invocation.
     **/
    default void receivedUpdate(TopicName name, int serial, String failure, java.util.Map<String, String> context)
    {
        _iceI_receivedUpdateAsync(name, serial, failure, context, true).waitForResponse();
    }

    /**
     * Notify the master that an update was received. The master might wait for replication updates to be received by
     * all the replicas before to continue.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> receivedUpdateAsync(TopicName name, int serial, String failure)
    {
        return _iceI_receivedUpdateAsync(name, serial, failure, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Notify the master that an update was received. The master might wait for replication updates to be received by
     * all the replicas before to continue.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> receivedUpdateAsync(TopicName name, int serial, String failure, java.util.Map<String, String> context)
    {
        return _iceI_receivedUpdateAsync(name, serial, failure, context, false);
    }

    /**
     * @hidden
     * @param iceP_name -
     * @param iceP_serial -
     * @param iceP_failure -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_receivedUpdateAsync(TopicName iceP_name, int iceP_serial, String iceP_failure, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "receivedUpdate", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     TopicName.ice_write(ostr, iceP_name);
                     ostr.writeInt(iceP_serial);
                     ostr.writeString(iceP_failure);
                 }, null);
        return f;
    }

    /**
     * Destroy the session.
     **/
    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Destroy the session.
     * @param context The Context map to send with the invocation.
     **/
    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    /**
     * Destroy the session.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Destroy the session.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link ReplicaSessionPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static ReplicaSessionPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _ReplicaSessionPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReplicaSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReplicaSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _ReplicaSessionPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReplicaSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static ReplicaSessionPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static ReplicaSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _ReplicaSessionPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static ReplicaSessionPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _ReplicaSessionPrxI(obj.ice_facet(facet));
    }

    @Override
    ReplicaSessionPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    ReplicaSessionPrx ice_adapterId(String newAdapterId);

    @Override
    ReplicaSessionPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    ReplicaSessionPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    ReplicaSessionPrx ice_invocationTimeout(int newTimeout);

    @Override
    ReplicaSessionPrx ice_connectionCached(boolean newCache);

    @Override
    ReplicaSessionPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    ReplicaSessionPrx ice_secure(boolean b);

    @Override
    ReplicaSessionPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    ReplicaSessionPrx ice_preferSecure(boolean b);

    @Override
    ReplicaSessionPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    ReplicaSessionPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    ReplicaSessionPrx ice_collocationOptimized(boolean b);

    @Override
    ReplicaSessionPrx ice_twoway();

    @Override
    ReplicaSessionPrx ice_oneway();

    @Override
    ReplicaSessionPrx ice_batchOneway();

    @Override
    ReplicaSessionPrx ice_datagram();

    @Override
    ReplicaSessionPrx ice_batchDatagram();

    @Override
    ReplicaSessionPrx ice_compress(boolean co);

    @Override
    ReplicaSessionPrx ice_connectionId(String connectionId);

    @Override
    ReplicaSessionPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceGrid::ReplicaSession";
    }

    /**
     * @hidden
     **/
    @Override
    default ReplicaSessionPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _ReplicaSessionPrxI(ref);
    }
}
