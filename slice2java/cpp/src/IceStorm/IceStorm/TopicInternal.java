//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStorm;

/**
 * Internal operations for a topic.
 *
 * @see Topic
 **/
public interface TopicInternal extends com.zeroc.IceStorm.Topic
{
    /**
     * Retrieve a proxy to the TopicLink interface.
     * @param current The Current object for the invocation.
     * @return The TopicLink for the Topic.
     **/
    TopicLinkPrx getLinkProxy(com.zeroc.Ice.Current current);

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @param current The Current object for the invocation.
     * @throws ReapWouldBlock Raised if the reap call would block.
     **/
    void reap(com.zeroc.Ice.Identity[] id, com.zeroc.Ice.Current current)
        throws ReapWouldBlock;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceStorm::Topic",
        "::IceStorm::TopicInternal"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceStorm::TopicInternal";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLinkProxy(TopicInternal obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        TopicLinkPrx ret = obj.getLinkProxy(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_reap(TopicInternal obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.zeroc.Ice.Identity[] iceP_id;
        iceP_id = com.zeroc.Ice.IdentitySeqHelper.read(istr);
        inS.endReadParams();
        obj.reap(iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "destroy",
        "getLinkInfoSeq",
        "getLinkProxy",
        "getName",
        "getNonReplicatedPublisher",
        "getPublisher",
        "getSubscribers",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "link",
        "reap",
        "subscribeAndGetPublisher",
        "unlink",
        "unsubscribe"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.IceStorm.Topic._iceD_destroy(this, in, current);
            }
            case 1:
            {
                return com.zeroc.IceStorm.Topic._iceD_getLinkInfoSeq(this, in, current);
            }
            case 2:
            {
                return _iceD_getLinkProxy(this, in, current);
            }
            case 3:
            {
                return com.zeroc.IceStorm.Topic._iceD_getName(this, in, current);
            }
            case 4:
            {
                return com.zeroc.IceStorm.Topic._iceD_getNonReplicatedPublisher(this, in, current);
            }
            case 5:
            {
                return com.zeroc.IceStorm.Topic._iceD_getPublisher(this, in, current);
            }
            case 6:
            {
                return com.zeroc.IceStorm.Topic._iceD_getSubscribers(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 11:
            {
                return com.zeroc.IceStorm.Topic._iceD_link(this, in, current);
            }
            case 12:
            {
                return _iceD_reap(this, in, current);
            }
            case 13:
            {
                return com.zeroc.IceStorm.Topic._iceD_subscribeAndGetPublisher(this, in, current);
            }
            case 14:
            {
                return com.zeroc.IceStorm.Topic._iceD_unlink(this, in, current);
            }
            case 15:
            {
                return com.zeroc.IceStorm.Topic._iceD_unsubscribe(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
