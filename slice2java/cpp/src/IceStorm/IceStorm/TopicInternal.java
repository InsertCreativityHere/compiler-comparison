//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStorm;

/**
 * Internal operations for a topic.
 *
 * @see Topic
 **/
public interface TopicInternal extends com.zeroc.IceStorm.Topic
{
    /**
     * Retrieve a proxy to the TopicLink interface.
     * @param current The Current object for the invocation.
     * @return The TopicLink for the Topic.
     **/
    TopicLinkPrx getLinkProxy(com.zeroc.Ice.Current current);

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @param current The Current object for the invocation.
     * @throws ReapWouldBlock Raised if the reap call would block.
     **/
    void reap(com.zeroc.Ice.Identity[] id, com.zeroc.Ice.Current current)
        throws ReapWouldBlock;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceStorm::Topic",
        "::IceStorm::TopicInternal"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceStorm::TopicInternal";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getLinkProxy(TopicInternal obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        TopicLinkPrx ret = obj.getLinkProxy(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeProxy(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_reap(TopicInternal obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        com.zeroc.Ice.Identity[] iceP_id;
        iceP_id = com.zeroc.Ice.IdentitySeqHelper.read(istr);
        istr.endEncapsulation();
        obj.reap(iceP_id, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getName" -> com.zeroc.IceStorm.Topic._iceD_getName(this, request);
            case "getPublisher" -> com.zeroc.IceStorm.Topic._iceD_getPublisher(this, request);
            case "getNonReplicatedPublisher" -> com.zeroc.IceStorm.Topic._iceD_getNonReplicatedPublisher(this, request);
            case "subscribeAndGetPublisher" -> com.zeroc.IceStorm.Topic._iceD_subscribeAndGetPublisher(this, request);
            case "unsubscribe" -> com.zeroc.IceStorm.Topic._iceD_unsubscribe(this, request);
            case "link" -> com.zeroc.IceStorm.Topic._iceD_link(this, request);
            case "unlink" -> com.zeroc.IceStorm.Topic._iceD_unlink(this, request);
            case "getLinkInfoSeq" -> com.zeroc.IceStorm.Topic._iceD_getLinkInfoSeq(this, request);
            case "getSubscribers" -> com.zeroc.IceStorm.Topic._iceD_getSubscribers(this, request);
            case "destroy" -> com.zeroc.IceStorm.Topic._iceD_destroy(this, request);
            case "getLinkProxy" -> TopicInternal._iceD_getLinkProxy(this, request);
            case "reap" -> TopicInternal._iceD_reap(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
