//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStorm;

/**
 * Internal operations for a topic.
 *
 * @see Topic
 **/
public interface TopicInternalPrx extends com.zeroc.IceStorm.TopicPrx
{
    /**
     * Retrieve a proxy to the TopicLink interface.
     * @return The TopicLink for the Topic.
     **/
    default TopicLinkPrx getLinkProxy()
    {
        return getLinkProxy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve a proxy to the TopicLink interface.
     * @param context The Context map to send with the invocation.
     * @return The TopicLink for the Topic.
     **/
    default TopicLinkPrx getLinkProxy(java.util.Map<String, String> context)
    {
        return _iceI_getLinkProxyAsync(context, true).waitForResponse();
    }

    /**
     * Retrieve a proxy to the TopicLink interface.
     * @return The TopicLink for the Topic.
     **/
    default java.util.concurrent.CompletableFuture<TopicLinkPrx> getLinkProxyAsync()
    {
        return _iceI_getLinkProxyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve a proxy to the TopicLink interface.
     * @param context The Context map to send with the invocation.
     * @return The TopicLink for the Topic.
     **/
    default java.util.concurrent.CompletableFuture<TopicLinkPrx> getLinkProxyAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLinkProxyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TopicLinkPrx> _iceI_getLinkProxyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TopicLinkPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLinkProxy", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     TopicLinkPrx ret;
                     ret = TopicLinkPrx.uncheckedCast(istr.readProxy());
                     return ret;
                 });
        return f;
    }

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @throws ReapWouldBlock Raised if the reap call would block.
     **/
    default void reap(com.zeroc.Ice.Identity[] id)
        throws ReapWouldBlock
    {
        reap(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @param context The Context map to send with the invocation.
     * @throws ReapWouldBlock Raised if the reap call would block.
     **/
    default void reap(com.zeroc.Ice.Identity[] id, java.util.Map<String, String> context)
        throws ReapWouldBlock
    {
        try
        {
            _iceI_reapAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(ReapWouldBlock ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> reapAsync(com.zeroc.Ice.Identity[] id)
    {
        return _iceI_reapAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Reap the given identities.
     * @param id The sequence of identities.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> reapAsync(com.zeroc.Ice.Identity[] id, java.util.Map<String, String> context)
    {
        return _iceI_reapAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_reapAsync(com.zeroc.Ice.Identity[] iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "reap", null, sync, _iceE_reap);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     com.zeroc.Ice.IdentitySeqHelper.write(ostr, iceP_id);
                 }, null);
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_reap =
    {
        ReapWouldBlock.class
    };

    /**
     * Creates a new proxy that implements {@link TopicInternalPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TopicInternalPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TopicInternalPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicInternalPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicInternalPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TopicInternalPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicInternalPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicInternalPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TopicInternalPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TopicInternalPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TopicInternalPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TopicInternalPrxI(obj.ice_facet(facet));
    }

    @Override
    TopicInternalPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TopicInternalPrx ice_adapterId(String newAdapterId);

    @Override
    TopicInternalPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TopicInternalPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TopicInternalPrx ice_invocationTimeout(int newTimeout);

    @Override
    TopicInternalPrx ice_connectionCached(boolean newCache);

    @Override
    TopicInternalPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TopicInternalPrx ice_secure(boolean b);

    @Override
    TopicInternalPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TopicInternalPrx ice_preferSecure(boolean b);

    @Override
    TopicInternalPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TopicInternalPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TopicInternalPrx ice_collocationOptimized(boolean b);

    @Override
    TopicInternalPrx ice_twoway();

    @Override
    TopicInternalPrx ice_oneway();

    @Override
    TopicInternalPrx ice_batchOneway();

    @Override
    TopicInternalPrx ice_datagram();

    @Override
    TopicInternalPrx ice_batchDatagram();

    @Override
    TopicInternalPrx ice_compress(boolean co);

    @Override
    TopicInternalPrx ice_connectionId(String connectionId);

    @Override
    TopicInternalPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStorm::TopicInternal";
    }

    /**
     * @hidden
     **/
    @Override
    default TopicInternalPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TopicInternalPrxI(ref);
    }
}
