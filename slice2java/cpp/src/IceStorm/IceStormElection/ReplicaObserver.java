//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStormElection;

/**
 * The replica observer.
 **/
public interface ReplicaObserver extends com.zeroc.Ice.Object
{
    /**
     * Initialize the observer.
     * @param llu The last log update seen by the master.
     * @param content The topic content.
     * @param current The Current object for the invocation.
     * @throws ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     **/
    void init(LogUpdate llu, TopicContent[] content, com.zeroc.Ice.Current current)
        throws ObserverInconsistencyException;

    /**
     * Create the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param current The Current object for the invocation.
     * @throws ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     **/
    void createTopic(LogUpdate llu, String name, com.zeroc.Ice.Current current)
        throws ObserverInconsistencyException;

    /**
     * Destroy the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param current The Current object for the invocation.
     * @throws ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     **/
    void destroyTopic(LogUpdate llu, String name, com.zeroc.Ice.Current current)
        throws ObserverInconsistencyException;

    /**
     * Add a subscriber to a topic.
     * @param llu The log update token.
     * @param topic The topic name to which to add the subscriber.
     * @param record The subscriber information.
     * @param current The Current object for the invocation.
     * @throws ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     **/
    void addSubscriber(LogUpdate llu, String topic, IceStorm.SubscriberRecord record, com.zeroc.Ice.Current current)
        throws ObserverInconsistencyException;

    /**
     * Remove a subscriber from a topic.
     * @param llu The log update token.
     * @param subscribers The identities of the subscribers to remove.
     * @param current The Current object for the invocation.
     * @throws ObserverInconsistencyException Raised if an inconsisency was detected.
     **/
    void removeSubscriber(LogUpdate llu, String topic, com.zeroc.Ice.Identity[] subscribers, com.zeroc.Ice.Current current)
        throws ObserverInconsistencyException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceStormElection::ReplicaObserver"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceStormElection::ReplicaObserver";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_init(ReplicaObserver obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LogUpdate iceP_llu;
        TopicContent[] iceP_content;
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_content = TopicContentSeqHelper.read(istr);
        inS.endReadParams();
        obj.init(iceP_llu, iceP_content, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createTopic(ReplicaObserver obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LogUpdate iceP_llu;
        String iceP_name;
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_name = istr.readString();
        inS.endReadParams();
        obj.createTopic(iceP_llu, iceP_name, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_destroyTopic(ReplicaObserver obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LogUpdate iceP_llu;
        String iceP_name;
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_name = istr.readString();
        inS.endReadParams();
        obj.destroyTopic(iceP_llu, iceP_name, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addSubscriber(ReplicaObserver obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LogUpdate iceP_llu;
        String iceP_topic;
        IceStorm.SubscriberRecord iceP_record;
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_topic = istr.readString();
        iceP_record = IceStorm.SubscriberRecord.ice_read(istr);
        inS.endReadParams();
        obj.addSubscriber(iceP_llu, iceP_topic, iceP_record, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeSubscriber(ReplicaObserver obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LogUpdate iceP_llu;
        String iceP_topic;
        com.zeroc.Ice.Identity[] iceP_subscribers;
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_topic = istr.readString();
        iceP_subscribers = com.zeroc.Ice.IdentitySeqHelper.read(istr);
        inS.endReadParams();
        obj.removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addSubscriber",
        "createTopic",
        "destroyTopic",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "init",
        "removeSubscriber"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addSubscriber(this, in, current);
            }
            case 1:
            {
                return _iceD_createTopic(this, in, current);
            }
            case 2:
            {
                return _iceD_destroyTopic(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return _iceD_init(this, in, current);
            }
            case 8:
            {
                return _iceD_removeSubscriber(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
