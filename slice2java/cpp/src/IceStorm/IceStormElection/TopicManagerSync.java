// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

package IceStormElection;

/**
 * Interface used to sync topics.
 **/
public interface TopicManagerSync extends com.zeroc.Ice.Object
{
    /**
     * Holds the result of operation getContent.
     **/
    public static class GetContentResult
    {
        /**
         * Default constructor.
         **/
        public GetContentResult()
        {
        }

        /**
         * This constructor makes shallow copies of the results for operation GetContent.
         * @param llu The last log update token.
         * @param content The topic content.
         **/
        public GetContentResult(LogUpdate llu, TopicContent[] content)
        {
            this.llu = llu;
            this.content = content;
        }

        /**
         * The last log update token.
         **/
        public LogUpdate llu;
        /**
         * The topic content.
         **/
        public TopicContent[] content;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            LogUpdate.ice_write(ostr, this.llu);
            TopicContentSeqHelper.write(ostr, this.content);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.llu = LogUpdate.ice_read(istr);
            this.content = TopicContentSeqHelper.read(istr);
        }
    }

    /**
     * Retrieve the topic content.
     * @param current The Current object for the invocation.
     * @return An instance of TopicManagerSync.GetContentResult.
     **/
    TopicManagerSync.GetContentResult getContent(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceStormElection::TopicManagerSync"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceStormElection::TopicManagerSync";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_getContent(TopicManagerSync obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        TopicManagerSync.GetContentResult ret = obj.getContent(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "getContent" -> TopicManagerSync._iceD_getContent(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
