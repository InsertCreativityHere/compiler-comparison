//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStormElection;

/**
 * Interface used to sync topics.
 **/
public interface TopicManagerSyncPrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Retrieve the topic content.
     * @return An instance of TopicManagerSync.GetContentResult.
     **/
    default TopicManagerSync.GetContentResult getContent()
    {
        return getContent(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Retrieve the topic content.
     * @param context The Context map to send with the invocation.
     * @return An instance of TopicManagerSync.GetContentResult.
     **/
    default TopicManagerSync.GetContentResult getContent(java.util.Map<String, String> context)
    {
        return _iceI_getContentAsync(context, true).waitForResponse();
    }

    /**
     * Retrieve the topic content.
     * @return A future that will be completed with an instance of TopicManagerSync.GetContentResult.
     **/
    default java.util.concurrent.CompletableFuture<TopicManagerSync.GetContentResult> getContentAsync()
    {
        return _iceI_getContentAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Retrieve the topic content.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with an instance of TopicManagerSync.GetContentResult.
     **/
    default java.util.concurrent.CompletableFuture<TopicManagerSync.GetContentResult> getContentAsync(java.util.Map<String, String> context)
    {
        return _iceI_getContentAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<TopicManagerSync.GetContentResult> _iceI_getContentAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<TopicManagerSync.GetContentResult> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getContent", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     TopicManagerSync.GetContentResult ret = new TopicManagerSync.GetContentResult();
                     ret.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link TopicManagerSyncPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static TopicManagerSyncPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _TopicManagerSyncPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerSyncPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerSyncPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _TopicManagerSyncPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerSyncPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static TopicManagerSyncPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static TopicManagerSyncPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _TopicManagerSyncPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static TopicManagerSyncPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _TopicManagerSyncPrxI(obj.ice_facet(facet));
    }

    @Override
    TopicManagerSyncPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    TopicManagerSyncPrx ice_adapterId(String newAdapterId);

    @Override
    TopicManagerSyncPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    TopicManagerSyncPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    TopicManagerSyncPrx ice_invocationTimeout(int newTimeout);

    @Override
    TopicManagerSyncPrx ice_connectionCached(boolean newCache);

    @Override
    TopicManagerSyncPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    TopicManagerSyncPrx ice_secure(boolean b);

    @Override
    TopicManagerSyncPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    TopicManagerSyncPrx ice_preferSecure(boolean b);

    @Override
    TopicManagerSyncPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    TopicManagerSyncPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    TopicManagerSyncPrx ice_collocationOptimized(boolean b);

    @Override
    TopicManagerSyncPrx ice_twoway();

    @Override
    TopicManagerSyncPrx ice_oneway();

    @Override
    TopicManagerSyncPrx ice_batchOneway();

    @Override
    TopicManagerSyncPrx ice_datagram();

    @Override
    TopicManagerSyncPrx ice_batchDatagram();

    @Override
    TopicManagerSyncPrx ice_compress(boolean co);

    @Override
    TopicManagerSyncPrx ice_connectionId(String connectionId);

    @Override
    TopicManagerSyncPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStormElection::TopicManagerSync";
    }

    /**
     * @hidden
     **/
    @Override
    default TopicManagerSyncPrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _TopicManagerSyncPrxI(ref);
    }
}
