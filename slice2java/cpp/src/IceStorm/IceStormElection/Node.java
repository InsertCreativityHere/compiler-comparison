//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStormElection;

/**
 * A replica node.
 **/
public interface Node extends com.zeroc.Ice.Object
{
    /**
     * Invite the node into a group with the given coordinator and
     * group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param current The Current object for the invocation.
     **/
    void invitation(int j, String gn, com.zeroc.Ice.Current current);

    /**
     * Call from the group coordinator to a node to inform the node
     * that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica
     * group.
     * @param generation The current generation count.
     * @param current The Current object for the invocation.
     **/
    void ready(int j, String gn, com.zeroc.Ice.ObjectPrx coordinator, int max, long generation, com.zeroc.Ice.Current current);

    /**
     * Called to accept an invitation into
     * the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which
     * invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica
     * group.
     * @param current The Current object for the invocation.
     **/
    void accept(int j, String gn, int[] forwardedInvites, com.zeroc.Ice.ObjectPrx observer, LogUpdate llu, int max, com.zeroc.Ice.Current current);

    /**
     * Determine if this node is a coordinator.
     * @param current The Current object for the invocation.
     * @return True if the node is a coordinator, false otherwise.
     **/
    boolean areYouCoordinator(com.zeroc.Ice.Current current);

    /**
     * Determine if the node is a member of the given group with the
     * given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param current The Current object for the invocation.
     * @return True if the node is a member, false otherwise.
     **/
    boolean areYouThere(String gn, int j, com.zeroc.Ice.Current current);

    /**
     * Get the sync object for the replica hosted by this node.
     * @param current The Current object for the invocation.
     * @return The sync object.
     **/
    com.zeroc.Ice.ObjectPrx sync(com.zeroc.Ice.Current current);

    /**
     * Get the replication group information.
     * @param current The Current object for the invocation.
     * @return The set of configured nodes and the associated
     * priority.
     **/
    NodeInfo[] nodes(com.zeroc.Ice.Current current);

    /**
     * Get the query information for the given node.
     * @param current The Current object for the invocation.
     * @return The query information.
     **/
    QueryInfo query(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IceStormElection::Node"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IceStormElection::Node";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_invitation(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_j;
        String iceP_gn;
        iceP_j = istr.readInt();
        iceP_gn = istr.readString();
        inS.endReadParams();
        obj.invitation(iceP_j, iceP_gn, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_ready(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_j;
        String iceP_gn;
        com.zeroc.Ice.ObjectPrx iceP_coordinator;
        int iceP_max;
        long iceP_generation;
        iceP_j = istr.readInt();
        iceP_gn = istr.readString();
        iceP_coordinator = istr.readProxy();
        iceP_max = istr.readInt();
        iceP_generation = istr.readLong();
        inS.endReadParams();
        obj.ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_accept(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_j;
        String iceP_gn;
        int[] iceP_forwardedInvites;
        com.zeroc.Ice.ObjectPrx iceP_observer;
        LogUpdate iceP_llu;
        int iceP_max;
        iceP_j = istr.readInt();
        iceP_gn = istr.readString();
        iceP_forwardedInvites = istr.readIntSeq();
        iceP_observer = istr.readProxy();
        iceP_llu = LogUpdate.ice_read(istr);
        iceP_max = istr.readInt();
        inS.endReadParams();
        obj.accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_areYouCoordinator(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.areYouCoordinator(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_areYouThere(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_gn;
        int iceP_j;
        iceP_gn = istr.readString();
        iceP_j = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.areYouThere(iceP_gn, iceP_j, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_sync(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        com.zeroc.Ice.ObjectPrx ret = obj.sync(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeProxy(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_nodes(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        NodeInfo[] ret = obj.nodes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodeInfoSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_query(Node obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        QueryInfo ret = obj.query(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        QueryInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "accept",
        "areYouCoordinator",
        "areYouThere",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "invitation",
        "nodes",
        "query",
        "ready",
        "sync"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_accept(this, in, current);
            }
            case 1:
            {
                return _iceD_areYouCoordinator(this, in, current);
            }
            case 2:
            {
                return _iceD_areYouThere(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return _iceD_invitation(this, in, current);
            }
            case 8:
            {
                return _iceD_nodes(this, in, current);
            }
            case 9:
            {
                return _iceD_query(this, in, current);
            }
            case 10:
            {
                return _iceD_ready(this, in, current);
            }
            case 11:
            {
                return _iceD_sync(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
