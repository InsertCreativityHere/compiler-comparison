//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IceStormElection;

/**
 * A replica node.
 **/
public interface NodePrx extends com.zeroc.Ice.ObjectPrx
{
    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     **/
    default void invitation(int j, String gn)
    {
        invitation(j, gn, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param context The Context map to send with the invocation.
     **/
    default void invitation(int j, String gn, java.util.Map<String, String> context)
    {
        _iceI_invitationAsync(j, gn, context, true).waitForResponse();
    }

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> invitationAsync(int j, String gn)
    {
        return _iceI_invitationAsync(j, gn, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> invitationAsync(int j, String gn, java.util.Map<String, String> context)
    {
        return _iceI_invitationAsync(j, gn, context, false);
    }

    /**
     * @hidden
     * @param iceP_j -
     * @param iceP_gn -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_invitationAsync(int iceP_j, String iceP_gn, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "invitation", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_j);
                     ostr.writeString(iceP_gn);
                 }, null);
        return f;
    }

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     **/
    default void ready(int j, String gn, com.zeroc.Ice.ObjectPrx coordinator, int max, long generation)
    {
        ready(j, gn, coordinator, max, generation, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param context The Context map to send with the invocation.
     **/
    default void ready(int j, String gn, com.zeroc.Ice.ObjectPrx coordinator, int max, long generation, java.util.Map<String, String> context)
    {
        _iceI_readyAsync(j, gn, coordinator, max, generation, context, true).waitForResponse();
    }

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> readyAsync(int j, String gn, com.zeroc.Ice.ObjectPrx coordinator, int max, long generation)
    {
        return _iceI_readyAsync(j, gn, coordinator, max, generation, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> readyAsync(int j, String gn, com.zeroc.Ice.ObjectPrx coordinator, int max, long generation, java.util.Map<String, String> context)
    {
        return _iceI_readyAsync(j, gn, coordinator, max, generation, context, false);
    }

    /**
     * @hidden
     * @param iceP_j -
     * @param iceP_gn -
     * @param iceP_coordinator -
     * @param iceP_max -
     * @param iceP_generation -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_readyAsync(int iceP_j, String iceP_gn, com.zeroc.Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "ready", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_j);
                     ostr.writeString(iceP_gn);
                     ostr.writeProxy(iceP_coordinator);
                     ostr.writeInt(iceP_max);
                     ostr.writeLong(iceP_generation);
                 }, null);
        return f;
    }

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     **/
    default void accept(int j, String gn, int[] forwardedInvites, com.zeroc.Ice.ObjectPrx observer, LogUpdate llu, int max)
    {
        accept(j, gn, forwardedInvites, observer, llu, max, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param context The Context map to send with the invocation.
     **/
    default void accept(int j, String gn, int[] forwardedInvites, com.zeroc.Ice.ObjectPrx observer, LogUpdate llu, int max, java.util.Map<String, String> context)
    {
        _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, true).waitForResponse();
    }

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> acceptAsync(int j, String gn, int[] forwardedInvites, com.zeroc.Ice.ObjectPrx observer, LogUpdate llu, int max)
    {
        return _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed when the invocation completes.
     **/
    default java.util.concurrent.CompletableFuture<Void> acceptAsync(int j, String gn, int[] forwardedInvites, com.zeroc.Ice.ObjectPrx observer, LogUpdate llu, int max, java.util.Map<String, String> context)
    {
        return _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, false);
    }

    /**
     * @hidden
     * @param iceP_j -
     * @param iceP_gn -
     * @param iceP_forwardedInvites -
     * @param iceP_observer -
     * @param iceP_llu -
     * @param iceP_max -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_acceptAsync(int iceP_j, String iceP_gn, int[] iceP_forwardedInvites, com.zeroc.Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "accept", null, sync, null);
        f.invoke(false, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeInt(iceP_j);
                     ostr.writeString(iceP_gn);
                     ostr.writeIntSeq(iceP_forwardedInvites);
                     ostr.writeProxy(iceP_observer);
                     LogUpdate.ice_write(ostr, iceP_llu);
                     ostr.writeInt(iceP_max);
                 }, null);
        return f;
    }

    /**
     * Determine if this node is a coordinator.
     * @return True if the node is a coordinator, false otherwise.
     **/
    default boolean areYouCoordinator()
    {
        return areYouCoordinator(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Determine if this node is a coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a coordinator, false otherwise.
     **/
    default boolean areYouCoordinator(java.util.Map<String, String> context)
    {
        return _iceI_areYouCoordinatorAsync(context, true).waitForResponse();
    }

    /**
     * Determine if this node is a coordinator.
     * @return True if the node is a coordinator, false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areYouCoordinatorAsync()
    {
        return _iceI_areYouCoordinatorAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Determine if this node is a coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a coordinator, false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areYouCoordinatorAsync(java.util.Map<String, String> context)
    {
        return _iceI_areYouCoordinatorAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_areYouCoordinatorAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "areYouCoordinator", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @return True if the node is a member, false otherwise.
     **/
    default boolean areYouThere(String gn, int j)
    {
        return areYouThere(gn, j, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a member, false otherwise.
     **/
    default boolean areYouThere(String gn, int j, java.util.Map<String, String> context)
    {
        return _iceI_areYouThereAsync(gn, j, context, true).waitForResponse();
    }

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @return True if the node is a member, false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areYouThereAsync(String gn, int j)
    {
        return _iceI_areYouThereAsync(gn, j, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a member, false otherwise.
     **/
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> areYouThereAsync(String gn, int j, java.util.Map<String, String> context)
    {
        return _iceI_areYouThereAsync(gn, j, context, false);
    }

    /**
     * @hidden
     * @param iceP_gn -
     * @param iceP_j -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_areYouThereAsync(String iceP_gn, int iceP_j, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "areYouThere", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, ostr -> {
                     ostr.writeString(iceP_gn);
                     ostr.writeInt(iceP_j);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the sync object for the replica hosted by this node.
     * @return The sync object.
     **/
    default com.zeroc.Ice.ObjectPrx sync()
    {
        return sync(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the sync object for the replica hosted by this node.
     * @param context The Context map to send with the invocation.
     * @return The sync object.
     **/
    default com.zeroc.Ice.ObjectPrx sync(java.util.Map<String, String> context)
    {
        return _iceI_syncAsync(context, true).waitForResponse();
    }

    /**
     * Get the sync object for the replica hosted by this node.
     * @return The sync object.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> syncAsync()
    {
        return _iceI_syncAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the sync object for the replica hosted by this node.
     * @param context The Context map to send with the invocation.
     * @return The sync object.
     **/
    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> syncAsync(java.util.Map<String, String> context)
    {
        return _iceI_syncAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_syncAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "sync", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    /**
     * Get the replication group information.
     * @return The set of configured nodes and the associated priority.
     **/
    default NodeInfo[] nodes()
    {
        return nodes(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the replication group information.
     * @param context The Context map to send with the invocation.
     * @return The set of configured nodes and the associated priority.
     **/
    default NodeInfo[] nodes(java.util.Map<String, String> context)
    {
        return _iceI_nodesAsync(context, true).waitForResponse();
    }

    /**
     * Get the replication group information.
     * @return The set of configured nodes and the associated priority.
     **/
    default java.util.concurrent.CompletableFuture<NodeInfo[]> nodesAsync()
    {
        return _iceI_nodesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the replication group information.
     * @param context The Context map to send with the invocation.
     * @return The set of configured nodes and the associated priority.
     **/
    default java.util.concurrent.CompletableFuture<NodeInfo[]> nodesAsync(java.util.Map<String, String> context)
    {
        return _iceI_nodesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<NodeInfo[]> _iceI_nodesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodeInfo[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "nodes", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     NodeInfo[] ret;
                     ret = NodeInfoSeqHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Get the query information for the given node.
     * @return The query information.
     **/
    default QueryInfo query()
    {
        return query(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * Get the query information for the given node.
     * @param context The Context map to send with the invocation.
     * @return The query information.
     **/
    default QueryInfo query(java.util.Map<String, String> context)
    {
        return _iceI_queryAsync(context, true).waitForResponse();
    }

    /**
     * Get the query information for the given node.
     * @return The query information.
     **/
    default java.util.concurrent.CompletableFuture<QueryInfo> queryAsync()
    {
        return _iceI_queryAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * Get the query information for the given node.
     * @param context The Context map to send with the invocation.
     * @return The query information.
     **/
    default java.util.concurrent.CompletableFuture<QueryInfo> queryAsync(java.util.Map<String, String> context)
    {
        return _iceI_queryAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<QueryInfo> _iceI_queryAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<QueryInfo> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "query", com.zeroc.Ice.OperationMode.Idempotent, sync, null);
        f.invoke(true, context, com.zeroc.Ice.FormatType.DefaultFormat, null, istr -> {
                     QueryInfo ret;
                     ret = QueryInfo.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * Creates a new proxy that implements {@link NodePrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static NodePrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _NodePrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        if (obj != null)
        {
            try
            {
                boolean ok = obj.ice_isA(ice_staticId(), context);
                return ok ? new _NodePrxI(obj) : null;
            }
            catch (com.zeroc.Ice.FacetNotExistException ex)
            {
            }
        }
        return null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static NodePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _NodePrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static NodePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _NodePrxI(obj.ice_facet(facet));
    }

    @Override
    NodePrx ice_context(java.util.Map<String, String> newContext);

    @Override
    NodePrx ice_adapterId(String newAdapterId);

    @Override
    NodePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    NodePrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    NodePrx ice_invocationTimeout(int newTimeout);

    @Override
    NodePrx ice_connectionCached(boolean newCache);

    @Override
    NodePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    NodePrx ice_secure(boolean b);

    @Override
    NodePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    NodePrx ice_preferSecure(boolean b);

    @Override
    NodePrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    NodePrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    NodePrx ice_collocationOptimized(boolean b);

    @Override
    NodePrx ice_twoway();

    @Override
    NodePrx ice_oneway();

    @Override
    NodePrx ice_batchOneway();

    @Override
    NodePrx ice_datagram();

    @Override
    NodePrx ice_batchDatagram();

    @Override
    NodePrx ice_compress(boolean co);

    @Override
    NodePrx ice_connectionId(String connectionId);

    @Override
    NodePrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::IceStormElection::Node";
    }

    /**
     * @hidden
     **/
    @Override
    default NodePrx _newInstance(com.zeroc.IceInternal.Reference ref)
    {
        return new _NodePrxI(ref);
    }
}
