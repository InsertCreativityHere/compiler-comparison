//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package and;

public interface friend extends com.zeroc.Ice.Object
{
    guard _goto(_continue _if, guard d, defer inline, _switch _private, doPrx mutable, breakPrx namespace, funcPrx _new, _switch not, doPrx operator, int or, int _protected, int _public, int register, com.zeroc.Ice.Current current)
        throws _return,
               as;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::and::friend"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::and::friend";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_goto(friend obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        _continue iceP_if;
        guard iceP_d;
        defer iceP_inline;
        final com.zeroc.Ice.Holder<_switch> icePP_private = new com.zeroc.Ice.Holder<>();
        doPrx iceP_mutable;
        breakPrx iceP_namespace;
        funcPrx iceP_new;
        final com.zeroc.Ice.Holder<_switch> icePP_not = new com.zeroc.Ice.Holder<>();
        doPrx iceP_operator;
        int iceP_or;
        int iceP_protected;
        int iceP_public;
        int iceP_register;
        iceP_if = _continue.ice_read(istr);
        iceP_d = guard.ice_read(istr);
        iceP_inline = defer.ice_read(istr);
        istr.readValue(v -> icePP_private.value = v, _switch.class);
        iceP_mutable = doPrx.uncheckedCast(istr.readProxy());
        iceP_namespace = breakPrx.uncheckedCast(istr.readProxy());
        iceP_new = funcPrx.uncheckedCast(istr.readProxy());
        istr.readValue(v -> icePP_not.value = v, _switch.class);
        iceP_operator = doPrx.uncheckedCast(istr.readProxy());
        iceP_or = istr.readInt();
        iceP_protected = istr.readInt();
        iceP_public = istr.readInt();
        iceP_register = istr.readInt();
        istr.readPendingValues();
        istr.endEncapsulation();
        _switch iceP_private = icePP_private.value;
        _switch iceP_not = icePP_not.value;
        guard ret = obj._goto(iceP_if, iceP_d, iceP_inline, iceP_private, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_operator, iceP_or, iceP_protected, iceP_public, iceP_register, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        guard.ice_write(ostr, ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "goto" -> friend._iceD_goto(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
