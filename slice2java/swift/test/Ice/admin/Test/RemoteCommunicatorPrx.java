//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface RemoteCommunicatorPrx extends com.zeroc.Ice.ObjectPrx
{
    default com.zeroc.Ice.ObjectPrx getAdmin()
    {
        return getAdmin(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.zeroc.Ice.ObjectPrx getAdmin(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminAsync()
    {
        return _iceI_getAdminAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.zeroc.Ice.ObjectPrx> getAdminAsync(java.util.Map<String, String> context)
    {
        return _iceI_getAdminAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> _iceI_getAdminAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<com.zeroc.Ice.ObjectPrx> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getAdmin", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     com.zeroc.Ice.ObjectPrx ret;
                     ret = istr.readProxy();
                     return ret;
                 });
        return f;
    }

    default java.util.Map<java.lang.String, java.lang.String> getChanges()
    {
        return getChanges(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.Map<java.lang.String, java.lang.String> getChanges(java.util.Map<String, String> context)
    {
        return _iceI_getChangesAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, java.lang.String>> getChangesAsync()
    {
        return _iceI_getChangesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.Map<java.lang.String, java.lang.String>> getChangesAsync(java.util.Map<String, String> context)
    {
        return _iceI_getChangesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<java.util.Map<java.lang.String, java.lang.String>> _iceI_getChangesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<java.util.Map<java.lang.String, java.lang.String>> f = new com.zeroc.Ice.OutgoingAsync<>(this, "getChanges", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.Map<java.lang.String, java.lang.String> ret;
                     ret = com.zeroc.Ice.PropertyDictHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default void print(String message)
    {
        print(message, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void print(String message, java.util.Map<String, String> context)
    {
        _iceI_printAsync(message, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> printAsync(String message)
    {
        return _iceI_printAsync(message, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> printAsync(String message, java.util.Map<String, String> context)
    {
        return _iceI_printAsync(message, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_printAsync(String iceP_message, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "print", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_message);
                 }, null);
        return f;
    }

    default void trace(String category, String message)
    {
        trace(category, message, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void trace(String category, String message, java.util.Map<String, String> context)
    {
        _iceI_traceAsync(category, message, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> traceAsync(String category, String message)
    {
        return _iceI_traceAsync(category, message, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> traceAsync(String category, String message, java.util.Map<String, String> context)
    {
        return _iceI_traceAsync(category, message, context, false);
    }

    /**
     * @hidden
     * @param iceP_category -
     * @param iceP_message -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_traceAsync(String iceP_category, String iceP_message, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "trace", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_category);
                     ostr.writeString(iceP_message);
                 }, null);
        return f;
    }

    default void warning(String message)
    {
        warning(message, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void warning(String message, java.util.Map<String, String> context)
    {
        _iceI_warningAsync(message, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> warningAsync(String message)
    {
        return _iceI_warningAsync(message, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> warningAsync(String message, java.util.Map<String, String> context)
    {
        return _iceI_warningAsync(message, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_warningAsync(String iceP_message, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "warning", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_message);
                 }, null);
        return f;
    }

    default void error(String message)
    {
        error(message, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void error(String message, java.util.Map<String, String> context)
    {
        _iceI_errorAsync(message, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> errorAsync(String message)
    {
        return _iceI_errorAsync(message, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> errorAsync(String message, java.util.Map<String, String> context)
    {
        return _iceI_errorAsync(message, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_errorAsync(String iceP_message, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "error", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_message);
                 }, null);
        return f;
    }

    default void shutdown()
    {
        shutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void shutdown(java.util.Map<String, String> context)
    {
        _iceI_shutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync()
    {
        return _iceI_shutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> shutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_shutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_shutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "shutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void waitForShutdown()
    {
        waitForShutdown(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void waitForShutdown(java.util.Map<String, String> context)
    {
        _iceI_waitForShutdownAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> waitForShutdownAsync()
    {
        return _iceI_waitForShutdownAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> waitForShutdownAsync(java.util.Map<String, String> context)
    {
        return _iceI_waitForShutdownAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_waitForShutdownAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "waitForShutdown", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void destroy()
    {
        destroy(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void destroy(java.util.Map<String, String> context)
    {
        _iceI_destroyAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> destroyAsync()
    {
        return _iceI_destroyAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> destroyAsync(java.util.Map<String, String> context)
    {
        return _iceI_destroyAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.Ice.OutgoingAsync<Void> _iceI_destroyAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.Ice.OutgoingAsync<Void> f = new com.zeroc.Ice.OutgoingAsync<>(this, "destroy", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    /**
     * Creates a new proxy that implements {@link RemoteCommunicatorPrx}.
     * @param communicator The communicator of the new proxy.
     * @param proxyString The string representation of the proxy.
     * @return The new proxy.
     **/
    public static RemoteCommunicatorPrx createProxy(com.zeroc.Ice.Communicator communicator, String proxyString)
    {
        return new _RemoteCommunicatorPrxI(com.zeroc.Ice.ObjectPrx.createProxy(communicator, proxyString));
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteCommunicatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return checkedCast(obj, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteCommunicatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return (obj != null && obj.ice_isA(ice_staticId(), context)) ? new _RemoteCommunicatorPrxI(obj) : null;
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteCommunicatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return checkedCast(obj, facet, noExplicitContext);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteCommunicatorPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return (obj == null) ? null : checkedCast(obj.ice_facet(facet), context);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RemoteCommunicatorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return (obj == null) ? null : new _RemoteCommunicatorPrxI(obj);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RemoteCommunicatorPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return (obj == null) ? null : new _RemoteCommunicatorPrxI(obj.ice_facet(facet));
    }

    @Override
    RemoteCommunicatorPrx ice_context(java.util.Map<String, String> newContext);

    @Override
    RemoteCommunicatorPrx ice_adapterId(String newAdapterId);

    @Override
    RemoteCommunicatorPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints);

    @Override
    RemoteCommunicatorPrx ice_locatorCacheTimeout(int newTimeout);

    @Override
    RemoteCommunicatorPrx ice_invocationTimeout(int newTimeout);

    @Override
    RemoteCommunicatorPrx ice_connectionCached(boolean newCache);

    @Override
    RemoteCommunicatorPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType);

    @Override
    RemoteCommunicatorPrx ice_secure(boolean b);

    @Override
    RemoteCommunicatorPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e);

    @Override
    RemoteCommunicatorPrx ice_preferSecure(boolean b);

    @Override
    RemoteCommunicatorPrx ice_router(com.zeroc.Ice.RouterPrx router);

    @Override
    RemoteCommunicatorPrx ice_locator(com.zeroc.Ice.LocatorPrx locator);

    @Override
    RemoteCommunicatorPrx ice_collocationOptimized(boolean b);

    @Override
    RemoteCommunicatorPrx ice_twoway();

    @Override
    RemoteCommunicatorPrx ice_oneway();

    @Override
    RemoteCommunicatorPrx ice_batchOneway();

    @Override
    RemoteCommunicatorPrx ice_datagram();

    @Override
    RemoteCommunicatorPrx ice_batchDatagram();

    @Override
    RemoteCommunicatorPrx ice_compress(boolean co);

    @Override
    RemoteCommunicatorPrx ice_connectionId(String connectionId);

    @Override
    RemoteCommunicatorPrx ice_fixed(com.zeroc.Ice.Connection connection);

    static String ice_staticId()
    {
        return "::Test::RemoteCommunicator";
    }

    /**
     * @hidden
     **/
    @Override
    default RemoteCommunicatorPrx _newInstance(com.zeroc.Ice.Reference ref)
    {
        return new _RemoteCommunicatorPrxI(ref);
    }
}
