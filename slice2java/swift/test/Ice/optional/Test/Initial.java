//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Test;

public interface Initial extends com.zeroc.Ice.Object
{
    /**
     * Holds the marshaled result of operation pingPong.
     **/
    public static class PingPongMarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public PingPongMarshaledResult(com.zeroc.Ice.Value returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeValue(returnValue);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opByte.
     **/
    public static class OpByteResult
    {
        /**
         * Default constructor.
         **/
        public OpByteResult()
        {
        }

        public OpByteResult(java.util.Optional<java.lang.Byte> returnValue, java.util.Optional<java.lang.Byte> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteResult(byte returnValue, byte p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Byte> returnValue;
        public java.util.Optional<java.lang.Byte> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByte(1, returnValue);
            ostr.writeByte(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByte(1);
            this.p3 = istr.readByte(3);
        }
    }

    /**
     * Holds the result of operation opBool.
     **/
    public static class OpBoolResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolResult()
        {
        }

        public OpBoolResult(java.util.Optional<java.lang.Boolean> returnValue, java.util.Optional<java.lang.Boolean> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolResult(boolean returnValue, boolean p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Boolean> returnValue;
        public java.util.Optional<java.lang.Boolean> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBool(1, returnValue);
            ostr.writeBool(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBool(1);
            this.p3 = istr.readBool(3);
        }
    }

    /**
     * Holds the result of operation opShort.
     **/
    public static class OpShortResult
    {
        /**
         * Default constructor.
         **/
        public OpShortResult()
        {
        }

        public OpShortResult(java.util.Optional<java.lang.Short> returnValue, java.util.Optional<java.lang.Short> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortResult(short returnValue, short p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Short> returnValue;
        public java.util.Optional<java.lang.Short> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShort(1, returnValue);
            ostr.writeShort(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShort(1);
            this.p3 = istr.readShort(3);
        }
    }

    /**
     * Holds the result of operation opInt.
     **/
    public static class OpIntResult
    {
        /**
         * Default constructor.
         **/
        public OpIntResult()
        {
        }

        public OpIntResult(java.util.OptionalInt returnValue, java.util.OptionalInt p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntResult(int returnValue, int p3)
        {
            this.returnValue = java.util.OptionalInt.of(returnValue);
            this.p3 = java.util.OptionalInt.of(p3);
        }

        public java.util.OptionalInt returnValue;
        public java.util.OptionalInt p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeInt(1, returnValue);
            ostr.writeInt(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readInt(1);
            this.p3 = istr.readInt(3);
        }
    }

    /**
     * Holds the result of operation opLong.
     **/
    public static class OpLongResult
    {
        /**
         * Default constructor.
         **/
        public OpLongResult()
        {
        }

        public OpLongResult(java.util.OptionalLong returnValue, java.util.OptionalLong p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongResult(long returnValue, long p3)
        {
            this.returnValue = java.util.OptionalLong.of(returnValue);
            this.p3 = java.util.OptionalLong.of(p3);
        }

        public java.util.OptionalLong returnValue;
        public java.util.OptionalLong p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLong(2, this.p3);
            ostr.writeLong(3, returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            this.p3 = istr.readLong(2);
            returnValue = istr.readLong(3);
        }
    }

    /**
     * Holds the result of operation opFloat.
     **/
    public static class OpFloatResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatResult()
        {
        }

        public OpFloatResult(java.util.Optional<java.lang.Float> returnValue, java.util.Optional<java.lang.Float> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatResult(float returnValue, float p3)
        {
            this.returnValue = java.util.Optional.of(returnValue);
            this.p3 = java.util.Optional.of(p3);
        }

        public java.util.Optional<java.lang.Float> returnValue;
        public java.util.Optional<java.lang.Float> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloat(1, returnValue);
            ostr.writeFloat(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloat(1);
            this.p3 = istr.readFloat(3);
        }
    }

    /**
     * Holds the result of operation opDouble.
     **/
    public static class OpDoubleResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleResult()
        {
        }

        public OpDoubleResult(java.util.OptionalDouble returnValue, java.util.OptionalDouble p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleResult(double returnValue, double p3)
        {
            this.returnValue = java.util.OptionalDouble.of(returnValue);
            this.p3 = java.util.OptionalDouble.of(p3);
        }

        public java.util.OptionalDouble returnValue;
        public java.util.OptionalDouble p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDouble(1, returnValue);
            ostr.writeDouble(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDouble(1);
            this.p3 = istr.readDouble(3);
        }
    }

    /**
     * Holds the result of operation opString.
     **/
    public static class OpStringResult
    {
        /**
         * Default constructor.
         **/
        public OpStringResult()
        {
        }

        public OpStringResult(java.util.Optional<java.lang.String> returnValue, java.util.Optional<java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringResult(String returnValue, String p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.lang.String> returnValue;
        public java.util.Optional<java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(1, returnValue);
            ostr.writeString(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readString(1);
            this.p3 = istr.readString(3);
        }
    }

    /**
     * Holds the result of operation opCustomString.
     **/
    public static class OpCustomStringResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomStringResult()
        {
        }

        public OpCustomStringResult(java.util.Optional<java.lang.String> returnValue, java.util.Optional<java.lang.String> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpCustomStringResult(String returnValue, String p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.lang.String> returnValue;
        public java.util.Optional<java.lang.String> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeString(1, returnValue);
            ostr.writeString(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readString(1);
            this.p3 = istr.readString(3);
        }
    }

    /**
     * Holds the result of operation opMyEnum.
     **/
    public static class OpMyEnumResult
    {
        /**
         * Default constructor.
         **/
        public OpMyEnumResult()
        {
        }

        public OpMyEnumResult(java.util.Optional<MyEnum> returnValue, java.util.Optional<MyEnum> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpMyEnumResult(MyEnum returnValue, MyEnum p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<MyEnum> returnValue;
        public java.util.Optional<MyEnum> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            MyEnum.ice_write(ostr, 1, returnValue);
            MyEnum.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = MyEnum.ice_read(istr, 1);
            this.p3 = MyEnum.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStruct.
     **/
    public static class OpSmallStructResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructResult()
        {
        }

        public OpSmallStructResult(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructResult(SmallStruct returnValue, SmallStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct> returnValue;
        public java.util.Optional<SmallStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStruct.ice_write(ostr, 1, returnValue);
            SmallStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStruct.ice_read(istr, 1);
            this.p3 = SmallStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStruct.
     **/
    public static class OpFixedStructResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructResult()
        {
        }

        public OpFixedStructResult(java.util.Optional<FixedStruct> returnValue, java.util.Optional<FixedStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructResult(FixedStruct returnValue, FixedStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct> returnValue;
        public java.util.Optional<FixedStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStruct.ice_write(ostr, 1, returnValue);
            FixedStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStruct.ice_read(istr, 1);
            this.p3 = FixedStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStruct.
     **/
    public static class OpVarStructResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructResult()
        {
        }

        public OpVarStructResult(java.util.Optional<VarStruct> returnValue, java.util.Optional<VarStruct> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructResult(VarStruct returnValue, VarStruct p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct> returnValue;
        public java.util.Optional<VarStruct> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStruct.ice_write(ostr, 1, returnValue);
            VarStruct.ice_write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStruct.ice_read(istr, 1);
            this.p3 = VarStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opMyInterfaceProxy.
     **/
    public static class OpMyInterfaceProxyResult
    {
        /**
         * Default constructor.
         **/
        public OpMyInterfaceProxyResult()
        {
        }

        public OpMyInterfaceProxyResult(java.util.Optional<MyInterfacePrx> returnValue, java.util.Optional<MyInterfacePrx> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpMyInterfaceProxyResult(MyInterfacePrx returnValue, MyInterfacePrx p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<MyInterfacePrx> returnValue;
        public java.util.Optional<MyInterfacePrx> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeProxy(1, returnValue);
            ostr.writeProxy(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readProxy(1, MyInterfacePrx::uncheckedCast);
            this.p3 = istr.readProxy(3, MyInterfacePrx::uncheckedCast);
        }
    }

    /**
     * Holds the result of operation opOneOptional.
     **/
    public static class OpOneOptionalResult
    {
        /**
         * Default constructor.
         **/
        public OpOneOptionalResult()
        {
        }

        public OpOneOptionalResult(OneOptional returnValue, OneOptional p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OneOptional returnValue;
        public OneOptional p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeValue(this.p3);
            ostr.writeValue(returnValue);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            istr.readValue(v -> this.p3 = v, OneOptional.class);
            istr.readValue(v -> returnValue = v, OneOptional.class);
        }
    }

    /**
     * Holds the result of operation opByteSeq.
     **/
    public static class OpByteSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpByteSeqResult()
        {
        }

        public OpByteSeqResult(java.util.Optional<byte[]> returnValue, java.util.Optional<byte[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpByteSeqResult(byte[] returnValue, byte[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<byte[]> returnValue;
        public java.util.Optional<byte[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(1, returnValue);
            ostr.writeByteSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByteSeq(1);
            this.p3 = istr.readByteSeq(3);
        }
    }

    /**
     * Holds the result of operation opBoolSeq.
     **/
    public static class OpBoolSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpBoolSeqResult()
        {
        }

        public OpBoolSeqResult(java.util.Optional<boolean[]> returnValue, java.util.Optional<boolean[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpBoolSeqResult(boolean[] returnValue, boolean[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<boolean[]> returnValue;
        public java.util.Optional<boolean[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeBoolSeq(1, returnValue);
            ostr.writeBoolSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readBoolSeq(1);
            this.p3 = istr.readBoolSeq(3);
        }
    }

    /**
     * Holds the result of operation opShortSeq.
     **/
    public static class OpShortSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpShortSeqResult()
        {
        }

        public OpShortSeqResult(java.util.Optional<short[]> returnValue, java.util.Optional<short[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpShortSeqResult(short[] returnValue, short[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<short[]> returnValue;
        public java.util.Optional<short[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeShortSeq(1, returnValue);
            ostr.writeShortSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readShortSeq(1);
            this.p3 = istr.readShortSeq(3);
        }
    }

    /**
     * Holds the result of operation opIntSeq.
     **/
    public static class OpIntSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpIntSeqResult()
        {
        }

        public OpIntSeqResult(java.util.Optional<int[]> returnValue, java.util.Optional<int[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntSeqResult(int[] returnValue, int[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<int[]> returnValue;
        public java.util.Optional<int[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeIntSeq(1, returnValue);
            ostr.writeIntSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readIntSeq(1);
            this.p3 = istr.readIntSeq(3);
        }
    }

    /**
     * Holds the result of operation opLongSeq.
     **/
    public static class OpLongSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpLongSeqResult()
        {
        }

        public OpLongSeqResult(java.util.Optional<long[]> returnValue, java.util.Optional<long[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpLongSeqResult(long[] returnValue, long[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<long[]> returnValue;
        public java.util.Optional<long[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeLongSeq(1, returnValue);
            ostr.writeLongSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readLongSeq(1);
            this.p3 = istr.readLongSeq(3);
        }
    }

    /**
     * Holds the result of operation opFloatSeq.
     **/
    public static class OpFloatSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFloatSeqResult()
        {
        }

        public OpFloatSeqResult(java.util.Optional<float[]> returnValue, java.util.Optional<float[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFloatSeqResult(float[] returnValue, float[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<float[]> returnValue;
        public java.util.Optional<float[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeFloatSeq(1, returnValue);
            ostr.writeFloatSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readFloatSeq(1);
            this.p3 = istr.readFloatSeq(3);
        }
    }

    /**
     * Holds the result of operation opDoubleSeq.
     **/
    public static class OpDoubleSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpDoubleSeqResult()
        {
        }

        public OpDoubleSeqResult(java.util.Optional<double[]> returnValue, java.util.Optional<double[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpDoubleSeqResult(double[] returnValue, double[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<double[]> returnValue;
        public java.util.Optional<double[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeDoubleSeq(1, returnValue);
            ostr.writeDoubleSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readDoubleSeq(1);
            this.p3 = istr.readDoubleSeq(3);
        }
    }

    /**
     * Holds the result of operation opStringSeq.
     **/
    public static class OpStringSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpStringSeqResult()
        {
        }

        public OpStringSeqResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringSeqResult(String[] returnValue, String[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(1, returnValue);
            ostr.writeStringSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(1);
            this.p3 = istr.readStringSeq(3);
        }
    }

    /**
     * Holds the result of operation opSmallStructSeq.
     **/
    public static class OpSmallStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructSeqResult()
        {
        }

        public OpSmallStructSeqResult(java.util.Optional<SmallStruct[]> returnValue, java.util.Optional<SmallStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructSeqResult(SmallStruct[] returnValue, SmallStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct[]> returnValue;
        public java.util.Optional<SmallStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructSeqHelper.write(ostr, 1, returnValue);
            SmallStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructSeqHelper.read(istr, 1);
            this.p3 = SmallStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSmallStructList.
     **/
    public static class OpSmallStructListResult
    {
        /**
         * Default constructor.
         **/
        public OpSmallStructListResult()
        {
        }

        public OpSmallStructListResult(java.util.Optional<SmallStruct[]> returnValue, java.util.Optional<SmallStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSmallStructListResult(SmallStruct[] returnValue, SmallStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<SmallStruct[]> returnValue;
        public java.util.Optional<SmallStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStructListHelper.write(ostr, 1, returnValue);
            SmallStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStructListHelper.read(istr, 1);
            this.p3 = SmallStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructSeq.
     **/
    public static class OpFixedStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructSeqResult()
        {
        }

        public OpFixedStructSeqResult(java.util.Optional<FixedStruct[]> returnValue, java.util.Optional<FixedStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructSeqResult(FixedStruct[] returnValue, FixedStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct[]> returnValue;
        public java.util.Optional<FixedStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructSeqHelper.write(ostr, 1, returnValue);
            FixedStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructSeqHelper.read(istr, 1);
            this.p3 = FixedStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opFixedStructList.
     **/
    public static class OpFixedStructListResult
    {
        /**
         * Default constructor.
         **/
        public OpFixedStructListResult()
        {
        }

        public OpFixedStructListResult(java.util.Optional<FixedStruct[]> returnValue, java.util.Optional<FixedStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpFixedStructListResult(FixedStruct[] returnValue, FixedStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<FixedStruct[]> returnValue;
        public java.util.Optional<FixedStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            FixedStructListHelper.write(ostr, 1, returnValue);
            FixedStructListHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = FixedStructListHelper.read(istr, 1);
            this.p3 = FixedStructListHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opVarStructSeq.
     **/
    public static class OpVarStructSeqResult
    {
        /**
         * Default constructor.
         **/
        public OpVarStructSeqResult()
        {
        }

        public OpVarStructSeqResult(java.util.Optional<VarStruct[]> returnValue, java.util.Optional<VarStruct[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpVarStructSeqResult(VarStruct[] returnValue, VarStruct[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<VarStruct[]> returnValue;
        public java.util.Optional<VarStruct[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            VarStructSeqHelper.write(ostr, 1, returnValue);
            VarStructSeqHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = VarStructSeqHelper.read(istr, 1);
            this.p3 = VarStructSeqHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opSerializable.
     **/
    public static class OpSerializableResult
    {
        /**
         * Default constructor.
         **/
        public OpSerializableResult()
        {
        }

        public OpSerializableResult(java.util.Optional<byte[]> returnValue, java.util.Optional<byte[]> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpSerializableResult(byte[] returnValue, byte[] p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<byte[]> returnValue;
        public java.util.Optional<byte[]> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeByteSeq(1, returnValue);
            ostr.writeByteSeq(3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readByteSeq(1);
            this.p3 = istr.readByteSeq(3);
        }
    }

    /**
     * Holds the result of operation opIntIntDict.
     **/
    public static class OpIntIntDictResult
    {
        /**
         * Default constructor.
         **/
        public OpIntIntDictResult()
        {
        }

        public OpIntIntDictResult(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpIntIntDictResult(java.util.Map<java.lang.Integer, java.lang.Integer> returnValue, java.util.Map<java.lang.Integer, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntIntDictHelper.write(ostr, 1, returnValue);
            IntIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntIntDictHelper.read(istr, 1);
            this.p3 = IntIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opStringIntDict.
     **/
    public static class OpStringIntDictResult
    {
        /**
         * Default constructor.
         **/
        public OpStringIntDictResult()
        {
        }

        public OpStringIntDictResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpStringIntDictResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, 1, returnValue);
            StringIntDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringIntDictHelper.read(istr, 1);
            this.p3 = StringIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the result of operation opCustomIntStringDict.
     **/
    public static class OpCustomIntStringDictResult
    {
        /**
         * Default constructor.
         **/
        public OpCustomIntStringDictResult()
        {
        }

        public OpCustomIntStringDictResult(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> returnValue, java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> p3)
        {
            this.returnValue = returnValue;
            this.p3 = p3;
        }

        public OpCustomIntStringDictResult(java.util.Map<java.lang.Integer, java.lang.String> returnValue, java.util.Map<java.lang.Integer, java.lang.String> p3)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p3 = java.util.Optional.ofNullable(p3);
        }

        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> p3;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            IntStringDictHelper.write(ostr, 1, returnValue);
            IntStringDictHelper.write(ostr, 3, this.p3);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = IntStringDictHelper.read(istr, 1);
            this.p3 = IntStringDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct1.
     **/
    public static class OpMStruct1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct1MarshaledResult(java.util.Optional<SmallStruct> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            SmallStruct.ice_write(_ostr, 1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMStruct1MarshaledResult(SmallStruct returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMStruct2.
     **/
    public static class OpMStruct2Result
    {
        /**
         * Default constructor.
         **/
        public OpMStruct2Result()
        {
        }

        public OpMStruct2Result(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMStruct2Result(SmallStruct returnValue, SmallStruct p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<SmallStruct> returnValue;
        public java.util.Optional<SmallStruct> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            SmallStruct.ice_write(ostr, 1, returnValue);
            SmallStruct.ice_write(ostr, 3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = SmallStruct.ice_read(istr, 1);
            this.p2 = SmallStruct.ice_read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMStruct2.
     **/
    public static class OpMStruct2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMStruct2MarshaledResult(java.util.Optional<SmallStruct> returnValue, java.util.Optional<SmallStruct> p2, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            SmallStruct.ice_write(_ostr, 1, returnValue);
            SmallStruct.ice_write(_ostr, 3, p2);
            _ostr.endEncapsulation();
        }

        public OpMStruct2MarshaledResult(SmallStruct returnValue, SmallStruct p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMSeq1.
     **/
    public static class OpMSeq1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq1MarshaledResult(java.util.Optional<String[]> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMSeq1MarshaledResult(String[] returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMSeq2.
     **/
    public static class OpMSeq2Result
    {
        /**
         * Default constructor.
         **/
        public OpMSeq2Result()
        {
        }

        public OpMSeq2Result(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMSeq2Result(String[] returnValue, String[] p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<String[]> returnValue;
        public java.util.Optional<String[]> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            ostr.writeStringSeq(1, returnValue);
            ostr.writeStringSeq(3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = istr.readStringSeq(1);
            this.p2 = istr.readStringSeq(3);
        }
    }

    /**
     * Holds the marshaled result of operation opMSeq2.
     **/
    public static class OpMSeq2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMSeq2MarshaledResult(java.util.Optional<String[]> returnValue, java.util.Optional<String[]> p2, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            _ostr.writeStringSeq(1, returnValue);
            _ostr.writeStringSeq(3, p2);
            _ostr.endEncapsulation();
        }

        public OpMSeq2MarshaledResult(String[] returnValue, String[] p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the marshaled result of operation opMDict1.
     **/
    public static class OpMDict1MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict1MarshaledResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            StringIntDictHelper.write(_ostr, 1, returnValue);
            _ostr.endEncapsulation();
        }

        public OpMDict1MarshaledResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    /**
     * Holds the result of operation opMDict2.
     **/
    public static class OpMDict2Result
    {
        /**
         * Default constructor.
         **/
        public OpMDict2Result()
        {
        }

        public OpMDict2Result(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
        }

        public OpMDict2Result(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p2)
        {
            this.returnValue = java.util.Optional.ofNullable(returnValue);
            this.p2 = java.util.Optional.ofNullable(p2);
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2;

        public void write(com.zeroc.Ice.OutputStream ostr)
        {
            StringIntDictHelper.write(ostr, 1, returnValue);
            StringIntDictHelper.write(ostr, 3, this.p2);
        }

        public void read(com.zeroc.Ice.InputStream istr)
        {
            returnValue = StringIntDictHelper.read(istr, 1);
            this.p2 = StringIntDictHelper.read(istr, 3);
        }
    }

    /**
     * Holds the marshaled result of operation opMDict2.
     **/
    public static class OpMDict2MarshaledResult implements com.zeroc.Ice.MarshaledResult
    {
        public OpMDict2MarshaledResult(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> returnValue, java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p2, com.zeroc.Ice.Current current)
        {
            _ostr = current.startReplyStream();
            _ostr.startEncapsulation(current.encoding, null);
            StringIntDictHelper.write(_ostr, 1, returnValue);
            StringIntDictHelper.write(_ostr, 3, p2);
            _ostr.endEncapsulation();
        }

        public OpMDict2MarshaledResult(java.util.Map<java.lang.String, java.lang.Integer> returnValue, java.util.Map<java.lang.String, java.lang.Integer> p2, com.zeroc.Ice.Current current)
        {
            this(java.util.Optional.ofNullable(returnValue), java.util.Optional.ofNullable(p2), current);
        }

        @Override
        public com.zeroc.Ice.OutputStream getOutputStream()
        {
            return _ostr;
        }

        private com.zeroc.Ice.OutputStream _ostr;
    }

    void shutdown(com.zeroc.Ice.Current current);

    Initial.PingPongMarshaledResult pingPong(com.zeroc.Ice.Value o, com.zeroc.Ice.Current current);

    void opOptionalException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, com.zeroc.Ice.Current current)
        throws OptionalException;

    void opDerivedException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, com.zeroc.Ice.Current current)
        throws OptionalException;

    void opRequiredException(java.util.OptionalInt a, java.util.Optional<java.lang.String> b, com.zeroc.Ice.Current current)
        throws OptionalException;

    Initial.OpByteResult opByte(java.util.Optional<java.lang.Byte> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolResult opBool(java.util.Optional<java.lang.Boolean> p1, com.zeroc.Ice.Current current);

    Initial.OpShortResult opShort(java.util.Optional<java.lang.Short> p1, com.zeroc.Ice.Current current);

    Initial.OpIntResult opInt(java.util.OptionalInt p1, com.zeroc.Ice.Current current);

    Initial.OpLongResult opLong(java.util.OptionalLong p1, com.zeroc.Ice.Current current);

    Initial.OpFloatResult opFloat(java.util.Optional<java.lang.Float> p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleResult opDouble(java.util.OptionalDouble p1, com.zeroc.Ice.Current current);

    Initial.OpStringResult opString(java.util.Optional<java.lang.String> p1, com.zeroc.Ice.Current current);

    Initial.OpCustomStringResult opCustomString(java.util.Optional<java.lang.String> p1, com.zeroc.Ice.Current current);

    Initial.OpMyEnumResult opMyEnum(java.util.Optional<MyEnum> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructResult opSmallStruct(java.util.Optional<SmallStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructResult opFixedStruct(java.util.Optional<FixedStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructResult opVarStruct(java.util.Optional<VarStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpMyInterfaceProxyResult opMyInterfaceProxy(java.util.Optional<MyInterfacePrx> p1, com.zeroc.Ice.Current current);

    Initial.OpOneOptionalResult opOneOptional(OneOptional p1, com.zeroc.Ice.Current current);

    Initial.OpByteSeqResult opByteSeq(java.util.Optional<byte[]> p1, com.zeroc.Ice.Current current);

    Initial.OpBoolSeqResult opBoolSeq(java.util.Optional<boolean[]> p1, com.zeroc.Ice.Current current);

    Initial.OpShortSeqResult opShortSeq(java.util.Optional<short[]> p1, com.zeroc.Ice.Current current);

    Initial.OpIntSeqResult opIntSeq(java.util.Optional<int[]> p1, com.zeroc.Ice.Current current);

    Initial.OpLongSeqResult opLongSeq(java.util.Optional<long[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFloatSeqResult opFloatSeq(java.util.Optional<float[]> p1, com.zeroc.Ice.Current current);

    Initial.OpDoubleSeqResult opDoubleSeq(java.util.Optional<double[]> p1, com.zeroc.Ice.Current current);

    Initial.OpStringSeqResult opStringSeq(java.util.Optional<String[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructSeqResult opSmallStructSeq(java.util.Optional<SmallStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSmallStructListResult opSmallStructList(java.util.Optional<SmallStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructSeqResult opFixedStructSeq(java.util.Optional<FixedStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpFixedStructListResult opFixedStructList(java.util.Optional<FixedStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpVarStructSeqResult opVarStructSeq(java.util.Optional<VarStruct[]> p1, com.zeroc.Ice.Current current);

    Initial.OpSerializableResult opSerializable(java.util.Optional<byte[]> p1, com.zeroc.Ice.Current current);

    Initial.OpIntIntDictResult opIntIntDict(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpStringIntDictResult opStringIntDict(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    Initial.OpCustomIntStringDictResult opCustomIntStringDict(java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> p1, com.zeroc.Ice.Current current);

    void opClassAndUnknownOptional(A p, com.zeroc.Ice.Current current);

    G opG(G g, com.zeroc.Ice.Current current);

    void opVoid(com.zeroc.Ice.Current current);

    Initial.OpMStruct1MarshaledResult opMStruct1(com.zeroc.Ice.Current current);

    Initial.OpMStruct2MarshaledResult opMStruct2(java.util.Optional<SmallStruct> p1, com.zeroc.Ice.Current current);

    Initial.OpMSeq1MarshaledResult opMSeq1(com.zeroc.Ice.Current current);

    Initial.OpMSeq2MarshaledResult opMSeq2(java.util.Optional<String[]> p1, com.zeroc.Ice.Current current);

    Initial.OpMDict1MarshaledResult opMDict1(com.zeroc.Ice.Current current);

    Initial.OpMDict2MarshaledResult opMDict2(java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> p1, com.zeroc.Ice.Current current);

    boolean supportsJavaSerializable(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Test::Initial"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Test::Initial";
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_shutdown(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.shutdown(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_pingPong(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<com.zeroc.Ice.Value> icePP_o = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_o.value = v, com.zeroc.Ice.Value.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        com.zeroc.Ice.Value iceP_o = icePP_o.value;
        var result = obj.pingPong(iceP_o, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOptionalException(Initial obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.endEncapsulation();
        obj.opOptionalException(iceP_a, iceP_b, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDerivedException(Initial obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.endEncapsulation();
        obj.opDerivedException(iceP_a, iceP_b, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opRequiredException(Initial obj, com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalInt iceP_a;
        java.util.Optional<java.lang.String> iceP_b;
        iceP_a = istr.readInt(1);
        iceP_b = istr.readString(2);
        istr.endEncapsulation();
        obj.opRequiredException(iceP_a, iceP_b, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByte(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.Byte> iceP_p1;
        iceP_p1 = istr.readByte(2);
        istr.endEncapsulation();
        Initial.OpByteResult ret = obj.opByte(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBool(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.Boolean> iceP_p1;
        iceP_p1 = istr.readBool(2);
        istr.endEncapsulation();
        Initial.OpBoolResult ret = obj.opBool(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShort(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.Short> iceP_p1;
        iceP_p1 = istr.readShort(2);
        istr.endEncapsulation();
        Initial.OpShortResult ret = obj.opShort(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opInt(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalInt iceP_p1;
        iceP_p1 = istr.readInt(2);
        istr.endEncapsulation();
        Initial.OpIntResult ret = obj.opInt(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLong(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalLong iceP_p1;
        iceP_p1 = istr.readLong(1);
        istr.endEncapsulation();
        Initial.OpLongResult ret = obj.opLong(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloat(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.Float> iceP_p1;
        iceP_p1 = istr.readFloat(2);
        istr.endEncapsulation();
        Initial.OpFloatResult ret = obj.opFloat(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDouble(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.OptionalDouble iceP_p1;
        iceP_p1 = istr.readDouble(2);
        istr.endEncapsulation();
        Initial.OpDoubleResult ret = obj.opDouble(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opString(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.String> iceP_p1;
        iceP_p1 = istr.readString(2);
        istr.endEncapsulation();
        Initial.OpStringResult ret = obj.opString(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomString(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.lang.String> iceP_p1;
        iceP_p1 = istr.readString(2);
        istr.endEncapsulation();
        Initial.OpCustomStringResult ret = obj.opCustomString(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMyEnum(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<MyEnum> iceP_p1;
        iceP_p1 = MyEnum.ice_read(istr, 2);
        istr.endEncapsulation();
        Initial.OpMyEnumResult ret = obj.opMyEnum(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSmallStruct(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<SmallStruct> iceP_p1;
        iceP_p1 = SmallStruct.ice_read(istr, 2);
        istr.endEncapsulation();
        Initial.OpSmallStructResult ret = obj.opSmallStruct(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFixedStruct(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<FixedStruct> iceP_p1;
        iceP_p1 = FixedStruct.ice_read(istr, 2);
        istr.endEncapsulation();
        Initial.OpFixedStructResult ret = obj.opFixedStruct(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVarStruct(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<VarStruct> iceP_p1;
        iceP_p1 = VarStruct.ice_read(istr, 2);
        istr.endEncapsulation();
        Initial.OpVarStructResult ret = obj.opVarStruct(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMyInterfaceProxy(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<MyInterfacePrx> iceP_p1;
        iceP_p1 = istr.readProxy(2, MyInterfacePrx::uncheckedCast);
        istr.endEncapsulation();
        Initial.OpMyInterfaceProxyResult ret = obj.opMyInterfaceProxy(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opOneOptional(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<OneOptional> icePP_p1 = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p1.value = v, OneOptional.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        OneOptional iceP_p1 = icePP_p1.value;
        Initial.OpOneOptionalResult ret = obj.opOneOptional(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opByteSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<byte[]> iceP_p1;
        iceP_p1 = istr.readByteSeq(2);
        istr.endEncapsulation();
        Initial.OpByteSeqResult ret = obj.opByteSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opBoolSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<boolean[]> iceP_p1;
        iceP_p1 = istr.readBoolSeq(2);
        istr.endEncapsulation();
        Initial.OpBoolSeqResult ret = obj.opBoolSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opShortSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<short[]> iceP_p1;
        iceP_p1 = istr.readShortSeq(2);
        istr.endEncapsulation();
        Initial.OpShortSeqResult ret = obj.opShortSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<int[]> iceP_p1;
        iceP_p1 = istr.readIntSeq(2);
        istr.endEncapsulation();
        Initial.OpIntSeqResult ret = obj.opIntSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opLongSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<long[]> iceP_p1;
        iceP_p1 = istr.readLongSeq(2);
        istr.endEncapsulation();
        Initial.OpLongSeqResult ret = obj.opLongSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFloatSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<float[]> iceP_p1;
        iceP_p1 = istr.readFloatSeq(2);
        istr.endEncapsulation();
        Initial.OpFloatSeqResult ret = obj.opFloatSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opDoubleSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<double[]> iceP_p1;
        iceP_p1 = istr.readDoubleSeq(2);
        istr.endEncapsulation();
        Initial.OpDoubleSeqResult ret = obj.opDoubleSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<String[]> iceP_p1;
        iceP_p1 = istr.readStringSeq(2);
        istr.endEncapsulation();
        Initial.OpStringSeqResult ret = obj.opStringSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSmallStructSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<SmallStruct[]> iceP_p1;
        iceP_p1 = SmallStructSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpSmallStructSeqResult ret = obj.opSmallStructSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSmallStructList(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<SmallStruct[]> iceP_p1;
        iceP_p1 = SmallStructListHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpSmallStructListResult ret = obj.opSmallStructList(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFixedStructSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<FixedStruct[]> iceP_p1;
        iceP_p1 = FixedStructSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpFixedStructSeqResult ret = obj.opFixedStructSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opFixedStructList(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<FixedStruct[]> iceP_p1;
        iceP_p1 = FixedStructListHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpFixedStructListResult ret = obj.opFixedStructList(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVarStructSeq(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<VarStruct[]> iceP_p1;
        iceP_p1 = VarStructSeqHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpVarStructSeqResult ret = obj.opVarStructSeq(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opSerializable(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<byte[]> iceP_p1;
        iceP_p1 = istr.readByteSeq(2);
        istr.endEncapsulation();
        Initial.OpSerializableResult ret = obj.opSerializable(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opIntIntDict(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.Map<java.lang.Integer, java.lang.Integer>> iceP_p1;
        iceP_p1 = IntIntDictHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpIntIntDictResult ret = obj.opIntIntDict(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opStringIntDict(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1;
        iceP_p1 = StringIntDictHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpStringIntDictResult ret = obj.opStringIntDict(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opCustomIntStringDict(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.Map<java.lang.Integer, java.lang.String>> iceP_p1;
        iceP_p1 = IntStringDictHelper.read(istr, 2);
        istr.endEncapsulation();
        Initial.OpCustomIntStringDictResult ret = obj.opCustomIntStringDict(iceP_p1, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ret.write(ostr);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opClassAndUnknownOptional(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<A> icePP_p = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_p.value = v, A.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        A iceP_p = icePP_p.value;
        obj.opClassAndUnknownOptional(iceP_p, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opG(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        final com.zeroc.Ice.Holder<G> icePP_g = new com.zeroc.Ice.Holder<>();
        istr.readValue(v -> icePP_g.value = v, G.class);
        istr.readPendingValues();
        istr.endEncapsulation();
        G iceP_g = icePP_g.value;
        G ret = obj.opG(iceP_g, request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeValue(ret);
        ostr.writePendingValues();
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opVoid(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        obj.opVoid(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(request.current.createEmptyOutgoingResponse());
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMStruct1(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.opMStruct1(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMStruct2(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<SmallStruct> iceP_p1;
        iceP_p1 = SmallStruct.ice_read(istr, 2);
        istr.endEncapsulation();
        var result = obj.opMStruct2(iceP_p1, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMSeq1(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.opMSeq1(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMSeq2(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<String[]> iceP_p1;
        iceP_p1 = istr.readStringSeq(2);
        istr.endEncapsulation();
        var result = obj.opMSeq2(iceP_p1, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMDict1(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        var result = obj.opMDict1(request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_opMDict2(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        com.zeroc.Ice.InputStream istr = request.inputStream;
        istr.startEncapsulation();
        java.util.Optional<java.util.Map<java.lang.String, java.lang.Integer>> iceP_p1;
        iceP_p1 = StringIntDictHelper.read(istr, 2);
        istr.endEncapsulation();
        var result = obj.opMDict2(iceP_p1, request.current);
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(result.getOutputStream()));
    }

    /** @hidden */
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> _iceD_supportsJavaSerializable(Initial obj, com.zeroc.Ice.IncomingRequest request)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, request.current.mode);
        request.inputStream.skipEmptyEncapsulation();
        boolean ret = obj.supportsJavaSerializable(request.current);
        var ostr = request.current.startReplyStream();
        ostr.startEncapsulation(request.current.encoding, null);
        ostr.writeBool(ret);
        ostr.endEncapsulation();
        return java.util.concurrent.CompletableFuture.completedFuture(new com.zeroc.Ice.OutgoingResponse(ostr));
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutgoingResponse> dispatch(com.zeroc.Ice.IncomingRequest request)
        throws com.zeroc.Ice.UserException
    {
        return switch (request.current.operation)
        {
            case "shutdown" -> Initial._iceD_shutdown(this, request);
            case "pingPong" -> Initial._iceD_pingPong(this, request);
            case "opOptionalException" -> Initial._iceD_opOptionalException(this, request);
            case "opDerivedException" -> Initial._iceD_opDerivedException(this, request);
            case "opRequiredException" -> Initial._iceD_opRequiredException(this, request);
            case "opByte" -> Initial._iceD_opByte(this, request);
            case "opBool" -> Initial._iceD_opBool(this, request);
            case "opShort" -> Initial._iceD_opShort(this, request);
            case "opInt" -> Initial._iceD_opInt(this, request);
            case "opLong" -> Initial._iceD_opLong(this, request);
            case "opFloat" -> Initial._iceD_opFloat(this, request);
            case "opDouble" -> Initial._iceD_opDouble(this, request);
            case "opString" -> Initial._iceD_opString(this, request);
            case "opCustomString" -> Initial._iceD_opCustomString(this, request);
            case "opMyEnum" -> Initial._iceD_opMyEnum(this, request);
            case "opSmallStruct" -> Initial._iceD_opSmallStruct(this, request);
            case "opFixedStruct" -> Initial._iceD_opFixedStruct(this, request);
            case "opVarStruct" -> Initial._iceD_opVarStruct(this, request);
            case "opMyInterfaceProxy" -> Initial._iceD_opMyInterfaceProxy(this, request);
            case "opOneOptional" -> Initial._iceD_opOneOptional(this, request);
            case "opByteSeq" -> Initial._iceD_opByteSeq(this, request);
            case "opBoolSeq" -> Initial._iceD_opBoolSeq(this, request);
            case "opShortSeq" -> Initial._iceD_opShortSeq(this, request);
            case "opIntSeq" -> Initial._iceD_opIntSeq(this, request);
            case "opLongSeq" -> Initial._iceD_opLongSeq(this, request);
            case "opFloatSeq" -> Initial._iceD_opFloatSeq(this, request);
            case "opDoubleSeq" -> Initial._iceD_opDoubleSeq(this, request);
            case "opStringSeq" -> Initial._iceD_opStringSeq(this, request);
            case "opSmallStructSeq" -> Initial._iceD_opSmallStructSeq(this, request);
            case "opSmallStructList" -> Initial._iceD_opSmallStructList(this, request);
            case "opFixedStructSeq" -> Initial._iceD_opFixedStructSeq(this, request);
            case "opFixedStructList" -> Initial._iceD_opFixedStructList(this, request);
            case "opVarStructSeq" -> Initial._iceD_opVarStructSeq(this, request);
            case "opSerializable" -> Initial._iceD_opSerializable(this, request);
            case "opIntIntDict" -> Initial._iceD_opIntIntDict(this, request);
            case "opStringIntDict" -> Initial._iceD_opStringIntDict(this, request);
            case "opCustomIntStringDict" -> Initial._iceD_opCustomIntStringDict(this, request);
            case "opClassAndUnknownOptional" -> Initial._iceD_opClassAndUnknownOptional(this, request);
            case "opG" -> Initial._iceD_opG(this, request);
            case "opVoid" -> Initial._iceD_opVoid(this, request);
            case "opMStruct1" -> Initial._iceD_opMStruct1(this, request);
            case "opMStruct2" -> Initial._iceD_opMStruct2(this, request);
            case "opMSeq1" -> Initial._iceD_opMSeq1(this, request);
            case "opMSeq2" -> Initial._iceD_opMSeq2(this, request);
            case "opMDict1" -> Initial._iceD_opMDict1(this, request);
            case "opMDict2" -> Initial._iceD_opMDict2(this, request);
            case "supportsJavaSerializable" -> Initial._iceD_supportsJavaSerializable(this, request);
            case "ice_id" -> com.zeroc.Ice.Object._iceD_ice_id(this, request);
            case "ice_ids" -> com.zeroc.Ice.Object._iceD_ice_ids(this, request);
            case "ice_isA" -> com.zeroc.Ice.Object._iceD_ice_isA(this, request);
            case "ice_ping" -> com.zeroc.Ice.Object._iceD_ice_ping(this, request);
            default -> throw new com.zeroc.Ice.OperationNotExistException();
        };
    }
}
