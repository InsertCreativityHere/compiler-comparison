//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::Backend")]
    public partial interface Backend : Ice.Object
    {
        void check(Ice.Current current);

        void shutdown(Ice.Current current);
    }

    public enum StateCode
    {
        Initial,
        Running,
        Finished
    }

    public sealed class StateCodeHelper
    {
        public static void write(Ice.OutputStream ostr, StateCode v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static StateCode read(Ice.InputStream istr)
        {
            StateCode v;
            v = (StateCode)istr.readEnum(2);
            return v;
        }
    }

    public sealed partial record class TestToken
    {
        public bool expectedResult;

        public string description = "";

        public StateCode code;

        public short config;

        public short caseIndex;

        public string testReference = "";

        partial void ice_initialize();

        public TestToken()
        {
            ice_initialize();
        }

        public TestToken(bool expectedResult, string description, StateCode code, short config, short caseIndex, string testReference)
        {
            this.expectedResult = expectedResult;
            global::System.ArgumentNullException.ThrowIfNull(description);
            this.description = description;
            this.code = code;
            this.config = config;
            this.caseIndex = caseIndex;
            global::System.ArgumentNullException.ThrowIfNull(testReference);
            this.testReference = testReference;
            ice_initialize();
        }

        public TestToken(Ice.InputStream istr)
        {
            this.expectedResult = istr.readBool();
            this.description = istr.readString();
            this.code = (StateCode)istr.readEnum(2);
            this.config = istr.readShort();
            this.caseIndex = istr.readShort();
            this.testReference = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeBool(this.expectedResult);
            ostr.writeString(this.description);
            ostr.writeEnum((int)this.code, 2);
            ostr.writeShort(this.config);
            ostr.writeShort(this.caseIndex);
            ostr.writeString(this.testReference);
        }

        public static void ice_write(Ice.OutputStream ostr, TestToken v)
        {
            v.ice_writeMembers(ostr);
        }

        public static TestToken ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::TestController")]
    public partial interface TestController : Ice.Object
    {
        void step(global::Glacier2.SessionPrx? currentSession, TestToken currentState, out TestToken newState, Ice.Current current);

        void shutdown(Ice.Current current);
    }

    [Ice.SliceTypeId("::Test::TestSession")]
    public partial interface TestSession : global::Glacier2.Session
    {
        void shutdown(Ice.Current current);
    }
}

namespace Test
{
    public interface BackendPrx : Ice.ObjectPrx
    {
        void check(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task checkAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The test controller interface permits coordination between the test
    /// server and the test client.
    /// Prior to each call the client makes on
    /// various backend references, it calls step on the controller. The
    /// controller will manage the configuration of the system and return a
    /// flag indicating whether the next call is meant to succeed or not.
    /// </summary>

    public interface TestControllerPrx : Ice.ObjectPrx
    {
        void step(global::Glacier2.SessionPrx? currentSession, TestToken currentState, out TestToken newState, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestToken> stepAsync(global::Glacier2.SessionPrx? currentSession, TestToken currentState, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    public interface TestSessionPrx : global::Glacier2.SessionPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class BackendPrxHelper : Ice.ObjectPrxHelperBase, BackendPrx
    {
        public void check(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_checkAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task checkAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_checkAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_checkAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_check(context, synchronous, completed);
            return completed.Task;
        }

        private const string _check_name = "check";

        private void _iceI_check(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _check_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static BackendPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new BackendPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static BackendPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new BackendPrxHelper(b) : null;

        public static BackendPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static BackendPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new BackendPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static BackendPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Backend"
        };

        public static string ice_staticId() => "::Test::Backend";

        public static void write(Ice.OutputStream ostr, BackendPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static BackendPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new BackendPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new BackendPrxHelper(reference);

        private BackendPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private BackendPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class TestControllerPrxHelper : Ice.ObjectPrxHelperBase, TestControllerPrx
    {
        public void step(global::Glacier2.SessionPrx? currentSession, TestToken currentState, out TestToken newState, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                newState = _iceI_stepAsync(currentSession, currentState, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TestToken> stepAsync(global::Glacier2.SessionPrx? currentSession, TestToken currentState, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_stepAsync(currentSession, currentState, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestToken> _iceI_stepAsync(global::Glacier2.SessionPrx? iceP_currentSession, TestToken iceP_currentState, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_step_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestToken>(progress, cancel);
            _iceI_step(iceP_currentSession, iceP_currentState, context, synchronous, completed);
            return completed.Task;
        }

        private const string _step_name = "step";

        private void _iceI_step(global::Glacier2.SessionPrx? iceP_currentSession, TestToken iceP_currentState, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestToken>(completed);
            outAsync.invoke(
                _step_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Glacier2.SessionPrxHelper.write(ostr, iceP_currentSession);
                    TestToken.ice_write(ostr, iceP_currentState);
                },
                read: (Ice.InputStream istr) =>
                {
                    TestToken iceP_newState;
                    iceP_newState = new TestToken(istr);
                    return iceP_newState;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static TestControllerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestControllerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestControllerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestControllerPrxHelper(b) : null;

        public static TestControllerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestControllerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestControllerPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestControllerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestController"
        };

        public static string ice_staticId() => "::Test::TestController";

        public static void write(Ice.OutputStream ostr, TestControllerPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestControllerPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestControllerPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestControllerPrxHelper(reference);

        private TestControllerPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestControllerPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class TestSessionPrxHelper : Ice.ObjectPrxHelperBase, TestSessionPrx
    {
        public void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static TestSessionPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestSessionPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestSessionPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestSessionPrxHelper(b) : null;

        public static TestSessionPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestSessionPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestSessionPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestSessionPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object",
            "::Test::TestSession"
        };

        public static string ice_staticId() => "::Test::TestSession";

        public static void write(Ice.OutputStream ostr, TestSessionPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestSessionPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestSessionPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestSessionPrxHelper(reference);

        private TestSessionPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestSessionPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    public abstract class BackendDisp_ : Ice.ObjectImpl, Backend
    {
        public abstract void check(Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::Backend";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "check" => Backend.iceD_checkAsync(this, request),
                "shutdown" => Backend.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class TestControllerDisp_ : Ice.ObjectImpl, TestController
    {
        public abstract void step(global::Glacier2.SessionPrx? currentSession, TestToken currentState, out TestToken newState, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestController";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "step" => TestController.iceD_stepAsync(this, request),
                "shutdown" => TestController.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class TestSessionDisp_ : Ice.ObjectImpl, TestSession
    {
        public abstract void shutdown(Ice.Current current);

        public abstract void destroy(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestSession";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "destroy" => global::Glacier2.Session.iceD_destroyAsync(this, request),
                "shutdown" => TestSession.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface Backend
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_checkAsync(
            Backend obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.check(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            Backend obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface TestController
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_stepAsync(
            TestController obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Glacier2.SessionPrx? iceP_currentSession;
            TestToken iceP_currentState;
            iceP_currentSession = global::Glacier2.SessionPrxHelper.read(istr);
            iceP_currentState = new TestToken(istr);
            istr.endEncapsulation();
            TestToken iceP_newState;
            obj.step(iceP_currentSession, iceP_currentState, out iceP_newState, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            TestToken.ice_write(ostr, iceP_newState);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestController obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface TestSession
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestSession obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
