//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CallbackException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public double someValue;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string someString;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.someString = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CallbackException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CallbackException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CallbackException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.someValue = info.GetDouble("someValue");
            this.someString = info.GetString("someString");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(double someValue, string someString)
        {
            this.someValue = someValue;
            this.someString = someString;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CallbackException(double someValue, string someString)
        {
            _initDM(someValue, someString);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CallbackException(double someValue, string someString, global::System.Exception ex) : base(ex)
        {
            _initDM(someValue, someString);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Test::CallbackException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::CallbackException");
            global::IceInternal.HashUtil.hashAdd(ref h_, someValue);
            global::IceInternal.HashUtil.hashAdd(ref h_, someString);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            CallbackException o = other as CallbackException;
            if(o == null)
            {
                return false;
            }
            if(!this.someValue.Equals(o.someValue))
            {
                return false;
            }
            if(this.someString == null)
            {
                if(o.someString != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.someString.Equals(o.someString))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("someValue", this.someValue);
            info.AddValue("someString", this.someString == null ? "" : this.someString);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(CallbackException lhs, CallbackException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(CallbackException lhs, CallbackException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::CallbackException", -1, true);
            ostr_.writeDouble(someValue);
            ostr_.writeString(someString);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            someValue = istr_.readDouble();
            someString = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CallbackReceiver : global::Ice.Object, CallbackReceiverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Callback : global::Ice.Object, CallbackOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_CallbackReceiver_callback();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_CallbackReceiver_callbackEx();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_CallbackReceiver_concurrentCallback(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_CallbackReceiver_waitCallback();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_CallbackReceiver_callbackWithPayload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_initiateCallback();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_initiateCallbackEx();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_initiateConcurrentCallback(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_initiateWaitCallback();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_initiateCallbackWithPayload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Callback_shutdown();
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CallbackReceiverPrx : global::Ice.ObjectPrx
    {
        void callback(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task callbackAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CallbackReceiver_callback> begin_callback(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_callback(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_callback(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_callback(global::Ice.AsyncResult asyncResult);

        void callbackEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task callbackExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CallbackReceiver_callbackEx> begin_callbackEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_callbackEx(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_callbackEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_callbackEx(global::Ice.AsyncResult asyncResult);

        int concurrentCallback(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> concurrentCallbackAsync(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CallbackReceiver_concurrentCallback> begin_concurrentCallback(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_concurrentCallback(int number, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_concurrentCallback(int number, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_concurrentCallback(global::Ice.AsyncResult asyncResult);

        void waitCallback(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task waitCallbackAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CallbackReceiver_waitCallback> begin_waitCallback(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_waitCallback(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_waitCallback(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_waitCallback(global::Ice.AsyncResult asyncResult);

        void callbackWithPayload(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task callbackWithPayloadAsync(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CallbackReceiver_callbackWithPayload> begin_callbackWithPayload(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_callbackWithPayload(byte[] payload, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_callbackWithPayload(byte[] payload, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_callbackWithPayload(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CallbackPrx : global::Ice.ObjectPrx
    {
        void initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initiateCallbackAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_initiateCallback> begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initiateCallback(global::Ice.AsyncResult asyncResult);

        void initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initiateCallbackExAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_initiateCallbackEx> begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initiateCallbackEx(global::Ice.AsyncResult asyncResult);

        int initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> initiateConcurrentCallbackAsync(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_initiateConcurrentCallback> begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_initiateConcurrentCallback(global::Ice.AsyncResult asyncResult);

        void initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initiateWaitCallbackAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_initiateWaitCallback> begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initiateWaitCallback(global::Ice.AsyncResult asyncResult);

        void initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initiateCallbackWithPayloadAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_initiateCallbackWithPayload> begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initiateCallbackWithPayload(global::Ice.AsyncResult asyncResult);

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Callback_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CallbackReceiverOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void callback(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void callbackEx(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task<int> concurrentCallbackAsync(int number, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void waitCallback(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void callbackWithPayload(byte[] payload, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface CallbackOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task initiateCallbackAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task initiateCallbackExAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task<int> initiateConcurrentCallbackAsync(int number, CallbackReceiverPrx proxy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task initiateWaitCallbackAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task initiateCallbackWithPayloadAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class CallbackReceiverPrxHelper : global::Ice.ObjectPrxHelperBase, CallbackReceiverPrx
    {
        public CallbackReceiverPrxHelper()
        {
        }

        public CallbackReceiverPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void callback(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_callbackAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void callbackEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_callbackExAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int concurrentCallback(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_concurrentCallbackAsync(number, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void waitCallback(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_waitCallbackAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void callbackWithPayload(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_callbackWithPayloadAsync(payload, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task callbackAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_callbackAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_callbackAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_callback(context, synchronous, completed);
            return completed.Task;
        }

        private const string _callback_name = "callback";

        private void _iceI_callback(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _callback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task callbackExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_callbackExAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_callbackExAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_callbackEx_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_callbackEx(context, synchronous, completed);
            return completed.Task;
        }

        private const string _callbackEx_name = "callbackEx";

        private void _iceI_callbackEx(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _callbackEx_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(CallbackException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<int> concurrentCallbackAsync(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_concurrentCallbackAsync(number, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_concurrentCallbackAsync(int iceP_number, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_concurrentCallback_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_concurrentCallback(iceP_number, context, synchronous, completed);
            return completed.Task;
        }

        private const string _concurrentCallback_name = "concurrentCallback";

        private void _iceI_concurrentCallback(int iceP_number, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _concurrentCallback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_number);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task waitCallbackAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_waitCallbackAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_waitCallbackAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_waitCallback(context, synchronous, completed);
            return completed.Task;
        }

        private const string _waitCallback_name = "waitCallback";

        private void _iceI_waitCallback(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _waitCallback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task callbackWithPayloadAsync(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_callbackWithPayloadAsync(payload, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_callbackWithPayloadAsync(byte[] iceP_payload, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_callbackWithPayload(iceP_payload, context, synchronous, completed);
            return completed.Task;
        }

        private const string _callbackWithPayload_name = "callbackWithPayload";

        private void _iceI_callbackWithPayload(byte[] iceP_payload, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _callbackWithPayload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.ByteSeqHelper.write(ostr, iceP_payload);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_CallbackReceiver_callback> begin_callback(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_callback(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_callback(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_callback(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(context, callback, cookie, false);
        }

        public void end_callback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _callback_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CallbackReceiver_callback> begin_callback(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CallbackReceiver_callback, object>(
                (Callback_CallbackReceiver_callback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _callback_name, cookie, completedCallback);
            _iceI_callback(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CallbackReceiver_callbackEx> begin_callbackEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_callbackEx(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_callbackEx(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callbackEx(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_callbackEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callbackEx(context, callback, cookie, false);
        }

        public void end_callbackEx(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _callbackEx_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CallbackReceiver_callbackEx> begin_callbackEx(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_callbackEx_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CallbackReceiver_callbackEx, object>(
                (Callback_CallbackReceiver_callbackEx cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _callbackEx_name, cookie, completedCallback);
            _iceI_callbackEx(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CallbackReceiver_concurrentCallback> begin_concurrentCallback(int number, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_concurrentCallback(number, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_concurrentCallback(int number, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_concurrentCallback(number, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_concurrentCallback(int number, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_concurrentCallback(number, context, callback, cookie, false);
        }

        public int end_concurrentCallback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _concurrentCallback_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CallbackReceiver_concurrentCallback> begin_concurrentCallback(int iceP_number, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_concurrentCallback_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CallbackReceiver_concurrentCallback, int>(
                (Callback_CallbackReceiver_concurrentCallback cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _concurrentCallback_name, cookie, completedCallback);
            _iceI_concurrentCallback(iceP_number, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CallbackReceiver_waitCallback> begin_waitCallback(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_waitCallback(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_waitCallback(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_waitCallback(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_waitCallback(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_waitCallback(context, callback, cookie, false);
        }

        public void end_waitCallback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _waitCallback_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CallbackReceiver_waitCallback> begin_waitCallback(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CallbackReceiver_waitCallback, object>(
                (Callback_CallbackReceiver_waitCallback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _waitCallback_name, cookie, completedCallback);
            _iceI_waitCallback(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CallbackReceiver_callbackWithPayload> begin_callbackWithPayload(byte[] payload, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_callbackWithPayload(payload, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_callbackWithPayload(byte[] payload, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callbackWithPayload(payload, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_callbackWithPayload(byte[] payload, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_callbackWithPayload(payload, context, callback, cookie, false);
        }

        public void end_callbackWithPayload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _callbackWithPayload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CallbackReceiver_callbackWithPayload> begin_callbackWithPayload(byte[] iceP_payload, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CallbackReceiver_callbackWithPayload, object>(
                (Callback_CallbackReceiver_callbackWithPayload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _callbackWithPayload_name, cookie, completedCallback);
            _iceI_callbackWithPayload(iceP_payload, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if(r == null)
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::CallbackReceiver"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CallbackReceiverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CallbackReceiverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CallbackReceiverPrxHelper result = new CallbackReceiverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class CallbackPrxHelper : global::Ice.ObjectPrxHelperBase, CallbackPrx
    {
        public CallbackPrxHelper()
        {
        }

        public CallbackPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initiateCallbackAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initiateCallbackExAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_initiateConcurrentCallbackAsync(number, proxy, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initiateWaitCallbackAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initiateCallbackWithPayloadAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task initiateCallbackAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initiateCallbackAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initiateCallbackAsync(CallbackReceiverPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initiateCallback(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateCallback_name = "initiateCallback";

        private void _iceI_initiateCallback(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initiateCallback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                });
        }

        public global::System.Threading.Tasks.Task initiateCallbackExAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initiateCallbackExAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initiateCallbackExAsync(CallbackReceiverPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_initiateCallbackEx_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initiateCallbackEx(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateCallbackEx_name = "initiateCallbackEx";

        private void _iceI_initiateCallbackEx(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initiateCallbackEx_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(CallbackException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<int> initiateConcurrentCallbackAsync(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initiateConcurrentCallbackAsync(number, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_initiateConcurrentCallbackAsync(int iceP_number, CallbackReceiverPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_initiateConcurrentCallback_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_initiateConcurrentCallback(iceP_number, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateConcurrentCallback_name = "initiateConcurrentCallback";

        private void _iceI_initiateConcurrentCallback(int iceP_number, CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _initiateConcurrentCallback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_number);
                    CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task initiateWaitCallbackAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initiateWaitCallbackAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initiateWaitCallbackAsync(CallbackReceiverPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initiateWaitCallback(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateWaitCallback_name = "initiateWaitCallback";

        private void _iceI_initiateWaitCallback(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initiateWaitCallback_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                });
        }

        public global::System.Threading.Tasks.Task initiateCallbackWithPayloadAsync(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initiateCallbackWithPayloadAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initiateCallbackWithPayloadAsync(CallbackReceiverPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initiateCallbackWithPayload(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateCallbackWithPayload_name = "initiateCallbackWithPayload";

        private void _iceI_initiateCallbackWithPayload(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initiateCallbackWithPayload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Callback_initiateCallback> begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initiateCallback(proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallback(proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initiateCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallback(proxy, context, callback, cookie, false);
        }

        public void end_initiateCallback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initiateCallback_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_initiateCallback> begin_initiateCallback(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_initiateCallback, object>(
                (Callback_Callback_initiateCallback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initiateCallback_name, cookie, completedCallback);
            _iceI_initiateCallback(iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Callback_initiateCallbackEx> begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initiateCallbackEx(proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallbackEx(proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initiateCallbackEx(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallbackEx(proxy, context, callback, cookie, false);
        }

        public void end_initiateCallbackEx(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initiateCallbackEx_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_initiateCallbackEx> begin_initiateCallbackEx(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_initiateCallbackEx_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_initiateCallbackEx, object>(
                (Callback_Callback_initiateCallbackEx cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initiateCallbackEx_name, cookie, completedCallback);
            _iceI_initiateCallbackEx(iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Callback_initiateConcurrentCallback> begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initiateConcurrentCallback(number, proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateConcurrentCallback(number, proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initiateConcurrentCallback(int number, CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateConcurrentCallback(number, proxy, context, callback, cookie, false);
        }

        public int end_initiateConcurrentCallback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initiateConcurrentCallback_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_initiateConcurrentCallback> begin_initiateConcurrentCallback(int iceP_number, CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_initiateConcurrentCallback_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_initiateConcurrentCallback, int>(
                (Callback_Callback_initiateConcurrentCallback cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _initiateConcurrentCallback_name, cookie, completedCallback);
            _iceI_initiateConcurrentCallback(iceP_number, iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Callback_initiateWaitCallback> begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initiateWaitCallback(proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateWaitCallback(proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initiateWaitCallback(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateWaitCallback(proxy, context, callback, cookie, false);
        }

        public void end_initiateWaitCallback(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initiateWaitCallback_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_initiateWaitCallback> begin_initiateWaitCallback(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_initiateWaitCallback, object>(
                (Callback_Callback_initiateWaitCallback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initiateWaitCallback_name, cookie, completedCallback);
            _iceI_initiateWaitCallback(iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Callback_initiateCallbackWithPayload> begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initiateCallbackWithPayload(proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallbackWithPayload(proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initiateCallbackWithPayload(CallbackReceiverPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallbackWithPayload(proxy, context, callback, cookie, false);
        }

        public void end_initiateCallbackWithPayload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initiateCallbackWithPayload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_initiateCallbackWithPayload> begin_initiateCallbackWithPayload(CallbackReceiverPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_initiateCallbackWithPayload, object>(
                (Callback_Callback_initiateCallbackWithPayload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initiateCallbackWithPayload_name, cookie, completedCallback);
            _iceI_initiateCallbackWithPayload(iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Callback_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Callback_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Callback_shutdown, object>(
                (Callback_Callback_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CallbackPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackPrx r = b as CallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CallbackPrxHelper h = new CallbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CallbackPrx r = b as CallbackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CallbackPrxHelper h = new CallbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CallbackPrxHelper h = new CallbackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CallbackPrxHelper h = new CallbackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackPrx r = b as CallbackPrx;
            if(r == null)
            {
                CallbackPrxHelper h = new CallbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CallbackPrxHelper h = new CallbackPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Callback"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CallbackPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CallbackPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CallbackPrxHelper result = new CallbackPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class CallbackReceiverDisp_ : global::Ice.ObjectImpl, CallbackReceiver
    {
        #region Slice operations

        public abstract void callback(global::Ice.Current current = null);

        public abstract void callbackEx(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<int> concurrentCallbackAsync(int number, global::Ice.Current current = null);

        public abstract void waitCallback(global::Ice.Current current = null);

        public abstract void callbackWithPayload(byte[] payload, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::CallbackReceiver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_callback(CallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.callback(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_callbackEx(CallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.callbackEx(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_concurrentCallback(CallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_number;
            iceP_number = istr.readInt();
            inS.endReadParams();
            return inS.setResultTask<int>(obj.concurrentCallbackAsync(iceP_number, current),
                (ostr, ret) =>
                {
                    ostr.writeInt(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_waitCallback(CallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.waitCallback(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_callbackWithPayload(CallbackReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_payload;
            iceP_payload = global::Ice.ByteSeqHelper.read(istr);
            inS.endReadParams();
            obj.callbackWithPayload(iceP_payload, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "callback",
            "callbackEx",
            "callbackWithPayload",
            "concurrentCallback",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "waitCallback"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_callback(this, inS, current);
                }
                case 1:
                {
                    return iceD_callbackEx(this, inS, current);
                }
                case 2:
                {
                    return iceD_callbackWithPayload(this, inS, current);
                }
                case 3:
                {
                    return iceD_concurrentCallback(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_waitCallback(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class CallbackDisp_ : global::Ice.ObjectImpl, Callback
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task initiateCallbackAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task initiateCallbackExAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<int> initiateConcurrentCallbackAsync(int number, CallbackReceiverPrx proxy, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task initiateWaitCallbackAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task initiateCallbackWithPayloadAsync(CallbackReceiverPrx proxy, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Callback"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initiateCallback(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            CallbackReceiverPrx iceP_proxy;
            iceP_proxy = CallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.initiateCallbackAsync(iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initiateCallbackEx(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            CallbackReceiverPrx iceP_proxy;
            iceP_proxy = CallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.initiateCallbackExAsync(iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initiateConcurrentCallback(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_number;
            CallbackReceiverPrx iceP_proxy;
            iceP_number = istr.readInt();
            iceP_proxy = CallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<int>(obj.initiateConcurrentCallbackAsync(iceP_number, iceP_proxy, current),
                (ostr, ret) =>
                {
                    ostr.writeInt(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initiateWaitCallback(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            CallbackReceiverPrx iceP_proxy;
            iceP_proxy = CallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.initiateWaitCallbackAsync(iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initiateCallbackWithPayload(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            CallbackReceiverPrx iceP_proxy;
            iceP_proxy = CallbackReceiverPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.initiateCallbackWithPayloadAsync(iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Callback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "initiateCallback",
            "initiateCallbackEx",
            "initiateCallbackWithPayload",
            "initiateConcurrentCallback",
            "initiateWaitCallback",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_initiateCallback(this, inS, current);
                }
                case 5:
                {
                    return iceD_initiateCallbackEx(this, inS, current);
                }
                case 6:
                {
                    return iceD_initiateCallbackWithPayload(this, inS, current);
                }
                case 7:
                {
                    return iceD_initiateConcurrentCallback(this, inS, current);
                }
                case 8:
                {
                    return iceD_initiateWaitCallback(this, inS, current);
                }
                case 9:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
