//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("TestAMD.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MyClass")]
    public partial interface MyClass : global::Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MyDerivedClass")]
    public partial interface MyDerivedClass : global::Ice.Object, MyClass
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> echoAsync(global::Ice.ObjectPrx? obj, global::Ice.Current current);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyClassPrx : global::Ice.ObjectPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string> getContext(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyDerivedClassPrx : MyClassPrx
    {
        global::Ice.ObjectPrx? echo(global::Ice.ObjectPrx? obj, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> echoAsync(global::Ice.ObjectPrx? obj, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyClassPrx
    {
        public MyClassPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> getContext(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getContext_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_getContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getContext_name = "getContext";

        private void _iceI_getContext(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _getContext_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Ice.ContextHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static MyClassPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyClassPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                MyClassPrxHelper prx = new MyClassPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static MyClassPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    MyClassPrxHelper prx = new MyClassPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyClassPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new MyClassPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyClassPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new MyClassPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyClass"
        };

        public static string ice_staticId() => "::Test::MyClass";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, MyClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyClassPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new MyClassPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyDerivedClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyDerivedClassPrx
    {
        public MyDerivedClassPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> getContext(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? echo(global::Ice.ObjectPrx? obj, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_echoAsync(obj, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getContext_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_getContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getContext_name = "getContext";

        private void _iceI_getContext(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _getContext_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Ice.ContextHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> echoAsync(global::Ice.ObjectPrx? obj, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_echoAsync(obj, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_echoAsync(global::Ice.ObjectPrx? iceP_obj, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_echo_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_echo(iceP_obj, context, synchronous, completed);
            return completed.Task;
        }

        private const string _echo_name = "echo";

        private void _iceI_echo(global::Ice.ObjectPrx? iceP_obj, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _echo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_obj);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static MyDerivedClassPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyDerivedClassPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                MyDerivedClassPrxHelper prx = new MyDerivedClassPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static MyDerivedClassPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    MyDerivedClassPrxHelper prx = new MyDerivedClassPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new MyDerivedClassPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new MyDerivedClassPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyClass",
            "::Test::MyDerivedClass"
        };

        public static string ice_staticId() => "::Test::MyDerivedClass";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, MyDerivedClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyDerivedClassPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new MyDerivedClassPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyClassDisp_ : global::Ice.ObjectImpl, MyClass
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        public override string ice_id(global::Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::MyClass";

        #endregion

        #region Operation dispatch

        public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                "getContext" => MyClass.iceD_getContextAsync(this, request),
                "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new global::Ice.OperationNotExistException()
            };

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyDerivedClassDisp_ : global::Ice.ObjectImpl, MyDerivedClass
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> echoAsync(global::Ice.ObjectPrx? obj, global::Ice.Current current);

        #endregion

        #region Inherited Slice operations

        public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getContextAsync(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        public override string ice_id(global::Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::MyDerivedClass";

        #endregion

        #region Operation dispatch

        public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                "getContext" => MyClass.iceD_getContextAsync(this, request),
                "echo" => MyDerivedClass.iceD_echoAsync(this, request),
                "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new global::Ice.OperationNotExistException()
            };

        #endregion
    }
}

namespace Test
{
    public partial interface MyClass
    {
        protected static async global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
            MyClass obj,
            global::Ice.IncomingRequest request)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            await obj.shutdownAsync(request.current).ConfigureAwait(false);
            return global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
        }

        protected static async global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getContextAsync(
            MyClass obj,
            global::Ice.IncomingRequest request)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = await obj.getContextAsync(request.current).ConfigureAwait(false);
            return global::Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    global::Ice.ContextHelper.write(ostr, ret);
                });
        }
    }

    public partial interface MyDerivedClass
    {
        protected static async global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_echoAsync(
            MyDerivedClass obj,
            global::Ice.IncomingRequest request)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.ObjectPrx? iceP_obj;
            iceP_obj = istr.readProxy();
            istr.endEncapsulation();
            var result = await obj.echoAsync(iceP_obj, request.current).ConfigureAwait(false);
            return global::Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }
    }
}
