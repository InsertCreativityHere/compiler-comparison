//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Wstring.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Wstring.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test1
{
    public sealed partial record class WstringStruct
    {
        public string s = "";

        partial void ice_initialize();

        public WstringStruct()
        {
            ice_initialize();
        }

        public WstringStruct(string s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        public WstringStruct(Ice.InputStream istr)
        {
            this.s = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
        }

        public static void ice_write(Ice.OutputStream ostr, WstringStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        public static WstringStruct ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test1::WstringException")]
    public partial class WstringException : Ice.UserException
    {
        public string reason = "";

        public WstringException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public WstringException()
        {
        }

        public override string ice_id() => "::Test1::WstringException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test1::WstringException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test1::WstringClass")]
    public partial interface WstringClass : Ice.Object
    {
        string opString(string s1, out string s2, Ice.Current current);

        WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, Ice.Current current);

        void throwExcept(string reason, Ice.Current current);
    }
}

namespace Test2
{
    public sealed partial record class WstringStruct
    {
        public string s = "";

        partial void ice_initialize();

        public WstringStruct()
        {
            ice_initialize();
        }

        public WstringStruct(string s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        public WstringStruct(Ice.InputStream istr)
        {
            this.s = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
        }

        public static void ice_write(Ice.OutputStream ostr, WstringStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        public static WstringStruct ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test2::WstringException")]
    public partial class WstringException : Ice.UserException
    {
        public string reason = "";

        public WstringException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public WstringException()
        {
        }

        public override string ice_id() => "::Test2::WstringException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test2::WstringException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test2::WstringClass")]
    public partial interface WstringClass : Ice.Object
    {
        string opString(string s1, out string s2, Ice.Current current);

        WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, Ice.Current current);

        void throwExcept(string reason, Ice.Current current);
    }
}

namespace Test1
{
    public record struct WstringClass_OpStringResult(string returnValue, string s2);

    public record struct WstringClass_OpStructResult(WstringStruct returnValue, WstringStruct s2);
}

namespace Test2
{
    public record struct WstringClass_OpStringResult(string returnValue, string s2);

    public record struct WstringClass_OpStructResult(WstringStruct returnValue, WstringStruct s2);
}

namespace Test1
{
    public interface WstringClassPrx : Ice.ObjectPrx
    {
        string opString(string s1, out string s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<WstringClass_OpStringResult> opStringAsync(string s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<WstringClass_OpStructResult> opStructAsync(WstringStruct s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwExcept(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task throwExceptAsync(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test2
{
    public interface WstringClassPrx : Ice.ObjectPrx
    {
        string opString(string s1, out string s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<WstringClass_OpStringResult> opStringAsync(string s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<WstringClass_OpStructResult> opStructAsync(WstringStruct s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwExcept(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task throwExceptAsync(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test1
{
    public sealed class WstringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class WstringWStringDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class WstringClassPrxHelper : Ice.ObjectPrxHelperBase, WstringClassPrx
    {
        public string opString(string s1, out string s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStructAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void throwExcept(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_throwExceptAsync(reason, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<WstringClass_OpStringResult> opStringAsync(string s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<WstringClass_OpStringResult> _iceI_opStringAsync(string iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<WstringClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<WstringClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new WstringClass_OpStringResult();
                    ret.s2 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<WstringClass_OpStructResult> opStructAsync(WstringStruct s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStructAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<WstringClass_OpStructResult> _iceI_opStructAsync(WstringStruct iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<WstringClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(WstringStruct iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<WstringClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    WstringStruct.ice_write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new WstringClass_OpStructResult();
                    ret.s2 = new WstringStruct(istr);
                    ret.returnValue = new WstringStruct(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwExceptAsync(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwExceptAsync(reason, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwExceptAsync(string iceP_reason, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwExcept_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwExcept(iceP_reason, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwExcept_name = "throwExcept";

        private void _iceI_throwExcept(string iceP_reason, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwExcept_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_reason);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(WstringException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public static WstringClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new WstringClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static WstringClassPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new WstringClassPrxHelper(b) : null;

        public static WstringClassPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static WstringClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new WstringClassPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static WstringClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test1::WstringClass"
        };

        public static string ice_staticId() => "::Test1::WstringClass";

        public static void write(Ice.OutputStream ostr, WstringClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static WstringClassPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new WstringClassPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new WstringClassPrxHelper(reference);

        private WstringClassPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private WstringClassPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test2
{
    public sealed class WstringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class WstringWStringDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class WstringClassPrxHelper : Ice.ObjectPrxHelperBase, WstringClassPrx
    {
        public string opString(string s1, out string s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStructAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void throwExcept(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_throwExceptAsync(reason, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<WstringClass_OpStringResult> opStringAsync(string s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<WstringClass_OpStringResult> _iceI_opStringAsync(string iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<WstringClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<WstringClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new WstringClass_OpStringResult();
                    ret.s2 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<WstringClass_OpStructResult> opStructAsync(WstringStruct s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStructAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<WstringClass_OpStructResult> _iceI_opStructAsync(WstringStruct iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<WstringClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(WstringStruct iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<WstringClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    WstringStruct.ice_write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new WstringClass_OpStructResult();
                    ret.s2 = new WstringStruct(istr);
                    ret.returnValue = new WstringStruct(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwExceptAsync(string reason, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwExceptAsync(reason, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwExceptAsync(string iceP_reason, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwExcept_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwExcept(iceP_reason, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwExcept_name = "throwExcept";

        private void _iceI_throwExcept(string iceP_reason, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwExcept_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_reason);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(WstringException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public static WstringClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new WstringClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static WstringClassPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new WstringClassPrxHelper(b) : null;

        public static WstringClassPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static WstringClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new WstringClassPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static WstringClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test2::WstringClass"
        };

        public static string ice_staticId() => "::Test2::WstringClass";

        public static void write(Ice.OutputStream ostr, WstringClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static WstringClassPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new WstringClassPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new WstringClassPrxHelper(reference);

        private WstringClassPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private WstringClassPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test1
{
    public abstract class WstringClassDisp_ : Ice.ObjectImpl, WstringClass
    {
        public abstract string opString(string s1, out string s2, Ice.Current current);

        public abstract WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, Ice.Current current);

        public abstract void throwExcept(string reason, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test1::WstringClass";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opString" => WstringClass.iceD_opStringAsync(this, request),
                "opStruct" => WstringClass.iceD_opStructAsync(this, request),
                "throwExcept" => WstringClass.iceD_throwExceptAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test2
{
    public abstract class WstringClassDisp_ : Ice.ObjectImpl, WstringClass
    {
        public abstract string opString(string s1, out string s2, Ice.Current current);

        public abstract WstringStruct opStruct(WstringStruct s1, out WstringStruct s2, Ice.Current current);

        public abstract void throwExcept(string reason, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test2::WstringClass";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opString" => WstringClass.iceD_opStringAsync(this, request),
                "opStruct" => WstringClass.iceD_opStructAsync(this, request),
                "throwExcept" => WstringClass.iceD_throwExceptAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test1
{
    public partial interface WstringClass
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_s1;
            iceP_s1 = istr.readString();
            istr.endEncapsulation();
            string iceP_s2;
            var ret = obj.opString(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(iceP_s2);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStructAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            WstringStruct iceP_s1;
            iceP_s1 = new WstringStruct(istr);
            istr.endEncapsulation();
            WstringStruct iceP_s2;
            var ret = obj.opStruct(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            WstringStruct.ice_write(ostr, iceP_s2);
            WstringStruct.ice_write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwExceptAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_reason;
            iceP_reason = istr.readString();
            istr.endEncapsulation();
            obj.throwExcept(iceP_reason, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}

namespace Test2
{
    public partial interface WstringClass
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_s1;
            iceP_s1 = istr.readString();
            istr.endEncapsulation();
            string iceP_s2;
            var ret = obj.opString(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(iceP_s2);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStructAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            WstringStruct iceP_s1;
            iceP_s1 = new WstringStruct(istr);
            istr.endEncapsulation();
            WstringStruct iceP_s2;
            var ret = obj.opStruct(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            WstringStruct.ice_write(ostr, iceP_s2);
            WstringStruct.ice_write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwExceptAsync(
            WstringClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_reason;
            iceP_reason = istr.readString();
            istr.endEncapsulation();
            obj.throwExcept(iceP_reason, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
