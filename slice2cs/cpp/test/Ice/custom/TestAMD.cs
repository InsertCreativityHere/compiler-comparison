//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("TestAMD.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct @Fixed
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short s;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Fixed(short s)
        {
            this.s = s;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Fixed(Ice.InputStream istr)
        {
            this.s = istr.readShort();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeShort(this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, @Fixed v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @Fixed ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class Variable : global::System.IEquatable<Variable>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[] bl;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] ss;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable(bool[] bl, string[] ss)
        {
            global::System.ArgumentNullException.ThrowIfNull(bl);
            this.bl = bl;
            global::System.ArgumentNullException.ThrowIfNull(ss);
            this.ss = ss;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable(string s, bool[] bl, string[] ss)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            global::System.ArgumentNullException.ThrowIfNull(bl);
            this.bl = bl;
            global::System.ArgumentNullException.ThrowIfNull(ss);
            this.ss = ss;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable(Ice.InputStream istr)
        {
            this.s = istr.readString();
            this.bl = BoolListHelper.read(istr);
            this.ss = StringSeqHelper.read(istr);
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable Clone() => (Variable)MemberwiseClone();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.s);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.bl);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.ss);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object? other) => Equals(other as Variable);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(Variable? other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.s == other.s && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.bl, other.bl) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.ss, other.ss);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(Variable? lhs, Variable? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(Variable? lhs, Variable? rhs) => !(lhs == rhs);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
            BoolListHelper.write(ostr, this.bl);
            StringSeqHelper.write(ostr, this.ss);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, Variable v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static Variable ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum E
    {
        E1,
        E2,
        E3
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EHelper
    {
        public static void write(Ice.OutputStream ostr, E v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static E read(Ice.InputStream istr)
        {
            E v;
            v = (E)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::C")]
    public partial class C : Ice.Value
    {
        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::D")]
    public partial interface D : Ice.Object
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::DictClass")]
    public partial class DictClass : Ice.Value
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, string> isdict;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DictClass(global::System.Collections.Generic.Dictionary<int, string> isdict)
        {
            global::System.ArgumentNullException.ThrowIfNull(isdict);
            this.isdict = isdict;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public DictClass()
        {
            this.isdict = null!;
            ice_initialize();
        }

        private const string _id = "::Test::DictClass";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            IntStringDictHelper.write(ostr_, isdict);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            isdict = IntStringDictHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class BufferStruct : global::System.IEquatable<BufferStruct>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] byteBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[] boolBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short[] shortBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int[] intBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long[] longBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public float[] floatBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public double[] doubleBuf;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BufferStruct(byte[] byteBuf, bool[] boolBuf, short[] shortBuf, int[] intBuf, long[] longBuf, float[] floatBuf, double[] doubleBuf)
        {
            global::System.ArgumentNullException.ThrowIfNull(byteBuf);
            this.byteBuf = byteBuf;
            global::System.ArgumentNullException.ThrowIfNull(boolBuf);
            this.boolBuf = boolBuf;
            global::System.ArgumentNullException.ThrowIfNull(shortBuf);
            this.shortBuf = shortBuf;
            global::System.ArgumentNullException.ThrowIfNull(intBuf);
            this.intBuf = intBuf;
            global::System.ArgumentNullException.ThrowIfNull(longBuf);
            this.longBuf = longBuf;
            global::System.ArgumentNullException.ThrowIfNull(floatBuf);
            this.floatBuf = floatBuf;
            global::System.ArgumentNullException.ThrowIfNull(doubleBuf);
            this.doubleBuf = doubleBuf;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BufferStruct(Ice.InputStream istr)
        {
            this.byteBuf = ByteBufferHelper.read(istr);
            this.boolBuf = BoolBufferHelper.read(istr);
            this.shortBuf = ShortBufferHelper.read(istr);
            this.intBuf = IntBufferHelper.read(istr);
            this.longBuf = LongBufferHelper.read(istr);
            this.floatBuf = FloatBufferHelper.read(istr);
            this.doubleBuf = DoubleBufferHelper.read(istr);
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BufferStruct Clone() => (BufferStruct)MemberwiseClone();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.byteBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.boolBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.shortBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.intBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.longBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.floatBuf);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.doubleBuf);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object? other) => Equals(other as BufferStruct);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(BufferStruct? other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.byteBuf, other.byteBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.boolBuf, other.boolBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.shortBuf, other.shortBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.intBuf, other.intBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.longBuf, other.longBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.floatBuf, other.floatBuf) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.doubleBuf, other.doubleBuf);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(BufferStruct? lhs, BufferStruct? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(BufferStruct? lhs, BufferStruct? rhs) => !(lhs == rhs);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ByteBufferHelper.write(ostr, this.byteBuf);
            BoolBufferHelper.write(ostr, this.boolBuf);
            ShortBufferHelper.write(ostr, this.shortBuf);
            IntBufferHelper.write(ostr, this.intBuf);
            LongBufferHelper.write(ostr, this.longBuf);
            FloatBufferHelper.write(ostr, this.floatBuf);
            DoubleBufferHelper.write(ostr, this.doubleBuf);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, BufferStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static BufferStruct ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx?[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx?[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C?[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C?[] inSeq, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);
    }
}

namespace Test
{
    public record struct TestIntf_OpDoubleArrayResult(double[] returnValue, double[] outSeq);

    public record struct TestIntf_OpBoolArrayResult(bool[] returnValue, bool[] outSeq);

    public record struct TestIntf_OpByteArrayResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpVariableArrayResult(Variable[] returnValue, Variable[] outSeq);

    public record struct TestIntf_OpBoolSeqResult(bool[] returnValue, bool[] outSeq);

    public record struct TestIntf_OpBoolListResult(bool[] returnValue, bool[] outSeq);

    public record struct TestIntf_OpByteSeqResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpByteListResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpMyByteSeqResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpStringSeqResult(string[] returnValue, string[] outSeq);

    public record struct TestIntf_OpStringListResult(string[] returnValue, string[] outSeq);

    public record struct TestIntf_OpFixedSeqResult(@Fixed[] returnValue, @Fixed[] outSeq);

    public record struct TestIntf_OpFixedListResult(@Fixed[] returnValue, @Fixed[] outSeq);

    public record struct TestIntf_OpVariableSeqResult(Variable[] returnValue, Variable[] outSeq);

    public record struct TestIntf_OpVariableListResult(Variable[] returnValue, Variable[] outSeq);

    public record struct TestIntf_OpStringStringDictSeqResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] outSeq);

    public record struct TestIntf_OpStringStringDictListResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] outSeq);

    public record struct TestIntf_OpESeqResult(E[] returnValue, E[] outSeq);

    public record struct TestIntf_OpEListResult(E[] returnValue, E[] outSeq);

    public record struct TestIntf_OpDPrxSeqResult(DPrx?[] returnValue, DPrx?[] outSeq);

    public record struct TestIntf_OpDPrxListResult(DPrx?[] returnValue, DPrx?[] outSeq);

    public record struct TestIntf_OpCSeqResult(C?[] returnValue, C?[] outSeq);

    public record struct TestIntf_OpCListResult(C?[] returnValue, C?[] outSeq);

    public record struct TestIntf_OpIntStringDictResult(global::System.Collections.Generic.Dictionary<int, string> returnValue, global::System.Collections.Generic.Dictionary<int, string> odict);

    public record struct TestIntf_OpVarDictResult(global::System.Collections.Generic.Dictionary<long, long> returnValue, global::System.Collections.Generic.Dictionary<string, int> odict);

    public record struct TestIntf_OpShortBufferResult(short[] returnValue, short[] outS);

    public record struct TestIntf_OpBoolBufferResult(bool[] returnValue, bool[] outS);
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface DPrx : Ice.ObjectPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : Ice.ObjectPrx
    {
        double[] opDoubleArray(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolArray(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteArray(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Variable[] opVariableArray(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolList(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteList(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opMyByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringSeq(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringList(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @Fixed[] opFixedSeq(@Fixed[] inSeq, out @Fixed[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @Fixed[] opFixedList(@Fixed[] inSeq, out @Fixed[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Variable[] opVariableSeq(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Variable[] opVariableList(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        E[] opESeq(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        E[] opEList(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        DPrx?[] opDPrxSeq(DPrx?[] inSeq, out DPrx?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        DPrx?[] opDPrxList(DPrx?[] inSeq, out DPrx?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        C?[] opCSeq(C?[] inSeq, out C?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        C?[] opCList(C?[] inSeq, out C?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opOutArrayByteSeq(byte[] org, out byte[] copy, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, string> opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<long, long> opVarDict(global::System.Collections.Generic.Dictionary<string, int> idict, out global::System.Collections.Generic.Dictionary<string, int> odict, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortBuffer(short[] inS, out short[] outS, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolBuffer(bool[] inS, out bool[] outS, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        BufferStruct opBufferStruct(BufferStruct s, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeqHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListListHelper
    {
        public static void write(Ice.OutputStream ostr, bool[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, bool[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, bool[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListListHelper
    {
        public static void write(Ice.OutputStream ostr, byte[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, byte[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, byte[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListListHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedSeqHelper
    {
        public static void write(Ice.OutputStream ostr, @Fixed[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static @Fixed[] read(Ice.InputStream istr)
        {
            @Fixed[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new @Fixed[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new @Fixed(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListHelper
    {
        public static void write(Ice.OutputStream ostr, @Fixed[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static @Fixed[] read(Ice.InputStream istr)
        {
            @Fixed[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new @Fixed[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new @Fixed(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListListHelper
    {
        public static void write(Ice.OutputStream ostr, @Fixed[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, @Fixed[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, @Fixed[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableSeqHelper
    {
        public static void write(Ice.OutputStream ostr, Variable[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static Variable[] read(Ice.InputStream istr)
        {
            Variable[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new Variable[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Variable(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListHelper
    {
        public static void write(Ice.OutputStream ostr, Variable[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static Variable[] read(Ice.InputStream istr)
        {
            Variable[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new Variable[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Variable(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListListHelper
    {
        public static void write(Ice.OutputStream ostr, Variable[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, Variable[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, Variable[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictSeqHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListListHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ESeqHelper
    {
        public static void write(Ice.OutputStream ostr, E[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListHelper
    {
        public static void write(Ice.OutputStream ostr, E[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListListHelper
    {
        public static void write(Ice.OutputStream ostr, E[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    EListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = EListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, E[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    EListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = EListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ESeqListHelper
    {
        public static void write(Ice.OutputStream ostr, E[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ESeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ESeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CSeqHelper
    {
        public static void write(Ice.OutputStream ostr, C?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C?[] read(Ice.InputStream istr)
        {
            C?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListHelper
    {
        public static void write(Ice.OutputStream ostr, C?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C?[] read(Ice.InputStream istr)
        {
            C?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListListHelper
    {
        public static void write(Ice.OutputStream ostr, C?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C?[][] read(Ice.InputStream istr)
        {
            C?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, C?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C?[][] read(Ice.InputStream istr)
        {
            C?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, C?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C?[][] read(Ice.InputStream istr)
        {
            C?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxHelper : Ice.ObjectPrxHelperBase, DPrx
    {
        public static DPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new DPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static DPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new DPrxHelper(b) : null;

        public static DPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new DPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static DPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new DPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static DPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new DPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::D"
        };

        public static string ice_staticId() => "::Test::D";

        public static void write(Ice.OutputStream ostr, DPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static DPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new DPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new DPrxHelper(reference);

        private DPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private DPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxSeqHelper
    {
        public static void write(Ice.OutputStream ostr, DPrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx?[] read(Ice.InputStream istr)
        {
            DPrx?[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new DPrx?[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListHelper
    {
        public static void write(Ice.OutputStream ostr, DPrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx?[] read(Ice.InputStream istr)
        {
            DPrx?[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new DPrx?[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListListHelper
    {
        public static void write(Ice.OutputStream ostr, DPrx?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx?[][] read(Ice.InputStream istr)
        {
            DPrx?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListSeqHelper
    {
        public static void write(Ice.OutputStream ostr, DPrx?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx?[][] read(Ice.InputStream istr)
        {
            DPrx?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxSeqListHelper
    {
        public static void write(Ice.OutputStream ostr, DPrx?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx?[][] read(Ice.InputStream istr)
        {
            DPrx?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSeqHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntStringDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, string> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, string> r = new global::System.Collections.Generic.Dictionary<int, string>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongLongDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<long, long> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<long, long> e in v)
                {
                    ostr.writeLong(e.Key);
                    ostr.writeLong(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, long> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<long, long> r = new global::System.Collections.Generic.Dictionary<long, long>();
            for(int i = 0; i < sz; ++i)
            {
                long k;
                k = istr.readLong();
                long v;
                v = istr.readLong();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringIntDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, int> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolBufferHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortBufferHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntBufferHelper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongBufferHelper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatBufferHelper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleBufferHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteBufferHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public double[] opDoubleArray(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolArray(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteArray(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Variable[] opVariableArray(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVariableArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolList(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteList(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opMyByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringSeq(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringList(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @Fixed[] opFixedSeq(@Fixed[] inSeq, out @Fixed[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @Fixed[] opFixedList(@Fixed[] inSeq, out @Fixed[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Variable[] opVariableSeq(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVariableSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Variable[] opVariableList(Variable[] inSeq, out Variable[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVariableListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDictSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDictListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public E[] opESeq(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opESeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public E[] opEList(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opEListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public DPrx?[] opDPrxSeq(DPrx?[] inSeq, out DPrx?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDPrxSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public DPrx?[] opDPrxList(DPrx?[] inSeq, out DPrx?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDPrxListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public C?[] opCSeq(C?[] inSeq, out C?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opCSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public C?[] opCList(C?[] inSeq, out C?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opCListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opOutArrayByteSeq(byte[] org, out byte[] copy, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                copy = _iceI_opOutArrayByteSeqAsync(org, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string> opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntStringDictAsync(idict, context, null, global::System.Threading.CancellationToken.None, true).Result;
                odict = result_.odict;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long> opVarDict(global::System.Collections.Generic.Dictionary<string, int> idict, out global::System.Collections.Generic.Dictionary<string, int> odict, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVarDictAsync(idict, context, null, global::System.Threading.CancellationToken.None, true).Result;
                odict = result_.odict;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[] opShortBuffer(short[] inS, out short[] outS, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortBufferAsync(inS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outS = result_.outS;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolBuffer(bool[] inS, out bool[] outS, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolBufferAsync(inS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outS = result_.outS;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public BufferStruct opBufferStruct(BufferStruct s, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBufferStructAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> _iceI_opDoubleArrayAsync(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDoubleArrayResult>(progress, cancel);
            _iceI_opDoubleArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleArray_name = "opDoubleArray";

        private void _iceI_opDoubleArray(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleArrayResult>(completed);
            outAsync.invoke(
                _opDoubleArray_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DoubleSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDoubleArrayResult();
                    ret.outSeq = DoubleSeqHelper.read(istr);
                    ret.returnValue = DoubleSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> _iceI_opBoolArrayAsync(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpBoolArrayResult>(progress, cancel);
            _iceI_opBoolArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolArray_name = "opBoolArray";

        private void _iceI_opBoolArray(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolArrayResult>(completed);
            outAsync.invoke(
                _opBoolArray_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpBoolArrayResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> _iceI_opByteArrayAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteArrayResult>(progress, cancel);
            _iceI_opByteArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteArray_name = "opByteArray";

        private void _iceI_opByteArray(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteArrayResult>(completed);
            outAsync.invoke(
                _opByteArray_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteArrayResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVariableArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> _iceI_opVariableArrayAsync(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpVariableArrayResult>(progress, cancel);
            _iceI_opVariableArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableArray_name = "opVariableArray";

        private void _iceI_opVariableArray(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableArrayResult>(completed);
            outAsync.invoke(
                _opVariableArray_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpVariableArrayResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpBoolSeqResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> _iceI_opBoolListAsync(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpBoolListResult>(progress, cancel);
            _iceI_opBoolList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolList_name = "opBoolList";

        private void _iceI_opBoolList(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolListResult>(completed);
            outAsync.invoke(
                _opBoolList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpBoolListResult();
                    ret.outSeq = BoolListHelper.read(istr);
                    ret.returnValue = BoolListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> _iceI_opByteListAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteListResult>(progress, cancel);
            _iceI_opByteList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList_name = "opByteList";

        private void _iceI_opByteList(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteListResult>(completed);
            outAsync.invoke(
                _opByteList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteListResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> _iceI_opMyByteSeqAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpMyByteSeqResult>(progress, cancel);
            _iceI_opMyByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyByteSeq_name = "opMyByteSeq";

        private void _iceI_opMyByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpMyByteSeqResult>(completed);
            outAsync.invoke(
                _opMyByteSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpMyByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> _iceI_opStringSeqAsync(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringSeqResult>(progress, cancel);
            _iceI_opStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeq_name = "opStringSeq";

        private void _iceI_opStringSeq(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqResult>(completed);
            outAsync.invoke(
                _opStringSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringSeqResult();
                    ret.outSeq = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> _iceI_opStringListAsync(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringListResult>(progress, cancel);
            _iceI_opStringList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList_name = "opStringList";

        private void _iceI_opStringList(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringListResult>(completed);
            outAsync.invoke(
                _opStringList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringListResult();
                    ret.outSeq = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> _iceI_opFixedSeqAsync(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpFixedSeqResult>(progress, cancel);
            _iceI_opFixedSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedSeq_name = "opFixedSeq";

        private void _iceI_opFixedSeq(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFixedSeqResult>(completed);
            outAsync.invoke(
                _opFixedSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FixedSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpFixedSeqResult();
                    ret.outSeq = FixedSeqHelper.read(istr);
                    ret.returnValue = FixedSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> _iceI_opFixedListAsync(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpFixedListResult>(progress, cancel);
            _iceI_opFixedList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedList_name = "opFixedList";

        private void _iceI_opFixedList(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFixedListResult>(completed);
            outAsync.invoke(
                _opFixedList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FixedListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpFixedListResult();
                    ret.outSeq = FixedListHelper.read(istr);
                    ret.returnValue = FixedListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVariableSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> _iceI_opVariableSeqAsync(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpVariableSeqResult>(progress, cancel);
            _iceI_opVariableSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableSeq_name = "opVariableSeq";

        private void _iceI_opVariableSeq(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableSeqResult>(completed);
            outAsync.invoke(
                _opVariableSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    VariableSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpVariableSeqResult();
                    ret.outSeq = VariableSeqHelper.read(istr);
                    ret.returnValue = VariableSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVariableListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> _iceI_opVariableListAsync(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpVariableListResult>(progress, cancel);
            _iceI_opVariableList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableList_name = "opVariableList";

        private void _iceI_opVariableList(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableListResult>(completed);
            outAsync.invoke(
                _opVariableList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpVariableListResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDictSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> _iceI_opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDictSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringStringDictSeqResult>(progress, cancel);
            _iceI_opStringStringDictSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDictSeq_name = "opStringStringDictSeq";

        private void _iceI_opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringStringDictSeqResult>(completed);
            outAsync.invoke(
                _opStringStringDictSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDictSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringStringDictSeqResult();
                    ret.outSeq = StringStringDictSeqHelper.read(istr);
                    ret.returnValue = StringStringDictSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDictListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> _iceI_opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDictList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringStringDictListResult>(progress, cancel);
            _iceI_opStringStringDictList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDictList_name = "opStringStringDictList";

        private void _iceI_opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringStringDictListResult>(completed);
            outAsync.invoke(
                _opStringStringDictList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDictListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringStringDictListResult();
                    ret.outSeq = StringStringDictListHelper.read(istr);
                    ret.returnValue = StringStringDictListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opESeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> _iceI_opESeqAsync(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opESeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpESeqResult>(progress, cancel);
            _iceI_opESeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opESeq_name = "opESeq";

        private void _iceI_opESeq(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpESeqResult>(completed);
            outAsync.invoke(
                _opESeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ESeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpESeqResult();
                    ret.outSeq = ESeqHelper.read(istr);
                    ret.returnValue = ESeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opEListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpEListResult> _iceI_opEListAsync(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opEList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpEListResult>(progress, cancel);
            _iceI_opEList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opEList_name = "opEList";

        private void _iceI_opEList(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpEListResult>(completed);
            outAsync.invoke(
                _opEList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    EListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpEListResult();
                    ret.outSeq = EListHelper.read(istr);
                    ret.returnValue = EListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDPrxSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> _iceI_opDPrxSeqAsync(DPrx?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDPrxSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDPrxSeqResult>(progress, cancel);
            _iceI_opDPrxSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDPrxSeq_name = "opDPrxSeq";

        private void _iceI_opDPrxSeq(DPrx?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDPrxSeqResult>(completed);
            outAsync.invoke(
                _opDPrxSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DPrxSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDPrxSeqResult();
                    ret.outSeq = DPrxSeqHelper.read(istr);
                    ret.returnValue = DPrxSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDPrxListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> _iceI_opDPrxListAsync(DPrx?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDPrxList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDPrxListResult>(progress, cancel);
            _iceI_opDPrxList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDPrxList_name = "opDPrxList";

        private void _iceI_opDPrxList(DPrx?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDPrxListResult>(completed);
            outAsync.invoke(
                _opDPrxList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DPrxListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDPrxListResult();
                    ret.outSeq = DPrxListHelper.read(istr);
                    ret.returnValue = DPrxListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> _iceI_opCSeqAsync(C?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpCSeqResult>(progress, cancel);
            _iceI_opCSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCSeq_name = "opCSeq";

        private void _iceI_opCSeq(C?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCSeqResult>(completed);
            outAsync.invoke(
                _opCSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    CSeqHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpCSeqResult();
                    ret.outSeq = CSeqHelper.read(istr);
                    ret.returnValue = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCListResult> _iceI_opCListAsync(C?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpCListResult>(progress, cancel);
            _iceI_opCList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCList_name = "opCList";

        private void _iceI_opCList(C?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCListResult>(completed);
            outAsync.invoke(
                _opCList_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    CListHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpCListResult();
                    ret.outSeq = CListHelper.read(istr);
                    ret.returnValue = CListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOutArrayByteSeqAsync(org, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_opOutArrayByteSeqAsync(byte[] iceP_org, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOutArrayByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_opOutArrayByteSeq(iceP_org, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOutArrayByteSeq_name = "opOutArrayByteSeq";

        private void _iceI_opOutArrayByteSeq(byte[] iceP_org, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _opOutArrayByteSeq_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_org);
                },
                read: (Ice.InputStream istr) =>
                {
                    byte[] iceP_copy;
                    iceP_copy = ByteSeqHelper.read(istr);
                    return iceP_copy;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntStringDictAsync(idict, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> _iceI_opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntStringDict_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpIntStringDictResult>(progress, cancel);
            _iceI_opIntStringDict(iceP_idict, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntStringDict_name = "opIntStringDict";

        private void _iceI_opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntStringDictResult>(completed);
            outAsync.invoke(
                _opIntStringDict_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntStringDictHelper.write(ostr, iceP_idict);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpIntStringDictResult();
                    ret.odict = IntStringDictHelper.read(istr);
                    ret.returnValue = IntStringDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVarDictAsync(idict, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> _iceI_opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> iceP_idict, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarDict_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpVarDictResult>(progress, cancel);
            _iceI_opVarDict(iceP_idict, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarDict_name = "opVarDict";

        private void _iceI_opVarDict(global::System.Collections.Generic.Dictionary<string, int> iceP_idict, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVarDictResult>(completed);
            outAsync.invoke(
                _opVarDict_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringIntDictHelper.write(ostr, iceP_idict);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpVarDictResult();
                    ret.odict = StringIntDictHelper.read(istr);
                    ret.returnValue = LongLongDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortBufferAsync(inS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> _iceI_opShortBufferAsync(short[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortBuffer_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortBufferResult>(progress, cancel);
            _iceI_opShortBuffer(iceP_inS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortBuffer_name = "opShortBuffer";

        private void _iceI_opShortBuffer(short[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortBufferResult>(completed);
            outAsync.invoke(
                _opShortBuffer_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortBufferHelper.write(ostr, iceP_inS);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpShortBufferResult();
                    ret.outS = ShortBufferHelper.read(istr);
                    ret.returnValue = ShortBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolBufferAsync(inS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> _iceI_opBoolBufferAsync(bool[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBuffer_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpBoolBufferResult>(progress, cancel);
            _iceI_opBoolBuffer(iceP_inS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBuffer_name = "opBoolBuffer";

        private void _iceI_opBoolBuffer(bool[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolBufferResult>(completed);
            outAsync.invoke(
                _opBoolBuffer_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inS);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpBoolBufferResult();
                    ret.outS = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBufferStructAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<BufferStruct> _iceI_opBufferStructAsync(BufferStruct iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBufferStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<BufferStruct>(progress, cancel);
            _iceI_opBufferStruct(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBufferStruct_name = "opBufferStruct";

        private void _iceI_opBufferStruct(BufferStruct iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<BufferStruct>(completed);
            outAsync.invoke(
                _opBufferStruct_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BufferStruct.ice_write(ostr, iceP_s);
                },
                read: (Ice.InputStream istr) =>
                {
                    BufferStruct ret;
                    ret = new BufferStruct(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new TestIntfPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestIntfPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new TestIntfPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

        private TestIntfPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestIntfPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class DDisp_ : Ice.ObjectImpl, D
    {
        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::D";
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
    {
        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx?[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx?[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C?[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C?[] inSeq, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opDoubleArray" => TestIntf.iceD_opDoubleArrayAsync(this, request),
                "opBoolArray" => TestIntf.iceD_opBoolArrayAsync(this, request),
                "opByteArray" => TestIntf.iceD_opByteArrayAsync(this, request),
                "opVariableArray" => TestIntf.iceD_opVariableArrayAsync(this, request),
                "opBoolSeq" => TestIntf.iceD_opBoolSeqAsync(this, request),
                "opBoolList" => TestIntf.iceD_opBoolListAsync(this, request),
                "opByteSeq" => TestIntf.iceD_opByteSeqAsync(this, request),
                "opByteList" => TestIntf.iceD_opByteListAsync(this, request),
                "opMyByteSeq" => TestIntf.iceD_opMyByteSeqAsync(this, request),
                "opStringSeq" => TestIntf.iceD_opStringSeqAsync(this, request),
                "opStringList" => TestIntf.iceD_opStringListAsync(this, request),
                "opFixedSeq" => TestIntf.iceD_opFixedSeqAsync(this, request),
                "opFixedList" => TestIntf.iceD_opFixedListAsync(this, request),
                "opVariableSeq" => TestIntf.iceD_opVariableSeqAsync(this, request),
                "opVariableList" => TestIntf.iceD_opVariableListAsync(this, request),
                "opStringStringDictSeq" => TestIntf.iceD_opStringStringDictSeqAsync(this, request),
                "opStringStringDictList" => TestIntf.iceD_opStringStringDictListAsync(this, request),
                "opESeq" => TestIntf.iceD_opESeqAsync(this, request),
                "opEList" => TestIntf.iceD_opEListAsync(this, request),
                "opDPrxSeq" => TestIntf.iceD_opDPrxSeqAsync(this, request),
                "opDPrxList" => TestIntf.iceD_opDPrxListAsync(this, request),
                "opCSeq" => TestIntf.iceD_opCSeqAsync(this, request),
                "opCList" => TestIntf.iceD_opCListAsync(this, request),
                "opOutArrayByteSeq" => TestIntf.iceD_opOutArrayByteSeqAsync(this, request),
                "opIntStringDict" => TestIntf.iceD_opIntStringDictAsync(this, request),
                "opVarDict" => TestIntf.iceD_opVarDictAsync(this, request),
                "opShortBuffer" => TestIntf.iceD_opShortBufferAsync(this, request),
                "opBoolBuffer" => TestIntf.iceD_opBoolBufferAsync(this, request),
                "opBufferStruct" => TestIntf.iceD_opBufferStructAsync(this, request),
                "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface TestIntf
    {
        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opDoubleArrayAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    DoubleSeqHelper.write(ostr, ret.outSeq);
                    DoubleSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opBoolArrayAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outSeq);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opByteArrayAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVariableArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opVariableArrayAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opBoolSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outSeq);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opBoolListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    BoolListHelper.write(ostr, ret.outSeq);
                    BoolListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opByteSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.outSeq);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opByteListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyByteSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opMyByteSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.outSeq);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_inSeq;
            iceP_inSeq = StringSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opStringSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringSeqHelper.write(ostr, ret.outSeq);
                    StringSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_inSeq;
            iceP_inSeq = StringListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opStringListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringListHelper.write(ostr, ret.outSeq);
                    StringListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFixedSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            @Fixed[] iceP_inSeq;
            iceP_inSeq = FixedSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opFixedSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    FixedSeqHelper.write(ostr, ret.outSeq);
                    FixedSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFixedListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            @Fixed[] iceP_inSeq;
            iceP_inSeq = FixedListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opFixedListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    FixedListHelper.write(ostr, ret.outSeq);
                    FixedListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVariableSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opVariableSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    VariableSeqHelper.write(ostr, ret.outSeq);
                    VariableSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVariableListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opVariableListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringStringDictSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq;
            iceP_inSeq = StringStringDictSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opStringStringDictSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringStringDictSeqHelper.write(ostr, ret.outSeq);
                    StringStringDictSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringStringDictListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq;
            iceP_inSeq = StringStringDictListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opStringStringDictListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringStringDictListHelper.write(ostr, ret.outSeq);
                    StringStringDictListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opESeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            E[] iceP_inSeq;
            iceP_inSeq = ESeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opESeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ESeqHelper.write(ostr, ret.outSeq);
                    ESeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opEListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            E[] iceP_inSeq;
            iceP_inSeq = EListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opEListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    EListHelper.write(ostr, ret.outSeq);
                    EListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDPrxSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            DPrx?[] iceP_inSeq;
            iceP_inSeq = DPrxSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opDPrxSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    DPrxSeqHelper.write(ostr, ret.outSeq);
                    DPrxSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDPrxListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            DPrx?[] iceP_inSeq;
            iceP_inSeq = DPrxListHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opDPrxListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    DPrxListHelper.write(ostr, ret.outSeq);
                    DPrxListHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C?[] iceP_inSeq;
            iceP_inSeq = CSeqHelper.read(istr);
            istr.readPendingValues();
            istr.endEncapsulation();
            var result = await obj.opCSeqAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    CSeqHelper.write(ostr, ret.outSeq);
                    CSeqHelper.write(ostr, ret.returnValue);
                    ostr.writePendingValues();
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C?[] iceP_inSeq;
            iceP_inSeq = CListHelper.read(istr);
            istr.readPendingValues();
            istr.endEncapsulation();
            var result = await obj.opCListAsync(iceP_inSeq, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    CListHelper.write(ostr, ret.outSeq);
                    CListHelper.write(ostr, ret.returnValue);
                    ostr.writePendingValues();
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOutArrayByteSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_org;
            iceP_org = ByteSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opOutArrayByteSeqAsync(iceP_org, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, iceP_copy) =>
                {
                    ByteSeqHelper.write(ostr, iceP_copy);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntStringDictAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<int, string> iceP_idict;
            iceP_idict = IntStringDictHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opIntStringDictAsync(iceP_idict, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    IntStringDictHelper.write(ostr, ret.odict);
                    IntStringDictHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVarDictAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, int> iceP_idict;
            iceP_idict = StringIntDictHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opVarDictAsync(iceP_idict, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringIntDictHelper.write(ostr, ret.odict);
                    LongLongDictHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortBufferAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_inS;
            iceP_inS = ShortBufferHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opShortBufferAsync(iceP_inS, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ShortBufferHelper.write(ostr, ret.outS);
                    ShortBufferHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolBufferAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_inS;
            iceP_inS = BoolSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opBoolBufferAsync(iceP_inS, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outS);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBufferStructAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            BufferStruct iceP_s;
            iceP_s = new BufferStruct(istr);
            istr.endEncapsulation();
            var result = await obj.opBufferStructAsync(iceP_s, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    BufferStruct.ice_write(ostr, ret);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            await obj.shutdownAsync(request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
        }
    }
}
