//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct @Fixed
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short s;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Fixed(short s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::Fixed");
            global::IceInternal.HashUtil.hashAdd(ref h_, s);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(!(other is @Fixed))
            {
                return false;
            }
            @Fixed o = (@Fixed)other;
            if(!this.s.Equals(o.s))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(@Fixed lhs, @Fixed rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(@Fixed lhs, @Fixed rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeShort(this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.s = istr.readShort();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, @Fixed v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @Fixed ice_read(global::Ice.InputStream istr)
        {
            var v = new @Fixed();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Variable : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[] bl;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] ss;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable()
        {
            this.s = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Variable(string s, bool[] bl, string[] ss)
        {
            this.s = s;
            this.bl = bl;
            this.ss = ss;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::Variable");
            global::IceInternal.HashUtil.hashAdd(ref h_, s);
            global::IceInternal.HashUtil.hashAdd(ref h_, bl);
            global::IceInternal.HashUtil.hashAdd(ref h_, ss);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            Variable o = (Variable)other;
            if(this.s == null)
            {
                if(o.s != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.s.Equals(o.s))
                {
                    return false;
                }
            }
            if(this.bl == null)
            {
                if(o.bl != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.bl, o.bl))
                {
                    return false;
                }
            }
            if(this.ss == null)
            {
                if(o.ss != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.ss, o.ss))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(Variable lhs, Variable rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(Variable lhs, Variable rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
            BoolListHelper.write(ostr, this.bl);
            StringSeqHelper.write(ostr, this.ss);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.s = istr.readString();
            this.bl = BoolListHelper.read(istr);
            this.ss = StringSeqHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, Variable v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static Variable ice_read(global::Ice.InputStream istr)
        {
            var v = new Variable();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly Variable _nullMarshalValue = new Variable();

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum E
    {
        E1,
        E2,
        E3
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EHelper
    {
        public static void write(global::Ice.OutputStream ostr, E v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static E read(global::Ice.InputStream istr)
        {
            E v;
            v = (E)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C : global::Ice.Value
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface D : global::Ice.Object, DOperations_
    {
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct ClassOtherStruct
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int x;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ClassOtherStruct(int x)
        {
            this.x = x;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::ClassOtherStruct");
            global::IceInternal.HashUtil.hashAdd(ref h_, x);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(!(other is ClassOtherStruct))
            {
                return false;
            }
            ClassOtherStruct o = (ClassOtherStruct)other;
            if(!this.x.Equals(o.x))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(ClassOtherStruct lhs, ClassOtherStruct rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(ClassOtherStruct lhs, ClassOtherStruct rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.x);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.x = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, ClassOtherStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static ClassOtherStruct ice_read(global::Ice.InputStream istr)
        {
            var v = new ClassOtherStruct();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ClassStruct : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ClassOtherStruct[] otherSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ClassOtherStruct other;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int y;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ClassStruct()
        {
            this.other = new ClassOtherStruct();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ClassStruct(ClassOtherStruct[] otherSeq, ClassOtherStruct other, int y)
        {
            this.otherSeq = otherSeq;
            this.other = other;
            this.y = y;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::ClassStruct");
            global::IceInternal.HashUtil.hashAdd(ref h_, otherSeq);
            global::IceInternal.HashUtil.hashAdd(ref h_, other);
            global::IceInternal.HashUtil.hashAdd(ref h_, y);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            ClassStruct o = (ClassStruct)other;
            if(this.otherSeq == null)
            {
                if(o.otherSeq != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.otherSeq, o.otherSeq))
                {
                    return false;
                }
            }
            if(!this.other.Equals(o.other))
            {
                return false;
            }
            if(!this.y.Equals(o.y))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(ClassStruct lhs, ClassStruct rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(ClassStruct lhs, ClassStruct rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ClassOtherStructSeqHelper.write(ostr, this.otherSeq);
            this.other.ice_writeMembers(ostr);
            ostr.writeInt(this.y);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.otherSeq = ClassOtherStructSeqHelper.read(istr);
            this.other.ice_readMembers(istr);
            this.y = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, ClassStruct v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static ClassStruct ice_read(global::Ice.InputStream istr)
        {
            var v = new ClassStruct();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly ClassStruct _nullMarshalValue = new ClassStruct();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DictClass : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, string> isdict;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DictClass()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DictClass(global::System.Collections.Generic.Dictionary<int, string> isdict)
        {
            this.isdict = isdict;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::DictClass";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            IntStringDictHelper.write(ostr_, isdict);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            isdict = IntStringDictHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class BufferStruct : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] byteBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[] boolBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short[] shortBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int[] intBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long[] longBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public float[] floatBuf;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public double[] doubleBuf;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BufferStruct()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BufferStruct(byte[] byteBuf, bool[] boolBuf, short[] shortBuf, int[] intBuf, long[] longBuf, float[] floatBuf, double[] doubleBuf)
        {
            this.byteBuf = byteBuf;
            this.boolBuf = boolBuf;
            this.shortBuf = shortBuf;
            this.intBuf = intBuf;
            this.longBuf = longBuf;
            this.floatBuf = floatBuf;
            this.doubleBuf = doubleBuf;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::BufferStruct");
            global::IceInternal.HashUtil.hashAdd(ref h_, byteBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, boolBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, shortBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, intBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, longBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, floatBuf);
            global::IceInternal.HashUtil.hashAdd(ref h_, doubleBuf);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            BufferStruct o = (BufferStruct)other;
            if(this.byteBuf == null)
            {
                if(o.byteBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.byteBuf, o.byteBuf))
                {
                    return false;
                }
            }
            if(this.boolBuf == null)
            {
                if(o.boolBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.boolBuf, o.boolBuf))
                {
                    return false;
                }
            }
            if(this.shortBuf == null)
            {
                if(o.shortBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.shortBuf, o.shortBuf))
                {
                    return false;
                }
            }
            if(this.intBuf == null)
            {
                if(o.intBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.intBuf, o.intBuf))
                {
                    return false;
                }
            }
            if(this.longBuf == null)
            {
                if(o.longBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.longBuf, o.longBuf))
                {
                    return false;
                }
            }
            if(this.floatBuf == null)
            {
                if(o.floatBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.floatBuf, o.floatBuf))
                {
                    return false;
                }
            }
            if(this.doubleBuf == null)
            {
                if(o.doubleBuf != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.doubleBuf, o.doubleBuf))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(BufferStruct lhs, BufferStruct rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(BufferStruct lhs, BufferStruct rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ByteBufferHelper.write(ostr, this.byteBuf);
            BoolBufferHelper.write(ostr, this.boolBuf);
            ShortBufferHelper.write(ostr, this.shortBuf);
            IntBufferHelper.write(ostr, this.intBuf);
            LongBufferHelper.write(ostr, this.longBuf);
            FloatBufferHelper.write(ostr, this.floatBuf);
            DoubleBufferHelper.write(ostr, this.doubleBuf);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.byteBuf = ByteBufferHelper.read(istr);
            this.boolBuf = BoolBufferHelper.read(istr);
            this.shortBuf = ShortBufferHelper.read(istr);
            this.intBuf = IntBufferHelper.read(istr);
            this.longBuf = LongBufferHelper.read(istr);
            this.floatBuf = FloatBufferHelper.read(istr);
            this.doubleBuf = DoubleBufferHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, BufferStruct v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static BufferStruct ice_read(global::Ice.InputStream istr)
        {
            var v = new BufferStruct();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly BufferStruct _nullMarshalValue = new BufferStruct();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opDoubleArray(double[] ret, double[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBoolArray(bool[] ret, bool[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opByteArray(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVariableArray(Variable[] ret, Variable[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBoolRange(bool[] ret, bool[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opByteRange(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVariableRange(Variable[] ret, Variable[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opByteRangeType(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVariableRangeType(Variable[] ret, Variable[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBoolSeq(bool[] ret, bool[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBoolList(bool[] ret, bool[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opByteSeq(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opByteList(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opMyByteSeq(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opString(string ret, string outString);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opStringSeq(string[] ret, string[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opStringList(string[] ret, string[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opFixedSeq(@Fixed[] ret, @Fixed[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opFixedList(@Fixed[] ret, @Fixed[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVariableSeq(Variable[] ret, Variable[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVariableList(Variable[] ret, Variable[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] ret, global::System.Collections.Generic.Dictionary<string, string>[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] ret, global::System.Collections.Generic.Dictionary<string, string>[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opESeq(E[] ret, E[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opEList(E[] ret, E[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opDPrxSeq(DPrx[] ret, DPrx[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opDPrxList(DPrx[] ret, DPrx[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opCSeq(C[] ret, C[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opCList(C[] ret, C[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opClassStruct(ClassStruct ret, ClassStruct outS, ClassStruct[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opOutArrayByteSeq(byte[] copy);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opOutRangeByteSeq(byte[] copy);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> ret, global::System.Collections.Generic.Dictionary<int, string> odict);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opVarDict(global::System.Collections.Generic.Dictionary<long, long> ret, global::System.Collections.Generic.Dictionary<string, int> odict);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opCustomIntStringDict(global::System.Collections.Generic.Dictionary<int, string> ret, global::System.Collections.Generic.Dictionary<int, string> odict);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opShortBuffer(short[] ret, short[] outS);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBoolBuffer(bool[] ret, bool[] outS);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_opBufferStruct(BufferStruct ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_shutdown();
}

namespace Test
{
    public struct TestIntf_OpDoubleArrayResult
    {
        public TestIntf_OpDoubleArrayResult(double[] returnValue, double[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public double[] returnValue;
        public double[] outSeq;
    }

    public struct TestIntf_OpBoolArrayResult
    {
        public TestIntf_OpBoolArrayResult(bool[] returnValue, bool[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public bool[] returnValue;
        public bool[] outSeq;
    }

    public struct TestIntf_OpByteArrayResult
    {
        public TestIntf_OpByteArrayResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpVariableArrayResult
    {
        public TestIntf_OpVariableArrayResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;
    }

    public struct TestIntf_OpBoolRangeResult
    {
        public TestIntf_OpBoolRangeResult(bool[] returnValue, bool[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public bool[] returnValue;
        public bool[] outSeq;
    }

    public struct TestIntf_OpByteRangeResult
    {
        public TestIntf_OpByteRangeResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpVariableRangeResult
    {
        public TestIntf_OpVariableRangeResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;
    }

    public struct TestIntf_OpByteRangeTypeResult
    {
        public TestIntf_OpByteRangeTypeResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpVariableRangeTypeResult
    {
        public TestIntf_OpVariableRangeTypeResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;
    }

    public struct TestIntf_OpBoolSeqResult
    {
        public TestIntf_OpBoolSeqResult(bool[] returnValue, bool[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public bool[] returnValue;
        public bool[] outSeq;
    }

    public struct TestIntf_OpBoolListResult
    {
        public TestIntf_OpBoolListResult(bool[] returnValue, bool[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public bool[] returnValue;
        public bool[] outSeq;
    }

    public struct TestIntf_OpByteSeqResult
    {
        public TestIntf_OpByteSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpByteListResult
    {
        public TestIntf_OpByteListResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpMyByteSeqResult
    {
        public TestIntf_OpMyByteSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpStringResult
    {
        public TestIntf_OpStringResult(string returnValue, string outString)
        {
            this.returnValue = returnValue;
            this.outString = outString;
        }

        public string returnValue;
        public string outString;
    }

    public struct TestIntf_OpStringSeqResult
    {
        public TestIntf_OpStringSeqResult(string[] returnValue, string[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public string[] returnValue;
        public string[] outSeq;
    }

    public struct TestIntf_OpStringListResult
    {
        public TestIntf_OpStringListResult(string[] returnValue, string[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public string[] returnValue;
        public string[] outSeq;
    }

    public struct TestIntf_OpFixedSeqResult
    {
        public TestIntf_OpFixedSeqResult(@Fixed[] returnValue, @Fixed[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public @Fixed[] returnValue;
        public @Fixed[] outSeq;
    }

    public struct TestIntf_OpFixedListResult
    {
        public TestIntf_OpFixedListResult(@Fixed[] returnValue, @Fixed[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public @Fixed[] returnValue;
        public @Fixed[] outSeq;
    }

    public struct TestIntf_OpVariableSeqResult
    {
        public TestIntf_OpVariableSeqResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;
    }

    public struct TestIntf_OpVariableListResult
    {
        public TestIntf_OpVariableListResult(Variable[] returnValue, Variable[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public Variable[] returnValue;
        public Variable[] outSeq;
    }

    public struct TestIntf_OpStringStringDictSeqResult
    {
        public TestIntf_OpStringStringDictSeqResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] returnValue;
        public global::System.Collections.Generic.Dictionary<string, string>[] outSeq;
    }

    public struct TestIntf_OpStringStringDictListResult
    {
        public TestIntf_OpStringStringDictListResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] returnValue;
        public global::System.Collections.Generic.Dictionary<string, string>[] outSeq;
    }

    public struct TestIntf_OpESeqResult
    {
        public TestIntf_OpESeqResult(E[] returnValue, E[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public E[] returnValue;
        public E[] outSeq;
    }

    public struct TestIntf_OpEListResult
    {
        public TestIntf_OpEListResult(E[] returnValue, E[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public E[] returnValue;
        public E[] outSeq;
    }

    public struct TestIntf_OpDPrxSeqResult
    {
        public TestIntf_OpDPrxSeqResult(DPrx[] returnValue, DPrx[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public DPrx[] returnValue;
        public DPrx[] outSeq;
    }

    public struct TestIntf_OpDPrxListResult
    {
        public TestIntf_OpDPrxListResult(DPrx[] returnValue, DPrx[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public DPrx[] returnValue;
        public DPrx[] outSeq;
    }

    public struct TestIntf_OpCSeqResult
    {
        public TestIntf_OpCSeqResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;
    }

    public struct TestIntf_OpCListResult
    {
        public TestIntf_OpCListResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;
    }

    public struct TestIntf_OpClassStructResult
    {
        public TestIntf_OpClassStructResult(ClassStruct returnValue, ClassStruct outS, ClassStruct[] outSeq)
        {
            this.returnValue = returnValue;
            this.outS = outS;
            this.outSeq = outSeq;
        }

        public ClassStruct returnValue;
        public ClassStruct outS;
        public ClassStruct[] outSeq;
    }

    public struct TestIntf_OpIntStringDictResult
    {
        public TestIntf_OpIntStringDictResult(global::System.Collections.Generic.Dictionary<int, string> returnValue, global::System.Collections.Generic.Dictionary<int, string> odict)
        {
            this.returnValue = returnValue;
            this.odict = odict;
        }

        public global::System.Collections.Generic.Dictionary<int, string> returnValue;
        public global::System.Collections.Generic.Dictionary<int, string> odict;
    }

    public struct TestIntf_OpVarDictResult
    {
        public TestIntf_OpVarDictResult(global::System.Collections.Generic.Dictionary<long, long> returnValue, global::System.Collections.Generic.Dictionary<string, int> odict)
        {
            this.returnValue = returnValue;
            this.odict = odict;
        }

        public global::System.Collections.Generic.Dictionary<long, long> returnValue;
        public global::System.Collections.Generic.Dictionary<string, int> odict;
    }

    public struct TestIntf_OpCustomIntStringDictResult
    {
        public TestIntf_OpCustomIntStringDictResult(global::System.Collections.Generic.Dictionary<int, string> returnValue, global::System.Collections.Generic.Dictionary<int, string> odict)
        {
            this.returnValue = returnValue;
            this.odict = odict;
        }

        public global::System.Collections.Generic.Dictionary<int, string> returnValue;
        public global::System.Collections.Generic.Dictionary<int, string> odict;
    }

    public struct TestIntf_OpShortBufferResult
    {
        public TestIntf_OpShortBufferResult(short[] returnValue, short[] outS)
        {
            this.returnValue = returnValue;
            this.outS = outS;
        }

        public short[] returnValue;
        public short[] outS;
    }

    public struct TestIntf_OpBoolBufferResult
    {
        public TestIntf_OpBoolBufferResult(bool[] returnValue, bool[] outS)
        {
            this.returnValue = returnValue;
            this.outS = outS;
        }

        public bool[] returnValue;
        public bool[] outS;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface DPrx : global::Ice.ObjectPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        double[] opDoubleArray(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        bool[] opBoolArray(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opByteArray(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Variable[] opVariableArray(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        bool[] opBoolRange(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolRangeResult> opBoolRangeAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opByteRange(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteRangeResult> opByteRangeAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Variable[] opVariableRange(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opByteRangeType(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Variable[] opVariableRangeType(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        bool[] opBoolList(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opByteList(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        byte[] opMyByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        string opString(string inString, out string outString, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringResult> opStringAsync(string inString, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        string[] opStringList(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        @Fixed[] opFixedSeq(@Fixed[] inSeq, out @Fixed[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        @Fixed[] opFixedList(@Fixed[] inSeq, out @Fixed[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Variable[] opVariableSeq(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Variable[] opVariableList(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        E[] opEList(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        DPrx[] opDPrxSeq(DPrx[] inSeq, out DPrx[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        DPrx[] opDPrxList(DPrx[] inSeq, out DPrx[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        ClassStruct opClassStruct(ClassStruct inS, ClassStruct[] inSeq, out ClassStruct outS, out ClassStruct[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void opOutArrayByteSeq(byte[] org, out byte[] copy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void opOutRangeByteSeq(byte[] org, out byte[] copy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<byte[]> opOutRangeByteSeqAsync(byte[] org, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<int, string> opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<long, long> opVarDict(global::System.Collections.Generic.Dictionary<string, int> idict, out global::System.Collections.Generic.Dictionary<string, int> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<int, string> opCustomIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCustomIntStringDictResult> opCustomIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        short[] opShortBuffer(short[] inS, out short[] outS, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        bool[] opBoolBuffer(bool[] inS, out bool[] outS, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        BufferStruct opBufferStruct(BufferStruct s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface DOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolRangeResult> opBoolRangeAsync(bool[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteRangeResult> opByteRangeAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringResult> opStringAsync(string inString, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<byte[]> opOutRangeByteSeqAsync(byte[] org, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpCustomIntStringDictResult> opCustomIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(global::Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(global::Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(global::Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(global::Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(global::Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(global::Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(global::Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(global::Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(global::Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Fixed[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static @Fixed[] read(global::Ice.InputStream istr)
        {
            @Fixed[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new @Fixed[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Fixed[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static @Fixed[] read(global::Ice.InputStream istr)
        {
            @Fixed[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new @Fixed[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Fixed[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(global::Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Fixed[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(global::Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Fixed[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FixedSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static @Fixed[][] read(global::Ice.InputStream istr)
        {
            @Fixed[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Fixed[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FixedSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, Variable[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Variable() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Variable[] read(global::Ice.InputStream istr)
        {
            Variable[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new Variable[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Variable();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListHelper
    {
        public static void write(global::Ice.OutputStream ostr, Variable[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Variable() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Variable[] read(global::Ice.InputStream istr)
        {
            Variable[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new Variable[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Variable();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, Variable[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(global::Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, Variable[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(global::Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VariableSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, Variable[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    VariableSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Variable[][] read(global::Ice.InputStream istr)
        {
            Variable[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Variable[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = VariableSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDictSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDictSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[][] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDictSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ESeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(global::Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(global::Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    EListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(global::Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = EListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    EListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(global::Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = EListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ESeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ESeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static E[][] read(global::Ice.InputStream istr)
        {
            E[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ESeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C[][] read(global::Ice.InputStream istr)
        {
            C[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C[][] read(global::Ice.InputStream istr)
        {
            C[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    CSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C[][] read(global::Ice.InputStream istr)
        {
            C[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = CSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxHelper : global::Ice.ObjectPrxHelperBase, DPrx
    {
        public DPrxHelper()
        {
        }

        #region Async Task operations

        #endregion

        #region Checked and unchecked cast operations

        public static DPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DPrx r = b as DPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DPrxHelper h = new DPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DPrx r = b as DPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DPrxHelper h = new DPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DPrxHelper h = new DPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DPrxHelper h = new DPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DPrx r = b as DPrx;
            if(r == null)
            {
                DPrxHelper h = new DPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DPrxHelper h = new DPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::D"
        };

        public static string ice_staticId() => "::Test::D";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DPrx v)
        {
            ostr.writeProxy(v);
        }

        public static DPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DPrxHelper result = new DPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, DPrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx[] read(global::Ice.InputStream istr)
        {
            DPrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new DPrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListHelper
    {
        public static void write(global::Ice.OutputStream ostr, DPrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx[] read(global::Ice.InputStream istr)
        {
            DPrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new DPrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListListHelper
    {
        public static void write(global::Ice.OutputStream ostr, DPrx[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx[][] read(global::Ice.InputStream istr)
        {
            DPrx[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxListSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, DPrx[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxListHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx[][] read(global::Ice.InputStream istr)
        {
            DPrx[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxListHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DPrxSeqListHelper
    {
        public static void write(global::Ice.OutputStream ostr, DPrx[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DPrxSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static DPrx[][] read(global::Ice.InputStream istr)
        {
            DPrx[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new DPrx[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DPrxSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ClassOtherStructSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, ClassOtherStruct[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static ClassOtherStruct[] read(global::Ice.InputStream istr)
        {
            ClassOtherStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new ClassOtherStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ClassStructSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, ClassStruct[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new ClassStruct() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static ClassStruct[] read(global::Ice.InputStream istr)
        {
            ClassStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(9);
                v = new ClassStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new ClassStruct();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntStringDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, string> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, string> r = new global::System.Collections.Generic.Dictionary<int, string>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongLongDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<long, long> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<long, long> e in v)
                {
                    ostr.writeLong(e.Key);
                    ostr.writeLong(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, long> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<long, long> r = new global::System.Collections.Generic.Dictionary<long, long>();
            for(int i = 0; i < sz; ++i)
            {
                long k;
                k = istr.readLong();
                long v;
                v = istr.readLong();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringIntDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, int> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        #region Synchronous operations

        public double[] opDoubleArray(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDoubleArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolArray(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteArray(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Variable[] opVariableArray(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVariableArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolRange(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolRangeAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteRange(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteRangeAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Variable[] opVariableRange(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVariableRangeAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteRangeType(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteRangeTypeAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Variable[] opVariableRangeType(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVariableRangeTypeAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolList(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteList(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opMyByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string opString(string inString, out string outString, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringAsync(inString, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outString = result_.outString;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringList(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public @Fixed[] opFixedSeq(@Fixed[] inSeq, out @Fixed[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFixedSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public @Fixed[] opFixedList(@Fixed[] inSeq, out @Fixed[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFixedListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Variable[] opVariableSeq(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVariableSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Variable[] opVariableList(Variable[] inSeq, out Variable[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVariableListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringStringDictSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, out global::System.Collections.Generic.Dictionary<string, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringStringDictListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opESeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public E[] opEList(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opEListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public DPrx[] opDPrxSeq(DPrx[] inSeq, out DPrx[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDPrxSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public DPrx[] opDPrxList(DPrx[] inSeq, out DPrx[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDPrxListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ClassStruct opClassStruct(ClassStruct inS, ClassStruct[] inSeq, out ClassStruct outS, out ClassStruct[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opClassStructAsync(inS, inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outS = result_.outS;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opOutArrayByteSeq(byte[] org, out byte[] copy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                copy = _iceI_opOutArrayByteSeqAsync(org, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opOutRangeByteSeq(byte[] org, out byte[] copy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                copy = _iceI_opOutRangeByteSeqAsync(org, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string> opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntStringDictAsync(idict, context, null, global::System.Threading.CancellationToken.None, true).Result;
                odict = result_.odict;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long> opVarDict(global::System.Collections.Generic.Dictionary<string, int> idict, out global::System.Collections.Generic.Dictionary<string, int> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opVarDictAsync(idict, context, null, global::System.Threading.CancellationToken.None, true).Result;
                odict = result_.odict;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string> opCustomIntStringDict(global::System.Collections.Generic.Dictionary<int, string> idict, out global::System.Collections.Generic.Dictionary<int, string> odict, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCustomIntStringDictAsync(idict, context, null, global::System.Threading.CancellationToken.None, true).Result;
                odict = result_.odict;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opShortBuffer(short[] inS, out short[] outS, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortBufferAsync(inS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outS = result_.outS;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolBuffer(bool[] inS, out bool[] outS, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolBufferAsync(inS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outS = result_.outS;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public BufferStruct opBufferStruct(BufferStruct s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opBufferStructAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDoubleArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> _iceI_opDoubleArrayAsync(double[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleArray_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDoubleArrayResult>(progress, cancel);
            _iceI_opDoubleArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleArray_name = "opDoubleArray";

        private void _iceI_opDoubleArray(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleArrayResult>(completed);
            outAsync.invoke(
                _opDoubleArray_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DoubleSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDoubleArrayResult ret = new TestIntf_OpDoubleArrayResult();
                    ret.outSeq = DoubleSeqHelper.read(istr);
                    ret.returnValue = DoubleSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> _iceI_opBoolArrayAsync(bool[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolArray_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolArrayResult>(progress, cancel);
            _iceI_opBoolArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolArray_name = "opBoolArray";

        private void _iceI_opBoolArray(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolArrayResult>(completed);
            outAsync.invoke(
                _opBoolArray_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolArrayResult ret = new TestIntf_OpBoolArrayResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> _iceI_opByteArrayAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteArray_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteArrayResult>(progress, cancel);
            _iceI_opByteArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteArray_name = "opByteArray";

        private void _iceI_opByteArray(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteArrayResult>(completed);
            outAsync.invoke(
                _opByteArray_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteArrayResult ret = new TestIntf_OpByteArrayResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVariableArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> _iceI_opVariableArrayAsync(Variable[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableArray_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVariableArrayResult>(progress, cancel);
            _iceI_opVariableArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableArray_name = "opVariableArray";

        private void _iceI_opVariableArray(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableArrayResult>(completed);
            outAsync.invoke(
                _opVariableArray_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVariableArrayResult ret = new TestIntf_OpVariableArrayResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolRangeResult> opBoolRangeAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolRangeAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolRangeResult> _iceI_opBoolRangeAsync(bool[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolRange_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolRangeResult>(progress, cancel);
            _iceI_opBoolRange(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolRange_name = "opBoolRange";

        private void _iceI_opBoolRange(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolRangeResult>(completed);
            outAsync.invoke(
                _opBoolRange_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolRangeResult ret = new TestIntf_OpBoolRangeResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteRangeResult> opByteRangeAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteRangeAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteRangeResult> _iceI_opByteRangeAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteRange_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteRangeResult>(progress, cancel);
            _iceI_opByteRange(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteRange_name = "opByteRange";

        private void _iceI_opByteRange(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteRangeResult>(completed);
            outAsync.invoke(
                _opByteRange_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteRangeResult ret = new TestIntf_OpByteRangeResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVariableRangeAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeResult> _iceI_opVariableRangeAsync(Variable[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableRange_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVariableRangeResult>(progress, cancel);
            _iceI_opVariableRange(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableRange_name = "opVariableRange";

        private void _iceI_opVariableRange(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableRangeResult>(completed);
            outAsync.invoke(
                _opVariableRange_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVariableRangeResult ret = new TestIntf_OpVariableRangeResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteRangeTypeAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteRangeTypeResult> _iceI_opByteRangeTypeAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteRangeType_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteRangeTypeResult>(progress, cancel);
            _iceI_opByteRangeType(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteRangeType_name = "opByteRangeType";

        private void _iceI_opByteRangeType(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteRangeTypeResult>(completed);
            outAsync.invoke(
                _opByteRangeType_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteRangeTypeResult ret = new TestIntf_OpByteRangeTypeResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVariableRangeTypeAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeTypeResult> _iceI_opVariableRangeTypeAsync(Variable[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableRangeType_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVariableRangeTypeResult>(progress, cancel);
            _iceI_opVariableRangeType(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableRangeType_name = "opVariableRangeType";

        private void _iceI_opVariableRangeType(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableRangeTypeResult>(completed);
            outAsync.invoke(
                _opVariableRangeType_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVariableRangeTypeResult ret = new TestIntf_OpVariableRangeTypeResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolSeqResult ret = new TestIntf_OpBoolSeqResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> _iceI_opBoolListAsync(bool[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolListResult>(progress, cancel);
            _iceI_opBoolList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolList_name = "opBoolList";

        private void _iceI_opBoolList(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolListResult>(completed);
            outAsync.invoke(
                _opBoolList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolListResult ret = new TestIntf_OpBoolListResult();
                    ret.outSeq = BoolListHelper.read(istr);
                    ret.returnValue = BoolListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteSeqResult ret = new TestIntf_OpByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> _iceI_opByteListAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteListResult>(progress, cancel);
            _iceI_opByteList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList_name = "opByteList";

        private void _iceI_opByteList(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteListResult>(completed);
            outAsync.invoke(
                _opByteList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteListResult ret = new TestIntf_OpByteListResult();
                    ret.outSeq = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> _iceI_opMyByteSeqAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpMyByteSeqResult>(progress, cancel);
            _iceI_opMyByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyByteSeq_name = "opMyByteSeq";

        private void _iceI_opMyByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpMyByteSeqResult>(completed);
            outAsync.invoke(
                _opMyByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpMyByteSeqResult ret = new TestIntf_OpMyByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringResult> opStringAsync(string inString, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringAsync(inString, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringResult> _iceI_opStringAsync(string iceP_inString, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_inString, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_inString, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_inString);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringResult ret = new TestIntf_OpStringResult();
                    ret.outString = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> _iceI_opStringSeqAsync(string[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringSeqResult>(progress, cancel);
            _iceI_opStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeq_name = "opStringSeq";

        private void _iceI_opStringSeq(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqResult>(completed);
            outAsync.invoke(
                _opStringSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringSeqResult ret = new TestIntf_OpStringSeqResult();
                    ret.outSeq = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> _iceI_opStringListAsync(string[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringListResult>(progress, cancel);
            _iceI_opStringList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList_name = "opStringList";

        private void _iceI_opStringList(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringListResult>(completed);
            outAsync.invoke(
                _opStringList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringListResult ret = new TestIntf_OpStringListResult();
                    ret.outSeq = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFixedSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> _iceI_opFixedSeqAsync(@Fixed[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpFixedSeqResult>(progress, cancel);
            _iceI_opFixedSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedSeq_name = "opFixedSeq";

        private void _iceI_opFixedSeq(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFixedSeqResult>(completed);
            outAsync.invoke(
                _opFixedSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FixedSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpFixedSeqResult ret = new TestIntf_OpFixedSeqResult();
                    ret.outSeq = FixedSeqHelper.read(istr);
                    ret.returnValue = FixedSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFixedListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> _iceI_opFixedListAsync(@Fixed[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpFixedListResult>(progress, cancel);
            _iceI_opFixedList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedList_name = "opFixedList";

        private void _iceI_opFixedList(@Fixed[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFixedListResult>(completed);
            outAsync.invoke(
                _opFixedList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FixedListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpFixedListResult ret = new TestIntf_OpFixedListResult();
                    ret.outSeq = FixedListHelper.read(istr);
                    ret.returnValue = FixedListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVariableSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> _iceI_opVariableSeqAsync(Variable[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVariableSeqResult>(progress, cancel);
            _iceI_opVariableSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableSeq_name = "opVariableSeq";

        private void _iceI_opVariableSeq(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableSeqResult>(completed);
            outAsync.invoke(
                _opVariableSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    VariableSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVariableSeqResult ret = new TestIntf_OpVariableSeqResult();
                    ret.outSeq = VariableSeqHelper.read(istr);
                    ret.returnValue = VariableSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVariableListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> _iceI_opVariableListAsync(Variable[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVariableList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVariableListResult>(progress, cancel);
            _iceI_opVariableList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVariableList_name = "opVariableList";

        private void _iceI_opVariableList(Variable[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVariableListResult>(completed);
            outAsync.invoke(
                _opVariableList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    VariableListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVariableListResult ret = new TestIntf_OpVariableListResult();
                    ret.outSeq = VariableListHelper.read(istr);
                    ret.returnValue = VariableListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringStringDictSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> _iceI_opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDictSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringStringDictSeqResult>(progress, cancel);
            _iceI_opStringStringDictSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDictSeq_name = "opStringStringDictSeq";

        private void _iceI_opStringStringDictSeq(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringStringDictSeqResult>(completed);
            outAsync.invoke(
                _opStringStringDictSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringStringDictSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringStringDictSeqResult ret = new TestIntf_OpStringStringDictSeqResult();
                    ret.outSeq = StringStringDictSeqHelper.read(istr);
                    ret.returnValue = StringStringDictSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringStringDictListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> _iceI_opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDictList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringStringDictListResult>(progress, cancel);
            _iceI_opStringStringDictList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDictList_name = "opStringStringDictList";

        private void _iceI_opStringStringDictList(global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringStringDictListResult>(completed);
            outAsync.invoke(
                _opStringStringDictList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringStringDictListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringStringDictListResult ret = new TestIntf_OpStringStringDictListResult();
                    ret.outSeq = StringStringDictListHelper.read(istr);
                    ret.returnValue = StringStringDictListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opESeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> _iceI_opESeqAsync(E[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opESeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpESeqResult>(progress, cancel);
            _iceI_opESeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opESeq_name = "opESeq";

        private void _iceI_opESeq(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpESeqResult>(completed);
            outAsync.invoke(
                _opESeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ESeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpESeqResult ret = new TestIntf_OpESeqResult();
                    ret.outSeq = ESeqHelper.read(istr);
                    ret.returnValue = ESeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opEListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpEListResult> _iceI_opEListAsync(E[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opEList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpEListResult>(progress, cancel);
            _iceI_opEList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opEList_name = "opEList";

        private void _iceI_opEList(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpEListResult>(completed);
            outAsync.invoke(
                _opEList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    EListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpEListResult ret = new TestIntf_OpEListResult();
                    ret.outSeq = EListHelper.read(istr);
                    ret.returnValue = EListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDPrxSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> _iceI_opDPrxSeqAsync(DPrx[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDPrxSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDPrxSeqResult>(progress, cancel);
            _iceI_opDPrxSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDPrxSeq_name = "opDPrxSeq";

        private void _iceI_opDPrxSeq(DPrx[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDPrxSeqResult>(completed);
            outAsync.invoke(
                _opDPrxSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DPrxSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDPrxSeqResult ret = new TestIntf_OpDPrxSeqResult();
                    ret.outSeq = DPrxSeqHelper.read(istr);
                    ret.returnValue = DPrxSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDPrxListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> _iceI_opDPrxListAsync(DPrx[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDPrxList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDPrxListResult>(progress, cancel);
            _iceI_opDPrxList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDPrxList_name = "opDPrxList";

        private void _iceI_opDPrxList(DPrx[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDPrxListResult>(completed);
            outAsync.invoke(
                _opDPrxList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DPrxListHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDPrxListResult ret = new TestIntf_OpDPrxListResult();
                    ret.outSeq = DPrxListHelper.read(istr);
                    ret.returnValue = DPrxListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> _iceI_opCSeqAsync(C[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCSeqResult>(progress, cancel);
            _iceI_opCSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCSeq_name = "opCSeq";

        private void _iceI_opCSeq(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCSeqResult>(completed);
            outAsync.invoke(
                _opCSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CSeqHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCSeqResult ret = new TestIntf_OpCSeqResult();
                    ret.outSeq = CSeqHelper.read(istr);
                    ret.returnValue = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCListResult> _iceI_opCListAsync(C[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCListResult>(progress, cancel);
            _iceI_opCList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCList_name = "opCList";

        private void _iceI_opCList(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCListResult>(completed);
            outAsync.invoke(
                _opCList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CListHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCListResult ret = new TestIntf_OpCListResult();
                    ret.outSeq = CListHelper.read(istr);
                    ret.returnValue = CListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opClassStructAsync(inS, inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpClassStructResult> _iceI_opClassStructAsync(ClassStruct iceP_inS, ClassStruct[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opClassStruct_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpClassStructResult>(progress, cancel);
            _iceI_opClassStruct(iceP_inS, iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opClassStruct_name = "opClassStruct";

        private void _iceI_opClassStruct(ClassStruct iceP_inS, ClassStruct[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpClassStructResult>(completed);
            outAsync.invoke(
                _opClassStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ClassStruct.ice_write(ostr, iceP_inS);
                    ClassStructSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpClassStructResult ret = new TestIntf_OpClassStructResult();
                    ret.outS = ClassStruct.ice_read(istr);
                    ret.outSeq = ClassStructSeqHelper.read(istr);
                    ret.returnValue = ClassStruct.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opOutArrayByteSeqAsync(org, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_opOutArrayByteSeqAsync(byte[] iceP_org, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOutArrayByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_opOutArrayByteSeq(iceP_org, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOutArrayByteSeq_name = "opOutArrayByteSeq";

        private void _iceI_opOutArrayByteSeq(byte[] iceP_org, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _opOutArrayByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_org);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] iceP_copy;
                    iceP_copy = ByteSeqHelper.read(istr);
                    return iceP_copy;
                });
        }

        public global::System.Threading.Tasks.Task<byte[]> opOutRangeByteSeqAsync(byte[] org, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opOutRangeByteSeqAsync(org, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_opOutRangeByteSeqAsync(byte[] iceP_org, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOutRangeByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_opOutRangeByteSeq(iceP_org, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOutRangeByteSeq_name = "opOutRangeByteSeq";

        private void _iceI_opOutRangeByteSeq(byte[] iceP_org, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _opOutRangeByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_org);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] iceP_copy;
                    iceP_copy = ByteSeqHelper.read(istr);
                    return iceP_copy;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntStringDictAsync(idict, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> _iceI_opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntStringDict_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpIntStringDictResult>(progress, cancel);
            _iceI_opIntStringDict(iceP_idict, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntStringDict_name = "opIntStringDict";

        private void _iceI_opIntStringDict(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntStringDictResult>(completed);
            outAsync.invoke(
                _opIntStringDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntStringDictHelper.write(ostr, iceP_idict);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpIntStringDictResult ret = new TestIntf_OpIntStringDictResult();
                    ret.odict = IntStringDictHelper.read(istr);
                    ret.returnValue = IntStringDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVarDictAsync(idict, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> _iceI_opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> iceP_idict, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarDict_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpVarDictResult>(progress, cancel);
            _iceI_opVarDict(iceP_idict, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarDict_name = "opVarDict";

        private void _iceI_opVarDict(global::System.Collections.Generic.Dictionary<string, int> iceP_idict, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpVarDictResult>(completed);
            outAsync.invoke(
                _opVarDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringIntDictHelper.write(ostr, iceP_idict);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpVarDictResult ret = new TestIntf_OpVarDictResult();
                    ret.odict = StringIntDictHelper.read(istr);
                    ret.returnValue = LongLongDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCustomIntStringDictResult> opCustomIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCustomIntStringDictAsync(idict, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCustomIntStringDictResult> _iceI_opCustomIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCustomIntStringDict_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCustomIntStringDictResult>(progress, cancel);
            _iceI_opCustomIntStringDict(iceP_idict, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCustomIntStringDict_name = "opCustomIntStringDict";

        private void _iceI_opCustomIntStringDict(global::System.Collections.Generic.Dictionary<int, string> iceP_idict, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCustomIntStringDictResult>(completed);
            outAsync.invoke(
                _opCustomIntStringDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntStringDictHelper.write(ostr, iceP_idict);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCustomIntStringDictResult ret = new TestIntf_OpCustomIntStringDictResult();
                    ret.odict = IntStringDictHelper.read(istr);
                    ret.returnValue = IntStringDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortBufferAsync(inS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> _iceI_opShortBufferAsync(short[] iceP_inS, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortBuffer_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpShortBufferResult>(progress, cancel);
            _iceI_opShortBuffer(iceP_inS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortBuffer_name = "opShortBuffer";

        private void _iceI_opShortBuffer(short[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortBufferResult>(completed);
            outAsync.invoke(
                _opShortBuffer_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortBufferHelper.write(ostr, iceP_inS);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortBufferResult ret = new TestIntf_OpShortBufferResult();
                    ret.outS = ShortBufferHelper.read(istr);
                    ret.returnValue = ShortBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolBufferAsync(inS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> _iceI_opBoolBufferAsync(bool[] iceP_inS, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBuffer_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolBufferResult>(progress, cancel);
            _iceI_opBoolBuffer(iceP_inS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBuffer_name = "opBoolBuffer";

        private void _iceI_opBoolBuffer(bool[] iceP_inS, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolBufferResult>(completed);
            outAsync.invoke(
                _opBoolBuffer_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inS);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolBufferResult ret = new TestIntf_OpBoolBufferResult();
                    ret.outS = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBufferStructAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<BufferStruct> _iceI_opBufferStructAsync(BufferStruct iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBufferStruct_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<BufferStruct>(progress, cancel);
            _iceI_opBufferStruct(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBufferStruct_name = "opBufferStruct";

        private void _iceI_opBufferStruct(BufferStruct iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<BufferStruct>(completed);
            outAsync.invoke(
                _opBufferStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BufferStruct.ice_write(ostr, iceP_s);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    BufferStruct ret = null;
                    ret = BufferStruct.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if(r == null)
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestIntfPrxHelper h = new TestIntfPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestIntfPrxHelper result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class DDisp_ : global::Ice.ObjectImpl, D
    {
        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::D"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::D";
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDoubleArrayResult> opDoubleArrayAsync(double[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolArrayResult> opBoolArrayAsync(bool[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteArrayResult> opByteArrayAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableArrayResult> opVariableArrayAsync(Variable[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolRangeResult> opBoolRangeAsync(bool[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteRangeResult> opByteRangeAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeResult> opVariableRangeAsync(Variable[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteRangeTypeResult> opByteRangeTypeAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableRangeTypeResult> opVariableRangeTypeAsync(Variable[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolListResult> opBoolListAsync(bool[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteListResult> opByteListAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpMyByteSeqResult> opMyByteSeqAsync(byte[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringResult> opStringAsync(string inString, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringListResult> opStringListAsync(string[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpFixedSeqResult> opFixedSeqAsync(@Fixed[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpFixedListResult> opFixedListAsync(@Fixed[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableSeqResult> opVariableSeqAsync(Variable[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVariableListResult> opVariableListAsync(Variable[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictSeqResult> opStringStringDictSeqAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringStringDictListResult> opStringStringDictListAsync(global::System.Collections.Generic.Dictionary<string, string>[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpEListResult> opEListAsync(E[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDPrxSeqResult> opDPrxSeqAsync(DPrx[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpDPrxListResult> opDPrxListAsync(DPrx[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpClassStructResult> opClassStructAsync(ClassStruct inS, ClassStruct[] inSeq, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<byte[]> opOutArrayByteSeqAsync(byte[] org, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<byte[]> opOutRangeByteSeqAsync(byte[] org, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpIntStringDictResult> opIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpVarDictResult> opVarDictAsync(global::System.Collections.Generic.Dictionary<string, int> idict, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpCustomIntStringDictResult> opCustomIntStringDictAsync(global::System.Collections.Generic.Dictionary<int, string> idict, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpShortBufferResult> opShortBufferAsync(short[] inS, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpBoolBufferResult> opBoolBufferAsync(bool[] inS, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<BufferStruct> opBufferStructAsync(BufferStruct s, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::TestIntf";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleArray(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpDoubleArrayResult>(obj.opDoubleArrayAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    DoubleSeqHelper.write(ostr, ret.outSeq);
                    DoubleSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolArray(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpBoolArrayResult>(obj.opBoolArrayAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outSeq);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteArray(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteArrayResult>(obj.opByteArrayAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVariableArray(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVariableArrayResult>(obj.opVariableArrayAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolRange(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpBoolRangeResult>(obj.opBoolRangeAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outSeq);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteRange(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteRangeResult>(obj.opByteRangeAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVariableRange(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVariableRangeResult>(obj.opVariableRangeAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteRangeType(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteRangeTypeResult>(obj.opByteRangeTypeAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVariableRangeType(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVariableRangeTypeResult>(obj.opVariableRangeTypeAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpBoolSeqResult>(obj.opBoolSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outSeq);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpBoolListResult>(obj.opBoolListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    BoolListHelper.write(ostr, ret.outSeq);
                    BoolListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteSeqResult>(obj.opByteSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.outSeq);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteListResult>(obj.opByteListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteListHelper.write(ostr, ret.outSeq);
                    ByteListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMyByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpMyByteSeqResult>(obj.opMyByteSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.outSeq);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opString(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_inString;
            iceP_inString = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringResult>(obj.opStringAsync(iceP_inString, current),
                (ostr, ret) =>
                {
                    ostr.writeString(ret.outString);
                    ostr.writeString(ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_inSeq;
            iceP_inSeq = StringSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringSeqResult>(obj.opStringSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    StringSeqHelper.write(ostr, ret.outSeq);
                    StringSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_inSeq;
            iceP_inSeq = StringListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringListResult>(obj.opStringListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    StringListHelper.write(ostr, ret.outSeq);
                    StringListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @Fixed[] iceP_inSeq;
            iceP_inSeq = FixedSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpFixedSeqResult>(obj.opFixedSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    FixedSeqHelper.write(ostr, ret.outSeq);
                    FixedSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @Fixed[] iceP_inSeq;
            iceP_inSeq = FixedListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpFixedListResult>(obj.opFixedListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    FixedListHelper.write(ostr, ret.outSeq);
                    FixedListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVariableSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVariableSeqResult>(obj.opVariableSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    VariableSeqHelper.write(ostr, ret.outSeq);
                    VariableSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVariableList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Variable[] iceP_inSeq;
            iceP_inSeq = VariableListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVariableListResult>(obj.opVariableListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    VariableListHelper.write(ostr, ret.outSeq);
                    VariableListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringStringDictSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq;
            iceP_inSeq = StringStringDictSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringStringDictSeqResult>(obj.opStringStringDictSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    StringStringDictSeqHelper.write(ostr, ret.outSeq);
                    StringStringDictSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringStringDictList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_inSeq;
            iceP_inSeq = StringStringDictListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringStringDictListResult>(obj.opStringStringDictListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    StringStringDictListHelper.write(ostr, ret.outSeq);
                    StringStringDictListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opESeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            E[] iceP_inSeq;
            iceP_inSeq = ESeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpESeqResult>(obj.opESeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ESeqHelper.write(ostr, ret.outSeq);
                    ESeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opEList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            E[] iceP_inSeq;
            iceP_inSeq = EListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpEListResult>(obj.opEListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    EListHelper.write(ostr, ret.outSeq);
                    EListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDPrxSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            DPrx[] iceP_inSeq;
            iceP_inSeq = DPrxSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpDPrxSeqResult>(obj.opDPrxSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    DPrxSeqHelper.write(ostr, ret.outSeq);
                    DPrxSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDPrxList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            DPrx[] iceP_inSeq;
            iceP_inSeq = DPrxListHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpDPrxListResult>(obj.opDPrxListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    DPrxListHelper.write(ostr, ret.outSeq);
                    DPrxListHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_inSeq;
            iceP_inSeq = CSeqHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpCSeqResult>(obj.opCSeqAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    CSeqHelper.write(ostr, ret.outSeq);
                    CSeqHelper.write(ostr, ret.returnValue);
                    ostr.writePendingValues();
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_inSeq;
            iceP_inSeq = CListHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpCListResult>(obj.opCListAsync(iceP_inSeq, current),
                (ostr, ret) =>
                {
                    CListHelper.write(ostr, ret.outSeq);
                    CListHelper.write(ostr, ret.returnValue);
                    ostr.writePendingValues();
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opClassStruct(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ClassStruct iceP_inS;
            iceP_inS = null;
            ClassStruct[] iceP_inSeq;
            iceP_inS = ClassStruct.ice_read(istr);
            iceP_inSeq = ClassStructSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpClassStructResult>(obj.opClassStructAsync(iceP_inS, iceP_inSeq, current),
                (ostr, ret) =>
                {
                    ClassStruct.ice_write(ostr, ret.outS);
                    ClassStructSeqHelper.write(ostr, ret.outSeq);
                    ClassStruct.ice_write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOutArrayByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_org;
            iceP_org = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<byte[]>(obj.opOutArrayByteSeqAsync(iceP_org, current),
                (ostr, iceP_copy) =>
                {
                    ByteSeqHelper.write(ostr, iceP_copy);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOutRangeByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_org;
            iceP_org = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<byte[]>(obj.opOutRangeByteSeqAsync(iceP_org, current),
                (ostr, iceP_copy) =>
                {
                    ByteSeqHelper.write(ostr, iceP_copy);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntStringDict(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, string> iceP_idict;
            iceP_idict = IntStringDictHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpIntStringDictResult>(obj.opIntStringDictAsync(iceP_idict, current),
                (ostr, ret) =>
                {
                    IntStringDictHelper.write(ostr, ret.odict);
                    IntStringDictHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVarDict(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, int> iceP_idict;
            iceP_idict = StringIntDictHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpVarDictResult>(obj.opVarDictAsync(iceP_idict, current),
                (ostr, ret) =>
                {
                    StringIntDictHelper.write(ostr, ret.odict);
                    LongLongDictHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCustomIntStringDict(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, string> iceP_idict;
            iceP_idict = IntStringDictHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpCustomIntStringDictResult>(obj.opCustomIntStringDictAsync(iceP_idict, current),
                (ostr, ret) =>
                {
                    IntStringDictHelper.write(ostr, ret.odict);
                    IntStringDictHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortBuffer(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_inS;
            iceP_inS = ShortBufferHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpShortBufferResult>(obj.opShortBufferAsync(iceP_inS, current),
                (ostr, ret) =>
                {
                    ShortBufferHelper.write(ostr, ret.outS);
                    ShortBufferHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolBuffer(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inS;
            iceP_inS = BoolSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpBoolBufferResult>(obj.opBoolBufferAsync(iceP_inS, current),
                (ostr, ret) =>
                {
                    BoolSeqHelper.write(ostr, ret.outS);
                    BoolSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBufferStruct(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            BufferStruct iceP_s;
            iceP_s = null;
            iceP_s = BufferStruct.ice_read(istr);
            inS.endReadParams();
            return inS.setResultTask<BufferStruct>(obj.opBufferStructAsync(iceP_s, current),
                (ostr, ret) =>
                {
                    BufferStruct.ice_write(ostr, ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.shutdownAsync(current));
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBoolArray",
            "opBoolBuffer",
            "opBoolList",
            "opBoolRange",
            "opBoolSeq",
            "opBufferStruct",
            "opByteArray",
            "opByteList",
            "opByteRange",
            "opByteRangeType",
            "opByteSeq",
            "opCList",
            "opCSeq",
            "opClassStruct",
            "opCustomIntStringDict",
            "opDPrxList",
            "opDPrxSeq",
            "opDoubleArray",
            "opEList",
            "opESeq",
            "opFixedList",
            "opFixedSeq",
            "opIntStringDict",
            "opMyByteSeq",
            "opOutArrayByteSeq",
            "opOutRangeByteSeq",
            "opShortBuffer",
            "opString",
            "opStringList",
            "opStringSeq",
            "opStringStringDictList",
            "opStringStringDictSeq",
            "opVarDict",
            "opVariableArray",
            "opVariableList",
            "opVariableRange",
            "opVariableRangeType",
            "opVariableSeq",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opBoolArray(this, inS, current);
                }
                case 5:
                {
                    return iceD_opBoolBuffer(this, inS, current);
                }
                case 6:
                {
                    return iceD_opBoolList(this, inS, current);
                }
                case 7:
                {
                    return iceD_opBoolRange(this, inS, current);
                }
                case 8:
                {
                    return iceD_opBoolSeq(this, inS, current);
                }
                case 9:
                {
                    return iceD_opBufferStruct(this, inS, current);
                }
                case 10:
                {
                    return iceD_opByteArray(this, inS, current);
                }
                case 11:
                {
                    return iceD_opByteList(this, inS, current);
                }
                case 12:
                {
                    return iceD_opByteRange(this, inS, current);
                }
                case 13:
                {
                    return iceD_opByteRangeType(this, inS, current);
                }
                case 14:
                {
                    return iceD_opByteSeq(this, inS, current);
                }
                case 15:
                {
                    return iceD_opCList(this, inS, current);
                }
                case 16:
                {
                    return iceD_opCSeq(this, inS, current);
                }
                case 17:
                {
                    return iceD_opClassStruct(this, inS, current);
                }
                case 18:
                {
                    return iceD_opCustomIntStringDict(this, inS, current);
                }
                case 19:
                {
                    return iceD_opDPrxList(this, inS, current);
                }
                case 20:
                {
                    return iceD_opDPrxSeq(this, inS, current);
                }
                case 21:
                {
                    return iceD_opDoubleArray(this, inS, current);
                }
                case 22:
                {
                    return iceD_opEList(this, inS, current);
                }
                case 23:
                {
                    return iceD_opESeq(this, inS, current);
                }
                case 24:
                {
                    return iceD_opFixedList(this, inS, current);
                }
                case 25:
                {
                    return iceD_opFixedSeq(this, inS, current);
                }
                case 26:
                {
                    return iceD_opIntStringDict(this, inS, current);
                }
                case 27:
                {
                    return iceD_opMyByteSeq(this, inS, current);
                }
                case 28:
                {
                    return iceD_opOutArrayByteSeq(this, inS, current);
                }
                case 29:
                {
                    return iceD_opOutRangeByteSeq(this, inS, current);
                }
                case 30:
                {
                    return iceD_opShortBuffer(this, inS, current);
                }
                case 31:
                {
                    return iceD_opString(this, inS, current);
                }
                case 32:
                {
                    return iceD_opStringList(this, inS, current);
                }
                case 33:
                {
                    return iceD_opStringSeq(this, inS, current);
                }
                case 34:
                {
                    return iceD_opStringStringDictList(this, inS, current);
                }
                case 35:
                {
                    return iceD_opStringStringDictSeq(this, inS, current);
                }
                case 36:
                {
                    return iceD_opVarDict(this, inS, current);
                }
                case 37:
                {
                    return iceD_opVariableArray(this, inS, current);
                }
                case 38:
                {
                    return iceD_opVariableList(this, inS, current);
                }
                case 39:
                {
                    return iceD_opVariableRange(this, inS, current);
                }
                case 40:
                {
                    return iceD_opVariableRangeType(this, inS, current);
                }
                case 41:
                {
                    return iceD_opVariableSeq(this, inS, current);
                }
                case 42:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
