//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct S
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int v;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S(int v)
        {
            this.v = v;
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.v);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.v = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, S v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static S ice_read(global::Ice.InputStream istr)
        {
            var v = new S();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S s;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(S s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            s.ice_writeMembers(ostr_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            s.ice_readMembers(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum E1
    {
        v1,
        v2,
        v3
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class E1Helper
    {
        public static void write(global::Ice.OutputStream ostr, E1 v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static E1 read(global::Ice.InputStream istr)
        {
            E1 v;
            v = (E1)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class S1 : global::System.ICloneable, global::System.IEquatable<S1>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s = "";

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S1(string s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Test::S1");
            global::Ice.Internal.HashUtil.hashAdd(ref h_, s);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as S1);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(S1 other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.s == other.s;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(S1 lhs, S1 rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(S1 lhs, S1 rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.s = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, S1 v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static S1 ice_read(global::Ice.InputStream istr)
        {
            var v = new S1();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly S1 _nullMarshalValue = new S1();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C1 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s = "";

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C1(string s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(s);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class S2 : global::System.ICloneable, global::System.IEquatable<S2>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E1 E1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S1 S1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C1 C1;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S2()
        {
            this.S1 = new();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S2(E1 E1, S1 S1, C1 C1)
        {
            this.E1 = E1;
            this.S1 = S1;
            this.C1 = C1;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Test::S2");
            global::Ice.Internal.HashUtil.hashAdd(ref h_, E1);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, S1);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, C1);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as S2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(S2 other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.E1 == other.E1 && 
                this.S1 == other.S1 && 
                this.C1 == other.C1;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(S2 lhs, S2 rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(S2 lhs, S2 rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeEnum((int)this.E1, 2);
            S1.ice_write(ostr, this.S1);
            ostr.writeValue(this.C1);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.E1 = (E1)istr.readEnum(2);
            this.S1 = S1.ice_read(istr);
            istr.readValue((C1 v) => { this.C1 = v; });
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, S2 v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static S2 ice_read(global::Ice.InputStream istr)
        {
            var v = new S2();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly S2 _nullMarshalValue = new S2();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C2 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E1 E1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S1 S1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C1 C1;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C2()
        {
            this.S1 = new();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C2(E1 E1, S1 S1, C1 C1)
        {
            this.E1 = E1;
            this.S1 = S1;
            this.C1 = C1;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C2";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeEnum((int)E1, 2);
            S1.ice_write(ostr_, S1);
            ostr_.writeValue(C1);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            E1 = (E1)istr_.readEnum(2);
            S1 = S1.ice_read(istr_);
            istr_.readValue((C1 v) => { this.C1 = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface I : global::Ice.Object, IOperations_
    {
    }

    namespace Inner
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial record struct S
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int v;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S(int v)
            {
                this.v = v;
                ice_initialize();
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.v);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.v = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static S ice_read(global::Ice.InputStream istr)
            {
                var v = new S();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        namespace Inner2
        {
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial record struct S
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public int v;

                #endregion

                partial void ice_initialize();

                #region Constructor

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public S(int v)
                {
                    this.v = v;
                    ice_initialize();
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeInt(this.v);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.v = istr.readInt();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static void ice_write(global::Ice.OutputStream ostr, S v)
                {
                    v.ice_writeMembers(ostr);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static S ice_read(global::Ice.InputStream istr)
                {
                    var v = new S();
                    v.ice_readMembers(istr);
                    return v;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class C : global::Ice.Value
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public S s;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public C()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public C(S s)
                {
                    this.s = s;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Test::Inner::Inner2::C";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    s.ice_writeMembers(ostr_);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    s.ice_readMembers(istr_);
                    istr_.endSlice();
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface I : global::Ice.Object, IOperations_
            {
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class C : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S s;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C(S s)
            {
                this.s = s;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::Inner::C";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                s.ice_writeMembers(ostr_);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                s.ice_readMembers(istr_);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface I : global::Ice.Object, IOperations_
        {
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface I : global::Ice.Object, IOperations_
            {
            }
        }
    }
}

namespace Test
{
    public struct I_OpSResult
    {
        public I_OpSResult(S returnValue, S s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public S returnValue;
        public S s2;
    }

    public struct I_OpSSeqResult
    {
        public I_OpSSeqResult(S[] returnValue, S[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public S[] returnValue;
        public S[] s2;
    }

    public struct I_OpSMapResult
    {
        public I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public global::System.Collections.Generic.Dictionary<string, S> returnValue;
        public global::System.Collections.Generic.Dictionary<string, S> s2;
    }

    public struct I_OpCResult
    {
        public I_OpCResult(C returnValue, C c2)
        {
            this.returnValue = returnValue;
            this.c2 = c2;
        }

        public C returnValue;
        public C c2;
    }

    public struct I_OpCSeqResult
    {
        public I_OpCSeqResult(C[] returnValue, C[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public C[] returnValue;
        public C[] s2;
    }

    public struct I_OpCMapResult
    {
        public I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C> returnValue, global::System.Collections.Generic.Dictionary<string, C> c2)
        {
            this.returnValue = returnValue;
            this.c2 = c2;
        }

        public global::System.Collections.Generic.Dictionary<string, C> returnValue;
        public global::System.Collections.Generic.Dictionary<string, C> c2;
    }

    namespace Inner
    {
        namespace Inner2
        {
            public struct I_OpSResult
            {
                public I_OpSResult(S returnValue, S s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public S returnValue;
                public S s2;
            }

            public struct I_OpSSeqResult
            {
                public I_OpSSeqResult(S[] returnValue, S[] s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public S[] returnValue;
                public S[] s2;
            }

            public struct I_OpSMapResult
            {
                public I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public global::System.Collections.Generic.Dictionary<string, S> returnValue;
                public global::System.Collections.Generic.Dictionary<string, S> s2;
            }

            public struct I_OpCResult
            {
                public I_OpCResult(C returnValue, C c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public C returnValue;
                public C c2;
            }

            public struct I_OpCSeqResult
            {
                public I_OpCSeqResult(C[] returnValue, C[] c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public C[] returnValue;
                public C[] c2;
            }

            public struct I_OpCMapResult
            {
                public I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C> returnValue, global::System.Collections.Generic.Dictionary<string, C> c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public global::System.Collections.Generic.Dictionary<string, C> returnValue;
                public global::System.Collections.Generic.Dictionary<string, C> c2;
            }
        }

        public struct I_OpSResult
        {
            public I_OpSResult(global::Test.Inner.Inner2.S returnValue, global::Test.Inner.Inner2.S s2)
            {
                this.returnValue = returnValue;
                this.s2 = s2;
            }

            public global::Test.Inner.Inner2.S returnValue;
            public global::Test.Inner.Inner2.S s2;
        }

        public struct I_OpSSeqResult
        {
            public I_OpSSeqResult(global::Test.Inner.Inner2.S[] returnValue, global::Test.Inner.Inner2.S[] s2)
            {
                this.returnValue = returnValue;
                this.s2 = s2;
            }

            public global::Test.Inner.Inner2.S[] returnValue;
            public global::Test.Inner.Inner2.S[] s2;
        }

        public struct I_OpSMapResult
        {
            public I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2)
            {
                this.returnValue = returnValue;
                this.s2 = s2;
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> returnValue;
            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2;
        }

        public struct I_OpCResult
        {
            public I_OpCResult(global::Test.Inner.Inner2.C returnValue, global::Test.Inner.Inner2.C c2)
            {
                this.returnValue = returnValue;
                this.c2 = c2;
            }

            public global::Test.Inner.Inner2.C returnValue;
            public global::Test.Inner.Inner2.C c2;
        }

        public struct I_OpCSeqResult
        {
            public I_OpCSeqResult(global::Test.Inner.Inner2.C[] returnValue, global::Test.Inner.Inner2.C[] c2)
            {
                this.returnValue = returnValue;
                this.c2 = c2;
            }

            public global::Test.Inner.Inner2.C[] returnValue;
            public global::Test.Inner.Inner2.C[] c2;
        }

        public struct I_OpCMapResult
        {
            public I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2)
            {
                this.returnValue = returnValue;
                this.c2 = c2;
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> returnValue;
            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2;
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public struct I_OpSResult
            {
                public I_OpSResult(global::Test.S returnValue, global::Test.S s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public global::Test.S returnValue;
                public global::Test.S s2;
            }

            public struct I_OpSSeqResult
            {
                public I_OpSSeqResult(global::Test.S[] returnValue, global::Test.S[] s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public global::Test.S[] returnValue;
                public global::Test.S[] s2;
            }

            public struct I_OpSMapResult
            {
                public I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.S> s2)
                {
                    this.returnValue = returnValue;
                    this.s2 = s2;
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.S> returnValue;
                public global::System.Collections.Generic.Dictionary<string, global::Test.S> s2;
            }

            public struct I_OpCResult
            {
                public I_OpCResult(global::Test.C returnValue, global::Test.C c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public global::Test.C returnValue;
                public global::Test.C c2;
            }

            public struct I_OpCSeqResult
            {
                public I_OpCSeqResult(global::Test.C[] returnValue, global::Test.C[] c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public global::Test.C[] returnValue;
                public global::Test.C[] c2;
            }

            public struct I_OpCMapResult
            {
                public I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.C> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.C> c2)
                {
                    this.returnValue = returnValue;
                    this.c2 = c2;
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.C> returnValue;
                public global::System.Collections.Generic.Dictionary<string, global::Test.C> c2;
            }
        }
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface IPrx : global::Ice.ObjectPrx
    {
        S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        C opC(C c1, out C c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        C[] opCSeq(C[] s1, out C[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        C1 opC1(C1 C1, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<C1> opC1Async(C1 C1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    namespace Inner
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IPrx : global::Ice.ObjectPrx
            {
                S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                C opC(C c1, out C c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                C[] opCSeq(C[] c1, out C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface IPrx : global::Ice.ObjectPrx
        {
            global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.C opC(global::Test.Inner.Inner2.C c1, out global::Test.Inner.Inner2.C c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.Inner.Inner2.C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.C[] opCSeq(global::Test.Inner.Inner2.C[] c1, out global::Test.Inner.Inner2.C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.Inner.Inner2.C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IPrx : global::Ice.ObjectPrx
            {
                global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.C opC(global::Test.C c1, out global::Test.C c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.C[] opCSeq(global::Test.C[] c1, out global::Test.C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Test.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface IOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        S opS(S s1, out S s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        C opC(C c1, out C c2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        C[] opCSeq(C[] s1, out C[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        E1 opE1(E1 E1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        S1 opS1(S1 S1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        C1 opC1(C1 C1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }

    namespace Inner
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                S opS(S s1, out S s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                C opC(C c1, out C c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                C[] opCSeq(C[] c1, out C[] c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                void shutdown(global::Ice.Current current = null);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface IOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Test.Inner.Inner2.C opC(global::Test.Inner.Inner2.C c1, out global::Test.Inner.Inner2.C c2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Test.Inner.Inner2.C[] opCSeq(global::Test.Inner.Inner2.C[] c1, out global::Test.Inner.Inner2.C[] c2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current = null);
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Test.C opC(global::Test.C c1, out global::Test.C c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Test.C[] opCSeq(global::Test.C[] c1, out global::Test.C[] c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Test.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C> c2, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                void shutdown(global::Ice.Current current = null);
            }
        }
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SMapHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, S> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, S> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
            for(int i = 0; i < sz; ++i)
            {
                string k = default;
                k = istr.readString();
                S v = default;
                v.ice_readMembers(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, S[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S[] read(global::Ice.InputStream istr)
        {
            S[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new S[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CMapHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, C> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, C> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, C> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, C> r = new global::System.Collections.Generic.Dictionary<string, C>();
            for(int i = 0; i < sz; ++i)
            {
                string k = default;
                k = istr.readString();
                istr.readValue((C v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
    {
        public IPrxHelper()
        {
        }

        #region Synchronous operations

        public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C opC(C c1, out C c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                c2 = result_.c2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C[] opCSeq(C[] s1, out C[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opCSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                c2 = result_.c2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opE1Async(E1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opS1Async(S1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C1 opC1(C1 C1, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opC1Async(C1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
            _iceI_opS(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS_name = "opS";

        private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSResult>(completed);
            outAsync.invoke(
                _opS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_s1.ice_writeMembers(ostr);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpSResult ret = new I_OpSResult();
                    ret.s2.ice_readMembers(istr);
                    ret.returnValue.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
            _iceI_opSSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSSeq_name = "opSSeq";

        private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
            outAsync.invoke(
                _opSSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SSeqHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpSSeqResult ret = new I_OpSSeqResult();
                    ret.s2 = SSeqHelper.read(istr);
                    ret.returnValue = SSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSMapAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSMap_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
            _iceI_opSMap(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSMap_name = "opSMap";

        private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
            outAsync.invoke(
                _opSMap_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SMapHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpSMapResult ret = new I_OpSMapResult();
                    ret.s2 = SMapHelper.read(istr);
                    ret.returnValue = SMapHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCAsync(c1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opC_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
            _iceI_opC(iceP_c1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opC_name = "opC";

        private void _iceI_opC(C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCResult>(completed);
            outAsync.invoke(
                _opC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_c1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpCResult ret = new I_OpCResult();
                    istr.readValue((C v) => {ret.c2 = v; });
                    istr.readValue((C v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
            _iceI_opCSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCSeq_name = "opCSeq";

        private void _iceI_opCSeq(C[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
            outAsync.invoke(
                _opCSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CSeqHelper.write(ostr, iceP_s1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpCSeqResult ret = new I_OpCSeqResult();
                    ret.s2 = CSeqHelper.read(istr);
                    ret.returnValue = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCMapAsync(c1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCMap_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
            _iceI_opCMap(iceP_c1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCMap_name = "opCMap";

        private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
            outAsync.invoke(
                _opCMap_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CMapHelper.write(ostr, iceP_c1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    I_OpCMapResult ret = new I_OpCMapResult();
                    ret.c2 = CMapHelper.read(istr);
                    ret.returnValue = CMapHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opE1Async(E1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<E1> _iceI_opE1Async(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opE1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<E1>(progress, cancel);
            _iceI_opE1(iceP_E1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opE1_name = "opE1";

        private void _iceI_opE1(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<E1>(completed);
            outAsync.invoke(
                _opE1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_E1, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    E1 ret = default;
                    ret = (E1)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opS1Async(S1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<S1> _iceI_opS1Async(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<S1>(progress, cancel);
            _iceI_opS1(iceP_S1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS1_name = "opS1";

        private void _iceI_opS1(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<S1>(completed);
            outAsync.invoke(
                _opS1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    S1.ice_write(ostr, iceP_S1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    S1 ret = default;
                    ret = S1.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<C1> opC1Async(C1 C1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opC1Async(C1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<C1> _iceI_opC1Async(C1 iceP_C1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opC1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<C1>(progress, cancel);
            _iceI_opC1(iceP_C1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opC1_name = "opC1";

        private void _iceI_opC1(C1 iceP_C1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<C1>(completed);
            outAsync.invoke(
                _opC1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_C1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    C1 ret = default;
                    istr.readValue((C1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                IPrxHelper prx = new IPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                IPrxHelper prx = new IPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                IPrxHelper prx = new IPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I"
        };

        public static string ice_staticId() => "::Test::I";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, IPrx v)
        {
            ostr.writeProxy(v);
        }

        public static IPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                IPrxHelper result = new IPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IMapHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, IPrx> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx> e in v)
                {
                    ostr.writeString(e.Key);
                    IPrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, IPrx> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, IPrx> r = new global::System.Collections.Generic.Dictionary<string, IPrx>();
            for(int i = 0; i < sz; ++i)
            {
                string k = default;
                k = istr.readString();
                IPrx v = default;
                v = IPrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ISeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, IPrx[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    IPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static IPrx[] read(global::Ice.InputStream istr)
        {
            IPrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new IPrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = IPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    namespace Inner
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class SMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, S> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                        {
                            ostr.writeString(e.Key);
                            e.Value.ice_writeMembers(ostr);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, S> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k = default;
                        k = istr.readString();
                        S v = default;
                        v.ice_readMembers(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class SSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, S[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            v[ix].ice_writeMembers(ostr);
                        }
                    }
                }

                public static S[] read(global::Ice.InputStream istr)
                {
                    S[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(4);
                        v = new S[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix].ice_readMembers(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class CMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, C> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, C> e in v)
                        {
                            ostr.writeString(e.Key);
                            ostr.writeValue(e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, C> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, C> r = new global::System.Collections.Generic.Dictionary<string, C>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k = default;
                        k = istr.readString();
                        istr.readValue((C v) => { r[k] = v; });
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class CSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, C[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            ostr.writeValue(v[ix]);
                        }
                    }
                }

                public static C[] read(global::Ice.InputStream istr)
                {
                    C[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(1);
                        v = new C[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                        }
                    }
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
            {
                public IPrxHelper()
                {
                }

                #region Synchronous operations

                public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public C opC(C c1, out C c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public C[] opCSeq(C[] c1, out C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSResult ret = new I_OpSResult();
                            ret.s2.ice_readMembers(istr);
                            ret.returnValue.ice_readMembers(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSSeqResult ret = new I_OpSSeqResult();
                            ret.s2 = SSeqHelper.read(istr);
                            ret.returnValue = SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSMapResult ret = new I_OpSMapResult();
                            ret.s2 = SMapHelper.read(istr);
                            ret.returnValue = SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCResult ret = new I_OpCResult();
                            istr.readValue((C v) => {ret.c2 = v; });
                            istr.readValue((C v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCSeqResult ret = new I_OpCSeqResult();
                            ret.c2 = CSeqHelper.read(istr);
                            ret.returnValue = CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCMapResult ret = new I_OpCMapResult();
                            ret.c2 = CMapHelper.read(istr);
                            ret.returnValue = CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous);
                }

                #endregion

                #region Checked and unchecked cast operations

                public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
                {
                    if (b is not null && b.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
                {
                    global::Ice.ObjectPrx bb = b?.ice_facet(f);
                    try
                    {
                        if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                        {
                            IPrxHelper prx = new IPrxHelper();
                            prx.iceCopyFrom(bb);
                            return prx;
                        }
                    }
                    catch (global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if (b is not null)
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if (b is not null)
                    {
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                    return null;
                }

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Test::Inner::Inner2::I"
                };

                public static string ice_staticId() => "::Test::Inner::Inner2::I";

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, IPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        IPrxHelper result = new IPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, IPrx> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx> e in v)
                        {
                            ostr.writeString(e.Key);
                            IPrxHelper.write(ostr, e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, IPrx> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, IPrx> r = new global::System.Collections.Generic.Dictionary<string, IPrx>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k = default;
                        k = istr.readString();
                        IPrx v = default;
                        v = IPrxHelper.read(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class ISeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, IPrx[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            IPrxHelper.write(ostr, v[ix]);
                        }
                    }
                }

                public static IPrx[] read(global::Ice.InputStream istr)
                {
                    IPrx[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new IPrx[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = IPrxHelper.read(istr);
                        }
                    }
                    return v;
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Test.Inner.Inner2.S[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::Test.Inner.Inner2.S[] read(global::Ice.InputStream istr)
            {
                global::Test.Inner.Inner2.S[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::Test.Inner.Inner2.S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::Test.Inner.Inner2.S> e in v)
                    {
                        ostr.writeString(e.Key);
                        e.Value.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> r = new global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S>();
                for(int i = 0; i < sz; ++i)
                {
                    string k = default;
                    k = istr.readString();
                    global::Test.Inner.Inner2.S v = default;
                    v.ice_readMembers(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::Test.Inner.Inner2.C> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> r = new global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C>();
                for(int i = 0; i < sz; ++i)
                {
                    string k = default;
                    k = istr.readString();
                    istr.readValue((global::Test.Inner.Inner2.C v) => { r[k] = v; });
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Test.Inner.Inner2.C[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Test.Inner.Inner2.C[] read(global::Ice.InputStream istr)
            {
                global::Test.Inner.Inner2.C[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Test.Inner.Inner2.C[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<global::Test.Inner.Inner2.C>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
        {
            public IPrxHelper()
            {
            }

            #region Synchronous operations

            public global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Test.Inner.Inner2.C opC(global::Test.Inner.Inner2.C c1, out global::Test.Inner.Inner2.C c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Test.Inner.Inner2.C[] opCSeq(global::Test.Inner.Inner2.C[] c1, out global::Test.Inner.Inner2.C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                _iceI_opS(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opS_name = "opS";

            private void _iceI_opS(global::Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                outAsync.invoke(
                    _opS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        iceP_s1.ice_writeMembers(ostr);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpSResult ret = new I_OpSResult();
                        ret.s2.ice_readMembers(istr);
                        ret.returnValue.ice_readMembers(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSSeq_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSSeq_name = "opSSeq";

            private void _iceI_opSSeq(global::Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                outAsync.invoke(
                    _opSSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpSSeqResult ret = new I_OpSSeqResult();
                        ret.s2 = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSMapAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSMap_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                _iceI_opSMap(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSMap_name = "opSMap";

            private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                outAsync.invoke(
                    _opSMap_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpSMapResult ret = new I_OpSMapResult();
                        ret.s2 = global::Test.Inner.Inner2.SMapHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.SMapHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.Inner.Inner2.C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Test.Inner.Inner2.C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opC_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                _iceI_opC(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opC_name = "opC";

            private void _iceI_opC(global::Test.Inner.Inner2.C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                outAsync.invoke(
                    _opC_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpCResult ret = new I_OpCResult();
                        istr.readValue((global::Test.Inner.Inner2.C v) => {ret.c2 = v; });
                        istr.readValue((global::Test.Inner.Inner2.C v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.Inner.Inner2.C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Test.Inner.Inner2.C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCSeq_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCSeq_name = "opCSeq";

            private void _iceI_opCSeq(global::Test.Inner.Inner2.C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                outAsync.invoke(
                    _opCSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpCSeqResult ret = new I_OpCSeqResult();
                        ret.c2 = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCMapAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCMap_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                _iceI_opCMap(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCMap_name = "opCMap";

            private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                outAsync.invoke(
                    _opCMap_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        I_OpCMapResult ret = new I_OpCMapResult();
                        ret.c2 = global::Test.Inner.Inner2.CMapHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.CMapHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                global::Ice.ObjectPrx bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b is not null)
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Inner::I"
            };

            public static string ice_staticId() => "::Test::Inner::I";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, IPrx v)
            {
                ostr.writeProxy(v);
            }

            public static IPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IPrxHelper result = new IPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, IPrx> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx> e in v)
                    {
                        ostr.writeString(e.Key);
                        IPrxHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, IPrx> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, IPrx> r = new global::System.Collections.Generic.Dictionary<string, IPrx>();
                for(int i = 0; i < sz; ++i)
                {
                    string k = default;
                    k = istr.readString();
                    IPrx v = default;
                    v = IPrxHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ISeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, IPrx[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static IPrx[] read(global::Ice.InputStream istr)
            {
                IPrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new IPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
            {
                public IPrxHelper()
                {
                }

                #region Synchronous operations

                public global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Test.C opC(global::Test.C c1, out global::Test.C c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Test.C[] opCSeq(global::Test.C[] c1, out global::Test.C[] c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C> c2, global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.S s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(global::Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSResult ret = new I_OpSResult();
                            ret.s2.ice_readMembers(istr);
                            ret.returnValue.ice_readMembers(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(global::Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Test.SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSSeqResult ret = new I_OpSSeqResult();
                            ret.s2 = global::Test.SSeqHelper.read(istr);
                            ret.returnValue = global::Test.SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Test.SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpSMapResult ret = new I_OpSMapResult();
                            ret.s2 = global::Test.SMapHelper.read(istr);
                            ret.returnValue = global::Test.SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.C c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Test.C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(global::Test.C iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCResult ret = new I_OpCResult();
                            istr.readValue((global::Test.C v) => {ret.c2 = v; });
                            istr.readValue((global::Test.C v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.C[] c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Test.C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(global::Test.C[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Test.CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCSeqResult ret = new I_OpCSeqResult();
                            ret.c2 = global::Test.CSeqHelper.read(istr);
                            ret.returnValue = global::Test.CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C> iceP_c1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Test.CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            I_OpCMapResult ret = new I_OpCMapResult();
                            ret.c2 = global::Test.CMapHelper.read(istr);
                            ret.returnValue = global::Test.CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous);
                }

                #endregion

                #region Checked and unchecked cast operations

                public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
                {
                    if (b is not null && b.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
                {
                    global::Ice.ObjectPrx bb = b?.ice_facet(f);
                    try
                    {
                        if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                        {
                            IPrxHelper prx = new IPrxHelper();
                            prx.iceCopyFrom(bb);
                            return prx;
                        }
                    }
                    catch (global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if (b is not null)
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if (b is not null)
                    {
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                    return null;
                }

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Inner::Test::Inner2::I"
                };

                public static string ice_staticId() => "::Inner::Test::Inner2::I";

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, IPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        IPrxHelper result = new IPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class IDisp_ : global::Ice.ObjectImpl, I
    {
        #region Slice operations

        public abstract S opS(S s1, out S s2, global::Ice.Current current = null);

        public abstract S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current = null);

        public abstract C opC(C c1, out C c2, global::Ice.Current current = null);

        public abstract C[] opCSeq(C[] s1, out C[] s2, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::Ice.Current current = null);

        public abstract E1 opE1(E1 E1, global::Ice.Current current = null);

        public abstract S1 opS1(S1 S1, global::Ice.Current current = null);

        public abstract C1 opC1(C1 C1, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::I";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opS(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            S iceP_s1 = default;
            iceP_s1.ice_readMembers(istr);
            inS.endReadParams();
            S iceP_s2;
            var ret = obj.opS(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            iceP_s2.ice_writeMembers(ostr);
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            S[] iceP_s1 = default;
            iceP_s1 = SSeqHelper.read(istr);
            inS.endReadParams();
            S[] iceP_s2;
            var ret = obj.opSSeq(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            SSeqHelper.write(ostr, iceP_s2);
            SSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, S> iceP_s1 = default;
            iceP_s1 = SMapHelper.read(istr);
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
            var ret = obj.opSMap(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            SMapHelper.write(ostr, iceP_s2);
            SMapHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opC(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C iceP_c1 = default;
            istr.readValue((C v) => {iceP_c1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            C iceP_c2;
            var ret = obj.opC(iceP_c1, out iceP_c2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_c2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_s1 = default;
            iceP_s1 = CSeqHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            C[] iceP_s2;
            var ret = obj.opCSeq(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            CSeqHelper.write(ostr, iceP_s2);
            CSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, C> iceP_c1 = default;
            iceP_c1 = CMapHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<string, C> iceP_c2;
            var ret = obj.opCMap(iceP_c1, out iceP_c2, current);
            var ostr = inS.startWriteParams();
            CMapHelper.write(ostr, iceP_c2);
            CMapHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opE1(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            E1 iceP_E1 = default;
            iceP_E1 = (E1)istr.readEnum(2);
            inS.endReadParams();
            var ret = obj.opE1(iceP_E1, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 2);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opS1(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            S1 iceP_S1 = default;
            iceP_S1 = S1.ice_read(istr);
            inS.endReadParams();
            var ret = obj.opS1(iceP_S1, current);
            var ostr = inS.startWriteParams();
            S1.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opC1(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C1 iceP_C1 = default;
            istr.readValue((C1 v) => {iceP_C1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.opC1(iceP_C1, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opC",
            "opC1",
            "opCMap",
            "opCSeq",
            "opE1",
            "opS",
            "opS1",
            "opSMap",
            "opSSeq",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opC(this, inS, current);
                }
                case 5:
                {
                    return iceD_opC1(this, inS, current);
                }
                case 6:
                {
                    return iceD_opCMap(this, inS, current);
                }
                case 7:
                {
                    return iceD_opCSeq(this, inS, current);
                }
                case 8:
                {
                    return iceD_opE1(this, inS, current);
                }
                case 9:
                {
                    return iceD_opS(this, inS, current);
                }
                case 10:
                {
                    return iceD_opS1(this, inS, current);
                }
                case 11:
                {
                    return iceD_opSMap(this, inS, current);
                }
                case 12:
                {
                    return iceD_opSSeq(this, inS, current);
                }
                case 13:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    namespace Inner
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public abstract class IDisp_ : global::Ice.ObjectImpl, I
            {
                #region Slice operations

                public abstract S opS(S s1, out S s2, global::Ice.Current current = null);

                public abstract S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current = null);

                public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current = null);

                public abstract C opC(C c1, out C c2, global::Ice.Current current = null);

                public abstract C[] opCSeq(C[] c1, out C[] c2, global::Ice.Current current = null);

                public abstract global::System.Collections.Generic.Dictionary<string, C> opCMap(global::System.Collections.Generic.Dictionary<string, C> c1, out global::System.Collections.Generic.Dictionary<string, C> c2, global::Ice.Current current = null);

                public abstract void shutdown(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Test::Inner::Inner2::I"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return ice_staticId();
                }

                public static new string ice_staticId()
                {
                    return "::Test::Inner::Inner2::I";
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opS(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    S iceP_s1 = default;
                    iceP_s1.ice_readMembers(istr);
                    inS.endReadParams();
                    S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opSSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    S[] iceP_s1 = default;
                    iceP_s1 = SSeqHelper.read(istr);
                    inS.endReadParams();
                    S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    SSeqHelper.write(ostr, iceP_s2);
                    SSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opSMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::System.Collections.Generic.Dictionary<string, S> iceP_s1 = default;
                    iceP_s1 = SMapHelper.read(istr);
                    inS.endReadParams();
                    global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    SMapHelper.write(ostr, iceP_s2);
                    SMapHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opC(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    C iceP_c1 = default;
                    istr.readValue((C v) => {iceP_c1 = v; });
                    istr.readPendingValues();
                    inS.endReadParams();
                    C iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opCSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    C[] iceP_c1 = default;
                    iceP_c1 = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    inS.endReadParams();
                    C[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    CSeqHelper.write(ostr, iceP_c2);
                    CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opCMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::System.Collections.Generic.Dictionary<string, C> iceP_c1 = default;
                    iceP_c1 = CMapHelper.read(istr);
                    istr.readPendingValues();
                    inS.endReadParams();
                    global::System.Collections.Generic.Dictionary<string, C> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    CMapHelper.write(ostr, iceP_c2);
                    CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_shutdown(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    obj.shutdown(current);
                    return inS.setResult(inS.writeEmptyParams());
                }

                private static readonly string[] _all =
                {
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "opC",
                    "opCMap",
                    "opCSeq",
                    "opS",
                    "opSMap",
                    "opSSeq",
                    "shutdown"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 1:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                        case 4:
                        {
                            return iceD_opC(this, inS, current);
                        }
                        case 5:
                        {
                            return iceD_opCMap(this, inS, current);
                        }
                        case 6:
                        {
                            return iceD_opCSeq(this, inS, current);
                        }
                        case 7:
                        {
                            return iceD_opS(this, inS, current);
                        }
                        case 8:
                        {
                            return iceD_opSMap(this, inS, current);
                        }
                        case 9:
                        {
                            return iceD_opSSeq(this, inS, current);
                        }
                        case 10:
                        {
                            return iceD_shutdown(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class IDisp_ : global::Ice.ObjectImpl, I
        {
            #region Slice operations

            public abstract global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::Ice.Current current = null);

            public abstract global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::Ice.Current current = null);

            public abstract global::Test.Inner.Inner2.C opC(global::Test.Inner.Inner2.C c1, out global::Test.Inner.Inner2.C c2, global::Ice.Current current = null);

            public abstract global::Test.Inner.Inner2.C[] opCSeq(global::Test.Inner.Inner2.C[] c1, out global::Test.Inner.Inner2.C[] c2, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> c2, global::Ice.Current current = null);

            public abstract void shutdown(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Inner::I"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::Inner::I";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opS(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Test.Inner.Inner2.S iceP_s1 = default;
                iceP_s1.ice_readMembers(istr);
                inS.endReadParams();
                global::Test.Inner.Inner2.S iceP_s2;
                var ret = obj.opS(iceP_s1, out iceP_s2, current);
                var ostr = inS.startWriteParams();
                iceP_s2.ice_writeMembers(ostr);
                ret.ice_writeMembers(ostr);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Test.Inner.Inner2.S[] iceP_s1 = default;
                iceP_s1 = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                inS.endReadParams();
                global::Test.Inner.Inner2.S[] iceP_s2;
                var ret = obj.opSSeq(iceP_s1, out iceP_s2, current);
                var ostr = inS.startWriteParams();
                global::Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s2);
                global::Test.Inner.Inner2.SSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1 = default;
                iceP_s1 = global::Test.Inner.Inner2.SMapHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s2;
                var ret = obj.opSMap(iceP_s1, out iceP_s2, current);
                var ostr = inS.startWriteParams();
                global::Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s2);
                global::Test.Inner.Inner2.SMapHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opC(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Test.Inner.Inner2.C iceP_c1 = default;
                istr.readValue((global::Test.Inner.Inner2.C v) => {iceP_c1 = v; });
                istr.readPendingValues();
                inS.endReadParams();
                global::Test.Inner.Inner2.C iceP_c2;
                var ret = obj.opC(iceP_c1, out iceP_c2, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(iceP_c2);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Test.Inner.Inner2.C[] iceP_c1 = default;
                iceP_c1 = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                global::Test.Inner.Inner2.C[] iceP_c2;
                var ret = obj.opCSeq(iceP_c1, out iceP_c2, current);
                var ostr = inS.startWriteParams();
                global::Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c2);
                global::Test.Inner.Inner2.CSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> iceP_c1 = default;
                iceP_c1 = global::Test.Inner.Inner2.CMapHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C> iceP_c2;
                var ret = obj.opCMap(iceP_c1, out iceP_c2, current);
                var ostr = inS.startWriteParams();
                global::Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c2);
                global::Test.Inner.Inner2.CMapHelper.write(ostr, ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opC",
                "opCMap",
                "opCSeq",
                "opS",
                "opSMap",
                "opSSeq",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_opC(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_opCMap(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_opCSeq(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_opS(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_opSMap(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_opSSeq(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public abstract class IDisp_ : global::Ice.ObjectImpl, I
            {
                #region Slice operations

                public abstract global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::Ice.Current current = null);

                public abstract global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::Ice.Current current = null);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::Ice.Current current = null);

                public abstract global::Test.C opC(global::Test.C c1, out global::Test.C c2, global::Ice.Current current = null);

                public abstract global::Test.C[] opCSeq(global::Test.C[] c1, out global::Test.C[] c2, global::Ice.Current current = null);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Test.C> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C> c2, global::Ice.Current current = null);

                public abstract void shutdown(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Inner::Test::Inner2::I"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return ice_staticId();
                }

                public static new string ice_staticId()
                {
                    return "::Inner::Test::Inner2::I";
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opS(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Test.S iceP_s1 = default;
                    iceP_s1.ice_readMembers(istr);
                    inS.endReadParams();
                    global::Test.S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opSSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Test.S[] iceP_s1 = default;
                    iceP_s1 = global::Test.SSeqHelper.read(istr);
                    inS.endReadParams();
                    global::Test.S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    global::Test.SSeqHelper.write(ostr, iceP_s2);
                    global::Test.SSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opSMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1 = default;
                    iceP_s1 = global::Test.SMapHelper.read(istr);
                    inS.endReadParams();
                    global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, current);
                    var ostr = inS.startWriteParams();
                    global::Test.SMapHelper.write(ostr, iceP_s2);
                    global::Test.SMapHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opC(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Test.C iceP_c1 = default;
                    istr.readValue((global::Test.C v) => {iceP_c1 = v; });
                    istr.readPendingValues();
                    inS.endReadParams();
                    global::Test.C iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opCSeq(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Test.C[] iceP_c1 = default;
                    iceP_c1 = global::Test.CSeqHelper.read(istr);
                    istr.readPendingValues();
                    inS.endReadParams();
                    global::Test.C[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    global::Test.CSeqHelper.write(ostr, iceP_c2);
                    global::Test.CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_opCMap(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::System.Collections.Generic.Dictionary<string, global::Test.C> iceP_c1 = default;
                    iceP_c1 = global::Test.CMapHelper.read(istr);
                    istr.readPendingValues();
                    inS.endReadParams();
                    global::System.Collections.Generic.Dictionary<string, global::Test.C> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, current);
                    var ostr = inS.startWriteParams();
                    global::Test.CMapHelper.write(ostr, iceP_c2);
                    global::Test.CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_shutdown(I obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    obj.shutdown(current);
                    return inS.setResult(inS.writeEmptyParams());
                }

                private static readonly string[] _all =
                {
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "opC",
                    "opCMap",
                    "opCSeq",
                    "opS",
                    "opSMap",
                    "opSSeq",
                    "shutdown"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 1:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                        case 4:
                        {
                            return iceD_opC(this, inS, current);
                        }
                        case 5:
                        {
                            return iceD_opCMap(this, inS, current);
                        }
                        case 6:
                        {
                            return iceD_opCSeq(this, inS, current);
                        }
                        case 7:
                        {
                            return iceD_opS(this, inS, current);
                        }
                        case 8:
                        {
                            return iceD_opSMap(this, inS, current);
                        }
                        case 9:
                        {
                            return iceD_opSSeq(this, inS, current);
                        }
                        case 10:
                        {
                            return iceD_shutdown(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }
        }
    }
}
