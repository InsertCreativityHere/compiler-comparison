//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
    {
    }
}

namespace Test
{
    public struct TestIntf_OpByteSpanResult
    {
        public TestIntf_OpByteSpanResult(byte[] returnValue, byte[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public byte[] returnValue;
        public byte[] dataOut;
    }

    public struct TestIntf_OpShortSpanResult
    {
        public TestIntf_OpShortSpanResult(short[] returnValue, short[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public short[] returnValue;
        public short[] dataOut;
    }

    public struct TestIntf_OpStringSpanResult
    {
        public TestIntf_OpStringSpanResult(string[] returnValue, string[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public string[] returnValue;
        public string[] dataOut;
    }

    public struct TestIntf_OpOptionalByteSpanResult
    {
        public TestIntf_OpOptionalByteSpanResult(byte[] returnValue, byte[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public byte[] returnValue;
        public byte[] dataOut;
    }

    public struct TestIntf_OpOptionalShortSpanResult
    {
        public TestIntf_OpOptionalShortSpanResult(short[] returnValue, short[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public short[] returnValue;
        public short[] dataOut;
    }

    public struct TestIntf_OpOptionalStringSpanResult
    {
        public TestIntf_OpOptionalStringSpanResult(string[] returnValue, string[] dataOut)
        {
            this.returnValue = returnValue;
            this.dataOut = dataOut;
        }

        public string[] returnValue;
        public string[] dataOut;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        byte[] opByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opOptionalByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opOptionalShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opOptionalStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[] dataIn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        #region Synchronous operations

        public byte[] opByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opShortSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opStringSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opOptionalByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalByteSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opOptionalShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalShortSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opOptionalStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalStringSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> _iceI_opByteSpanAsync(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteSpanResult>(progress, cancel);
            _iceI_opByteSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSpan_name = "opByteSpan";

        private void _iceI_opByteSpan(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSpanResult>(completed);
            outAsync.invoke(
                _opByteSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteSpanResult ret = new TestIntf_OpByteSpanResult();
                    ret.dataOut = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> _iceI_opShortSpanAsync(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortSpanResult>(progress, cancel);
            _iceI_opShortSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSpan_name = "opShortSpan";

        private void _iceI_opShortSpan(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortSpanResult>(completed);
            outAsync.invoke(
                _opShortSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortSpanResult ret = new TestIntf_OpShortSpanResult();
                    ret.dataOut = ShortSeqHelper.read(istr);
                    ret.returnValue = ShortSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> _iceI_opStringSpanAsync(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringSpanResult>(progress, cancel);
            _iceI_opStringSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSpan_name = "opStringSpan";

        private void _iceI_opStringSpan(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSpanResult>(completed);
            outAsync.invoke(
                _opStringSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringSpanResult ret = new TestIntf_OpStringSpanResult();
                    ret.dataOut = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalByteSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> _iceI_opOptionalByteSpanAsync(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalByteSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalByteSpanResult>(progress, cancel);
            _iceI_opOptionalByteSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalByteSpan_name = "opOptionalByteSpan";

        private void _iceI_opOptionalByteSpan(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalByteSpanResult>(completed);
            outAsync.invoke(
                _opOptionalByteSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(1, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpOptionalByteSpanResult ret = new TestIntf_OpOptionalByteSpanResult();
                    if (istr.readOptional(10, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalShortSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> _iceI_opOptionalShortSpanAsync(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalShortSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalShortSpanResult>(progress, cancel);
            _iceI_opOptionalShortSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalShortSpan_name = "opOptionalShortSpan";

        private void _iceI_opOptionalShortSpan(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalShortSpanResult>(completed);
            outAsync.invoke(
                _opOptionalShortSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(1, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpOptionalShortSpanResult ret = new TestIntf_OpOptionalShortSpanResult();
                    if (istr.readOptional(10, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalStringSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> _iceI_opOptionalStringSpanAsync(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalStringSpan_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalStringSpanResult>(progress, cancel);
            _iceI_opOptionalStringSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalStringSpan_name = "opOptionalStringSpan";

        private void _iceI_opOptionalStringSpan(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalStringSpanResult>(completed);
            outAsync.invoke(
                _opOptionalStringSpan_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(1, iceP_dataIn);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpOptionalStringSpanResult ret = new TestIntf_OpOptionalStringSpanResult();
                    if (istr.readOptional(10, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper prx = new TestIntfPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                TestIntfPrxHelper prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TestIntfPrxHelper prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestIntfPrxHelper result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[] dataIn, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::TestIntf";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_dataIn = default;
            iceP_dataIn = ByteSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpByteSpanResult>(obj.opByteSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.dataOut);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_dataIn = default;
            iceP_dataIn = ShortSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpShortSpanResult>(obj.opShortSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    ShortSeqHelper.write(ostr, ret.dataOut);
                    ShortSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_dataIn = default;
            iceP_dataIn = StringSeqHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpStringSpanResult>(obj.opStringSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    StringSeqHelper.write(ostr, ret.dataOut);
                    StringSeqHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOptionalByteSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_dataIn;
            if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpOptionalByteSpanResult>(obj.opOptionalByteSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    ostr.writeByteSeq(10, ret.returnValue);
                    ostr.writeByteSeq(11, ret.dataOut);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOptionalShortSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_dataIn;
            if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpOptionalShortSpanResult>(obj.opOptionalShortSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    ostr.writeShortSeq(10, ret.returnValue);
                    ostr.writeShortSeq(11, ret.dataOut);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOptionalStringSpan(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_dataIn;
            if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            inS.endReadParams();
            return inS.setResultTask<TestIntf_OpOptionalStringSpanResult>(obj.opOptionalStringSpanAsync(iceP_dataIn, current),
                (ostr, ret) =>
                {
                    ostr.writeStringSeq(10, ret.returnValue);
                    ostr.writeStringSeq(11, ret.dataOut);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(TestIntf obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.shutdownAsync(current));
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opByteSpan",
            "opOptionalByteSpan",
            "opOptionalShortSpan",
            "opOptionalStringSpan",
            "opShortSpan",
            "opStringSpan",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opByteSpan(this, inS, current);
                }
                case 5:
                {
                    return iceD_opOptionalByteSpan(this, inS, current);
                }
                case 6:
                {
                    return iceD_opOptionalShortSpan(this, inS, current);
                }
                case 7:
                {
                    return iceD_opOptionalStringSpan(this, inS, current);
                }
                case 8:
                {
                    return iceD_opShortSpan(this, inS, current);
                }
                case 9:
                {
                    return iceD_opStringSpan(this, inS, current);
                }
                case 10:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
