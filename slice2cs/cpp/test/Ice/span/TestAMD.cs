//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("TestAMD.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[]? dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[]? dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[]? dataIn, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);
    }
}

namespace Test
{
    public record struct TestIntf_OpByteSpanResult(byte[] returnValue, byte[] dataOut);

    public record struct TestIntf_OpShortSpanResult(short[] returnValue, short[] dataOut);

    public record struct TestIntf_OpStringSpanResult(string[] returnValue, string[] dataOut);

    public record struct TestIntf_OpOptionalByteSpanResult(byte[]? returnValue, byte[]? dataOut);

    public record struct TestIntf_OpOptionalShortSpanResult(short[]? returnValue, short[]? dataOut);

    public record struct TestIntf_OpOptionalStringSpanResult(string[]? returnValue, string[]? dataOut);
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : Ice.ObjectPrx
    {
        byte[] opByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opOptionalByteSpan(byte[]? dataIn, out byte[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[]? opOptionalShortSpan(short[]? dataIn, out short[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opOptionalStringSpan(string[]? dataIn, out string[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSeqHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public byte[] opByteSpan(byte[] dataIn, out byte[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[] opShortSpan(short[] dataIn, out short[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringSpan(string[] dataIn, out string[] dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opOptionalByteSpan(byte[]? dataIn, out byte[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalByteSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[]? opOptionalShortSpan(short[]? dataIn, out short[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalShortSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opOptionalStringSpan(string[]? dataIn, out string[]? dataOut, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptionalStringSpanAsync(dataIn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                dataOut = result_.dataOut;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> _iceI_opByteSpanAsync(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteSpanResult>(progress, cancel);
            _iceI_opByteSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSpan_name = "opByteSpan";

        private void _iceI_opByteSpan(byte[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSpanResult>(completed);
            outAsync.invoke(
                _opByteSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteSpanResult();
                    ret.dataOut = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> _iceI_opShortSpanAsync(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortSpanResult>(progress, cancel);
            _iceI_opShortSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSpan_name = "opShortSpan";

        private void _iceI_opShortSpan(short[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortSpanResult>(completed);
            outAsync.invoke(
                _opShortSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpShortSpanResult();
                    ret.dataOut = ShortSeqHelper.read(istr);
                    ret.returnValue = ShortSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> _iceI_opStringSpanAsync(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringSpanResult>(progress, cancel);
            _iceI_opStringSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSpan_name = "opStringSpan";

        private void _iceI_opStringSpan(string[] iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSpanResult>(completed);
            outAsync.invoke(
                _opStringSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringSpanResult();
                    ret.dataOut = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalByteSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> _iceI_opOptionalByteSpanAsync(byte[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalByteSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalByteSpanResult>(progress, cancel);
            _iceI_opOptionalByteSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalByteSpan_name = "opOptionalByteSpan";

        private void _iceI_opOptionalByteSpan(byte[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalByteSpanResult>(completed);
            outAsync.invoke(
                _opOptionalByteSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(1, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptionalByteSpanResult();
                    if (istr.readOptional(10, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalShortSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> _iceI_opOptionalShortSpanAsync(short[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalShortSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalShortSpanResult>(progress, cancel);
            _iceI_opOptionalShortSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalShortSpan_name = "opOptionalShortSpan";

        private void _iceI_opOptionalShortSpan(short[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalShortSpanResult>(completed);
            outAsync.invoke(
                _opOptionalShortSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(1, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptionalShortSpanResult();
                    if (istr.readOptional(10, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[]? dataIn, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalStringSpanAsync(dataIn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> _iceI_opOptionalStringSpanAsync(string[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalStringSpan_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptionalStringSpanResult>(progress, cancel);
            _iceI_opOptionalStringSpan(iceP_dataIn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalStringSpan_name = "opOptionalStringSpan";

        private void _iceI_opOptionalStringSpan(string[]? iceP_dataIn, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptionalStringSpanResult>(completed);
            outAsync.invoke(
                _opOptionalStringSpan_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(1, iceP_dataIn);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptionalStringSpanResult();
                    if (istr.readOptional(10, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(11, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.dataOut = tmpVal;
                    }
                    else
                    {
                        ret.dataOut = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestIntfPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

        private TestIntfPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestIntfPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
    {
        public abstract global::System.Threading.Tasks.Task<TestIntf_OpByteSpanResult> opByteSpanAsync(byte[] dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpShortSpanResult> opShortSpanAsync(short[] dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpStringSpanResult> opStringSpanAsync(string[] dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalByteSpanResult> opOptionalByteSpanAsync(byte[]? dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalShortSpanResult> opOptionalShortSpanAsync(short[]? dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<TestIntf_OpOptionalStringSpanResult> opOptionalStringSpanAsync(string[]? dataIn, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opByteSpan" => TestIntf.iceD_opByteSpanAsync(this, request),
                "opShortSpan" => TestIntf.iceD_opShortSpanAsync(this, request),
                "opStringSpan" => TestIntf.iceD_opStringSpanAsync(this, request),
                "opOptionalByteSpan" => TestIntf.iceD_opOptionalByteSpanAsync(this, request),
                "opOptionalShortSpan" => TestIntf.iceD_opOptionalShortSpanAsync(this, request),
                "opOptionalStringSpan" => TestIntf.iceD_opOptionalStringSpanAsync(this, request),
                "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface TestIntf
    {
        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_dataIn;
            iceP_dataIn = ByteSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opByteSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ByteSeqHelper.write(ostr, ret.dataOut);
                    ByteSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_dataIn;
            iceP_dataIn = ShortSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opShortSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ShortSeqHelper.write(ostr, ret.dataOut);
                    ShortSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_dataIn;
            iceP_dataIn = StringSeqHelper.read(istr);
            istr.endEncapsulation();
            var result = await obj.opStringSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    StringSeqHelper.write(ostr, ret.dataOut);
                    StringSeqHelper.write(ostr, ret.returnValue);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptionalByteSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[]? iceP_dataIn;
            if (istr.readOptional(1, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            istr.endEncapsulation();
            var result = await obj.opOptionalByteSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeByteSeq(10, ret.returnValue);
                    ostr.writeByteSeq(11, ret.dataOut);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptionalShortSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[]? iceP_dataIn;
            if (istr.readOptional(1, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            istr.endEncapsulation();
            var result = await obj.opOptionalShortSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeShortSeq(10, ret.returnValue);
                    ostr.writeShortSeq(11, ret.dataOut);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptionalStringSpanAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[]? iceP_dataIn;
            if (istr.readOptional(1, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_dataIn = tmpVal;
            }
            else
            {
                iceP_dataIn = null;
            }
            istr.endEncapsulation();
            var result = await obj.opOptionalStringSpanAsync(iceP_dataIn, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeStringSeq(10, ret.returnValue);
                    ostr.writeStringSeq(11, ret.dataOut);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            await obj.shutdownAsync(request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
        }
    }
}
