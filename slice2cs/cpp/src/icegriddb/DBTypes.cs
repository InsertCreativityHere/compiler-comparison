// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("DBTypes.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceGrid
{
    public sealed class StringLongDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, long> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, long> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeLong(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, long> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, long> r = new global::System.Collections.Generic.Dictionary<string, long>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                long v;
                v = istr.readLong();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed partial record class AllData
    {
        public ApplicationInfo[] applications;

        public AdapterInfo[] adapters;

        public ObjectInfo[] objects;

        public ObjectInfo[] internalObjects;

        public global::System.Collections.Generic.Dictionary<string, long> serials;

        partial void ice_initialize();

        public AllData(ApplicationInfo[] applications, AdapterInfo[] adapters, ObjectInfo[] objects, ObjectInfo[] internalObjects, global::System.Collections.Generic.Dictionary<string, long> serials)
        {
            global::System.ArgumentNullException.ThrowIfNull(applications);
            this.applications = applications;
            global::System.ArgumentNullException.ThrowIfNull(adapters);
            this.adapters = adapters;
            global::System.ArgumentNullException.ThrowIfNull(objects);
            this.objects = objects;
            global::System.ArgumentNullException.ThrowIfNull(internalObjects);
            this.internalObjects = internalObjects;
            global::System.ArgumentNullException.ThrowIfNull(serials);
            this.serials = serials;
            ice_initialize();
        }

        public AllData(Ice.InputStream istr)
        {
            this.applications = ApplicationInfoSeqHelper.read(istr);
            this.adapters = AdapterInfoSeqHelper.read(istr);
            this.objects = ObjectInfoSeqHelper.read(istr);
            this.internalObjects = ObjectInfoSeqHelper.read(istr);
            this.serials = StringLongDictHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ApplicationInfoSeqHelper.write(ostr, this.applications);
            AdapterInfoSeqHelper.write(ostr, this.adapters);
            ObjectInfoSeqHelper.write(ostr, this.objects);
            ObjectInfoSeqHelper.write(ostr, this.internalObjects);
            StringLongDictHelper.write(ostr, this.serials);
        }

        public static void ice_write(Ice.OutputStream ostr, AllData v)
        {
            v.ice_writeMembers(ostr);
        }

        public static AllData ice_read(Ice.InputStream istr) => new(istr);
    }
}
