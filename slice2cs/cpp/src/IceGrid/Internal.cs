//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalDbEnvDescriptor : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PropertyDescriptor[] properties;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDbEnvDescriptor()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDbEnvDescriptor(string name, PropertyDescriptor[] properties)
        {
            this.name = name;
            this.properties = properties;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalDbEnvDescriptor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            PropertyDescriptorSeqHelper.write(ostr_, properties);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            properties = PropertyDescriptorSeqHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalAdapterDescriptor : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool serverLifetime;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalAdapterDescriptor()
        {
            this.id = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalAdapterDescriptor(string id, bool serverLifetime)
        {
            this.id = id;
            this.serverLifetime = serverLifetime;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalAdapterDescriptor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(id);
            ostr_.writeBool(serverLifetime);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            serverLifetime = istr_.readBool();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalDistributionDescriptor : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string icepatch;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] directories;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDistributionDescriptor()
        {
            this.icepatch = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDistributionDescriptor(string icepatch, string[] directories)
        {
            this.icepatch = icepatch;
            this.directories = directories;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalDistributionDescriptor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(icepatch);
            global::Ice.StringSeqHelper.write(ostr_, directories);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            icepatch = istr_.readString();
            directories = global::Ice.StringSeqHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalServerDescriptor : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string application;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string uuid;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int revision;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sessionId;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string exe;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string pwd;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string user;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string activation;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string activationTimeout;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string deactivationTimeout;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool applicationDistrib;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDistributionDescriptor distrib;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool processRegistered;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] options;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] envs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] logs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalAdapterDescriptor[] adapters;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalDbEnvDescriptor[] dbEnvs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]> properties;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<string[]> services;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalServerDescriptor()
        {
            this.id = "";
            this.application = "";
            this.uuid = "";
            this.sessionId = "";
            this.exe = "";
            this.pwd = "";
            this.user = "";
            this.activation = "";
            this.activationTimeout = "";
            this.deactivationTimeout = "";
            this.services = new global::Ice.Optional<string[]>();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalServerDescriptor(string id, string application, string uuid, int revision, string sessionId, string exe, string pwd, string user, string activation, string activationTimeout, string deactivationTimeout, bool applicationDistrib, InternalDistributionDescriptor distrib, bool processRegistered, string[] options, string[] envs, string[] logs, InternalAdapterDescriptor[] adapters, InternalDbEnvDescriptor[] dbEnvs, global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]> properties, global::Ice.Optional<string[]> services)
        {
            this.id = id;
            this.application = application;
            this.uuid = uuid;
            this.revision = revision;
            this.sessionId = sessionId;
            this.exe = exe;
            this.pwd = pwd;
            this.user = user;
            this.activation = activation;
            this.activationTimeout = activationTimeout;
            this.deactivationTimeout = deactivationTimeout;
            this.applicationDistrib = applicationDistrib;
            this.distrib = distrib;
            this.processRegistered = processRegistered;
            this.options = options;
            this.envs = envs;
            this.logs = logs;
            this.adapters = adapters;
            this.dbEnvs = dbEnvs;
            this.properties = properties;
            this.services = services;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalServerDescriptor";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(id);
            ostr_.writeString(application);
            ostr_.writeString(uuid);
            ostr_.writeInt(revision);
            ostr_.writeString(sessionId);
            ostr_.writeString(exe);
            ostr_.writeString(pwd);
            ostr_.writeString(user);
            ostr_.writeString(activation);
            ostr_.writeString(activationTimeout);
            ostr_.writeString(deactivationTimeout);
            ostr_.writeBool(applicationDistrib);
            ostr_.writeValue(distrib);
            ostr_.writeBool(processRegistered);
            global::Ice.StringSeqHelper.write(ostr_, options);
            global::Ice.StringSeqHelper.write(ostr_, envs);
            global::Ice.StringSeqHelper.write(ostr_, logs);
            InternalAdapterDescriptorSeqHelper.write(ostr_, adapters);
            InternalDbEnvDescriptorSeqHelper.write(ostr_, dbEnvs);
            PropertyDescriptorSeqDictHelper.write(ostr_, properties);
            ostr_.writeStringSeq(1, services);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            application = istr_.readString();
            uuid = istr_.readString();
            revision = istr_.readInt();
            sessionId = istr_.readString();
            exe = istr_.readString();
            pwd = istr_.readString();
            user = istr_.readString();
            activation = istr_.readString();
            activationTimeout = istr_.readString();
            deactivationTimeout = istr_.readString();
            applicationDistrib = istr_.readBool();
            istr_.readValue((InternalDistributionDescriptor v) => { this.distrib = v; });
            processRegistered = istr_.readBool();
            options = global::Ice.StringSeqHelper.read(istr_);
            envs = global::Ice.StringSeqHelper.read(istr_);
            logs = global::Ice.StringSeqHelper.read(istr_);
            adapters = InternalAdapterDescriptorSeqHelper.read(istr_);
            dbEnvs = InternalDbEnvDescriptorSeqHelper.read(istr_);
            properties = PropertyDescriptorSeqDictHelper.read(istr_);
            if(istr_.readOptional(1, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                string[] tmpVal;
                tmpVal = global::Ice.StringSeqHelper.read(istr_);
                services = new global::Ice.Optional<string[]>(tmpVal);
            }
            else
            {
                services = new global::Ice.Optional<string[]>();
            }
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if an adapter is active.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AdapterActiveException : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterActiveException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterActiveException(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceGrid::AdapterActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AdapterActiveException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AdapterNotActiveException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool activatable;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotActiveException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotActiveException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(bool activatable)
        {
            this.activatable = activatable;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotActiveException(bool activatable)
        {
            _initDM(activatable);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotActiveException(bool activatable, global::System.Exception ex) : base(ex)
        {
            _initDM(activatable);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceGrid::AdapterNotActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AdapterNotActiveException", -1, true);
            ostr_.writeBool(activatable);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            activatable = istr_.readBool();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Adapter : global::Ice.Object, AdapterOperations_
    {
    }

    /// <summary>
    /// This exception is raised if an adapter with the same name already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AdapterExistsException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string id;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
            this.id = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterExistsException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterExistsException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(string id)
        {
            this.id = id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterExistsException(string id)
        {
            _initDM(id);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterExistsException(string id, global::System.Exception ex) : base(ex)
        {
            _initDM(id);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceGrid::AdapterExistsException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AdapterExistsException", -1, true);
            ostr_.writeString(id);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileReader : global::Ice.Object, FileReaderOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Server : global::Ice.Object, ServerOperations_, FileReader
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ReplicaObserver : global::Ice.Object, ReplicaObserverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PatcherFeedback : global::Ice.Object, PatcherFeedbackOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Node : global::Ice.Object, NodeOperations_, FileReader, ReplicaObserver
    {
    }

    /// <summary>
    /// This exception is raised if a node is already registered and active.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NodeActiveException : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeActiveException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeActiveException(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceGrid::NodeActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::NodeActiveException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface NodeSession : global::Ice.Object, NodeSessionOperations_
    {
    }

    /// <summary>
    /// This exception is raised if a replica is already registered and active.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ReplicaActiveException : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ReplicaActiveException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ReplicaActiveException(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceGrid::ReplicaActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ReplicaActiveException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum TopicName
    {
        RegistryObserver,
        NodeObserver,
        ApplicationObserver,
        AdapterObserver,
        ObjectObserver
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicNameHelper
    {
        public static void write(global::Ice.OutputStream ostr, TopicName v)
        {
            ostr.writeEnum((int)v, 4);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static TopicName read(global::Ice.InputStream istr)
        {
            TopicName v;
            v = (TopicName)istr.readEnum(4);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface DatabaseObserver : global::Ice.Object, DatabaseObserverOperations_, ApplicationObserver, ObjectObserver, AdapterObserver
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ReplicaSession : global::Ice.Object, ReplicaSessionOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalNodeInfo : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string os;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string hostname;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string release;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string version;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string machine;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int nProcessors;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string dataDir;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalNodeInfo()
        {
            this.name = "";
            this.os = "";
            this.hostname = "";
            this.release = "";
            this.version = "";
            this.machine = "";
            this.dataDir = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalNodeInfo(string name, string os, string hostname, string release, string version, string machine, int nProcessors, string dataDir)
        {
            this.name = name;
            this.os = os;
            this.hostname = hostname;
            this.release = release;
            this.version = version;
            this.machine = machine;
            this.nProcessors = nProcessors;
            this.dataDir = dataDir;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalNodeInfo";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.writeString(os);
            ostr_.writeString(hostname);
            ostr_.writeString(release);
            ostr_.writeString(version);
            ostr_.writeString(machine);
            ostr_.writeInt(nProcessors);
            ostr_.writeString(dataDir);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            os = istr_.readString();
            hostname = istr_.readString();
            release = istr_.readString();
            version = istr_.readString();
            machine = istr_.readString();
            nProcessors = istr_.readInt();
            dataDir = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InternalReplicaInfo : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string hostname;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalReplicaInfo()
        {
            this.name = "";
            this.hostname = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InternalReplicaInfo(string name, string hostname)
        {
            this.name = name;
            this.hostname = hostname;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceGrid::InternalReplicaInfo";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.writeString(hostname);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            hostname = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface InternalRegistry : global::Ice.Object, InternalRegistryOperations_, FileReader
    {
    }
}

namespace IceGrid
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Adapter_activate(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Adapter_getDirectProxy(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Adapter_setDirectProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_FileReader_getOffsetFromEnd(long ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_FileReader_read(bool ret, long newPos, string[] lines);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_start();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_stop();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_checkUpdate(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_setEnabled();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_isEnabled(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_sendSignal();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_writeMessage();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_getState(ServerState ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_getPid(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Server_setProcess();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaObserver_replicaInit();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaObserver_replicaAdded();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaObserver_replicaRemoved();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_PatcherFeedback_finished();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_PatcherFeedback_failed();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_loadServer(ServerPrx ret, global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_loadServerWithoutRestart(ServerPrx ret, global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_destroyServer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_destroyServerWithoutRestart();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_patch();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_registerWithReplica();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_getName(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_getHostname(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_getLoad(LoadInfo ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_getProcessorSocketCount(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Node_shutdown();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_keepAlive();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_setReplicaObserver();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_getTimeout(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_getObserver(NodeObserverPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_loadServers();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_getServers(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_waitForApplicationUpdate();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_NodeSession_destroy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_keepAlive();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_getTimeout(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_setDatabaseObserver();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_setEndpoints();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_registerWellKnownObjects();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_setAdapterDirectProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_receivedUpdate();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_ReplicaSession_destroy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_registerNode(NodeSessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_registerReplica(ReplicaSessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_registerWithReplica();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_getNodes(NodePrx[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_getReplicas(InternalRegistryPrx[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_getApplications(ApplicationInfo[] ret, long serial);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_getAdapters(AdapterInfo[] ret, long serial);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_getObjects(ObjectInfo[] ret, long serial);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_InternalRegistry_shutdown();
}

namespace IceGrid
{
    public struct FileReader_ReadResult
    {
        public FileReader_ReadResult(bool returnValue, long newPos, string[] lines)
        {
            this.returnValue = returnValue;
            this.newPos = newPos;
            this.lines = lines;
        }

        public bool returnValue;
        public long newPos;
        public string[] lines;
    }

    public struct Node_LoadServerResult
    {
        public Node_LoadServerResult(ServerPrx returnValue, global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.activateTimeout = activateTimeout;
            this.deactivateTimeout = deactivateTimeout;
        }

        public ServerPrx returnValue;
        public global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters;
        public int activateTimeout;
        public int deactivateTimeout;
    }

    public struct Node_LoadServerWithoutRestartResult
    {
        public Node_LoadServerWithoutRestartResult(ServerPrx returnValue, global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, int activateTimeout, int deactivateTimeout)
        {
            this.returnValue = returnValue;
            this.adapters = adapters;
            this.activateTimeout = activateTimeout;
            this.deactivateTimeout = deactivateTimeout;
        }

        public ServerPrx returnValue;
        public global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters;
        public int activateTimeout;
        public int deactivateTimeout;
    }

    public struct InternalRegistry_GetApplicationsResult
    {
        public InternalRegistry_GetApplicationsResult(ApplicationInfo[] returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public ApplicationInfo[] returnValue;
        public long serial;
    }

    public struct InternalRegistry_GetAdaptersResult
    {
        public InternalRegistry_GetAdaptersResult(AdapterInfo[] returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public AdapterInfo[] returnValue;
        public long serial;
    }

    public struct InternalRegistry_GetObjectsResult
    {
        public InternalRegistry_GetObjectsResult(ObjectInfo[] returnValue, long serial)
        {
            this.returnValue = returnValue;
            this.serial = serial;
        }

        public ObjectInfo[] returnValue;
        public long serial;
    }
}

namespace IceGrid
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface AdapterPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Activate this adapter.
        /// If this adapter can be activated, this will activate the adapter and return the direct
        ///  proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
        ///  adapter is inactive or the adapter direct proxy it's active.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Activate this adapter.
        /// If this adapter can be activated, this will activate the adapter and return the direct
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> activateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the adapter direct proxy.
        /// The adapter direct proxy is a proxy created with the object adapter. The proxy
        ///  contains the last known adapter endpoints.
        /// </summary>
        ///  <returns>A direct proxy containing the last known adapter endpoints if the adapter is already active.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx getDirectProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the adapter direct proxy.
        /// The adapter direct proxy is a proxy created with the object adapter. The proxy
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getDirectProxyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the direct proxy for this adapter.
        /// </summary>
        /// <param name="The">direct proxy. The direct proxy should be created with the object adapter and should contain the
        ///  object adapter endpoints.
        ///  </param>
        /// <exception name="AdapterActiveException">The adapter is already active. It's not possible to override the direct proxy of
        ///  an active adapter.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setDirectProxy(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Set the direct proxy for this adapter.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setDirectProxyAsync(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface FileReaderPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Count the number of given lines from the end of the file and return the file offset.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        long getOffsetFromEnd(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Count the number of given lines from the end of the file and return the file offset.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<long> getOffsetFromEndAsync(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Read lines (or size bytes) at the specified position from the given file.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Read lines (or size bytes) at the specified position from the given file.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<FileReader_ReadResult> readAsync(string filename, long pos, int size, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ServerPrx : FileReaderPrx
    {
        /// <summary>
        /// Start the server.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void start(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Start the server.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task startAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Stop the server.
        /// This methods returns only when the server is deactivated. If the server doesn't stop after a
        ///  configurable amount of time, it will be killed.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Stop the server.
        /// This methods returns only when the server is deactivated. If the server doesn't stop after a
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Check if the given server can be loaded on this node.
        /// </summary>
        /// <returns>True if the server is inactive.
        ///  </returns>
        /// <exception name="DeploymentException">Raised if the server can't be updated.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool checkUpdate(InternalServerDescriptor svr, bool noRestart, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check if the given server can be loaded on this node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> checkUpdateAsync(InternalServerDescriptor svr, bool noRestart, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Enable or disable the server.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setEnabled(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Enable or disable the server.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setEnabledAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Check if the server is enabled.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool isEnabled(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check if the server is enabled.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> isEnabledAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Send signal to the server
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void sendSignal(string signal, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Send signal to the server
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task sendSignalAsync(string signal, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Write message on servers' stdout or stderr.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void writeMessage(string message, int fd, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Write message on servers' stdout or stderr.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task writeMessageAsync(string message, int fd, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the server state.
        /// </summary>
        /// <returns>The server state.
        ///  </returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ServerState getState(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the server state.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ServerState> getStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the server pid.
        /// Note that the value returned by this method is system dependant. On Unix operating systems,
        ///  it's the pid value returned by the fork() system call and converted to an integer.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getPid(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the server pid.
        /// Note that the value returned by this method is system dependant. On Unix operating systems,
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getPidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the process proxy.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setProcess(global::Ice.ProcessPrx proc, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Set the process proxy.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setProcessAsync(global::Ice.ProcessPrx proc, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaObserverPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Initialization of the replica observer.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void replicaInit(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Initialization of the replica observer.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task replicaInitAsync(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Notification that a replica has been added.
        /// The node should establish a session with this new replica.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void replicaAdded(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Notification that a replica has been added.
        /// The node should establish a session with this new replica.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task replicaAddedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Notification that a replica has been removed.
        /// The node should destroy the session to this replica.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void replicaRemoved(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Notification that a replica has been removed.
        /// The node should destroy the session to this replica.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task replicaRemovedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface PatcherFeedbackPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// The patch completed successfully.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void finished(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// The patch completed successfully.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task finishedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// The patch on the given node failed for the given reason.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void failed(string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// The patch on the given node failed for the given reason.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task failedAsync(string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodePrx : FileReaderPrx, ReplicaObserverPrx
    {
        /// <summary>
        /// Load the given server.
        /// If the server resources weren't already created (database environment directories,
        ///  property files, etc), they will be created. The returned proxy is never null.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        ServerPrx loadServer(InternalServerDescriptor svr, string replicaName, out global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, out int activateTimeout, out int deactivateTimeout, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Load the given server.
        /// If the server resources weren't already created (database environment directories,
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<Node_LoadServerResult> loadServerAsync(InternalServerDescriptor svr, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Load the given server and ensure the server won't be restarted.
        /// If the server resources weren't already created
        ///  (database environment directories, property files, etc), they will be created. If the server can't be updated
        ///  without a restart, a DeploymentException is raised. The returned proxy is never null.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        ServerPrx loadServerWithoutRestart(InternalServerDescriptor svr, string replicaName, out global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, out int activateTimeout, out int deactivateTimeout, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Load the given server and ensure the server won't be restarted.
        /// If the server resources weren't already created
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<Node_LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the given server.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroyServer(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the given server.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyServerAsync(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the server if it's not active.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroyServerWithoutRestart(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the server if it's not active.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyServerWithoutRestartAsync(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Patch application and server distributions.
        /// If some servers using a distribution directory to patch are active,
        ///  this method will raise a PatchException unless shutdown is set to true. In which case the servers will be
        ///  shutdown.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void patch(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Patch application and server distributions.
        /// If some servers using a distribution directory to patch are active,
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task patchAsync(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Establish a session to the given replica, this method only returns once the registration was attempted (unlike
        ///  replicaAdded below).
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void registerWithReplica(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Establish a session to the given replica, this method only returns once the registration was attempted (unlike
        ///  replicaAdded below).
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task registerWithReplicaAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the node name.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the node name.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the node hostname.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getHostname(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the node hostname.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getHostnameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the node load.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        LoadInfo getLoad(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the node load.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LoadInfo> getLoadAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the number of processor sockets for the machine where this node is running.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getProcessorSocketCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the number of processor sockets for the machine where this node is running.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getProcessorSocketCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Shutdown the node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Shutdown the node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodeSessionPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// The node call this method to keep the session alive.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void keepAlive(LoadInfo load, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// The node call this method to keep the session alive.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task keepAliveAsync(LoadInfo load, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the replica observer.
        /// The node calls this method when it's ready to receive notifications for the replicas.
        ///  It only calls this for the session with the master.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setReplicaObserver(ReplicaObserverPrx observer, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Set the replica observer.
        /// The node calls this method when it's ready to receive notifications for the replicas.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setReplicaObserverAsync(ReplicaObserverPrx observer, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the node session timeout.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the node session timeout.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the node observer.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        NodeObserverPrx getObserver(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the node observer.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<NodeObserverPrx> getObserverAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Ask the registry to load the servers on the node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void loadServers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Ask the registry to load the servers on the node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task loadServersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the name of the servers deployed on the node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        string[] getServers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the name of the servers deployed on the node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string[]> getServersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Wait for the application update to complete (the application is completely updated once all the registry
        ///  replicas have been updated).
        /// This is used by the node to ensure that before to start a server all the
        ///  replicas have the up-to-date descriptor of the server.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void waitForApplicationUpdate(string application, int revision, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Wait for the application update to complete (the application is completely updated once all the registry
        ///  replicas have been updated).
        /// This is used by the node to ensure that before to start a server all the
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task waitForApplicationUpdateAsync(string application, int revision, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface DatabaseObserverPrx : ApplicationObserverPrx, ObjectObserverPrx, AdapterObserverPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaSessionPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// The replica call this method to keep the session alive.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void keepAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// The replica call this method to keep the session alive.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task keepAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the replica session timeout.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the replica session timeout.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the database observer.
        /// Once the observer is subscribed, it will receive the database and database updates.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setDatabaseObserver(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Set the database observer.
        /// Once the observer is subscribed, it will receive the database and database updates.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setDatabaseObserverAsync(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// This method sets the endpoints of the replica.
        /// This allows the master to create proxies with multiple endpoints
        ///  for replicated objects (e.g.: IceGrid::Query object).
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setEndpoints(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// This method sets the endpoints of the replica.
        /// This allows the master to create proxies with multiple endpoints
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setEndpointsAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Registers the replica well-known objects with the master.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void registerWellKnownObjects(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Registers the replica well-known objects with the master.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task registerWellKnownObjectsAsync(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the adapter direct proxy of the given adapter in the master.
        /// This is used to support dynamic registration
        ///  with the locator registry interface.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setAdapterDirectProxy(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Set the adapter direct proxy of the given adapter in the master.
        /// This is used to support dynamic registration
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Notify the master that an update was received.
        /// The master might wait for replication updates to be received by
        ///  all the replicas before to continue.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void receivedUpdate(TopicName name, int serial, string failure, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Notify the master that an update was received.
        /// The master might wait for replication updates to be received by
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task receivedUpdateAsync(TopicName name, int serial, string failure, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InternalRegistryPrx : FileReaderPrx
    {
        /// <summary>
        /// Register a node with the registry.
        /// If a node with the same name is already registered, [registerNode] will
        ///  overide the previous node only if it's not active.
        /// </summary>
        ///  <param name="info">Some information on the node.
        ///  </param>
        /// <param name="prx">The proxy of the node.
        ///  </param>
        /// <param name="loadInf">The load information of the node.
        ///  </param>
        /// <returns>The node session proxy.
        ///  </returns>
        /// <exception name="NodeActiveException">Raised if the node is already registered and currently active.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Register a node with the registry.
        /// If a node with the same name is already registered, [registerNode] will
        /// </summary>
        ///  <param name="info">Some information on the node.
        ///  </param>
        /// <param name="prx">The proxy of the node.
        ///  </param>
        /// <param name="loadInf">The load information of the node.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<NodeSessionPrx> registerNodeAsync(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Register a replica with the registry.
        /// If a replica with the  same name is already registered, [registerReplica]
        ///  will overide the previous replica only if it's not active.
        /// </summary>
        ///  <param name="info">Some information on the replica.
        ///  </param>
        /// <param name="prx">The proxy of the replica.
        ///  </param>
        /// <returns>The replica session proxy.
        ///  </returns>
        /// <exception name="ReplicaActiveException">Raised if the replica is already registered and currently active.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Register a replica with the registry.
        /// If a replica with the  same name is already registered, [registerReplica]
        /// </summary>
        ///  <param name="info">Some information on the replica.
        ///  </param>
        /// <param name="prx">The proxy of the replica.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ReplicaSessionPrx> registerReplicaAsync(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a session with the given registry replica.
        /// This method returns only once the session creation has been
        ///  attempted.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void registerWithReplica(InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a session with the given registry replica.
        /// This method returns only once the session creation has been
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task registerWithReplicaAsync(InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the proxies of all the nodes known by this registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        NodePrx[] getNodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the proxies of all the nodes known by this registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<NodePrx[]> getNodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return the proxies of all the registry replicas known by this registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        InternalRegistryPrx[] getReplicas(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return the proxies of all the registry replicas known by this registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<InternalRegistryPrx[]> getReplicasAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Return applications, adapters, objects from this replica.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        ApplicationInfo[] getApplications(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Return applications, adapters, objects from this replica.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<InternalRegistry_GetApplicationsResult> getApplicationsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        AdapterInfo[] getAdapters(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<InternalRegistry_GetAdaptersResult> getAdaptersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        ObjectInfo[] getObjects(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<InternalRegistry_GetObjectsResult> getObjectsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Shutdown this registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Shutdown this registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }
}

namespace IceGrid
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface AdapterOperations_
    {
        /// <summary>
        /// Activate this adapter.
        /// If this adapter can be activated, this will activate the adapter and return the direct
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> activateAsync(global::Ice.Current current = null);

        /// <summary>
        /// Get the adapter direct proxy.
        /// The adapter direct proxy is a proxy created with the object adapter. The proxy
        ///  contains the last known adapter endpoints.
        /// </summary>
        ///  <returns>A direct proxy containing the last known adapter endpoints if the adapter is already active.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.ObjectPrx getDirectProxy(global::Ice.Current current = null);

        /// <summary>
        /// Set the direct proxy for this adapter.
        /// </summary>
        /// <param name="The">direct proxy. The direct proxy should be created with the object adapter and should contain the
        ///  object adapter endpoints.
        ///  </param>
        /// <exception name="AdapterActiveException">The adapter is already active. It's not possible to override the direct proxy of
        ///  an active adapter.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setDirectProxy(global::Ice.ObjectPrx proxy, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface FileReaderOperations_
    {
        /// <summary>
        /// Count the number of given lines from the end of the file and return the file offset.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long getOffsetFromEnd(string filename, int lines, global::Ice.Current current = null);

        /// <summary>
        /// Read lines (or size bytes) at the specified position from the given file.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ServerOperations_ : FileReaderOperations_
    {
        /// <summary>
        /// Start the server.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task startAsync(global::Ice.Current current = null);

        /// <summary>
        /// Stop the server.
        /// This methods returns only when the server is deactivated. If the server doesn't stop after a
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task stopAsync(global::Ice.Current current = null);

        /// <summary>
        /// Check if the given server can be loaded on this node.
        /// </summary>
        /// <returns>True if the server is inactive.
        ///  </returns>
        /// <exception name="DeploymentException">Raised if the server can't be updated.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool checkUpdate(InternalServerDescriptor svr, bool noRestart, global::Ice.Current current = null);

        /// <summary>
        /// Enable or disable the server.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setEnabled(bool enable, global::Ice.Current current = null);

        /// <summary>
        /// Check if the server is enabled.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool isEnabled(global::Ice.Current current = null);

        /// <summary>
        /// Send signal to the server
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void sendSignal(string signal, global::Ice.Current current = null);

        /// <summary>
        /// Write message on servers' stdout or stderr.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void writeMessage(string message, int fd, global::Ice.Current current = null);

        /// <summary>
        /// Return the server state.
        /// </summary>
        /// <returns>The server state.
        ///  </returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ServerState getState(global::Ice.Current current = null);

        /// <summary>
        /// Get the server pid.
        /// Note that the value returned by this method is system dependant. On Unix operating systems,
        ///  it's the pid value returned by the fork() system call and converted to an integer.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int getPid(global::Ice.Current current = null);

        /// <summary>
        /// Set the process proxy.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task setProcessAsync(global::Ice.ProcessPrx proc, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaObserverOperations_
    {
        /// <summary>
        /// Initialization of the replica observer.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void replicaInit(InternalRegistryPrx[] replicas, global::Ice.Current current = null);

        /// <summary>
        /// Notification that a replica has been added.
        /// The node should establish a session with this new replica.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void replicaAdded(InternalRegistryPrx replica, global::Ice.Current current = null);

        /// <summary>
        /// Notification that a replica has been removed.
        /// The node should destroy the session to this replica.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void replicaRemoved(InternalRegistryPrx replica, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface PatcherFeedbackOperations_
    {
        /// <summary>
        /// The patch completed successfully.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void finished(global::Ice.Current current = null);

        /// <summary>
        /// The patch on the given node failed for the given reason.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void failed(string reason, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodeOperations_ : FileReaderOperations_, ReplicaObserverOperations_
    {
        /// <summary>
        /// Load the given server.
        /// If the server resources weren't already created (database environment directories,
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<Node_LoadServerResult> loadServerAsync(InternalServerDescriptor svr, string replicaName, global::Ice.Current current = null);

        /// <summary>
        /// Load the given server and ensure the server won't be restarted.
        /// If the server resources weren't already created
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<Node_LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, string replicaName, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the given server.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task destroyServerAsync(string name, string uuid, int revision, string replicaName, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the server if it's not active.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task destroyServerWithoutRestartAsync(string name, string uuid, int revision, string replicaName, global::Ice.Current current = null);

        /// <summary>
        /// Patch application and server distributions.
        /// If some servers using a distribution directory to patch are active,
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task patchAsync(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.Current current = null);

        /// <summary>
        /// Establish a session to the given replica, this method only returns once the registration was attempted (unlike
        ///  replicaAdded below).
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void registerWithReplica(InternalRegistryPrx replica, global::Ice.Current current = null);

        /// <summary>
        /// Get the node name.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getName(global::Ice.Current current = null);

        /// <summary>
        /// Get the node hostname.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getHostname(global::Ice.Current current = null);

        /// <summary>
        /// Get the node load.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        LoadInfo getLoad(global::Ice.Current current = null);

        /// <summary>
        /// Get the number of processor sockets for the machine where this node is running.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int getProcessorSocketCount(global::Ice.Current current = null);

        /// <summary>
        /// Shutdown the node.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodeSessionOperations_
    {
        /// <summary>
        /// The node call this method to keep the session alive.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void keepAlive(LoadInfo load, global::Ice.Current current = null);

        /// <summary>
        /// Set the replica observer.
        /// The node calls this method when it's ready to receive notifications for the replicas.
        ///  It only calls this for the session with the master.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setReplicaObserver(ReplicaObserverPrx observer, global::Ice.Current current = null);

        /// <summary>
        /// Return the node session timeout.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int getTimeout(global::Ice.Current current = null);

        /// <summary>
        /// Return the node observer.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        NodeObserverPrx getObserver(global::Ice.Current current = null);

        /// <summary>
        /// Ask the registry to load the servers on the node.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task loadServersAsync(global::Ice.Current current = null);

        /// <summary>
        /// Get the name of the servers deployed on the node.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] getServers(global::Ice.Current current = null);

        /// <summary>
        /// Wait for the application update to complete (the application is completely updated once all the registry
        ///  replicas have been updated).
        /// This is used by the node to ensure that before to start a server all the
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task waitForApplicationUpdateAsync(string application, int revision, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void destroy(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface DatabaseObserverOperations_ : ApplicationObserverOperations_, ObjectObserverOperations_, AdapterObserverOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaSessionOperations_
    {
        /// <summary>
        /// The replica call this method to keep the session alive.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void keepAlive(global::Ice.Current current = null);

        /// <summary>
        /// Return the replica session timeout.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int getTimeout(global::Ice.Current current = null);

        /// <summary>
        /// Set the database observer.
        /// Once the observer is subscribed, it will receive the database and database updates.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setDatabaseObserver(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.Current current = null);

        /// <summary>
        /// This method sets the endpoints of the replica.
        /// This allows the master to create proxies with multiple endpoints
        ///  for replicated objects (e.g.: IceGrid::Query object).
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setEndpoints(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.Current current = null);

        /// <summary>
        /// Registers the replica well-known objects with the master.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void registerWellKnownObjects(ObjectInfo[] objects, global::Ice.Current current = null);

        /// <summary>
        /// Set the adapter direct proxy of the given adapter in the master.
        /// This is used to support dynamic registration
        ///  with the locator registry interface.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setAdapterDirectProxy(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.Current current = null);

        /// <summary>
        /// Notify the master that an update was received.
        /// The master might wait for replication updates to be received by
        ///  all the replicas before to continue.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void receivedUpdate(TopicName name, int serial, string failure, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the session.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void destroy(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InternalRegistryOperations_ : FileReaderOperations_
    {
        /// <summary>
        /// Register a node with the registry.
        /// If a node with the same name is already registered, [registerNode] will
        ///  overide the previous node only if it's not active.
        /// </summary>
        ///  <param name="info">Some information on the node.
        ///  </param>
        /// <param name="prx">The proxy of the node.
        ///  </param>
        /// <param name="loadInf">The load information of the node.
        ///  </param>
        /// <returns>The node session proxy.
        ///  </returns>
        /// <exception name="NodeActiveException">Raised if the node is already registered and currently active.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.Current current = null);

        /// <summary>
        /// Register a replica with the registry.
        /// If a replica with the  same name is already registered, [registerReplica]
        ///  will overide the previous replica only if it's not active.
        /// </summary>
        ///  <param name="info">Some information on the replica.
        ///  </param>
        /// <param name="prx">The proxy of the replica.
        ///  </param>
        /// <returns>The replica session proxy.
        ///  </returns>
        /// <exception name="ReplicaActiveException">Raised if the replica is already registered and currently active.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.Current current = null);

        /// <summary>
        /// Create a session with the given registry replica.
        /// This method returns only once the session creation has been
        ///  attempted.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void registerWithReplica(InternalRegistryPrx prx, global::Ice.Current current = null);

        /// <summary>
        /// Return the proxies of all the nodes known by this registry.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        NodePrx[] getNodes(global::Ice.Current current = null);

        /// <summary>
        /// Return the proxies of all the registry replicas known by this registry.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        InternalRegistryPrx[] getReplicas(global::Ice.Current current = null);

        /// <summary>
        /// Return applications, adapters, objects from this replica.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ApplicationInfo[] getApplications(out long serial, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        AdapterInfo[] getAdapters(out long serial, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ObjectInfo[] getObjects(out long serial, global::Ice.Current current = null);

        /// <summary>
        /// Shutdown this registry.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace IceGrid
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InternalDbEnvDescriptorSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, InternalDbEnvDescriptor[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static InternalDbEnvDescriptor[] read(global::Ice.InputStream istr)
        {
            InternalDbEnvDescriptor[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new InternalDbEnvDescriptor[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<InternalDbEnvDescriptor>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InternalAdapterDescriptorSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, InternalAdapterDescriptor[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static InternalAdapterDescriptor[] read(global::Ice.InputStream istr)
        {
            InternalAdapterDescriptor[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new InternalAdapterDescriptor[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<InternalAdapterDescriptor>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class PropertyDescriptorSeqDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, PropertyDescriptor[]> e in v)
                {
                    ostr.writeString(e.Key);
                    PropertyDescriptorSeqHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]> r = new global::System.Collections.Generic.Dictionary<string, PropertyDescriptor[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                PropertyDescriptor[] v;
                v = PropertyDescriptorSeqHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class AdapterPrxHelper : global::Ice.ObjectPrxHelperBase, AdapterPrx
    {
        public AdapterPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Ice.ObjectPrx activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_activateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx getDirectProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDirectProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setDirectProxy(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setDirectProxyAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> activateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_activateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_activateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_activate_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_activate(context, synchronous, completed);
            return completed.Task;
        }

        private const string _activate_name = "activate";

        private void _iceI_activate(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _activate_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getDirectProxyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDirectProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_getDirectProxyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDirectProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_getDirectProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDirectProxy_name = "getDirectProxy";

        private void _iceI_getDirectProxy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _getDirectProxy_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterNotActiveException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setDirectProxyAsync(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setDirectProxyAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setDirectProxyAsync(global::Ice.ObjectPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setDirectProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setDirectProxy(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setDirectProxy_name = "setDirectProxy";

        private void _iceI_setDirectProxy(global::Ice.ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setDirectProxy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_proxy);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterActiveException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static AdapterPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AdapterPrx r = b as AdapterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                AdapterPrxHelper h = new AdapterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AdapterPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            AdapterPrx r = b as AdapterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                AdapterPrxHelper h = new AdapterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AdapterPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    AdapterPrxHelper h = new AdapterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AdapterPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    AdapterPrxHelper h = new AdapterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AdapterPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AdapterPrx r = b as AdapterPrx;
            if(r == null)
            {
                AdapterPrxHelper h = new AdapterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AdapterPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            AdapterPrxHelper h = new AdapterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Adapter"
        };

        public static string ice_staticId() => "::IceGrid::Adapter";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, AdapterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static AdapterPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                AdapterPrxHelper result = new AdapterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class AdapterPrxDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, AdapterPrx> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, AdapterPrx> e in v)
                {
                    ostr.writeString(e.Key);
                    AdapterPrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, AdapterPrx> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, AdapterPrx> r = new global::System.Collections.Generic.Dictionary<string, AdapterPrx>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                AdapterPrx v;
                v = AdapterPrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FileReaderPrxHelper : global::Ice.ObjectPrxHelperBase, FileReaderPrx
    {
        public FileReaderPrxHelper()
        {
        }

        #region Synchronous operations

        public long getOffsetFromEnd(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getOffsetFromEndAsync(filename, lines, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_readAsync(filename, pos, size, context, null, global::System.Threading.CancellationToken.None, true).Result;
                newPos = result_.newPos;
                lines = result_.lines;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<long> getOffsetFromEndAsync(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getOffsetFromEndAsync(filename, lines, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_getOffsetFromEndAsync(string iceP_filename, int iceP_lines, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getOffsetFromEnd_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_getOffsetFromEnd(iceP_filename, iceP_lines, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getOffsetFromEnd_name = "getOffsetFromEnd";

        private void _iceI_getOffsetFromEnd(string iceP_filename, int iceP_lines, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _getOffsetFromEnd_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeInt(iceP_lines);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<FileReader_ReadResult> readAsync(string filename, long pos, int size, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readAsync(filename, pos, size, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<FileReader_ReadResult> _iceI_readAsync(string iceP_filename, long iceP_pos, int iceP_size, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_read_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<FileReader_ReadResult>(progress, cancel);
            _iceI_read(iceP_filename, iceP_pos, iceP_size, context, synchronous, completed);
            return completed.Task;
        }

        private const string _read_name = "read";

        private void _iceI_read(string iceP_filename, long iceP_pos, int iceP_size, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<FileReader_ReadResult>(completed);
            outAsync.invoke(
                _read_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeLong(iceP_pos);
                    ostr.writeInt(iceP_size);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    FileReader_ReadResult ret = new FileReader_ReadResult();
                    ret.newPos = istr.readLong();
                    ret.lines = global::Ice.StringSeqHelper.read(istr);
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileReaderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileReaderPrx r = b as FileReaderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileReaderPrxHelper h = new FileReaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileReaderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileReaderPrx r = b as FileReaderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileReaderPrxHelper h = new FileReaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileReaderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileReaderPrxHelper h = new FileReaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileReaderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileReaderPrxHelper h = new FileReaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileReaderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileReaderPrx r = b as FileReaderPrx;
            if(r == null)
            {
                FileReaderPrxHelper h = new FileReaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileReaderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileReaderPrxHelper h = new FileReaderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader"
        };

        public static string ice_staticId() => "::IceGrid::FileReader";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileReaderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileReaderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileReaderPrxHelper result = new FileReaderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ServerPrxHelper : global::Ice.ObjectPrxHelperBase, ServerPrx
    {
        public ServerPrxHelper()
        {
        }

        #region Synchronous operations

        public long getOffsetFromEnd(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getOffsetFromEndAsync(filename, lines, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_readAsync(filename, pos, size, context, null, global::System.Threading.CancellationToken.None, true).Result;
                newPos = result_.newPos;
                lines = result_.lines;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void start(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_startAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_stopAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool checkUpdate(InternalServerDescriptor svr, bool noRestart, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_checkUpdateAsync(svr, noRestart, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setEnabled(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setEnabledAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool isEnabled(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_isEnabledAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sendSignal(string signal, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendSignalAsync(signal, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void writeMessage(string message, int fd, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_writeMessageAsync(message, fd, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ServerState getState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getStateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getPid(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getPidAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setProcess(global::Ice.ProcessPrx proc, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setProcessAsync(proc, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<long> getOffsetFromEndAsync(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getOffsetFromEndAsync(filename, lines, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_getOffsetFromEndAsync(string iceP_filename, int iceP_lines, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getOffsetFromEnd_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_getOffsetFromEnd(iceP_filename, iceP_lines, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getOffsetFromEnd_name = "getOffsetFromEnd";

        private void _iceI_getOffsetFromEnd(string iceP_filename, int iceP_lines, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _getOffsetFromEnd_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeInt(iceP_lines);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<FileReader_ReadResult> readAsync(string filename, long pos, int size, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readAsync(filename, pos, size, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<FileReader_ReadResult> _iceI_readAsync(string iceP_filename, long iceP_pos, int iceP_size, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_read_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<FileReader_ReadResult>(progress, cancel);
            _iceI_read(iceP_filename, iceP_pos, iceP_size, context, synchronous, completed);
            return completed.Task;
        }

        private const string _read_name = "read";

        private void _iceI_read(string iceP_filename, long iceP_pos, int iceP_size, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<FileReader_ReadResult>(completed);
            outAsync.invoke(
                _read_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeLong(iceP_pos);
                    ostr.writeInt(iceP_size);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    FileReader_ReadResult ret = new FileReader_ReadResult();
                    ret.newPos = istr.readLong();
                    ret.lines = global::Ice.StringSeqHelper.read(istr);
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task startAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_startAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_startAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_start_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_start(context, synchronous, completed);
            return completed.Task;
        }

        private const string _start_name = "start";

        private void _iceI_start(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _start_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ServerStartException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_stopAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_stopAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_stop_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_stop(context, synchronous, completed);
            return completed.Task;
        }

        private const string _stop_name = "stop";

        private void _iceI_stop(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _stop_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ServerStopException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<bool> checkUpdateAsync(InternalServerDescriptor svr, bool noRestart, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkUpdateAsync(svr, noRestart, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_checkUpdateAsync(InternalServerDescriptor iceP_svr, bool iceP_noRestart, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_checkUpdate_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_checkUpdate(iceP_svr, iceP_noRestart, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkUpdate_name = "checkUpdate";

        private void _iceI_checkUpdate(InternalServerDescriptor iceP_svr, bool iceP_noRestart, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _checkUpdate_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_svr);
                    ostr.writeBool(iceP_noRestart);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setEnabledAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setEnabledAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setEnabledAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setEnabled(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setEnabled_name = "setEnabled";

        private void _iceI_setEnabled(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setEnabled_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task<bool> isEnabledAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isEnabledAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_isEnabledAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_isEnabled_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_isEnabled(context, synchronous, completed);
            return completed.Task;
        }

        private const string _isEnabled_name = "isEnabled";

        private void _iceI_isEnabled(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _isEnabled_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task sendSignalAsync(string signal, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendSignalAsync(signal, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendSignalAsync(string iceP_signal, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_sendSignal_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendSignal(iceP_signal, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendSignal_name = "sendSignal";

        private void _iceI_sendSignal(string iceP_signal, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendSignal_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_signal);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(BadSignalException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task writeMessageAsync(string message, int fd, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_writeMessageAsync(message, fd, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_writeMessageAsync(string iceP_message, int iceP_fd, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_writeMessage(iceP_message, iceP_fd, context, synchronous, completed);
            return completed.Task;
        }

        private const string _writeMessage_name = "writeMessage";

        private void _iceI_writeMessage(string iceP_message, int iceP_fd, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _writeMessage_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_message);
                    ostr.writeInt(iceP_fd);
                });
        }

        public global::System.Threading.Tasks.Task<ServerState> getStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getStateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ServerState> _iceI_getStateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getState_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ServerState>(progress, cancel);
            _iceI_getState(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getState_name = "getState";

        private void _iceI_getState(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ServerState>(completed);
            outAsync.invoke(
                _getState_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    ServerState ret;
                    ret = (ServerState)istr.readEnum(6);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getPidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getPidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getPidAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPid_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getPid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPid_name = "getPid";

        private void _iceI_getPid(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getPid_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setProcessAsync(global::Ice.ProcessPrx proc, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setProcessAsync(proc, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setProcessAsync(global::Ice.ProcessPrx iceP_proc, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setProcess(iceP_proc, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setProcess_name = "setProcess";

        private void _iceI_setProcess(global::Ice.ProcessPrx iceP_proc, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setProcess_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.ProcessPrxHelper.write(ostr, iceP_proc);
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if(r == null)
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ServerPrxHelper h = new ServerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::Server"
        };

        public static string ice_staticId() => "::IceGrid::Server";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ServerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ServerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ServerPrxHelper result = new ServerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InternalRegistryPrxSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, InternalRegistryPrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    InternalRegistryPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static InternalRegistryPrx[] read(global::Ice.InputStream istr)
        {
            InternalRegistryPrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new InternalRegistryPrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = InternalRegistryPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ReplicaObserverPrxHelper : global::Ice.ObjectPrxHelperBase, ReplicaObserverPrx
    {
        public ReplicaObserverPrxHelper()
        {
        }

        #region Synchronous operations

        public void replicaInit(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaInitAsync(replicas, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void replicaAdded(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaAddedAsync(replica, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void replicaRemoved(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaRemovedAsync(replica, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task replicaInitAsync(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaInitAsync(replicas, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaInitAsync(InternalRegistryPrx[] iceP_replicas, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaInit(iceP_replicas, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaInit_name = "replicaInit";

        private void _iceI_replicaInit(InternalRegistryPrx[] iceP_replicas, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaInit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxSeqHelper.write(ostr, iceP_replicas);
                });
        }

        public global::System.Threading.Tasks.Task replicaAddedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaAddedAsync(replica, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaAddedAsync(InternalRegistryPrx iceP_replica, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaAdded(iceP_replica, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaAdded_name = "replicaAdded";

        private void _iceI_replicaAdded(InternalRegistryPrx iceP_replica, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaAdded_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_replica);
                });
        }

        public global::System.Threading.Tasks.Task replicaRemovedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaRemovedAsync(replica, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaRemovedAsync(InternalRegistryPrx iceP_replica, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaRemoved(iceP_replica, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaRemoved_name = "replicaRemoved";

        private void _iceI_replicaRemoved(InternalRegistryPrx iceP_replica, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaRemoved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_replica);
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if(r == null)
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::ReplicaObserver"
        };

        public static string ice_staticId() => "::IceGrid::ReplicaObserver";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ReplicaObserverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ReplicaObserverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ReplicaObserverPrxHelper result = new ReplicaObserverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class PatcherFeedbackPrxHelper : global::Ice.ObjectPrxHelperBase, PatcherFeedbackPrx
    {
        public PatcherFeedbackPrxHelper()
        {
        }

        #region Synchronous operations

        public void finished(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_finishedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void failed(string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_failedAsync(reason, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task finishedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_finishedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_finishedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_finished(context, synchronous, completed);
            return completed.Task;
        }

        private const string _finished_name = "finished";

        private void _iceI_finished(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _finished_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task failedAsync(string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_failedAsync(reason, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_failedAsync(string iceP_reason, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_failed(iceP_reason, context, synchronous, completed);
            return completed.Task;
        }

        private const string _failed_name = "failed";

        private void _iceI_failed(string iceP_reason, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _failed_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_reason);
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PatcherFeedbackPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PatcherFeedbackPrx r = b as PatcherFeedbackPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PatcherFeedbackPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PatcherFeedbackPrx r = b as PatcherFeedbackPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PatcherFeedbackPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PatcherFeedbackPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PatcherFeedbackPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PatcherFeedbackPrx r = b as PatcherFeedbackPrx;
            if(r == null)
            {
                PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PatcherFeedbackPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            PatcherFeedbackPrxHelper h = new PatcherFeedbackPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::PatcherFeedback"
        };

        public static string ice_staticId() => "::IceGrid::PatcherFeedback";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, PatcherFeedbackPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PatcherFeedbackPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PatcherFeedbackPrxHelper result = new PatcherFeedbackPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodePrxHelper : global::Ice.ObjectPrxHelperBase, NodePrx
    {
        public NodePrxHelper()
        {
        }

        #region Synchronous operations

        public long getOffsetFromEnd(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getOffsetFromEndAsync(filename, lines, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_readAsync(filename, pos, size, context, null, global::System.Threading.CancellationToken.None, true).Result;
                newPos = result_.newPos;
                lines = result_.lines;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void replicaInit(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaInitAsync(replicas, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void replicaAdded(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaAddedAsync(replica, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void replicaRemoved(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_replicaRemovedAsync(replica, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ServerPrx loadServer(InternalServerDescriptor svr, string replicaName, out global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, out int activateTimeout, out int deactivateTimeout, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_loadServerAsync(svr, replicaName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                adapters = result_.adapters;
                activateTimeout = result_.activateTimeout;
                deactivateTimeout = result_.deactivateTimeout;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ServerPrx loadServerWithoutRestart(InternalServerDescriptor svr, string replicaName, out global::System.Collections.Generic.Dictionary<string, AdapterPrx> adapters, out int activateTimeout, out int deactivateTimeout, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                adapters = result_.adapters;
                activateTimeout = result_.activateTimeout;
                deactivateTimeout = result_.deactivateTimeout;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroyServer(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroyServerWithoutRestart(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void patch(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_patchAsync(feedback, application, server, appDistrib, shutdown, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void registerWithReplica(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_registerWithReplicaAsync(replica, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string getHostname(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getHostnameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public LoadInfo getLoad(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getLoadAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getProcessorSocketCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getProcessorSocketCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<long> getOffsetFromEndAsync(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getOffsetFromEndAsync(filename, lines, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_getOffsetFromEndAsync(string iceP_filename, int iceP_lines, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getOffsetFromEnd_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_getOffsetFromEnd(iceP_filename, iceP_lines, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getOffsetFromEnd_name = "getOffsetFromEnd";

        private void _iceI_getOffsetFromEnd(string iceP_filename, int iceP_lines, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _getOffsetFromEnd_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeInt(iceP_lines);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<FileReader_ReadResult> readAsync(string filename, long pos, int size, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readAsync(filename, pos, size, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<FileReader_ReadResult> _iceI_readAsync(string iceP_filename, long iceP_pos, int iceP_size, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_read_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<FileReader_ReadResult>(progress, cancel);
            _iceI_read(iceP_filename, iceP_pos, iceP_size, context, synchronous, completed);
            return completed.Task;
        }

        private const string _read_name = "read";

        private void _iceI_read(string iceP_filename, long iceP_pos, int iceP_size, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<FileReader_ReadResult>(completed);
            outAsync.invoke(
                _read_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeLong(iceP_pos);
                    ostr.writeInt(iceP_size);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    FileReader_ReadResult ret = new FileReader_ReadResult();
                    ret.newPos = istr.readLong();
                    ret.lines = global::Ice.StringSeqHelper.read(istr);
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task replicaInitAsync(InternalRegistryPrx[] replicas, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaInitAsync(replicas, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaInitAsync(InternalRegistryPrx[] iceP_replicas, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaInit(iceP_replicas, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaInit_name = "replicaInit";

        private void _iceI_replicaInit(InternalRegistryPrx[] iceP_replicas, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaInit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxSeqHelper.write(ostr, iceP_replicas);
                });
        }

        public global::System.Threading.Tasks.Task replicaAddedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaAddedAsync(replica, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaAddedAsync(InternalRegistryPrx iceP_replica, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaAdded(iceP_replica, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaAdded_name = "replicaAdded";

        private void _iceI_replicaAdded(InternalRegistryPrx iceP_replica, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaAdded_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_replica);
                });
        }

        public global::System.Threading.Tasks.Task replicaRemovedAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_replicaRemovedAsync(replica, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_replicaRemovedAsync(InternalRegistryPrx iceP_replica, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_replicaRemoved(iceP_replica, context, synchronous, completed);
            return completed.Task;
        }

        private const string _replicaRemoved_name = "replicaRemoved";

        private void _iceI_replicaRemoved(InternalRegistryPrx iceP_replica, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _replicaRemoved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_replica);
                });
        }

        public global::System.Threading.Tasks.Task<Node_LoadServerResult> loadServerAsync(InternalServerDescriptor svr, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_loadServerAsync(svr, replicaName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Node_LoadServerResult> _iceI_loadServerAsync(InternalServerDescriptor iceP_svr, string iceP_replicaName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_loadServer_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Node_LoadServerResult>(progress, cancel);
            _iceI_loadServer(iceP_svr, iceP_replicaName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _loadServer_name = "loadServer";

        private void _iceI_loadServer(InternalServerDescriptor iceP_svr, string iceP_replicaName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Node_LoadServerResult>(completed);
            outAsync.invoke(
                _loadServer_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_svr);
                    ostr.writeString(iceP_replicaName);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Node_LoadServerResult ret = new Node_LoadServerResult();
                    ret.adapters = AdapterPrxDictHelper.read(istr);
                    ret.activateTimeout = istr.readInt();
                    ret.deactivateTimeout = istr.readInt();
                    ret.returnValue = ServerPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Node_LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_loadServerWithoutRestartAsync(svr, replicaName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Node_LoadServerWithoutRestartResult> _iceI_loadServerWithoutRestartAsync(InternalServerDescriptor iceP_svr, string iceP_replicaName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_loadServerWithoutRestart_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Node_LoadServerWithoutRestartResult>(progress, cancel);
            _iceI_loadServerWithoutRestart(iceP_svr, iceP_replicaName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _loadServerWithoutRestart_name = "loadServerWithoutRestart";

        private void _iceI_loadServerWithoutRestart(InternalServerDescriptor iceP_svr, string iceP_replicaName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Node_LoadServerWithoutRestartResult>(completed);
            outAsync.invoke(
                _loadServerWithoutRestart_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_svr);
                    ostr.writeString(iceP_replicaName);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Node_LoadServerWithoutRestartResult ret = new Node_LoadServerWithoutRestartResult();
                    ret.adapters = AdapterPrxDictHelper.read(istr);
                    ret.activateTimeout = istr.readInt();
                    ret.deactivateTimeout = istr.readInt();
                    ret.returnValue = ServerPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task destroyServerAsync(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyServerAsync(name, uuid, revision, replicaName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyServerAsync(string iceP_name, string iceP_uuid, int iceP_revision, string iceP_replicaName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_destroyServer_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroyServer(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroyServer_name = "destroyServer";

        private void _iceI_destroyServer(string iceP_name, string iceP_uuid, int iceP_revision, string iceP_replicaName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroyServer_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                    ostr.writeString(iceP_uuid);
                    ostr.writeInt(iceP_revision);
                    ostr.writeString(iceP_replicaName);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task destroyServerWithoutRestartAsync(string name, string uuid, int revision, string replicaName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyServerWithoutRestartAsync(name, uuid, revision, replicaName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyServerWithoutRestartAsync(string iceP_name, string iceP_uuid, int iceP_revision, string iceP_replicaName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_destroyServerWithoutRestart_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroyServerWithoutRestart(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroyServerWithoutRestart_name = "destroyServerWithoutRestart";

        private void _iceI_destroyServerWithoutRestart(string iceP_name, string iceP_uuid, int iceP_revision, string iceP_replicaName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroyServerWithoutRestart_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                    ostr.writeString(iceP_uuid);
                    ostr.writeInt(iceP_revision);
                    ostr.writeString(iceP_replicaName);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task patchAsync(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_patchAsync(feedback, application, server, appDistrib, shutdown, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_patchAsync(PatcherFeedbackPrx iceP_feedback, string iceP_application, string iceP_server, InternalDistributionDescriptor iceP_appDistrib, bool iceP_shutdown, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_patch(iceP_feedback, iceP_application, iceP_server, iceP_appDistrib, iceP_shutdown, context, synchronous, completed);
            return completed.Task;
        }

        private const string _patch_name = "patch";

        private void _iceI_patch(PatcherFeedbackPrx iceP_feedback, string iceP_application, string iceP_server, InternalDistributionDescriptor iceP_appDistrib, bool iceP_shutdown, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _patch_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    PatcherFeedbackPrxHelper.write(ostr, iceP_feedback);
                    ostr.writeString(iceP_application);
                    ostr.writeString(iceP_server);
                    ostr.writeValue(iceP_appDistrib);
                    ostr.writeBool(iceP_shutdown);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task registerWithReplicaAsync(InternalRegistryPrx replica, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerWithReplicaAsync(replica, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_registerWithReplicaAsync(InternalRegistryPrx iceP_replica, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_registerWithReplica(iceP_replica, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerWithReplica_name = "registerWithReplica";

        private void _iceI_registerWithReplica(InternalRegistryPrx iceP_replica, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _registerWithReplica_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_replica);
                });
        }

        public global::System.Threading.Tasks.Task<string> getNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getName_name = "getName";

        private void _iceI_getName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getName_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> getHostnameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getHostnameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getHostnameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getHostname_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getHostname(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getHostname_name = "getHostname";

        private void _iceI_getHostname(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getHostname_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<LoadInfo> getLoadAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLoadAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LoadInfo> _iceI_getLoadAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLoad_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<LoadInfo>(progress, cancel);
            _iceI_getLoad(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLoad_name = "getLoad";

        private void _iceI_getLoad(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LoadInfo>(completed);
            outAsync.invoke(
                _getLoad_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    LoadInfo ret = new LoadInfo();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getProcessorSocketCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getProcessorSocketCountAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getProcessorSocketCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getProcessorSocketCount_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getProcessorSocketCount(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getProcessorSocketCount_name = "getProcessorSocketCount";

        private void _iceI_getProcessorSocketCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getProcessorSocketCount_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static NodePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    NodePrxHelper h = new NodePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    NodePrxHelper h = new NodePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if(r == null)
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            NodePrxHelper h = new NodePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::Node",
            "::IceGrid::ReplicaObserver"
        };

        public static string ice_staticId() => "::IceGrid::Node";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, NodePrx v)
        {
            ostr.writeProxy(v);
        }

        public static NodePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                NodePrxHelper result = new NodePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodePrxSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, NodePrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    NodePrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static NodePrx[] read(global::Ice.InputStream istr)
        {
            NodePrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new NodePrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = NodePrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodeSessionPrxHelper : global::Ice.ObjectPrxHelperBase, NodeSessionPrx
    {
        public NodeSessionPrxHelper()
        {
        }

        #region Synchronous operations

        public void keepAlive(LoadInfo load, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_keepAliveAsync(load, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setReplicaObserver(ReplicaObserverPrx observer, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setReplicaObserverAsync(observer, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NodeObserverPrx getObserver(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getObserverAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void loadServers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_loadServersAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] getServers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getServersAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void waitForApplicationUpdate(string application, int revision, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_waitForApplicationUpdateAsync(application, revision, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task keepAliveAsync(LoadInfo load, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_keepAliveAsync(load, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_keepAliveAsync(LoadInfo iceP_load, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_keepAlive(iceP_load, context, synchronous, completed);
            return completed.Task;
        }

        private const string _keepAlive_name = "keepAlive";

        private void _iceI_keepAlive(LoadInfo iceP_load, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _keepAlive_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_load.ice_writeMembers(ostr);
                });
        }

        public global::System.Threading.Tasks.Task setReplicaObserverAsync(ReplicaObserverPrx observer, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setReplicaObserverAsync(observer, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setReplicaObserverAsync(ReplicaObserverPrx iceP_observer, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setReplicaObserver(iceP_observer, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setReplicaObserver_name = "setReplicaObserver";

        private void _iceI_setReplicaObserver(ReplicaObserverPrx iceP_observer, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setReplicaObserver_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ReplicaObserverPrxHelper.write(ostr, iceP_observer);
                });
        }

        public global::System.Threading.Tasks.Task<int> getTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getTimeoutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTimeout_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTimeout_name = "getTimeout";

        private void _iceI_getTimeout(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getTimeout_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NodeObserverPrx> getObserverAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getObserverAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NodeObserverPrx> _iceI_getObserverAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getObserver_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NodeObserverPrx>(progress, cancel);
            _iceI_getObserver(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getObserver_name = "getObserver";

        private void _iceI_getObserver(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NodeObserverPrx>(completed);
            outAsync.invoke(
                _getObserver_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    NodeObserverPrx ret;
                    ret = NodeObserverPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task loadServersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_loadServersAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_loadServersAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_loadServers(context, synchronous, completed);
            return completed.Task;
        }

        private const string _loadServers_name = "loadServers";

        private void _iceI_loadServers(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _loadServers_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<string[]> getServersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getServersAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_getServersAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getServers_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_getServers(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getServers_name = "getServers";

        private void _iceI_getServers(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _getServers_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task waitForApplicationUpdateAsync(string application, int revision, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_waitForApplicationUpdateAsync(application, revision, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_waitForApplicationUpdateAsync(string iceP_application, int iceP_revision, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_waitForApplicationUpdate(iceP_application, iceP_revision, context, synchronous, completed);
            return completed.Task;
        }

        private const string _waitForApplicationUpdate_name = "waitForApplicationUpdate";

        private void _iceI_waitForApplicationUpdate(string iceP_application, int iceP_revision, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _waitForApplicationUpdate_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_application);
                    ostr.writeInt(iceP_revision);
                });
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static NodeSessionPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodeSessionPrx r = b as NodeSessionPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                NodeSessionPrxHelper h = new NodeSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodeSessionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            NodeSessionPrx r = b as NodeSessionPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                NodeSessionPrxHelper h = new NodeSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodeSessionPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    NodeSessionPrxHelper h = new NodeSessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodeSessionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    NodeSessionPrxHelper h = new NodeSessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodeSessionPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodeSessionPrx r = b as NodeSessionPrx;
            if(r == null)
            {
                NodeSessionPrxHelper h = new NodeSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodeSessionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            NodeSessionPrxHelper h = new NodeSessionPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::NodeSession"
        };

        public static string ice_staticId() => "::IceGrid::NodeSession";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, NodeSessionPrx v)
        {
            ostr.writeProxy(v);
        }

        public static NodeSessionPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                NodeSessionPrxHelper result = new NodeSessionPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DatabaseObserverPrxHelper : global::Ice.ObjectPrxHelperBase, DatabaseObserverPrx
    {
        public DatabaseObserverPrxHelper()
        {
        }

        #region Synchronous operations

        public void applicationInit(int serial, ApplicationInfo[] applications, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_applicationInitAsync(serial, applications, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void applicationAdded(int serial, ApplicationInfo desc, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_applicationAddedAsync(serial, desc, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void applicationRemoved(int serial, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_applicationRemovedAsync(serial, name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void applicationUpdated(int serial, ApplicationUpdateInfo desc, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_applicationUpdatedAsync(serial, desc, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void objectInit(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_objectInitAsync(objects, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void objectAdded(ObjectInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_objectAddedAsync(info, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void objectUpdated(ObjectInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_objectUpdatedAsync(info, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void objectRemoved(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_objectRemovedAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void adapterInit(AdapterInfo[] adpts, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_adapterInitAsync(adpts, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void adapterAdded(AdapterInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_adapterAddedAsync(info, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void adapterUpdated(AdapterInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_adapterUpdatedAsync(info, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void adapterRemoved(string id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_adapterRemovedAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task applicationInitAsync(int serial, ApplicationInfo[] applications, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_applicationInitAsync(serial, applications, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_applicationInitAsync(int iceP_serial, ApplicationInfo[] iceP_applications, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_applicationInit(iceP_serial, iceP_applications, context, synchronous, completed);
            return completed.Task;
        }

        private const string _applicationInit_name = "applicationInit";

        private void _iceI_applicationInit(int iceP_serial, ApplicationInfo[] iceP_applications, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _applicationInit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_serial);
                    ApplicationInfoSeqHelper.write(ostr, iceP_applications);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task applicationAddedAsync(int serial, ApplicationInfo desc, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_applicationAddedAsync(serial, desc, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_applicationAddedAsync(int iceP_serial, ApplicationInfo iceP_desc, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_applicationAdded(iceP_serial, iceP_desc, context, synchronous, completed);
            return completed.Task;
        }

        private const string _applicationAdded_name = "applicationAdded";

        private void _iceI_applicationAdded(int iceP_serial, ApplicationInfo iceP_desc, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _applicationAdded_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_serial);
                    ApplicationInfo.ice_write(ostr, iceP_desc);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task applicationRemovedAsync(int serial, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_applicationRemovedAsync(serial, name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_applicationRemovedAsync(int iceP_serial, string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_applicationRemoved(iceP_serial, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _applicationRemoved_name = "applicationRemoved";

        private void _iceI_applicationRemoved(int iceP_serial, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _applicationRemoved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_serial);
                    ostr.writeString(iceP_name);
                });
        }

        public global::System.Threading.Tasks.Task applicationUpdatedAsync(int serial, ApplicationUpdateInfo desc, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_applicationUpdatedAsync(serial, desc, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_applicationUpdatedAsync(int iceP_serial, ApplicationUpdateInfo iceP_desc, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_applicationUpdated(iceP_serial, iceP_desc, context, synchronous, completed);
            return completed.Task;
        }

        private const string _applicationUpdated_name = "applicationUpdated";

        private void _iceI_applicationUpdated(int iceP_serial, ApplicationUpdateInfo iceP_desc, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _applicationUpdated_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_serial);
                    ApplicationUpdateInfo.ice_write(ostr, iceP_desc);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task objectInitAsync(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_objectInitAsync(objects, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_objectInitAsync(ObjectInfo[] iceP_objects, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_objectInit(iceP_objects, context, synchronous, completed);
            return completed.Task;
        }

        private const string _objectInit_name = "objectInit";

        private void _iceI_objectInit(ObjectInfo[] iceP_objects, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _objectInit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ObjectInfoSeqHelper.write(ostr, iceP_objects);
                });
        }

        public global::System.Threading.Tasks.Task objectAddedAsync(ObjectInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_objectAddedAsync(info, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_objectAddedAsync(ObjectInfo iceP_info, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_objectAdded(iceP_info, context, synchronous, completed);
            return completed.Task;
        }

        private const string _objectAdded_name = "objectAdded";

        private void _iceI_objectAdded(ObjectInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _objectAdded_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ObjectInfo.ice_write(ostr, iceP_info);
                });
        }

        public global::System.Threading.Tasks.Task objectUpdatedAsync(ObjectInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_objectUpdatedAsync(info, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_objectUpdatedAsync(ObjectInfo iceP_info, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_objectUpdated(iceP_info, context, synchronous, completed);
            return completed.Task;
        }

        private const string _objectUpdated_name = "objectUpdated";

        private void _iceI_objectUpdated(ObjectInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _objectUpdated_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ObjectInfo.ice_write(ostr, iceP_info);
                });
        }

        public global::System.Threading.Tasks.Task objectRemovedAsync(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_objectRemovedAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_objectRemovedAsync(global::Ice.Identity iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_objectRemoved(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _objectRemoved_name = "objectRemoved";

        private void _iceI_objectRemoved(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _objectRemoved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                });
        }

        public global::System.Threading.Tasks.Task adapterInitAsync(AdapterInfo[] adpts, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_adapterInitAsync(adpts, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_adapterInitAsync(AdapterInfo[] iceP_adpts, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_adapterInit(iceP_adpts, context, synchronous, completed);
            return completed.Task;
        }

        private const string _adapterInit_name = "adapterInit";

        private void _iceI_adapterInit(AdapterInfo[] iceP_adpts, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _adapterInit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    AdapterInfoSeqHelper.write(ostr, iceP_adpts);
                });
        }

        public global::System.Threading.Tasks.Task adapterAddedAsync(AdapterInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_adapterAddedAsync(info, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_adapterAddedAsync(AdapterInfo iceP_info, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_adapterAdded(iceP_info, context, synchronous, completed);
            return completed.Task;
        }

        private const string _adapterAdded_name = "adapterAdded";

        private void _iceI_adapterAdded(AdapterInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _adapterAdded_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    AdapterInfo.ice_write(ostr, iceP_info);
                });
        }

        public global::System.Threading.Tasks.Task adapterUpdatedAsync(AdapterInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_adapterUpdatedAsync(info, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_adapterUpdatedAsync(AdapterInfo iceP_info, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_adapterUpdated(iceP_info, context, synchronous, completed);
            return completed.Task;
        }

        private const string _adapterUpdated_name = "adapterUpdated";

        private void _iceI_adapterUpdated(AdapterInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _adapterUpdated_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    AdapterInfo.ice_write(ostr, iceP_info);
                });
        }

        public global::System.Threading.Tasks.Task adapterRemovedAsync(string id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_adapterRemovedAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_adapterRemovedAsync(string iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_adapterRemoved(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _adapterRemoved_name = "adapterRemoved";

        private void _iceI_adapterRemoved(string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _adapterRemoved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DatabaseObserverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DatabaseObserverPrx r = b as DatabaseObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DatabaseObserverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DatabaseObserverPrx r = b as DatabaseObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DatabaseObserverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DatabaseObserverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DatabaseObserverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DatabaseObserverPrx r = b as DatabaseObserverPrx;
            if(r == null)
            {
                DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DatabaseObserverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DatabaseObserverPrxHelper h = new DatabaseObserverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::AdapterObserver",
            "::IceGrid::ApplicationObserver",
            "::IceGrid::DatabaseObserver",
            "::IceGrid::ObjectObserver"
        };

        public static string ice_staticId() => "::IceGrid::DatabaseObserver";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DatabaseObserverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static DatabaseObserverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DatabaseObserverPrxHelper result = new DatabaseObserverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringLongDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, long> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, long> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeLong(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, long> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, long> r = new global::System.Collections.Generic.Dictionary<string, long>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                long v;
                v = istr.readLong();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ReplicaSessionPrxHelper : global::Ice.ObjectPrxHelperBase, ReplicaSessionPrx
    {
        public ReplicaSessionPrxHelper()
        {
        }

        #region Synchronous operations

        public void keepAlive(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_keepAliveAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setDatabaseObserver(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setDatabaseObserverAsync(dbObs, serials, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setEndpoints(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setEndpointsAsync(endpoints, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void registerWellKnownObjects(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_registerWellKnownObjectsAsync(objects, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setAdapterDirectProxy(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void receivedUpdate(TopicName name, int serial, string failure, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_receivedUpdateAsync(name, serial, failure, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task keepAliveAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_keepAliveAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_keepAliveAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_keepAlive(context, synchronous, completed);
            return completed.Task;
        }

        private const string _keepAlive_name = "keepAlive";

        private void _iceI_keepAlive(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _keepAlive_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<int> getTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getTimeoutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTimeout_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTimeout_name = "getTimeout";

        private void _iceI_getTimeout(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getTimeout_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setDatabaseObserverAsync(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setDatabaseObserverAsync(dbObs, serials, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setDatabaseObserverAsync(DatabaseObserverPrx iceP_dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> iceP_serials, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setDatabaseObserver_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setDatabaseObserver(iceP_dbObs, iceP_serials, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setDatabaseObserver_name = "setDatabaseObserver";

        private void _iceI_setDatabaseObserver(DatabaseObserverPrx iceP_dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> iceP_serials, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setDatabaseObserver_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DatabaseObserverPrxHelper.write(ostr, iceP_dbObs);
                    if(iceP_serials.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        StringLongDictHelper.write(ostr, iceP_serials.Value);
                        ostr.endSize(pos);
                    }
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DeploymentException)
                    {
                        throw;
                    }
                    catch(ObserverAlreadyRegisteredException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setEndpointsAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setEndpointsAsync(endpoints, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setEndpointsAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> iceP_endpoints, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setEndpoints(iceP_endpoints, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setEndpoints_name = "setEndpoints";

        private void _iceI_setEndpoints(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> iceP_endpoints, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setEndpoints_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringObjectProxyDictHelper.write(ostr, iceP_endpoints);
                });
        }

        public global::System.Threading.Tasks.Task registerWellKnownObjectsAsync(ObjectInfo[] objects, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerWellKnownObjectsAsync(objects, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_registerWellKnownObjectsAsync(ObjectInfo[] iceP_objects, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_registerWellKnownObjects(iceP_objects, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerWellKnownObjects_name = "registerWellKnownObjects";

        private void _iceI_registerWellKnownObjects(ObjectInfo[] iceP_objects, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _registerWellKnownObjects_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ObjectInfoSeqHelper.write(ostr, iceP_objects);
                });
        }

        public global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setAdapterDirectProxyAsync(string iceP_adapterId, string iceP_replicaGroupId, global::Ice.ObjectPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setAdapterDirectProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setAdapterDirectProxy_name = "setAdapterDirectProxy";

        private void _iceI_setAdapterDirectProxy(string iceP_adapterId, string iceP_replicaGroupId, global::Ice.ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setAdapterDirectProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_adapterId);
                    ostr.writeString(iceP_replicaGroupId);
                    ostr.writeProxy(iceP_proxy);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterExistsException)
                    {
                        throw;
                    }
                    catch(AdapterNotExistException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task receivedUpdateAsync(TopicName name, int serial, string failure, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_receivedUpdateAsync(name, serial, failure, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_receivedUpdateAsync(TopicName iceP_name, int iceP_serial, string iceP_failure, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_receivedUpdate(iceP_name, iceP_serial, iceP_failure, context, synchronous, completed);
            return completed.Task;
        }

        private const string _receivedUpdate_name = "receivedUpdate";

        private void _iceI_receivedUpdate(TopicName iceP_name, int iceP_serial, string iceP_failure, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _receivedUpdate_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_name, 4);
                    ostr.writeInt(iceP_serial);
                    ostr.writeString(iceP_failure);
                });
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ReplicaSessionPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaSessionPrx r = b as ReplicaSessionPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaSessionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaSessionPrx r = b as ReplicaSessionPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaSessionPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaSessionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaSessionPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaSessionPrx r = b as ReplicaSessionPrx;
            if(r == null)
            {
                ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaSessionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ReplicaSessionPrxHelper h = new ReplicaSessionPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::ReplicaSession"
        };

        public static string ice_staticId() => "::IceGrid::ReplicaSession";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ReplicaSessionPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ReplicaSessionPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ReplicaSessionPrxHelper result = new ReplicaSessionPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InternalRegistryPrxHelper : global::Ice.ObjectPrxHelperBase, InternalRegistryPrx
    {
        public InternalRegistryPrxHelper()
        {
        }

        #region Synchronous operations

        public long getOffsetFromEnd(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getOffsetFromEndAsync(filename, lines, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_readAsync(filename, pos, size, context, null, global::System.Threading.CancellationToken.None, true).Result;
                newPos = result_.newPos;
                lines = result_.lines;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerNodeAsync(info, prx, loadInf, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_registerReplicaAsync(info, prx, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void registerWithReplica(InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_registerWithReplicaAsync(prx, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NodePrx[] getNodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getNodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public InternalRegistryPrx[] getReplicas(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getReplicasAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ApplicationInfo[] getApplications(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getApplicationsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                serial = result_.serial;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public AdapterInfo[] getAdapters(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getAdaptersAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                serial = result_.serial;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ObjectInfo[] getObjects(out long serial, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getObjectsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                serial = result_.serial;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<long> getOffsetFromEndAsync(string filename, int lines, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getOffsetFromEndAsync(filename, lines, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_getOffsetFromEndAsync(string iceP_filename, int iceP_lines, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getOffsetFromEnd_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_getOffsetFromEnd(iceP_filename, iceP_lines, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getOffsetFromEnd_name = "getOffsetFromEnd";

        private void _iceI_getOffsetFromEnd(string iceP_filename, int iceP_lines, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _getOffsetFromEnd_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeInt(iceP_lines);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<FileReader_ReadResult> readAsync(string filename, long pos, int size, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readAsync(filename, pos, size, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<FileReader_ReadResult> _iceI_readAsync(string iceP_filename, long iceP_pos, int iceP_size, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_read_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<FileReader_ReadResult>(progress, cancel);
            _iceI_read(iceP_filename, iceP_pos, iceP_size, context, synchronous, completed);
            return completed.Task;
        }

        private const string _read_name = "read";

        private void _iceI_read(string iceP_filename, long iceP_pos, int iceP_size, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<FileReader_ReadResult>(completed);
            outAsync.invoke(
                _read_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_filename);
                    ostr.writeLong(iceP_pos);
                    ostr.writeInt(iceP_size);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(FileNotAvailableException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    FileReader_ReadResult ret = new FileReader_ReadResult();
                    ret.newPos = istr.readLong();
                    ret.lines = global::Ice.StringSeqHelper.read(istr);
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NodeSessionPrx> registerNodeAsync(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerNodeAsync(info, prx, loadInf, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NodeSessionPrx> _iceI_registerNodeAsync(InternalNodeInfo iceP_info, NodePrx iceP_prx, LoadInfo iceP_loadInf, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerNode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NodeSessionPrx>(progress, cancel);
            _iceI_registerNode(iceP_info, iceP_prx, iceP_loadInf, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerNode_name = "registerNode";

        private void _iceI_registerNode(InternalNodeInfo iceP_info, NodePrx iceP_prx, LoadInfo iceP_loadInf, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NodeSessionPrx>(completed);
            outAsync.invoke(
                _registerNode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_info);
                    NodePrxHelper.write(ostr, iceP_prx);
                    iceP_loadInf.ice_writeMembers(ostr);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(NodeActiveException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    NodeSessionPrx ret;
                    ret = NodeSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ReplicaSessionPrx> registerReplicaAsync(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerReplicaAsync(info, prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ReplicaSessionPrx> _iceI_registerReplicaAsync(InternalReplicaInfo iceP_info, InternalRegistryPrx iceP_prx, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_registerReplica_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ReplicaSessionPrx>(progress, cancel);
            _iceI_registerReplica(iceP_info, iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerReplica_name = "registerReplica";

        private void _iceI_registerReplica(InternalReplicaInfo iceP_info, InternalRegistryPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ReplicaSessionPrx>(completed);
            outAsync.invoke(
                _registerReplica_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_info);
                    InternalRegistryPrxHelper.write(ostr, iceP_prx);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(ReplicaActiveException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    ReplicaSessionPrx ret;
                    ret = ReplicaSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task registerWithReplicaAsync(InternalRegistryPrx prx, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_registerWithReplicaAsync(prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_registerWithReplicaAsync(InternalRegistryPrx iceP_prx, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_registerWithReplica(iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _registerWithReplica_name = "registerWithReplica";

        private void _iceI_registerWithReplica(InternalRegistryPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _registerWithReplica_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    InternalRegistryPrxHelper.write(ostr, iceP_prx);
                });
        }

        public global::System.Threading.Tasks.Task<NodePrx[]> getNodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getNodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NodePrx[]> _iceI_getNodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getNodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NodePrx[]>(progress, cancel);
            _iceI_getNodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getNodes_name = "getNodes";

        private void _iceI_getNodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NodePrx[]>(completed);
            outAsync.invoke(
                _getNodes_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    NodePrx[] ret;
                    ret = NodePrxSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<InternalRegistryPrx[]> getReplicasAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getReplicasAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<InternalRegistryPrx[]> _iceI_getReplicasAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getReplicas_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<InternalRegistryPrx[]>(progress, cancel);
            _iceI_getReplicas(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getReplicas_name = "getReplicas";

        private void _iceI_getReplicas(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<InternalRegistryPrx[]>(completed);
            outAsync.invoke(
                _getReplicas_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    InternalRegistryPrx[] ret;
                    ret = InternalRegistryPrxSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<InternalRegistry_GetApplicationsResult> getApplicationsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getApplicationsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<InternalRegistry_GetApplicationsResult> _iceI_getApplicationsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getApplications_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<InternalRegistry_GetApplicationsResult>(progress, cancel);
            _iceI_getApplications(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getApplications_name = "getApplications";

        private void _iceI_getApplications(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<InternalRegistry_GetApplicationsResult>(completed);
            outAsync.invoke(
                _getApplications_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    InternalRegistry_GetApplicationsResult ret = new InternalRegistry_GetApplicationsResult();
                    ret.serial = istr.readLong();
                    ret.returnValue = ApplicationInfoSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<InternalRegistry_GetAdaptersResult> getAdaptersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAdaptersAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<InternalRegistry_GetAdaptersResult> _iceI_getAdaptersAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getAdapters_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<InternalRegistry_GetAdaptersResult>(progress, cancel);
            _iceI_getAdapters(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getAdapters_name = "getAdapters";

        private void _iceI_getAdapters(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<InternalRegistry_GetAdaptersResult>(completed);
            outAsync.invoke(
                _getAdapters_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    InternalRegistry_GetAdaptersResult ret = new InternalRegistry_GetAdaptersResult();
                    ret.serial = istr.readLong();
                    ret.returnValue = AdapterInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<InternalRegistry_GetObjectsResult> getObjectsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getObjectsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<InternalRegistry_GetObjectsResult> _iceI_getObjectsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getObjects_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<InternalRegistry_GetObjectsResult>(progress, cancel);
            _iceI_getObjects(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getObjects_name = "getObjects";

        private void _iceI_getObjects(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<InternalRegistry_GetObjectsResult>(completed);
            outAsync.invoke(
                _getObjects_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    InternalRegistry_GetObjectsResult ret = new InternalRegistry_GetObjectsResult();
                    ret.serial = istr.readLong();
                    ret.returnValue = ObjectInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static InternalRegistryPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InternalRegistryPrx r = b as InternalRegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InternalRegistryPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            InternalRegistryPrx r = b as InternalRegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InternalRegistryPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InternalRegistryPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InternalRegistryPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InternalRegistryPrx r = b as InternalRegistryPrx;
            if(r == null)
            {
                InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InternalRegistryPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            InternalRegistryPrxHelper h = new InternalRegistryPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::InternalRegistry"
        };

        public static string ice_staticId() => "::IceGrid::InternalRegistry";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, InternalRegistryPrx v)
        {
            ostr.writeProxy(v);
        }

        public static InternalRegistryPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                InternalRegistryPrxHelper result = new InternalRegistryPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class AdapterDisp_ : global::Ice.ObjectImpl, Adapter
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> activateAsync(global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx getDirectProxy(global::Ice.Current current = null);

        public abstract void setDirectProxy(global::Ice.ObjectPrx proxy, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Adapter"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::Adapter";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_activate(Adapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask<global::Ice.ObjectPrx>(obj.activateAsync(current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDirectProxy(Adapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getDirectProxy(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setDirectProxy(Adapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.ObjectPrx iceP_proxy;
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            obj.setDirectProxy(iceP_proxy, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "activate",
            "getDirectProxy",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setDirectProxy"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_activate(this, inS, current);
                }
                case 1:
                {
                    return iceD_getDirectProxy(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_setDirectProxy(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class FileReaderDisp_ : global::Ice.ObjectImpl, FileReader
    {
        #region Slice operations

        public abstract long getOffsetFromEnd(string filename, int lines, global::Ice.Current current = null);

        public abstract bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::FileReader";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getOffsetFromEnd(FileReader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_filename;
            int iceP_lines;
            iceP_filename = istr.readString();
            iceP_lines = istr.readInt();
            inS.endReadParams();
            var ret = obj.getOffsetFromEnd(iceP_filename, iceP_lines, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_read(FileReader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_filename;
            long iceP_pos;
            int iceP_size;
            iceP_filename = istr.readString();
            iceP_pos = istr.readLong();
            iceP_size = istr.readInt();
            inS.endReadParams();
            long iceP_newPos;
            string[] iceP_lines;
            var ret = obj.read(iceP_filename, iceP_pos, iceP_size, out iceP_newPos, out iceP_lines, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(iceP_newPos);
            global::Ice.StringSeqHelper.write(ostr, iceP_lines);
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getOffsetFromEnd",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "read"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getOffsetFromEnd(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_read(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ServerDisp_ : global::Ice.ObjectImpl, Server
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task startAsync(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task stopAsync(global::Ice.Current current = null);

        public abstract bool checkUpdate(InternalServerDescriptor svr, bool noRestart, global::Ice.Current current = null);

        public abstract void setEnabled(bool enable, global::Ice.Current current = null);

        public abstract bool isEnabled(global::Ice.Current current = null);

        public abstract void sendSignal(string signal, global::Ice.Current current = null);

        public abstract void writeMessage(string message, int fd, global::Ice.Current current = null);

        public abstract ServerState getState(global::Ice.Current current = null);

        public abstract int getPid(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task setProcessAsync(global::Ice.ProcessPrx proc, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract long getOffsetFromEnd(string filename, int lines, global::Ice.Current current = null);

        public abstract bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::Server"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::Server";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_start(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.startAsync(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_stop(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.stopAsync(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkUpdate(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalServerDescriptor iceP_svr;
            iceP_svr = null;
            bool iceP_noRestart;
            istr.readValue((InternalServerDescriptor v) => {iceP_svr = v; });
            iceP_noRestart = istr.readBool();
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.checkUpdate(iceP_svr, iceP_noRestart, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setEnabled(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.setEnabled(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isEnabled(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.isEnabled(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendSignal(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_signal;
            iceP_signal = istr.readString();
            inS.endReadParams();
            obj.sendSignal(iceP_signal, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_writeMessage(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_message;
            int iceP_fd;
            iceP_message = istr.readString();
            iceP_fd = istr.readInt();
            inS.endReadParams();
            obj.writeMessage(iceP_message, iceP_fd, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getState(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getState(current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 6);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getPid(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getPid(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setProcess(Server obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.ProcessPrx iceP_proc;
            iceP_proc = global::Ice.ProcessPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.setProcessAsync(iceP_proc, current));
        }

        private static readonly string[] _all =
        {
            "checkUpdate",
            "getOffsetFromEnd",
            "getPid",
            "getState",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "isEnabled",
            "read",
            "sendSignal",
            "setEnabled",
            "setProcess",
            "start",
            "stop",
            "writeMessage"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_checkUpdate(this, inS, current);
                }
                case 1:
                {
                    return FileReaderDisp_.iceD_getOffsetFromEnd(this, inS, current);
                }
                case 2:
                {
                    return iceD_getPid(this, inS, current);
                }
                case 3:
                {
                    return iceD_getState(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_isEnabled(this, inS, current);
                }
                case 9:
                {
                    return FileReaderDisp_.iceD_read(this, inS, current);
                }
                case 10:
                {
                    return iceD_sendSignal(this, inS, current);
                }
                case 11:
                {
                    return iceD_setEnabled(this, inS, current);
                }
                case 12:
                {
                    return iceD_setProcess(this, inS, current);
                }
                case 13:
                {
                    return iceD_start(this, inS, current);
                }
                case 14:
                {
                    return iceD_stop(this, inS, current);
                }
                case 15:
                {
                    return iceD_writeMessage(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ReplicaObserverDisp_ : global::Ice.ObjectImpl, ReplicaObserver
    {
        #region Slice operations

        public abstract void replicaInit(InternalRegistryPrx[] replicas, global::Ice.Current current = null);

        public abstract void replicaAdded(InternalRegistryPrx replica, global::Ice.Current current = null);

        public abstract void replicaRemoved(InternalRegistryPrx replica, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::ReplicaObserver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::ReplicaObserver";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_replicaInit(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalRegistryPrx[] iceP_replicas;
            iceP_replicas = InternalRegistryPrxSeqHelper.read(istr);
            inS.endReadParams();
            obj.replicaInit(iceP_replicas, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_replicaAdded(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalRegistryPrx iceP_replica;
            iceP_replica = InternalRegistryPrxHelper.read(istr);
            inS.endReadParams();
            obj.replicaAdded(iceP_replica, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_replicaRemoved(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalRegistryPrx iceP_replica;
            iceP_replica = InternalRegistryPrxHelper.read(istr);
            inS.endReadParams();
            obj.replicaRemoved(iceP_replica, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "replicaAdded",
            "replicaInit",
            "replicaRemoved"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_replicaAdded(this, inS, current);
                }
                case 5:
                {
                    return iceD_replicaInit(this, inS, current);
                }
                case 6:
                {
                    return iceD_replicaRemoved(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class PatcherFeedbackDisp_ : global::Ice.ObjectImpl, PatcherFeedback
    {
        #region Slice operations

        public abstract void finished(global::Ice.Current current = null);

        public abstract void failed(string reason, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::PatcherFeedback"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::PatcherFeedback";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_finished(PatcherFeedback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.finished(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_failed(PatcherFeedback obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_reason;
            iceP_reason = istr.readString();
            inS.endReadParams();
            obj.failed(iceP_reason, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "failed",
            "finished",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_failed(this, inS, current);
                }
                case 1:
                {
                    return iceD_finished(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class NodeDisp_ : global::Ice.ObjectImpl, Node
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<Node_LoadServerResult> loadServerAsync(InternalServerDescriptor svr, string replicaName, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<Node_LoadServerWithoutRestartResult> loadServerWithoutRestartAsync(InternalServerDescriptor svr, string replicaName, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task destroyServerAsync(string name, string uuid, int revision, string replicaName, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task destroyServerWithoutRestartAsync(string name, string uuid, int revision, string replicaName, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task patchAsync(PatcherFeedbackPrx feedback, string application, string server, InternalDistributionDescriptor appDistrib, bool shutdown, global::Ice.Current current = null);

        public abstract void registerWithReplica(InternalRegistryPrx replica, global::Ice.Current current = null);

        public abstract string getName(global::Ice.Current current = null);

        public abstract string getHostname(global::Ice.Current current = null);

        public abstract LoadInfo getLoad(global::Ice.Current current = null);

        public abstract int getProcessorSocketCount(global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract long getOffsetFromEnd(string filename, int lines, global::Ice.Current current = null);

        public abstract bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.Current current = null);

        public abstract void replicaInit(InternalRegistryPrx[] replicas, global::Ice.Current current = null);

        public abstract void replicaAdded(InternalRegistryPrx replica, global::Ice.Current current = null);

        public abstract void replicaRemoved(InternalRegistryPrx replica, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::Node",
            "::IceGrid::ReplicaObserver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::Node";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_loadServer(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            InternalServerDescriptor iceP_svr;
            iceP_svr = null;
            string iceP_replicaName;
            istr.readValue((InternalServerDescriptor v) => {iceP_svr = v; });
            iceP_replicaName = istr.readString();
            istr.readPendingValues();
            inS.endReadParams();
            return inS.setResultTask<Node_LoadServerResult>(obj.loadServerAsync(iceP_svr, iceP_replicaName, current),
                (ostr, ret) =>
                {
                    AdapterPrxDictHelper.write(ostr, ret.adapters);
                    ostr.writeInt(ret.activateTimeout);
                    ostr.writeInt(ret.deactivateTimeout);
                    ServerPrxHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_loadServerWithoutRestart(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            InternalServerDescriptor iceP_svr;
            iceP_svr = null;
            string iceP_replicaName;
            istr.readValue((InternalServerDescriptor v) => {iceP_svr = v; });
            iceP_replicaName = istr.readString();
            istr.readPendingValues();
            inS.endReadParams();
            return inS.setResultTask<Node_LoadServerWithoutRestartResult>(obj.loadServerWithoutRestartAsync(iceP_svr, iceP_replicaName, current),
                (ostr, ret) =>
                {
                    AdapterPrxDictHelper.write(ostr, ret.adapters);
                    ostr.writeInt(ret.activateTimeout);
                    ostr.writeInt(ret.deactivateTimeout);
                    ServerPrxHelper.write(ostr, ret.returnValue);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroyServer(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            string iceP_uuid;
            int iceP_revision;
            string iceP_replicaName;
            iceP_name = istr.readString();
            iceP_uuid = istr.readString();
            iceP_revision = istr.readInt();
            iceP_replicaName = istr.readString();
            inS.endReadParams();
            return inS.setResultTask(obj.destroyServerAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroyServerWithoutRestart(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            string iceP_uuid;
            int iceP_revision;
            string iceP_replicaName;
            iceP_name = istr.readString();
            iceP_uuid = istr.readString();
            iceP_revision = istr.readInt();
            iceP_replicaName = istr.readString();
            inS.endReadParams();
            return inS.setResultTask(obj.destroyServerWithoutRestartAsync(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_patch(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            PatcherFeedbackPrx iceP_feedback;
            string iceP_application;
            string iceP_server;
            InternalDistributionDescriptor iceP_appDistrib;
            iceP_appDistrib = null;
            bool iceP_shutdown;
            iceP_feedback = PatcherFeedbackPrxHelper.read(istr);
            iceP_application = istr.readString();
            iceP_server = istr.readString();
            istr.readValue((InternalDistributionDescriptor v) => {iceP_appDistrib = v; });
            iceP_shutdown = istr.readBool();
            istr.readPendingValues();
            inS.endReadParams();
            return inS.setResultTask(obj.patchAsync(iceP_feedback, iceP_application, iceP_server, iceP_appDistrib, iceP_shutdown, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerWithReplica(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalRegistryPrx iceP_replica;
            iceP_replica = InternalRegistryPrxHelper.read(istr);
            inS.endReadParams();
            obj.registerWithReplica(iceP_replica, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getName(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getName(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getHostname(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getHostname(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getLoad(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLoad(current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getProcessorSocketCount(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getProcessorSocketCount(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "destroyServer",
            "destroyServerWithoutRestart",
            "getHostname",
            "getLoad",
            "getName",
            "getOffsetFromEnd",
            "getProcessorSocketCount",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "loadServer",
            "loadServerWithoutRestart",
            "patch",
            "read",
            "registerWithReplica",
            "replicaAdded",
            "replicaInit",
            "replicaRemoved",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_destroyServer(this, inS, current);
                }
                case 1:
                {
                    return iceD_destroyServerWithoutRestart(this, inS, current);
                }
                case 2:
                {
                    return iceD_getHostname(this, inS, current);
                }
                case 3:
                {
                    return iceD_getLoad(this, inS, current);
                }
                case 4:
                {
                    return iceD_getName(this, inS, current);
                }
                case 5:
                {
                    return FileReaderDisp_.iceD_getOffsetFromEnd(this, inS, current);
                }
                case 6:
                {
                    return iceD_getProcessorSocketCount(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 10:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 11:
                {
                    return iceD_loadServer(this, inS, current);
                }
                case 12:
                {
                    return iceD_loadServerWithoutRestart(this, inS, current);
                }
                case 13:
                {
                    return iceD_patch(this, inS, current);
                }
                case 14:
                {
                    return FileReaderDisp_.iceD_read(this, inS, current);
                }
                case 15:
                {
                    return iceD_registerWithReplica(this, inS, current);
                }
                case 16:
                {
                    return ReplicaObserverDisp_.iceD_replicaAdded(this, inS, current);
                }
                case 17:
                {
                    return ReplicaObserverDisp_.iceD_replicaInit(this, inS, current);
                }
                case 18:
                {
                    return ReplicaObserverDisp_.iceD_replicaRemoved(this, inS, current);
                }
                case 19:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class NodeSessionDisp_ : global::Ice.ObjectImpl, NodeSession
    {
        #region Slice operations

        public abstract void keepAlive(LoadInfo load, global::Ice.Current current = null);

        public abstract void setReplicaObserver(ReplicaObserverPrx observer, global::Ice.Current current = null);

        public abstract int getTimeout(global::Ice.Current current = null);

        public abstract NodeObserverPrx getObserver(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task loadServersAsync(global::Ice.Current current = null);

        public abstract string[] getServers(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task waitForApplicationUpdateAsync(string application, int revision, global::Ice.Current current = null);

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::NodeSession"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::NodeSession";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_keepAlive(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LoadInfo iceP_load;
            iceP_load = new LoadInfo();
            iceP_load.ice_readMembers(istr);
            inS.endReadParams();
            obj.keepAlive(iceP_load, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setReplicaObserver(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ReplicaObserverPrx iceP_observer;
            iceP_observer = ReplicaObserverPrxHelper.read(istr);
            inS.endReadParams();
            obj.setReplicaObserver(iceP_observer, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTimeout(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTimeout(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getObserver(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getObserver(current);
            var ostr = inS.startWriteParams();
            NodeObserverPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_loadServers(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask(obj.loadServersAsync(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getServers(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getServers(current);
            var ostr = inS.startWriteParams();
            global::Ice.StringSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_waitForApplicationUpdate(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_application;
            int iceP_revision;
            iceP_application = istr.readString();
            iceP_revision = istr.readInt();
            inS.endReadParams();
            return inS.setResultTask(obj.waitForApplicationUpdateAsync(iceP_application, iceP_revision, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroy(NodeSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.destroy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "destroy",
            "getObserver",
            "getServers",
            "getTimeout",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "keepAlive",
            "loadServers",
            "setReplicaObserver",
            "waitForApplicationUpdate"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_destroy(this, inS, current);
                }
                case 1:
                {
                    return iceD_getObserver(this, inS, current);
                }
                case 2:
                {
                    return iceD_getServers(this, inS, current);
                }
                case 3:
                {
                    return iceD_getTimeout(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_keepAlive(this, inS, current);
                }
                case 9:
                {
                    return iceD_loadServers(this, inS, current);
                }
                case 10:
                {
                    return iceD_setReplicaObserver(this, inS, current);
                }
                case 11:
                {
                    return iceD_waitForApplicationUpdate(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class DatabaseObserverDisp_ : global::Ice.ObjectImpl, DatabaseObserver
    {
        #region Inherited Slice operations

        public abstract void applicationInit(int serial, ApplicationInfo[] applications, global::Ice.Current current = null);

        public abstract void applicationAdded(int serial, ApplicationInfo desc, global::Ice.Current current = null);

        public abstract void applicationRemoved(int serial, string name, global::Ice.Current current = null);

        public abstract void applicationUpdated(int serial, ApplicationUpdateInfo desc, global::Ice.Current current = null);

        public abstract void adapterInit(AdapterInfo[] adpts, global::Ice.Current current = null);

        public abstract void adapterAdded(AdapterInfo info, global::Ice.Current current = null);

        public abstract void adapterUpdated(AdapterInfo info, global::Ice.Current current = null);

        public abstract void adapterRemoved(string id, global::Ice.Current current = null);

        public abstract void objectInit(ObjectInfo[] objects, global::Ice.Current current = null);

        public abstract void objectAdded(ObjectInfo info, global::Ice.Current current = null);

        public abstract void objectUpdated(ObjectInfo info, global::Ice.Current current = null);

        public abstract void objectRemoved(global::Ice.Identity id, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::AdapterObserver",
            "::IceGrid::ApplicationObserver",
            "::IceGrid::DatabaseObserver",
            "::IceGrid::ObjectObserver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::DatabaseObserver";
        }

        #endregion

        private static readonly string[] _all =
        {
            "adapterAdded",
            "adapterInit",
            "adapterRemoved",
            "adapterUpdated",
            "applicationAdded",
            "applicationInit",
            "applicationRemoved",
            "applicationUpdated",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "objectAdded",
            "objectInit",
            "objectRemoved",
            "objectUpdated"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return AdapterObserverDisp_.iceD_adapterAdded(this, inS, current);
                }
                case 1:
                {
                    return AdapterObserverDisp_.iceD_adapterInit(this, inS, current);
                }
                case 2:
                {
                    return AdapterObserverDisp_.iceD_adapterRemoved(this, inS, current);
                }
                case 3:
                {
                    return AdapterObserverDisp_.iceD_adapterUpdated(this, inS, current);
                }
                case 4:
                {
                    return ApplicationObserverDisp_.iceD_applicationAdded(this, inS, current);
                }
                case 5:
                {
                    return ApplicationObserverDisp_.iceD_applicationInit(this, inS, current);
                }
                case 6:
                {
                    return ApplicationObserverDisp_.iceD_applicationRemoved(this, inS, current);
                }
                case 7:
                {
                    return ApplicationObserverDisp_.iceD_applicationUpdated(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 10:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 11:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 12:
                {
                    return ObjectObserverDisp_.iceD_objectAdded(this, inS, current);
                }
                case 13:
                {
                    return ObjectObserverDisp_.iceD_objectInit(this, inS, current);
                }
                case 14:
                {
                    return ObjectObserverDisp_.iceD_objectRemoved(this, inS, current);
                }
                case 15:
                {
                    return ObjectObserverDisp_.iceD_objectUpdated(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ReplicaSessionDisp_ : global::Ice.ObjectImpl, ReplicaSession
    {
        #region Slice operations

        public abstract void keepAlive(global::Ice.Current current = null);

        public abstract int getTimeout(global::Ice.Current current = null);

        public abstract void setDatabaseObserver(DatabaseObserverPrx dbObs, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> serials, global::Ice.Current current = null);

        public abstract void setEndpoints(global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> endpoints, global::Ice.Current current = null);

        public abstract void registerWellKnownObjects(ObjectInfo[] objects, global::Ice.Current current = null);

        public abstract void setAdapterDirectProxy(string adapterId, string replicaGroupId, global::Ice.ObjectPrx proxy, global::Ice.Current current = null);

        public abstract void receivedUpdate(TopicName name, int serial, string failure, global::Ice.Current current = null);

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::ReplicaSession"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::ReplicaSession";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_keepAlive(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.keepAlive(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTimeout(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTimeout(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setDatabaseObserver(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            DatabaseObserverPrx iceP_dbObs;
            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>> iceP_serials;
            iceP_dbObs = DatabaseObserverPrxHelper.read(istr);
            if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, long> tmpVal = new global::System.Collections.Generic.Dictionary<string, long>();
                tmpVal = StringLongDictHelper.read(istr);
                iceP_serials = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>>(tmpVal);
            }
            else
            {
                iceP_serials = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, long>>();
            }
            inS.endReadParams();
            obj.setDatabaseObserver(iceP_dbObs, iceP_serials, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setEndpoints(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, global::Ice.ObjectPrx> iceP_endpoints;
            iceP_endpoints = StringObjectProxyDictHelper.read(istr);
            inS.endReadParams();
            obj.setEndpoints(iceP_endpoints, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerWellKnownObjects(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            ObjectInfo[] iceP_objects;
            iceP_objects = ObjectInfoSeqHelper.read(istr);
            inS.endReadParams();
            obj.registerWellKnownObjects(iceP_objects, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setAdapterDirectProxy(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_adapterId;
            string iceP_replicaGroupId;
            global::Ice.ObjectPrx iceP_proxy;
            iceP_adapterId = istr.readString();
            iceP_replicaGroupId = istr.readString();
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            obj.setAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_receivedUpdate(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            TopicName iceP_name;
            int iceP_serial;
            string iceP_failure;
            iceP_name = (TopicName)istr.readEnum(4);
            iceP_serial = istr.readInt();
            iceP_failure = istr.readString();
            inS.endReadParams();
            obj.receivedUpdate(iceP_name, iceP_serial, iceP_failure, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroy(ReplicaSession obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.destroy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "destroy",
            "getTimeout",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "keepAlive",
            "receivedUpdate",
            "registerWellKnownObjects",
            "setAdapterDirectProxy",
            "setDatabaseObserver",
            "setEndpoints"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_destroy(this, inS, current);
                }
                case 1:
                {
                    return iceD_getTimeout(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_keepAlive(this, inS, current);
                }
                case 7:
                {
                    return iceD_receivedUpdate(this, inS, current);
                }
                case 8:
                {
                    return iceD_registerWellKnownObjects(this, inS, current);
                }
                case 9:
                {
                    return iceD_setAdapterDirectProxy(this, inS, current);
                }
                case 10:
                {
                    return iceD_setDatabaseObserver(this, inS, current);
                }
                case 11:
                {
                    return iceD_setEndpoints(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class InternalRegistryDisp_ : global::Ice.ObjectImpl, InternalRegistry
    {
        #region Slice operations

        public abstract NodeSessionPrx registerNode(InternalNodeInfo info, NodePrx prx, LoadInfo loadInf, global::Ice.Current current = null);

        public abstract ReplicaSessionPrx registerReplica(InternalReplicaInfo info, InternalRegistryPrx prx, global::Ice.Current current = null);

        public abstract void registerWithReplica(InternalRegistryPrx prx, global::Ice.Current current = null);

        public abstract NodePrx[] getNodes(global::Ice.Current current = null);

        public abstract InternalRegistryPrx[] getReplicas(global::Ice.Current current = null);

        public abstract ApplicationInfo[] getApplications(out long serial, global::Ice.Current current = null);

        public abstract AdapterInfo[] getAdapters(out long serial, global::Ice.Current current = null);

        public abstract ObjectInfo[] getObjects(out long serial, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract long getOffsetFromEnd(string filename, int lines, global::Ice.Current current = null);

        public abstract bool read(string filename, long pos, int size, out long newPos, out string[] lines, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::FileReader",
            "::IceGrid::InternalRegistry"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::InternalRegistry";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerNode(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalNodeInfo iceP_info;
            iceP_info = null;
            NodePrx iceP_prx;
            LoadInfo iceP_loadInf;
            iceP_loadInf = new LoadInfo();
            istr.readValue((InternalNodeInfo v) => {iceP_info = v; });
            iceP_prx = NodePrxHelper.read(istr);
            iceP_loadInf.ice_readMembers(istr);
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.registerNode(iceP_info, iceP_prx, iceP_loadInf, current);
            var ostr = inS.startWriteParams();
            NodeSessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerReplica(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalReplicaInfo iceP_info;
            iceP_info = null;
            InternalRegistryPrx iceP_prx;
            istr.readValue((InternalReplicaInfo v) => {iceP_info = v; });
            iceP_prx = InternalRegistryPrxHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.registerReplica(iceP_info, iceP_prx, current);
            var ostr = inS.startWriteParams();
            ReplicaSessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_registerWithReplica(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            InternalRegistryPrx iceP_prx;
            iceP_prx = InternalRegistryPrxHelper.read(istr);
            inS.endReadParams();
            obj.registerWithReplica(iceP_prx, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getNodes(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getNodes(current);
            var ostr = inS.startWriteParams();
            NodePrxSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getReplicas(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getReplicas(current);
            var ostr = inS.startWriteParams();
            InternalRegistryPrxSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getApplications(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            long iceP_serial;
            var ret = obj.getApplications(out iceP_serial, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(iceP_serial);
            ApplicationInfoSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getAdapters(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            long iceP_serial;
            var ret = obj.getAdapters(out iceP_serial, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(iceP_serial);
            AdapterInfoSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getObjects(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            long iceP_serial;
            var ret = obj.getObjects(out iceP_serial, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(iceP_serial);
            ObjectInfoSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(InternalRegistry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getAdapters",
            "getApplications",
            "getNodes",
            "getObjects",
            "getOffsetFromEnd",
            "getReplicas",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "read",
            "registerNode",
            "registerReplica",
            "registerWithReplica",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getAdapters(this, inS, current);
                }
                case 1:
                {
                    return iceD_getApplications(this, inS, current);
                }
                case 2:
                {
                    return iceD_getNodes(this, inS, current);
                }
                case 3:
                {
                    return iceD_getObjects(this, inS, current);
                }
                case 4:
                {
                    return FileReaderDisp_.iceD_getOffsetFromEnd(this, inS, current);
                }
                case 5:
                {
                    return iceD_getReplicas(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return FileReaderDisp_.iceD_read(this, inS, current);
                }
                case 11:
                {
                    return iceD_registerNode(this, inS, current);
                }
                case 12:
                {
                    return iceD_registerReplica(this, inS, current);
                }
                case 13:
                {
                    return iceD_registerWithReplica(this, inS, current);
                }
                case 14:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
