//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Glacier2
{
    namespace Instrumentation
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface SessionObserver : global::Ice.Instrumentation.Observer
        {
            #region Slice operations


            /// <summary>
            /// Notification of a forwarded request.
            /// This also implies removing
            /// the event from the queue.
            ///
            /// </summary>
            /// <param name="client">True if client request, false if server request.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void forwarded(bool client);


            /// <summary>
            /// Notification of a queued request.
            /// </summary>
            /// <param name="client">True if client request, false if server request.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void queued(bool client);


            /// <summary>
            /// Notification of a overridden request.
            /// This implies adding and
            /// removing an event to the queue.
            ///
            /// </summary>
            /// <param name="client">True if client request, false if server request.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void overridden(bool client);


            /// <summary>
            /// Notification of a routing table size change.
            /// </summary>
            /// <param name="delta">The size adjustement.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void routingTableSize(int delta);

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ObserverUpdater
        {
            #region Slice operations


            /// <summary>
            /// Update the router sessions.
            /// When called, this method goes through all the sessions and for
            /// each session RouterObserver::getSessionObserver is
            /// called. The implementation of getSessionObserver has the
            /// possibility to return an updated observer if necessary.
            /// </summary>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void updateSessionObservers();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RouterObserver
        {
            #region Slice operations


            /// <summary>
            /// This method should return an observer for the given session.
            /// </summary>
            /// <param name="id">The id of the session (the user id or the SSL DN).
            ///
            /// </param>
            /// <param name="con">The connection associated to the session.
            ///
            /// </param>
            /// <param name="routingTableSize">The size of the routing table for this
            /// session.
            ///
            /// </param>
            /// <param name="old">The previous observer, only set when updating an
            /// existing observer.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            SessionObserver getSessionObserver(string id, global::Ice.Connection con, int routingTableSize, SessionObserver old);


            /// <summary>
            /// Glacier2 calls this method on initialization.
            /// The add-in
            /// implementing this interface can use this object to get Glacier2
            /// to re-obtain observers for topics and subscribers.
            ///
            /// </summary>
            /// <param name="updater">The observer updater object.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void setObserverUpdater(ObserverUpdater updater);

            #endregion
        }
    }
}

namespace Glacier2
{
    namespace Instrumentation
    {
    }
}
