//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("DBTypes.ice")]

#pragma warning disable 1591

namespace IceStormElection
{
}

namespace IceStorm
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial record class AllData
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, global::IceStormElection.LogUpdate> llus;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord> subscribers;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AllData(global::System.Collections.Generic.Dictionary<string, global::IceStormElection.LogUpdate> llus, global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord> subscribers)
        {
            global::System.ArgumentNullException.ThrowIfNull(llus);
            this.llus = llus;
            global::System.ArgumentNullException.ThrowIfNull(subscribers);
            this.subscribers = subscribers;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AllData(Ice.InputStream istr)
        {
            this.llus = global::IceStormElection.StringLogUpdateDictHelper.read(istr);
            this.subscribers = SubscriberRecordDictHelper.read(istr);
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            global::IceStormElection.StringLogUpdateDictHelper.write(ostr, this.llus);
            SubscriberRecordDictHelper.write(ostr, this.subscribers);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, AllData v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static AllData ice_read(Ice.InputStream istr) => new(istr);
    }
}

namespace IceStormElection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringLogUpdateDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, LogUpdate> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, LogUpdate> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, LogUpdate> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, LogUpdate> r = new global::System.Collections.Generic.Dictionary<string, LogUpdate>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                LogUpdate v;
                v = new LogUpdate(istr);
                r[k] = v;
            }
            return r;
        }
    }
}

namespace IceStorm
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SubscriberRecordDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<SubscriberRecordKey, SubscriberRecord> e in v)
                {
                    SubscriberRecordKey.ice_write(ostr, e.Key);
                    SubscriberRecord.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord> r = new global::System.Collections.Generic.Dictionary<SubscriberRecordKey, SubscriberRecord>();
            for(int i = 0; i < sz; ++i)
            {
                SubscriberRecordKey k;
                k = new SubscriberRecordKey(istr);
                SubscriberRecord v;
                v = new SubscriberRecord(istr);
                r[k] = v;
            }
            return r;
        }
    }
}
