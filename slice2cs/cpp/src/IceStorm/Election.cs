//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

using _System = global::System;

[assembly:Ice.Slice("Election.ice")]

#pragma warning disable 1591

namespace IceStormElection
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class TopicContent : global::System.ICloneable, global::System.IEquatable<TopicContent>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Identity id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::IceStorm.SubscriberRecord[] records;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicContent(global::Ice.Identity id, global::IceStorm.SubscriberRecord[] records)
        {
            this.id = id;
            this.records = records;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicContent(global::Ice.InputStream istr)
        {
            this.id = new global::Ice.Identity(istr);
            this.records = global::IceStorm.SubscriberRecordSeqHelper.read(istr);
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.id);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.records);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as TopicContent);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(TopicContent other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.id == other.id && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.records, other.records);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(TopicContent lhs, TopicContent rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(TopicContent lhs, TopicContent rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            global::Ice.Identity.ice_write(ostr, this.id);
            global::IceStorm.SubscriberRecordSeqHelper.write(ostr, this.records);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, TopicContent v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static TopicContent ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    /// <summary>
    /// Thrown if an observer detects an inconsistency.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStormElection::ObserverInconsistencyException")]
    public partial class ObserverInconsistencyException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string reason = "";

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ObserverInconsistencyException(string reason, global::System.Exception innerException = null) : base(innerException)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ObserverInconsistencyException(global::System.Exception innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ObserverInconsistencyException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStormElection::ObserverInconsistencyException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStormElection::ObserverInconsistencyException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ReplicaObserver : global::Ice.Object, ReplicaObserverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TopicManagerSync : global::Ice.Object, TopicManagerSyncOperations_
    {
    }

    /// <summary>
    /// The node state.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum NodeState
    {
        /// <summary>
        /// The node is inactive and awaiting an election.
        /// </summary>

        NodeStateInactive,
        /// <summary>
        /// The node is electing a leader.
        /// </summary>

        NodeStateElection,
        /// <summary>
        /// The replica group is reorganizing.
        /// </summary>

        NodeStateReorganization,
        /// <summary>
        /// The replica group is active & replicating.
        /// </summary>

        NodeStateNormal
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodeStateHelper
    {
        public static void write(global::Ice.OutputStream ostr, NodeState v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static NodeState read(global::Ice.InputStream istr)
        {
            NodeState v;
            v = (NodeState)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class NodeInfo : global::System.ICloneable, global::System.IEquatable<NodeInfo>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodePrx n;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeInfo()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeInfo(int id, NodePrx n)
        {
            this.id = id;
            this.n = n;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeInfo(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.n = NodePrxHelper.read(istr);
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.id);
            hash.Add(this.n);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as NodeInfo);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(NodeInfo other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.id == other.id && 
                (Ice.ObjectPrxHelperBase)this.n == (Ice.ObjectPrxHelperBase)other.n;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(NodeInfo lhs, NodeInfo rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(NodeInfo lhs, NodeInfo rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            NodePrxHelper.write(ostr, this.n);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, NodeInfo v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static NodeInfo ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct GroupInfo
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LogUpdate llu;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public GroupInfo(int id, LogUpdate llu)
        {
            this.id = id;
            this.llu = llu;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public GroupInfo(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.llu = new LogUpdate(istr);
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            this.llu.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, GroupInfo v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static GroupInfo ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class QueryInfo : global::System.ICloneable, global::System.IEquatable<QueryInfo>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int coord;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string group = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.ObjectPrx replica;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NodeState state;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public GroupInfo[] up;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int max;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public QueryInfo(GroupInfo[] up)
        {
            this.up = up;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public QueryInfo(int id, int coord, string group, global::Ice.ObjectPrx replica, NodeState state, GroupInfo[] up, int max)
        {
            this.id = id;
            this.coord = coord;
            this.group = group;
            this.replica = replica;
            this.state = state;
            this.up = up;
            this.max = max;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public QueryInfo(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.coord = istr.readInt();
            this.group = istr.readString();
            this.replica = istr.readProxy();
            this.state = (NodeState)istr.readEnum(3);
            this.up = GroupInfoSeqHelper.read(istr);
            this.max = istr.readInt();
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.id);
            hash.Add(this.coord);
            hash.Add(this.group);
            hash.Add(this.replica);
            hash.Add(this.state);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.up);
            hash.Add(this.max);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as QueryInfo);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(QueryInfo other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.id == other.id && 
                this.coord == other.coord && 
                this.group == other.group && 
                (Ice.ObjectPrxHelperBase)this.replica == (Ice.ObjectPrxHelperBase)other.replica && 
                this.state == other.state && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.up, other.up) && 
                this.max == other.max;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(QueryInfo lhs, QueryInfo rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(QueryInfo lhs, QueryInfo rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            ostr.writeInt(this.coord);
            ostr.writeString(this.group);
            ostr.writeProxy(this.replica);
            ostr.writeEnum((int)this.state, 3);
            GroupInfoSeqHelper.write(ostr, this.up);
            ostr.writeInt(this.max);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, QueryInfo v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static QueryInfo ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Node : global::Ice.Object, NodeOperations_
    {
    }
}

namespace IceStormElection
{
    public record struct TopicManagerSync_GetContentResult(LogUpdate llu, TopicContent[] content);
}

namespace IceStormElection
{
    /// <summary>
    /// The replica observer.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaObserverPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///  </param>
        /// <param name="content">The topic content.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void init(LogUpdate llu, TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///  </param>
        /// <param name="content">The topic content.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task initAsync(LogUpdate llu, TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void createTopic(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task createTopicAsync(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroyTopic(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyTopicAsync(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///  </param>
        /// <param name="record">The subscriber information.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///  </param>
        /// <param name="record">The subscriber information.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task addSubscriberAsync(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task removeSubscriberAsync(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// Interface used to sync topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TopicManagerSyncPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="llu">The last log update token.
        ///  </param>
        /// <param name="content">The topic content.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void getContent(out LogUpdate llu, out TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> getContentAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// A replica node.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodePrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Invite the node into a group with the given coordinator and group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void invitation(int j, string gn, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Invite the node into a group with the given coordinator and group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task invitationAsync(int j, string gn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.
        ///  </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.
        ///  </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task readyAsync(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Called to accept an invitation into the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///  </param>
        /// <param name="observer">The observer.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="forwardedInvites">The ids of the nodes to which invitations were forwarded.
        ///  </param>
        /// <param name="llu">The last log update for the given node.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Called to accept an invitation into the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///  </param>
        /// <param name="observer">The observer.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="forwardedInvites">The ids of the nodes to which invitations were forwarded.
        ///  </param>
        /// <param name="llu">The last log update for the given node.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task acceptAsync(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <returns>True if the node is a coordinator, false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool areYouCoordinator(global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> areYouCoordinatorAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Determine if the node is a member of the given group with the given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <returns>True if the node is a member, false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool areYouThere(string gn, int j, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Determine if the node is a member of the given group with the given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> areYouThereAsync(string gn, int j, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <returns>The sync object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx sync(global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> syncAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <returns>The set of configured nodes and the associated priority.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        NodeInfo[] nodes(global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<NodeInfo[]> nodesAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <returns>The query information.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        QueryInfo query(global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<QueryInfo> queryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceStormElection
{
    /// <summary>
    /// The replica observer.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ReplicaObserverOperations_
    {
        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///  </param>
        /// <param name="content">The topic content.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void init(LogUpdate llu, TopicContent[] content, global::Ice.Current current = null);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void createTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void destroyTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///  </param>
        /// <param name="record">The subscriber information.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        ///  inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.Current current = null);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///  </param>
        /// <param name="name">The topic name.
        ///  </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///  </param>
        /// <exception name="ObserverInconsistencyException">Raised if an inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.Current current = null);
    }

    /// <summary>
    /// Interface used to sync topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TopicManagerSyncOperations_
    {
        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="llu">The last log update token.
        ///  </param>
        /// <param name="content">The topic content.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.Current current = null);
    }

    /// <summary>
    /// A replica node.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface NodeOperations_
    {
        /// <summary>
        /// Invite the node into a group with the given coordinator and group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void invitation(int j, string gn, global::Ice.Current current = null);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.
        ///  </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.Current current = null);

        /// <summary>
        /// Called to accept an invitation into the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///  </param>
        /// <param name="observer">The observer.
        ///  </param>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="forwardedInvites">The ids of the nodes to which invitations were forwarded.
        ///  </param>
        /// <param name="llu">The last log update for the given node.
        ///  </param>
        /// <param name="max">The highest priority node seen by this replica group.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.Current current = null);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <returns>True if the node is a coordinator, false otherwise.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool areYouCoordinator(global::Ice.Current current = null);

        /// <summary>
        /// Determine if the node is a member of the given group with the given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///  </param>
        /// <param name="j">The group coordinator.
        ///  </param>
        /// <returns>True if the node is a member, false otherwise.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool areYouThere(string gn, int j, global::Ice.Current current = null);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <returns>The sync object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.ObjectPrx sync(global::Ice.Current current = null);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <returns>The set of configured nodes and the associated priority.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        NodeInfo[] nodes(global::Ice.Current current = null);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <returns>The query information.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        QueryInfo query(global::Ice.Current current = null);
    }
}

namespace IceStormElection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicContentSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, TopicContent[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static TopicContent[] read(global::Ice.InputStream istr)
        {
            TopicContent[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new TopicContent[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new TopicContent(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ReplicaObserverPrxHelper : global::Ice.ObjectPrxHelperBase, ReplicaObserverPrx
    {
        public ReplicaObserverPrxHelper()
        {
        }

        #region Synchronous operations

        public void init(LogUpdate llu, TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_initAsync(llu, content, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void createTopic(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_createTopicAsync(llu, name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroyTopic(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_destroyTopicAsync(llu, name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_addSubscriberAsync(llu, topic, record, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_removeSubscriberAsync(llu, topic, subscribers, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task initAsync(LogUpdate llu, TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_initAsync(llu, content, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(LogUpdate iceP_llu, TopicContent[] iceP_content, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_init_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(iceP_llu, iceP_content, context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(LogUpdate iceP_llu, TopicContent[] iceP_content, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    TopicContentSeqHelper.write(ostr, iceP_content);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task createTopicAsync(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createTopicAsync(llu, name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_createTopicAsync(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createTopic_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_createTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createTopic_name = "createTopic";

        private void _iceI_createTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _createTopic_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task destroyTopicAsync(LogUpdate llu, string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroyTopicAsync(llu, name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyTopicAsync(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_destroyTopic_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroyTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroyTopic_name = "destroyTopic";

        private void _iceI_destroyTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroyTopic_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task addSubscriberAsync(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_addSubscriberAsync(llu, topic, record, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addSubscriberAsync(LogUpdate iceP_llu, string iceP_topic, global::IceStorm.SubscriberRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addSubscriber_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_addSubscriber(iceP_llu, iceP_topic, iceP_record, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addSubscriber_name = "addSubscriber";

        private void _iceI_addSubscriber(LogUpdate iceP_llu, string iceP_topic, global::IceStorm.SubscriberRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _addSubscriber_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_topic);
                    global::IceStorm.SubscriberRecord.ice_write(ostr, iceP_record);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task removeSubscriberAsync(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_removeSubscriberAsync(llu, topic, subscribers, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_removeSubscriberAsync(LogUpdate iceP_llu, string iceP_topic, global::Ice.Identity[] iceP_subscribers, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeSubscriber_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeSubscriber_name = "removeSubscriber";

        private void _iceI_removeSubscriber(LogUpdate iceP_llu, string iceP_topic, global::Ice.Identity[] iceP_subscribers, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _removeSubscriber_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_topic);
                    global::Ice.IdentitySeqHelper.write(ostr, iceP_subscribers);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        #endregion

        #region Factory operations

        public static ReplicaObserverPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                ReplicaObserverPrxHelper prx = new ReplicaObserverPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    ReplicaObserverPrxHelper prx = new ReplicaObserverPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                ReplicaObserverPrxHelper prx = new ReplicaObserverPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ReplicaObserverPrxHelper prx = new ReplicaObserverPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::ReplicaObserver"
        };

        public static string ice_staticId() => "::IceStormElection::ReplicaObserver";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ReplicaObserverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ReplicaObserverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ReplicaObserverPrxHelper result = new ReplicaObserverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicManagerSyncPrxHelper : global::Ice.ObjectPrxHelperBase, TopicManagerSyncPrx
    {
        public TopicManagerSyncPrxHelper()
        {
        }

        #region Synchronous operations

        public void getContent(out LogUpdate llu, out TopicContent[] content, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_getContentAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                llu = result_.llu;
                content = result_.content;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> getContentAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getContentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> _iceI_getContentAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getContent_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TopicManagerSync_GetContentResult>(progress, cancel);
            _iceI_getContent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getContent_name = "getContent";

        private void _iceI_getContent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicManagerSync_GetContentResult>(completed);
            outAsync.invoke(
                _getContent_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TopicManagerSync_GetContentResult ret = new TopicManagerSync_GetContentResult();
                    ret.llu = new LogUpdate(istr);
                    ret.content = TopicContentSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static TopicManagerSyncPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                TopicManagerSyncPrxHelper prx = new TopicManagerSyncPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    TopicManagerSyncPrxHelper prx = new TopicManagerSyncPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicManagerSyncPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                TopicManagerSyncPrxHelper prx = new TopicManagerSyncPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TopicManagerSyncPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TopicManagerSyncPrxHelper prx = new TopicManagerSyncPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::TopicManagerSync"
        };

        public static string ice_staticId() => "::IceStormElection::TopicManagerSync";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TopicManagerSyncPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TopicManagerSyncPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TopicManagerSyncPrxHelper result = new TopicManagerSyncPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodeInfoSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, NodeInfo[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static NodeInfo[] read(global::Ice.InputStream istr)
        {
            NodeInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(6);
                v = new NodeInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new NodeInfo(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class GroupInfoSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, GroupInfo[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static GroupInfo[] read(global::Ice.InputStream istr)
        {
            GroupInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(20);
                v = new GroupInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new GroupInfo(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class NodePrxHelper : global::Ice.ObjectPrxHelperBase, NodePrx
    {
        public NodePrxHelper()
        {
        }

        #region Synchronous operations

        public void invitation(int j, string gn, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_invitationAsync(j, gn, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_readyAsync(j, gn, coordinator, max, generation, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool areYouCoordinator(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_areYouCoordinatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool areYouThere(string gn, int j, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_areYouThereAsync(gn, j, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx sync(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_syncAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NodeInfo[] nodes(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_nodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public QueryInfo query(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_queryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task invitationAsync(int j, string gn, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_invitationAsync(j, gn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_invitationAsync(int iceP_j, string iceP_gn, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_invitation(iceP_j, iceP_gn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _invitation_name = "invitation";

        private void _iceI_invitation(int iceP_j, string iceP_gn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _invitation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                });
        }

        public global::System.Threading.Tasks.Task readyAsync(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_readyAsync(j, gn, coordinator, max, generation, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_readyAsync(int iceP_j, string iceP_gn, global::Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ready_name = "ready";

        private void _iceI_ready(int iceP_j, string iceP_gn, global::Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ready_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                    ostr.writeProxy(iceP_coordinator);
                    ostr.writeInt(iceP_max);
                    ostr.writeLong(iceP_generation);
                });
        }

        public global::System.Threading.Tasks.Task acceptAsync(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_acceptAsync(int iceP_j, string iceP_gn, int[] iceP_forwardedInvites, global::Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, context, synchronous, completed);
            return completed.Task;
        }

        private const string _accept_name = "accept";

        private void _iceI_accept(int iceP_j, string iceP_gn, int[] iceP_forwardedInvites, global::Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _accept_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                    global::Ice.IntSeqHelper.write(ostr, iceP_forwardedInvites);
                    ostr.writeProxy(iceP_observer);
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeInt(iceP_max);
                });
        }

        public global::System.Threading.Tasks.Task<bool> areYouCoordinatorAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_areYouCoordinatorAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_areYouCoordinatorAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_areYouCoordinator_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_areYouCoordinator(context, synchronous, completed);
            return completed.Task;
        }

        private const string _areYouCoordinator_name = "areYouCoordinator";

        private void _iceI_areYouCoordinator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _areYouCoordinator_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret = default;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> areYouThereAsync(string gn, int j, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_areYouThereAsync(gn, j, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_areYouThereAsync(string iceP_gn, int iceP_j, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_areYouThere_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_areYouThere(iceP_gn, iceP_j, context, synchronous, completed);
            return completed.Task;
        }

        private const string _areYouThere_name = "areYouThere";

        private void _iceI_areYouThere(string iceP_gn, int iceP_j, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _areYouThere_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_gn);
                    ostr.writeInt(iceP_j);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret = default;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> syncAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_syncAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_syncAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_sync_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_sync(context, synchronous, completed);
            return completed.Task;
        }

        private const string _sync_name = "sync";

        private void _iceI_sync(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _sync_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret = default;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NodeInfo[]> nodesAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_nodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NodeInfo[]> _iceI_nodesAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_nodes_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<NodeInfo[]>(progress, cancel);
            _iceI_nodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _nodes_name = "nodes";

        private void _iceI_nodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NodeInfo[]>(completed);
            outAsync.invoke(
                _nodes_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    NodeInfo[] ret = default;
                    ret = NodeInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<QueryInfo> queryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_queryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<QueryInfo> _iceI_queryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_query_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<QueryInfo>(progress, cancel);
            _iceI_query(context, synchronous, completed);
            return completed.Task;
        }

        private const string _query_name = "query";

        private void _iceI_query(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<QueryInfo>(completed);
            outAsync.invoke(
                _query_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    QueryInfo ret = default;
                    ret = new QueryInfo(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static NodePrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                NodePrxHelper prx = new NodePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    NodePrxHelper prx = new NodePrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                NodePrxHelper prx = new NodePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                NodePrxHelper prx = new NodePrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::Node"
        };

        public static string ice_staticId() => "::IceStormElection::Node";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, NodePrx v)
        {
            ostr.writeProxy(v);
        }

        public static NodePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                NodePrxHelper result = new NodePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceStormElection
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ReplicaObserverDisp_ : global::Ice.ObjectImpl, ReplicaObserver
    {
        #region Slice operations

        public abstract void init(LogUpdate llu, TopicContent[] content, global::Ice.Current current = null);

        public abstract void createTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        public abstract void destroyTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        public abstract void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.Current current = null);

        public abstract void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::ReplicaObserver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceStormElection::ReplicaObserver";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_init(ReplicaObserver obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu = default;
            TopicContent[] iceP_content = default;
            iceP_llu = new LogUpdate(istr);
            iceP_content = TopicContentSeqHelper.read(istr);
            inS.endReadParams();
            obj.init(iceP_llu, iceP_content, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createTopic(ReplicaObserver obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu = default;
            string iceP_name = default;
            iceP_llu = new LogUpdate(istr);
            iceP_name = istr.readString();
            inS.endReadParams();
            obj.createTopic(iceP_llu, iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroyTopic(ReplicaObserver obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu = default;
            string iceP_name = default;
            iceP_llu = new LogUpdate(istr);
            iceP_name = istr.readString();
            inS.endReadParams();
            obj.destroyTopic(iceP_llu, iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_addSubscriber(ReplicaObserver obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu = default;
            string iceP_topic = default;
            global::IceStorm.SubscriberRecord iceP_record = default;
            iceP_llu = new LogUpdate(istr);
            iceP_topic = istr.readString();
            iceP_record = new global::IceStorm.SubscriberRecord(istr);
            inS.endReadParams();
            obj.addSubscriber(iceP_llu, iceP_topic, iceP_record, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeSubscriber(ReplicaObserver obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu = default;
            string iceP_topic = default;
            global::Ice.Identity[] iceP_subscribers = default;
            iceP_llu = new LogUpdate(istr);
            iceP_topic = istr.readString();
            iceP_subscribers = global::Ice.IdentitySeqHelper.read(istr);
            inS.endReadParams();
            obj.removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "addSubscriber",
            "createTopic",
            "destroyTopic",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "init",
            "removeSubscriber"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_addSubscriber(this, inS, current);
                }
                case 1:
                {
                    return iceD_createTopic(this, inS, current);
                }
                case 2:
                {
                    return iceD_destroyTopic(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_init(this, inS, current);
                }
                case 8:
                {
                    return iceD_removeSubscriber(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TopicManagerSyncDisp_ : global::Ice.ObjectImpl, TopicManagerSync
    {
        #region Slice operations

        public abstract void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::TopicManagerSync"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceStormElection::TopicManagerSync";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getContent(TopicManagerSync obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            LogUpdate iceP_llu;
            TopicContent[] iceP_content;
            obj.getContent(out iceP_llu, out iceP_content, current);
            var ostr = inS.startWriteParams();
            iceP_llu.ice_writeMembers(ostr);
            TopicContentSeqHelper.write(ostr, iceP_content);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getContent",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getContent(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class NodeDisp_ : global::Ice.ObjectImpl, Node
    {
        #region Slice operations

        public abstract void invitation(int j, string gn, global::Ice.Current current = null);

        public abstract void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.Current current = null);

        public abstract void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.Current current = null);

        public abstract bool areYouCoordinator(global::Ice.Current current = null);

        public abstract bool areYouThere(string gn, int j, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx sync(global::Ice.Current current = null);

        public abstract NodeInfo[] nodes(global::Ice.Current current = null);

        public abstract QueryInfo query(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::Node"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceStormElection::Node";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_invitation(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j = default;
            string iceP_gn = default;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            inS.endReadParams();
            obj.invitation(iceP_j, iceP_gn, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_ready(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j = default;
            string iceP_gn = default;
            global::Ice.ObjectPrx iceP_coordinator = default;
            int iceP_max = default;
            long iceP_generation = default;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            iceP_coordinator = istr.readProxy();
            iceP_max = istr.readInt();
            iceP_generation = istr.readLong();
            inS.endReadParams();
            obj.ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_accept(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j = default;
            string iceP_gn = default;
            int[] iceP_forwardedInvites = default;
            global::Ice.ObjectPrx iceP_observer = default;
            LogUpdate iceP_llu = default;
            int iceP_max = default;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            iceP_forwardedInvites = global::Ice.IntSeqHelper.read(istr);
            iceP_observer = istr.readProxy();
            iceP_llu = new LogUpdate(istr);
            iceP_max = istr.readInt();
            inS.endReadParams();
            obj.accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_areYouCoordinator(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.areYouCoordinator(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_areYouThere(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_gn = default;
            int iceP_j = default;
            iceP_gn = istr.readString();
            iceP_j = istr.readInt();
            inS.endReadParams();
            var ret = obj.areYouThere(iceP_gn, iceP_j, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sync(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.sync(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_nodes(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.nodes(current);
            var ostr = inS.startWriteParams();
            NodeInfoSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_query(Node obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.query(current);
            var ostr = inS.startWriteParams();
            QueryInfo.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "accept",
            "areYouCoordinator",
            "areYouThere",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "invitation",
            "nodes",
            "query",
            "ready",
            "sync"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_accept(this, inS, current);
                }
                case 1:
                {
                    return iceD_areYouCoordinator(this, inS, current);
                }
                case 2:
                {
                    return iceD_areYouThere(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_invitation(this, inS, current);
                }
                case 8:
                {
                    return iceD_nodes(this, inS, current);
                }
                case 9:
                {
                    return iceD_query(this, inS, current);
                }
                case 10:
                {
                    return iceD_ready(this, inS, current);
                }
                case 11:
                {
                    return iceD_sync(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
