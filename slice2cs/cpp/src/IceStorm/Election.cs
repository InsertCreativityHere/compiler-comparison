//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceStormElection
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class TopicContent : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public global::Ice.Identity id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public global::IceStorm.SubscriberRecord[] records;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicContent()
        {
            this.id = new global::Ice.Identity();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicContent(global::Ice.Identity id, global::IceStorm.SubscriberRecord[] records)
        {
            this.id = id;
            this.records = records;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStormElection::TopicContent");
            global::IceInternal.HashUtil.hashAdd(ref h_, id);
            global::IceInternal.HashUtil.hashAdd(ref h_, records);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            TopicContent o = (TopicContent)other;
            if(this.id == null)
            {
                if(o.id != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.id.Equals(o.id))
                {
                    return false;
                }
            }
            if(this.records == null)
            {
                if(o.records != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.records, o.records))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(TopicContent lhs, TopicContent rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(TopicContent lhs, TopicContent rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            global::Ice.Identity.ice_write(ostr, this.id);
            global::IceStorm.SubscriberRecordSeqHelper.write(ostr, this.records);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = global::Ice.Identity.ice_read(istr);
            this.records = global::IceStorm.SubscriberRecordSeqHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, TopicContent v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static TopicContent ice_read(global::Ice.InputStream istr)
        {
            var v = new TopicContent();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly TopicContent _nullMarshalValue = new TopicContent();

        #endregion
    }

    /// <summary>
    /// Thrown if an observer detects an inconsistency.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ObserverInconsistencyException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObserverInconsistencyException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObserverInconsistencyException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObserverInconsistencyException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.reason = info.GetString("reason");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObserverInconsistencyException(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObserverInconsistencyException(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStormElection::ObserverInconsistencyException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStormElection::ObserverInconsistencyException");
            global::IceInternal.HashUtil.hashAdd(ref h_, reason);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            ObserverInconsistencyException o = other as ObserverInconsistencyException;
            if(o == null)
            {
                return false;
            }
            if(this.reason == null)
            {
                if(o.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.reason.Equals(o.reason))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("reason", this.reason == null ? "" : this.reason);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(ObserverInconsistencyException lhs, ObserverInconsistencyException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(ObserverInconsistencyException lhs, ObserverInconsistencyException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStormElection::ObserverInconsistencyException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ReplicaObserver : global::Ice.Object, ReplicaObserverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TopicManagerSync : global::Ice.Object, TopicManagerSyncOperations_
    {
    }

    /// <summary>
    /// The node state.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum NodeState
    {
        /// <summary>
        /// The node is inactive and awaiting an election.
        /// </summary>

        NodeStateInactive,
        /// <summary>
        /// The node is electing a leader.
        /// </summary>

        NodeStateElection,
        /// <summary>
        /// The replica group is reorganizing.
        /// </summary>

        NodeStateReorganization,
        /// <summary>
        /// The replica group is active & replicating.
        /// </summary>

        NodeStateNormal
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class NodeStateHelper
    {
        public static void write(global::Ice.OutputStream ostr, NodeState v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static NodeState read(global::Ice.InputStream istr)
        {
            NodeState v;
            v = (NodeState)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class NodeInfo : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NodePrx n;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NodeInfo()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NodeInfo(int id, NodePrx n)
        {
            this.id = id;
            this.n = n;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStormElection::NodeInfo");
            global::IceInternal.HashUtil.hashAdd(ref h_, id);
            global::IceInternal.HashUtil.hashAdd(ref h_, n);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            NodeInfo o = (NodeInfo)other;
            if(!this.id.Equals(o.id))
            {
                return false;
            }
            if(this.n == null)
            {
                if(o.n != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.n.Equals(o.n))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(NodeInfo lhs, NodeInfo rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(NodeInfo lhs, NodeInfo rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            NodePrxHelper.write(ostr, this.n);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.n = NodePrxHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, NodeInfo v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static NodeInfo ice_read(global::Ice.InputStream istr)
        {
            var v = new NodeInfo();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly NodeInfo _nullMarshalValue = new NodeInfo();

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct GroupInfo
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LogUpdate llu;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public GroupInfo(int id, LogUpdate llu)
        {
            this.id = id;
            this.llu = llu;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStormElection::GroupInfo");
            global::IceInternal.HashUtil.hashAdd(ref h_, id);
            global::IceInternal.HashUtil.hashAdd(ref h_, llu);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(!(other is GroupInfo))
            {
                return false;
            }
            GroupInfo o = (GroupInfo)other;
            if(!this.id.Equals(o.id))
            {
                return false;
            }
            if(!this.llu.Equals(o.llu))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(GroupInfo lhs, GroupInfo rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(GroupInfo lhs, GroupInfo rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            this.llu.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.llu.ice_readMembers(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, GroupInfo v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static GroupInfo ice_read(global::Ice.InputStream istr)
        {
            var v = new GroupInfo();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class QueryInfo : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int coord;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string group;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public global::Ice.ObjectPrx replica;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NodeState state;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public GroupInfo[] up;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int max;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public QueryInfo()
        {
            this.group = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public QueryInfo(int id, int coord, string group, global::Ice.ObjectPrx replica, NodeState state, GroupInfo[] up, int max)
        {
            this.id = id;
            this.coord = coord;
            this.group = group;
            this.replica = replica;
            this.state = state;
            this.up = up;
            this.max = max;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStormElection::QueryInfo");
            global::IceInternal.HashUtil.hashAdd(ref h_, id);
            global::IceInternal.HashUtil.hashAdd(ref h_, coord);
            global::IceInternal.HashUtil.hashAdd(ref h_, group);
            global::IceInternal.HashUtil.hashAdd(ref h_, replica);
            global::IceInternal.HashUtil.hashAdd(ref h_, state);
            global::IceInternal.HashUtil.hashAdd(ref h_, up);
            global::IceInternal.HashUtil.hashAdd(ref h_, max);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            QueryInfo o = (QueryInfo)other;
            if(!this.id.Equals(o.id))
            {
                return false;
            }
            if(!this.coord.Equals(o.coord))
            {
                return false;
            }
            if(this.group == null)
            {
                if(o.group != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.group.Equals(o.group))
                {
                    return false;
                }
            }
            if(this.replica == null)
            {
                if(o.replica != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.replica.Equals(o.replica))
                {
                    return false;
                }
            }
            if(!this.state.Equals(o.state))
            {
                return false;
            }
            if(this.up == null)
            {
                if(o.up != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.up, o.up))
                {
                    return false;
                }
            }
            if(!this.max.Equals(o.max))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(QueryInfo lhs, QueryInfo rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(QueryInfo lhs, QueryInfo rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.id);
            ostr.writeInt(this.coord);
            ostr.writeString(this.group);
            ostr.writeProxy(this.replica);
            ostr.writeEnum((int)this.state, 3);
            GroupInfoSeqHelper.write(ostr, this.up);
            ostr.writeInt(this.max);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = istr.readInt();
            this.coord = istr.readInt();
            this.group = istr.readString();
            this.replica = istr.readProxy();
            this.state = (NodeState)istr.readEnum(3);
            this.up = GroupInfoSeqHelper.read(istr);
            this.max = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, QueryInfo v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static QueryInfo ice_read(global::Ice.InputStream istr)
        {
            var v = new QueryInfo();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly QueryInfo _nullMarshalValue = new QueryInfo();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Node : global::Ice.Object, NodeOperations_
    {
    }
}

namespace IceStormElection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_ReplicaObserver_init();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_ReplicaObserver_createTopic();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_ReplicaObserver_destroyTopic();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_ReplicaObserver_addSubscriber();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_ReplicaObserver_removeSubscriber();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TopicManagerSync_getContent(LogUpdate llu, TopicContent[] content);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_invitation();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_ready();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_accept();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_areYouCoordinator(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_areYouThere(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_sync(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_nodes(NodeInfo[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Node_query(QueryInfo ret);
}

namespace IceStormElection
{
    public struct TopicManagerSync_GetContentResult
    {
        public TopicManagerSync_GetContentResult(LogUpdate llu, TopicContent[] content)
        {
            this.llu = llu;
            this.content = content;
        }

        public LogUpdate llu;
        public TopicContent[] content;
    }
}

namespace IceStormElection
{
    /// <summary>
    /// The replica observer.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface ReplicaObserverPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task initAsync(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_ReplicaObserver_init> begin_init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_init(LogUpdate llu, TopicContent[] content, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_init(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task createTopicAsync(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_ReplicaObserver_createTopic> begin_createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createTopic(LogUpdate llu, string name, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_createTopic(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyTopicAsync(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_ReplicaObserver_destroyTopic> begin_destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroyTopic(LogUpdate llu, string name, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_destroyTopic(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task addSubscriberAsync(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_ReplicaObserver_addSubscriber> begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_addSubscriber(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task removeSubscriberAsync(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_ReplicaObserver_removeSubscriber> begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_removeSubscriber(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// Interface used to sync topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicManagerSyncPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="llu">The last log update token.
        ///
        /// </param>
        /// <param name="content">The topic content.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> getContentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_TopicManagerSync_getContent> begin_getContent(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getContent(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getContent(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="llu">The last log update token.
        ///
        /// </param>
        /// <param name="content">The topic content.</param>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// A replica node.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface NodePrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void invitation(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task invitationAsync(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_invitation> begin_invitation(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_invitation(int j, string gn, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_invitation(int j, string gn, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_invitation(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task readyAsync(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_ready> begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_ready(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task acceptAsync(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_accept> begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_accept(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <returns>True if the node is a coordinator, false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool areYouCoordinator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> areYouCoordinatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_areYouCoordinator> begin_areYouCoordinator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_areYouCoordinator(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_areYouCoordinator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>True if the node is a coordinator, false otherwise.</returns>
        bool end_areYouCoordinator(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <returns>True if the node is a member, false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool areYouThere(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> areYouThereAsync(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_areYouThere> begin_areYouThere(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_areYouThere(string gn, int j, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_areYouThere(string gn, int j, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>True if the node is a member, false otherwise.</returns>
        bool end_areYouThere(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <returns>The sync object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> syncAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_sync> begin_sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_sync(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_sync(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The sync object.</returns>
        global::Ice.ObjectPrx end_sync(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <returns>The set of configured nodes and the associated
        /// priority.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        NodeInfo[] nodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<NodeInfo[]> nodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_nodes> begin_nodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_nodes(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_nodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The set of configured nodes and the associated
        /// priority.</returns>
        NodeInfo[] end_nodes(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <returns>The query information.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        QueryInfo query(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<QueryInfo> queryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Node_query> begin_query(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_query(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_query(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The query information.</returns>
        QueryInfo end_query(global::Ice.AsyncResult asyncResult);
    }
}

namespace IceStormElection
{
    /// <summary>
    /// The replica observer.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface ReplicaObserverOperations_
    {
        /// <summary>
        /// Initialize the observer.
        /// </summary>
        /// <param name="llu">The last log update seen by the master.
        ///
        /// </param>
        /// <param name="content">The topic content.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void init(LogUpdate llu, TopicContent[] content, global::Ice.Current current = null);

        /// <summary>
        /// Create the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void createTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the topic with the given name.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void destroyTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        /// <summary>
        /// Add a subscriber to a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="topic">The topic name to which to add the subscriber.
        ///
        /// </param>
        /// <param name="record">The subscriber information.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.Current current = null);

        /// <summary>
        /// Remove a subscriber from a topic.
        /// </summary>
        /// <param name="llu">The log update token.
        ///
        /// </param>
        /// <param name="name">The topic name.
        ///
        /// </param>
        /// <param name="subscribers">The identities of the subscribers to remove.
        ///
        /// </param>
        /// <exception name="ObserverInconsistencyException">Raised if an
        /// inconsisency was detected.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.Current current = null);
    }

    /// <summary>
    /// Interface used to sync topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicManagerSyncOperations_
    {
        /// <summary>
        /// Retrieve the topic content.
        /// </summary>
        /// <param name="llu">The last log update token.
        ///
        /// </param>
        /// <param name="content">The topic content.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.Current current = null);
    }

    /// <summary>
    /// A replica node.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface NodeOperations_
    {
        /// <summary>
        /// Invite the node into a group with the given coordinator and
        /// group name.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void invitation(int j, string gn, global::Ice.Current current = null);

        /// <summary>
        /// Call from the group coordinator to a node to inform the node
        /// that the replica group is active.
        /// </summary>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="coordinator">The proxy to the coordinator.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.
        ///
        /// </param>
        /// <param name="generation">The current generation count.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.Current current = null);

        /// <summary>
        /// Called to accept an invitation into
        /// the given group.
        /// </summary>
        /// <param name="j">The id of the node accepting the invitation.
        ///
        /// </param>
        /// <param name="observer">The observer.
        ///
        /// </param>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="forwardedInvites">The ids of the nodes to which
        /// invitations were forwarded.
        ///
        /// </param>
        /// <param name="llu">The last log update for the given node.
        ///
        /// </param>
        /// <param name="max">The highest priority node seen by this replica
        /// group.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.Current current = null);

        /// <summary>
        /// Determine if this node is a coordinator.
        /// </summary>
        /// <returns>True if the node is a coordinator, false otherwise.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool areYouCoordinator(global::Ice.Current current = null);

        /// <summary>
        /// Determine if the node is a member of the given group with the
        /// given coordinator.
        /// </summary>
        /// <param name="gn">The group name.
        ///
        /// </param>
        /// <param name="j">The group coordinator.
        ///
        /// </param>
        /// <returns>True if the node is a member, false otherwise.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool areYouThere(string gn, int j, global::Ice.Current current = null);

        /// <summary>
        /// Get the sync object for the replica hosted by this node.
        /// </summary>
        /// <returns>The sync object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx sync(global::Ice.Current current = null);

        /// <summary>
        /// Get the replication group information.
        /// </summary>
        /// <returns>The set of configured nodes and the associated
        /// priority.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        NodeInfo[] nodes(global::Ice.Current current = null);

        /// <summary>
        /// Get the query information for the given node.
        /// </summary>
        /// <returns>The query information.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        QueryInfo query(global::Ice.Current current = null);
    }
}

namespace IceStormElection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class TopicContentSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, TopicContent[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new TopicContent() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static TopicContent[] read(global::Ice.InputStream istr)
        {
            TopicContent[] v;
            {
                int szx = istr.readAndCheckSeqSize(3);
                v = new TopicContent[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new TopicContent();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class ReplicaObserverPrxHelper : global::Ice.ObjectPrxHelperBase, ReplicaObserverPrx
    {
        public ReplicaObserverPrxHelper()
        {
        }

        public ReplicaObserverPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initAsync(llu, content, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_createTopicAsync(llu, name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyTopicAsync(llu, name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_addSubscriberAsync(llu, topic, record, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_removeSubscriberAsync(llu, topic, subscribers, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task initAsync(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initAsync(llu, content, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(LogUpdate iceP_llu, TopicContent[] iceP_content, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_init_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(iceP_llu, iceP_content, context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(LogUpdate iceP_llu, TopicContent[] iceP_content, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    TopicContentSeqHelper.write(ostr, iceP_content);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task createTopicAsync(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createTopicAsync(llu, name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_createTopicAsync(LogUpdate iceP_llu, string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createTopic_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_createTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createTopic_name = "createTopic";

        private void _iceI_createTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _createTopic_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task destroyTopicAsync(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyTopicAsync(llu, name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyTopicAsync(LogUpdate iceP_llu, string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_destroyTopic_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroyTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroyTopic_name = "destroyTopic";

        private void _iceI_destroyTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroyTopic_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task addSubscriberAsync(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addSubscriberAsync(llu, topic, record, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addSubscriberAsync(LogUpdate iceP_llu, string iceP_topic, global::IceStorm.SubscriberRecord iceP_record, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addSubscriber_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_addSubscriber(iceP_llu, iceP_topic, iceP_record, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addSubscriber_name = "addSubscriber";

        private void _iceI_addSubscriber(LogUpdate iceP_llu, string iceP_topic, global::IceStorm.SubscriberRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _addSubscriber_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_topic);
                    global::IceStorm.SubscriberRecord.ice_write(ostr, iceP_record);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task removeSubscriberAsync(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeSubscriberAsync(llu, topic, subscribers, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_removeSubscriberAsync(LogUpdate iceP_llu, string iceP_topic, global::Ice.Identity[] iceP_subscribers, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeSubscriber_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeSubscriber_name = "removeSubscriber";

        private void _iceI_removeSubscriber(LogUpdate iceP_llu, string iceP_topic, global::Ice.Identity[] iceP_subscribers, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _removeSubscriber_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeString(iceP_topic);
                    global::Ice.IdentitySeqHelper.write(ostr, iceP_subscribers);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObserverInconsistencyException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_ReplicaObserver_init> begin_init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_init(llu, content, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_init(LogUpdate llu, TopicContent[] content, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(llu, content, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_init(LogUpdate llu, TopicContent[] content, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(llu, content, context, callback, cookie, false);
        }

        public void end_init(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _init_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ReplicaObserver_init> begin_init(LogUpdate iceP_llu, TopicContent[] iceP_content, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_init_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ReplicaObserver_init, object>(
                (Callback_ReplicaObserver_init cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _init_name, cookie, completedCallback);
            _iceI_init(iceP_llu, iceP_content, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ReplicaObserver_createTopic> begin_createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_createTopic(llu, name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_createTopic(LogUpdate llu, string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createTopic(llu, name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_createTopic(LogUpdate llu, string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createTopic(llu, name, context, callback, cookie, false);
        }

        public void end_createTopic(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createTopic_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ReplicaObserver_createTopic> begin_createTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createTopic_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ReplicaObserver_createTopic, object>(
                (Callback_ReplicaObserver_createTopic cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _createTopic_name, cookie, completedCallback);
            _iceI_createTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ReplicaObserver_destroyTopic> begin_destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_destroyTopic(llu, name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_destroyTopic(LogUpdate llu, string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroyTopic(llu, name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_destroyTopic(LogUpdate llu, string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroyTopic(llu, name, context, callback, cookie, false);
        }

        public void end_destroyTopic(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroyTopic_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ReplicaObserver_destroyTopic> begin_destroyTopic(LogUpdate iceP_llu, string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_destroyTopic_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ReplicaObserver_destroyTopic, object>(
                (Callback_ReplicaObserver_destroyTopic cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _destroyTopic_name, cookie, completedCallback);
            _iceI_destroyTopic(iceP_llu, iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ReplicaObserver_addSubscriber> begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_addSubscriber(llu, topic, record, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addSubscriber(llu, topic, record, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addSubscriber(llu, topic, record, context, callback, cookie, false);
        }

        public void end_addSubscriber(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addSubscriber_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ReplicaObserver_addSubscriber> begin_addSubscriber(LogUpdate iceP_llu, string iceP_topic, global::IceStorm.SubscriberRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_addSubscriber_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ReplicaObserver_addSubscriber, object>(
                (Callback_ReplicaObserver_addSubscriber cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _addSubscriber_name, cookie, completedCallback);
            _iceI_addSubscriber(iceP_llu, iceP_topic, iceP_record, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_ReplicaObserver_removeSubscriber> begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeSubscriber(llu, topic, subscribers, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeSubscriber(llu, topic, subscribers, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeSubscriber(llu, topic, subscribers, context, callback, cookie, false);
        }

        public void end_removeSubscriber(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeSubscriber_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_ReplicaObserver_removeSubscriber> begin_removeSubscriber(LogUpdate iceP_llu, string iceP_topic, global::Ice.Identity[] iceP_subscribers, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeSubscriber_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ReplicaObserver_removeSubscriber, object>(
                (Callback_ReplicaObserver_removeSubscriber cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _removeSubscriber_name, cookie, completedCallback);
            _iceI_removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaObserverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ReplicaObserverPrx r = b as ReplicaObserverPrx;
            if(r == null)
            {
                ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ReplicaObserverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            ReplicaObserverPrxHelper h = new ReplicaObserverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::ReplicaObserver"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ReplicaObserverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ReplicaObserverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ReplicaObserverPrxHelper result = new ReplicaObserverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class TopicManagerSyncPrxHelper : global::Ice.ObjectPrxHelperBase, TopicManagerSyncPrx
    {
        public TopicManagerSyncPrxHelper()
        {
        }

        public TopicManagerSyncPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getContentAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                llu = result_.llu;
                content = result_.content;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> getContentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getContentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicManagerSync_GetContentResult> _iceI_getContentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getContent_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TopicManagerSync_GetContentResult>(progress, cancel);
            _iceI_getContent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getContent_name = "getContent";

        private void _iceI_getContent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicManagerSync_GetContentResult>(completed);
            outAsync.invoke(
                _getContent_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TopicManagerSync_GetContentResult ret = new TopicManagerSync_GetContentResult();
                    ret.llu.ice_readMembers(istr);
                    ret.content = TopicContentSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_TopicManagerSync_getContent> begin_getContent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getContent(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getContent(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getContent(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getContent(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getContent(context, callback, cookie, false);
        }

        public void end_getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getContent_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TopicManagerSync_GetContentResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            llu = result_.llu;
            content = result_.content;
        }

        private global::Ice.AsyncResult<Callback_TopicManagerSync_getContent> begin_getContent(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getContent_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TopicManagerSync_getContent, TopicManagerSync_GetContentResult>(
                (Callback_TopicManagerSync_getContent cb, TopicManagerSync_GetContentResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.llu, ret.content);
                    }
                },
                this, _getContent_name, cookie, completedCallback);
            _iceI_getContent(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerSyncPrx r = b as TopicManagerSyncPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerSyncPrx r = b as TopicManagerSyncPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicManagerSyncPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicManagerSyncPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerSyncPrx r = b as TopicManagerSyncPrx;
            if(r == null)
            {
                TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerSyncPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TopicManagerSyncPrxHelper h = new TopicManagerSyncPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::TopicManagerSync"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TopicManagerSyncPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TopicManagerSyncPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TopicManagerSyncPrxHelper result = new TopicManagerSyncPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class NodeInfoSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, NodeInfo[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new NodeInfo() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static NodeInfo[] read(global::Ice.InputStream istr)
        {
            NodeInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(6);
                v = new NodeInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new NodeInfo();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class GroupInfoSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, GroupInfo[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static GroupInfo[] read(global::Ice.InputStream istr)
        {
            GroupInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(20);
                v = new GroupInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class NodePrxHelper : global::Ice.ObjectPrxHelperBase, NodePrx
    {
        public NodePrxHelper()
        {
        }

        public NodePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void invitation(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_invitationAsync(j, gn, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_readyAsync(j, gn, coordinator, max, generation, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool areYouCoordinator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_areYouCoordinatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool areYouThere(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_areYouThereAsync(gn, j, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_syncAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public NodeInfo[] nodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_nodesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public QueryInfo query(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_queryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task invitationAsync(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_invitationAsync(j, gn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_invitationAsync(int iceP_j, string iceP_gn, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_invitation(iceP_j, iceP_gn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _invitation_name = "invitation";

        private void _iceI_invitation(int iceP_j, string iceP_gn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _invitation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                });
        }

        public global::System.Threading.Tasks.Task readyAsync(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readyAsync(j, gn, coordinator, max, generation, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_readyAsync(int iceP_j, string iceP_gn, global::Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, context, synchronous, completed);
            return completed.Task;
        }

        private const string _ready_name = "ready";

        private void _iceI_ready(int iceP_j, string iceP_gn, global::Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _ready_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                    ostr.writeProxy(iceP_coordinator);
                    ostr.writeInt(iceP_max);
                    ostr.writeLong(iceP_generation);
                });
        }

        public global::System.Threading.Tasks.Task acceptAsync(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_acceptAsync(j, gn, forwardedInvites, observer, llu, max, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_acceptAsync(int iceP_j, string iceP_gn, int[] iceP_forwardedInvites, global::Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, context, synchronous, completed);
            return completed.Task;
        }

        private const string _accept_name = "accept";

        private void _iceI_accept(int iceP_j, string iceP_gn, int[] iceP_forwardedInvites, global::Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _accept_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_j);
                    ostr.writeString(iceP_gn);
                    global::Ice.IntSeqHelper.write(ostr, iceP_forwardedInvites);
                    ostr.writeProxy(iceP_observer);
                    iceP_llu.ice_writeMembers(ostr);
                    ostr.writeInt(iceP_max);
                });
        }

        public global::System.Threading.Tasks.Task<bool> areYouCoordinatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_areYouCoordinatorAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_areYouCoordinatorAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_areYouCoordinator_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_areYouCoordinator(context, synchronous, completed);
            return completed.Task;
        }

        private const string _areYouCoordinator_name = "areYouCoordinator";

        private void _iceI_areYouCoordinator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _areYouCoordinator_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> areYouThereAsync(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_areYouThereAsync(gn, j, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_areYouThereAsync(string iceP_gn, int iceP_j, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_areYouThere_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_areYouThere(iceP_gn, iceP_j, context, synchronous, completed);
            return completed.Task;
        }

        private const string _areYouThere_name = "areYouThere";

        private void _iceI_areYouThere(string iceP_gn, int iceP_j, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _areYouThere_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_gn);
                    ostr.writeInt(iceP_j);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> syncAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_syncAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_syncAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_sync_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_sync(context, synchronous, completed);
            return completed.Task;
        }

        private const string _sync_name = "sync";

        private void _iceI_sync(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _sync_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<NodeInfo[]> nodesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_nodesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<NodeInfo[]> _iceI_nodesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_nodes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<NodeInfo[]>(progress, cancel);
            _iceI_nodes(context, synchronous, completed);
            return completed.Task;
        }

        private const string _nodes_name = "nodes";

        private void _iceI_nodes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<NodeInfo[]>(completed);
            outAsync.invoke(
                _nodes_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    NodeInfo[] ret;
                    ret = NodeInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<QueryInfo> queryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_queryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<QueryInfo> _iceI_queryAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_query_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<QueryInfo>(progress, cancel);
            _iceI_query(context, synchronous, completed);
            return completed.Task;
        }

        private const string _query_name = "query";

        private void _iceI_query(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<QueryInfo>(completed);
            outAsync.invoke(
                _query_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    QueryInfo ret = null;
                    ret = QueryInfo.ice_read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Node_invitation> begin_invitation(int j, string gn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_invitation(j, gn, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_invitation(int j, string gn, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_invitation(j, gn, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_invitation(int j, string gn, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_invitation(j, gn, context, callback, cookie, false);
        }

        public void end_invitation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _invitation_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_invitation> begin_invitation(int iceP_j, string iceP_gn, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_invitation, object>(
                (Callback_Node_invitation cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _invitation_name, cookie, completedCallback);
            _iceI_invitation(iceP_j, iceP_gn, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_ready> begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_ready(j, gn, coordinator, max, generation, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ready(j, gn, coordinator, max, generation, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_ready(j, gn, coordinator, max, generation, context, callback, cookie, false);
        }

        public void end_ready(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ready_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_ready> begin_ready(int iceP_j, string iceP_gn, global::Ice.ObjectPrx iceP_coordinator, int iceP_max, long iceP_generation, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_ready, object>(
                (Callback_Node_ready cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _ready_name, cookie, completedCallback);
            _iceI_ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_accept> begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_accept(j, gn, forwardedInvites, observer, llu, max, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_accept(j, gn, forwardedInvites, observer, llu, max, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_accept(j, gn, forwardedInvites, observer, llu, max, context, callback, cookie, false);
        }

        public void end_accept(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _accept_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_accept> begin_accept(int iceP_j, string iceP_gn, int[] iceP_forwardedInvites, global::Ice.ObjectPrx iceP_observer, LogUpdate iceP_llu, int iceP_max, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_accept, object>(
                (Callback_Node_accept cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _accept_name, cookie, completedCallback);
            _iceI_accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_areYouCoordinator> begin_areYouCoordinator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_areYouCoordinator(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_areYouCoordinator(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_areYouCoordinator(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_areYouCoordinator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_areYouCoordinator(context, callback, cookie, false);
        }

        public bool end_areYouCoordinator(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _areYouCoordinator_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_areYouCoordinator> begin_areYouCoordinator(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_areYouCoordinator_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_areYouCoordinator, bool>(
                (Callback_Node_areYouCoordinator cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _areYouCoordinator_name, cookie, completedCallback);
            _iceI_areYouCoordinator(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_areYouThere> begin_areYouThere(string gn, int j, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_areYouThere(gn, j, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_areYouThere(string gn, int j, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_areYouThere(gn, j, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_areYouThere(string gn, int j, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_areYouThere(gn, j, context, callback, cookie, false);
        }

        public bool end_areYouThere(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _areYouThere_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_areYouThere> begin_areYouThere(string iceP_gn, int iceP_j, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_areYouThere_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_areYouThere, bool>(
                (Callback_Node_areYouThere cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _areYouThere_name, cookie, completedCallback);
            _iceI_areYouThere(iceP_gn, iceP_j, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_sync> begin_sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sync(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sync(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sync(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sync(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sync(context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_sync(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sync_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_sync> begin_sync(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_sync_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_sync, global::Ice.ObjectPrx>(
                (Callback_Node_sync cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _sync_name, cookie, completedCallback);
            _iceI_sync(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_nodes> begin_nodes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_nodes(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_nodes(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_nodes(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_nodes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_nodes(context, callback, cookie, false);
        }

        public NodeInfo[] end_nodes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _nodes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<NodeInfo[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_nodes> begin_nodes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_nodes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_nodes, NodeInfo[]>(
                (Callback_Node_nodes cb, NodeInfo[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _nodes_name, cookie, completedCallback);
            _iceI_nodes(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Node_query> begin_query(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_query(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_query(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_query(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_query(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_query(context, callback, cookie, false);
        }

        public QueryInfo end_query(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _query_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<QueryInfo>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Node_query> begin_query(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_query_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Node_query, QueryInfo>(
                (Callback_Node_query cb, QueryInfo ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _query_name, cookie, completedCallback);
            _iceI_query(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static NodePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    NodePrxHelper h = new NodePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    NodePrxHelper h = new NodePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NodePrx r = b as NodePrx;
            if(r == null)
            {
                NodePrxHelper h = new NodePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static NodePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            NodePrxHelper h = new NodePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::Node"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, NodePrx v)
        {
            ostr.writeProxy(v);
        }

        public static NodePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                NodePrxHelper result = new NodePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceStormElection
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class ReplicaObserverDisp_ : global::Ice.ObjectImpl, ReplicaObserver
    {
        #region Slice operations

        public abstract void init(LogUpdate llu, TopicContent[] content, global::Ice.Current current = null);

        public abstract void createTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        public abstract void destroyTopic(LogUpdate llu, string name, global::Ice.Current current = null);

        public abstract void addSubscriber(LogUpdate llu, string topic, global::IceStorm.SubscriberRecord record, global::Ice.Current current = null);

        public abstract void removeSubscriber(LogUpdate llu, string topic, global::Ice.Identity[] subscribers, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::ReplicaObserver"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_init(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            TopicContent[] iceP_content;
            iceP_llu.ice_readMembers(istr);
            iceP_content = TopicContentSeqHelper.read(istr);
            inS.endReadParams();
            obj.init(iceP_llu, iceP_content, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createTopic(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            string iceP_name;
            iceP_llu.ice_readMembers(istr);
            iceP_name = istr.readString();
            inS.endReadParams();
            obj.createTopic(iceP_llu, iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroyTopic(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            string iceP_name;
            iceP_llu.ice_readMembers(istr);
            iceP_name = istr.readString();
            inS.endReadParams();
            obj.destroyTopic(iceP_llu, iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_addSubscriber(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            string iceP_topic;
            global::IceStorm.SubscriberRecord iceP_record;
            iceP_record = null;
            iceP_llu.ice_readMembers(istr);
            iceP_topic = istr.readString();
            iceP_record = global::IceStorm.SubscriberRecord.ice_read(istr);
            inS.endReadParams();
            obj.addSubscriber(iceP_llu, iceP_topic, iceP_record, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeSubscriber(ReplicaObserver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            string iceP_topic;
            global::Ice.Identity[] iceP_subscribers;
            iceP_llu.ice_readMembers(istr);
            iceP_topic = istr.readString();
            iceP_subscribers = global::Ice.IdentitySeqHelper.read(istr);
            inS.endReadParams();
            obj.removeSubscriber(iceP_llu, iceP_topic, iceP_subscribers, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "addSubscriber",
            "createTopic",
            "destroyTopic",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "init",
            "removeSubscriber"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_addSubscriber(this, inS, current);
                }
                case 1:
                {
                    return iceD_createTopic(this, inS, current);
                }
                case 2:
                {
                    return iceD_destroyTopic(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_init(this, inS, current);
                }
                case 8:
                {
                    return iceD_removeSubscriber(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class TopicManagerSyncDisp_ : global::Ice.ObjectImpl, TopicManagerSync
    {
        #region Slice operations

        public abstract void getContent(out LogUpdate llu, out TopicContent[] content, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::TopicManagerSync"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getContent(TopicManagerSync obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            LogUpdate iceP_llu;
            TopicContent[] iceP_content;
            obj.getContent(out iceP_llu, out iceP_content, current);
            var ostr = inS.startWriteParams();
            iceP_llu.ice_writeMembers(ostr);
            TopicContentSeqHelper.write(ostr, iceP_content);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getContent",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getContent(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class NodeDisp_ : global::Ice.ObjectImpl, Node
    {
        #region Slice operations

        public abstract void invitation(int j, string gn, global::Ice.Current current = null);

        public abstract void ready(int j, string gn, global::Ice.ObjectPrx coordinator, int max, long generation, global::Ice.Current current = null);

        public abstract void accept(int j, string gn, int[] forwardedInvites, global::Ice.ObjectPrx observer, LogUpdate llu, int max, global::Ice.Current current = null);

        public abstract bool areYouCoordinator(global::Ice.Current current = null);

        public abstract bool areYouThere(string gn, int j, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx sync(global::Ice.Current current = null);

        public abstract NodeInfo[] nodes(global::Ice.Current current = null);

        public abstract QueryInfo query(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStormElection::Node"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_invitation(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j;
            string iceP_gn;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            inS.endReadParams();
            obj.invitation(iceP_j, iceP_gn, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_ready(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j;
            string iceP_gn;
            global::Ice.ObjectPrx iceP_coordinator;
            int iceP_max;
            long iceP_generation;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            iceP_coordinator = istr.readProxy();
            iceP_max = istr.readInt();
            iceP_generation = istr.readLong();
            inS.endReadParams();
            obj.ready(iceP_j, iceP_gn, iceP_coordinator, iceP_max, iceP_generation, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_accept(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_j;
            string iceP_gn;
            int[] iceP_forwardedInvites;
            global::Ice.ObjectPrx iceP_observer;
            LogUpdate iceP_llu;
            iceP_llu = new LogUpdate();
            int iceP_max;
            iceP_j = istr.readInt();
            iceP_gn = istr.readString();
            iceP_forwardedInvites = global::Ice.IntSeqHelper.read(istr);
            iceP_observer = istr.readProxy();
            iceP_llu.ice_readMembers(istr);
            iceP_max = istr.readInt();
            inS.endReadParams();
            obj.accept(iceP_j, iceP_gn, iceP_forwardedInvites, iceP_observer, iceP_llu, iceP_max, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_areYouCoordinator(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.areYouCoordinator(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_areYouThere(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_gn;
            int iceP_j;
            iceP_gn = istr.readString();
            iceP_j = istr.readInt();
            inS.endReadParams();
            var ret = obj.areYouThere(iceP_gn, iceP_j, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sync(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.sync(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_nodes(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.nodes(current);
            var ostr = inS.startWriteParams();
            NodeInfoSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_query(Node obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.query(current);
            var ostr = inS.startWriteParams();
            QueryInfo.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "accept",
            "areYouCoordinator",
            "areYouThere",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "invitation",
            "nodes",
            "query",
            "ready",
            "sync"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_accept(this, inS, current);
                }
                case 1:
                {
                    return iceD_areYouCoordinator(this, inS, current);
                }
                case 2:
                {
                    return iceD_areYouThere(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_invitation(this, inS, current);
                }
                case 8:
                {
                    return iceD_nodes(this, inS, current);
                }
                case 9:
                {
                    return iceD_query(this, inS, current);
                }
                case 10:
                {
                    return iceD_ready(this, inS, current);
                }
                case 11:
                {
                    return iceD_sync(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
