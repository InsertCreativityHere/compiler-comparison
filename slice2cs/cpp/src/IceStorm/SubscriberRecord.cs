// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'SubscriberRecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("SubscriberRecord.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceStorm
{
    public sealed partial record class SubscriberRecordKey
    {
        public global::Ice.Identity topic;

        public global::Ice.Identity id;

        partial void ice_initialize();

        public SubscriberRecordKey(global::Ice.Identity topic, global::Ice.Identity id)
        {
            global::System.ArgumentNullException.ThrowIfNull(topic);
            this.topic = topic;
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
            ice_initialize();
        }

        public SubscriberRecordKey(Ice.InputStream istr)
        {
            this.topic = new global::Ice.Identity(istr);
            this.id = new global::Ice.Identity(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            global::Ice.Identity.ice_write(ostr, this.topic);
            global::Ice.Identity.ice_write(ostr, this.id);
        }

        public static void ice_write(Ice.OutputStream ostr, SubscriberRecordKey v)
        {
            v.ice_writeMembers(ostr);
        }

        public static SubscriberRecordKey ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class SubscriberRecord
    {
        public string topicName = "";

        public global::Ice.Identity id;

        public bool link;

        public Ice.ObjectPrx? obj;

        public global::System.Collections.Generic.Dictionary<string, string> theQoS;

        public int cost;

        public TopicPrx? theTopic;

        partial void ice_initialize();

        public SubscriberRecord(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> theQoS)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
            global::System.ArgumentNullException.ThrowIfNull(theQoS);
            this.theQoS = theQoS;
            ice_initialize();
        }

        public SubscriberRecord(string topicName, global::Ice.Identity id, bool link, Ice.ObjectPrx? obj, global::System.Collections.Generic.Dictionary<string, string> theQoS, int cost, TopicPrx? theTopic)
        {
            global::System.ArgumentNullException.ThrowIfNull(topicName);
            this.topicName = topicName;
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
            this.link = link;
            this.obj = obj;
            global::System.ArgumentNullException.ThrowIfNull(theQoS);
            this.theQoS = theQoS;
            this.cost = cost;
            this.theTopic = theTopic;
            ice_initialize();
        }

        public SubscriberRecord(Ice.InputStream istr)
        {
            this.topicName = istr.readString();
            this.id = new global::Ice.Identity(istr);
            this.link = istr.readBool();
            this.obj = istr.readProxy();
            this.theQoS = QoSHelper.read(istr);
            this.cost = istr.readInt();
            this.theTopic = TopicPrxHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.topicName);
            global::Ice.Identity.ice_write(ostr, this.id);
            ostr.writeBool(this.link);
            ostr.writeProxy(this.obj);
            QoSHelper.write(ostr, this.theQoS);
            ostr.writeInt(this.cost);
            TopicPrxHelper.write(ostr, this.theTopic);
        }

        public static void ice_write(Ice.OutputStream ostr, SubscriberRecord v)
        {
            v.ice_writeMembers(ostr);
        }

        public static SubscriberRecord ice_read(Ice.InputStream istr) => new(istr);
    }
}

namespace IceStorm
{
    public sealed class SubscriberRecordSeqHelper
    {
        public static void write(Ice.OutputStream ostr, SubscriberRecord[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static SubscriberRecord[] read(Ice.InputStream istr)
        {
            SubscriberRecord[] v;
            {
                int szx = istr.readAndCheckSeqSize(13);
                v = new SubscriberRecord[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new SubscriberRecord(istr);
                }
            }
            return v;
        }
    }
}
