//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Key.ice")]

#pragma warning disable 1591

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum var
    {
        @base
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class varHelper
    {
        public static void write(Ice.OutputStream ostr, var v)
        {
            ostr.writeEnum((int)v, 0);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static var read(Ice.InputStream istr)
        {
            var v;
            v = (var)istr.readEnum(0);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @while;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break(int @while)
        {
            this.@while = @while;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break(Ice.InputStream istr)
        {
            this.@while = istr.readInt();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeInt(this.@while);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, @break v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @break ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::case")]
    public partial interface @case : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::typeof")]
    public partial interface @typeof : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void @default(Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::delete")]
    public partial class delete : Ice.Value
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public casePrx? @else;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int export;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delete(int @if, casePrx? @else, int export)
        {
            this.@if = @if;
            this.@else = @else;
            this.export = export;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delete()
        {
            ice_initialize();
        }

        private const string _id = "::await::delete";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(@if);
            casePrxHelper.write(ostr_, @else);
            ostr_.writeInt(export);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            @if = istr_.readInt();
            @else = casePrxHelper.read(istr_);
            export = istr_.readInt();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::explicit")]
    public partial interface @explicit : @typeof, @case
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::package")]
    public partial class package : Ice.Value
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break? @for;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public var? @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public explicitPrx? @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, @break>? @internal;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? debugger;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public explicitPrx? @null;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public package(@break? @for, var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? debugger, explicitPrx? @null)
        {
            this.@for = @for;
            this.@goto = @goto;
            this.@if = @if;
            this.@internal = @internal;
            this.debugger = debugger;
            this.@null = @null;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public package()
        {
            ice_initialize();
        }

        private const string _id = "::await::package";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            if (@for is not null && ostr_.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(4);
                @for.Value.ice_writeMembers(ostr_);
            }
            if (@goto is not null)
            {
                ostr_.writeEnum(2, (int)@goto.Value, 1);
            }
            if (@if is not null && ostr_.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                explicitPrxHelper.write(ostr_, @if);
                ostr_.endSize(pos);
            }
            if (@internal is not null && ostr_.writeOptional(5, Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                whileHelper.write(ostr_, @internal);
                ostr_.endSize(pos);
            }
            ostr_.writeString(7, debugger);
            if (@null is not null && ostr_.writeOptional(8, Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                explicitPrxHelper.write(ostr_, @null);
                ostr_.endSize(pos);
            }
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            if (istr_.readOptional(1, Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                @break tmpVal;
                tmpVal = new @break(istr_);
                @for = tmpVal;
            }
            else
            {
                @for = null;
            }
            if (istr_.readOptional(2, Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr_.readEnum(0);
                @goto = tmpVal;
            }
            else
            {
                @goto = null;
            }
            if (istr_.readOptional(3, Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr_);
                @if = tmpVal;
            }
            else
            {
                @if = null;
            }
            if (istr_.readOptional(5, Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr_);
                @internal = tmpVal;
            }
            else
            {
                @internal = null;
            }
            debugger = istr_.readString(7);
            if (istr_.readOptional(8, Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr_);
                @null = tmpVal;
            }
            else
            {
                @null = null;
            }
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::optionalParams")]
    public partial interface optionalParams : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @break? @for(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<@break?> continueAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @break? @in(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::fixed")]
    public partial class @fixed : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @for;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(int @for, global::System.Exception? innerException = null) : base(innerException)
        {
            this.@for = @for;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::fixed";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::fixed", -1, true);
            ostr_.writeInt(@for);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            @for = istr_.readInt();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::foreach")]
    public partial class @foreach : @fixed
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(int @for, int @goto, int @if, global::System.Exception? innerException = null) : base(@for, innerException)
        {
            this.@goto = @goto;
            this.@if = @if;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::foreach";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::foreach", -1, false);
            ostr_.writeInt(@goto);
            ostr_.writeInt(@if);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            @goto = istr_.readInt();
            @if = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::BaseMethods")]
    public partial class BaseMethods : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Data_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HelpLink_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_InnerException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Message_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Source_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_StackTrace_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_TargetSite_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HResult_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Equals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetBaseException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetHashCode_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetObjectData_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetType_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ReferenceEquals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ToString_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(int ice_Data_, int ice_HelpLink_, int ice_InnerException_, int ice_Message_, int ice_Source_, int ice_StackTrace_, int ice_TargetSite_, int ice_HResult_, int ice_Equals_, int ice_GetBaseException_, int ice_GetHashCode_, int ice_GetObjectData_, int ice_GetType_, int ice_ReferenceEquals_, int ice_ToString_, global::System.Exception? innerException = null) : base(innerException)
        {
            this.ice_Data_ = ice_Data_;
            this.ice_HelpLink_ = ice_HelpLink_;
            this.ice_InnerException_ = ice_InnerException_;
            this.ice_Message_ = ice_Message_;
            this.ice_Source_ = ice_Source_;
            this.ice_StackTrace_ = ice_StackTrace_;
            this.ice_TargetSite_ = ice_TargetSite_;
            this.ice_HResult_ = ice_HResult_;
            this.ice_Equals_ = ice_Equals_;
            this.ice_GetBaseException_ = ice_GetBaseException_;
            this.ice_GetHashCode_ = ice_GetHashCode_;
            this.ice_GetObjectData_ = ice_GetObjectData_;
            this.ice_GetType_ = ice_GetType_;
            this.ice_ReferenceEquals_ = ice_ReferenceEquals_;
            this.ice_ToString_ = ice_ToString_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::BaseMethods";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::BaseMethods", -1, true);
            ostr_.writeInt(ice_Data_);
            ostr_.writeInt(ice_HelpLink_);
            ostr_.writeInt(ice_InnerException_);
            ostr_.writeInt(ice_Message_);
            ostr_.writeInt(ice_Source_);
            ostr_.writeInt(ice_StackTrace_);
            ostr_.writeInt(ice_TargetSite_);
            ostr_.writeInt(ice_HResult_);
            ostr_.writeInt(ice_Equals_);
            ostr_.writeInt(ice_GetBaseException_);
            ostr_.writeInt(ice_GetHashCode_);
            ostr_.writeInt(ice_GetObjectData_);
            ostr_.writeInt(ice_GetType_);
            ostr_.writeInt(ice_ReferenceEquals_);
            ostr_.writeInt(ice_ToString_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_Data_ = istr_.readInt();
            ice_HelpLink_ = istr_.readInt();
            ice_InnerException_ = istr_.readInt();
            ice_Message_ = istr_.readInt();
            ice_Source_ = istr_.readInt();
            ice_StackTrace_ = istr_.readInt();
            ice_TargetSite_ = istr_.readInt();
            ice_HResult_ = istr_.readInt();
            ice_Equals_ = istr_.readInt();
            ice_GetBaseException_ = istr_.readInt();
            ice_GetHashCode_ = istr_.readInt();
            ice_GetObjectData_ = istr_.readInt();
            ice_GetType_ = istr_.readInt();
            ice_ReferenceEquals_ = istr_.readInt();
            ice_ToString_ = istr_.readInt();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::await::implicit")]
    public partial interface @implicit : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        var @in(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, Ice.Current current);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @protected
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @public
    {
        public const int value = 0;
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::await::System::Test")]
        public partial interface Test : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(Ice.Current current);
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::System::Test")]
    public partial interface Test : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void op(Ice.Current current);
    }
}

namespace @await
{
    public record struct optionalParams_InResult(@break? returnValue, var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null);

    public record struct optionalParams_ForeachResult(@break? returnValue, var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null);
}

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface casePrx : Ice.ObjectPrx
    {
        void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface typeofPrx : Ice.ObjectPrx
    {
        void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface explicitPrx : typeofPrx, casePrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface optionalParamsPrx : Ice.ObjectPrx
    {
        @break? @for(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<@break?> forAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @continue(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<@break?> continueAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @in(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @foreach(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface implicitPrx : Ice.ObjectPrx
    {
        var @in(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<var> inAsync(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestPrx : Ice.ObjectPrx
        {
            void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestPrx : Ice.ObjectPrx
    {
        void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace @await
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class casePrxHelper : Ice.ObjectPrxHelperBase, casePrx
    {
        public void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        public static casePrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new casePrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static casePrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new casePrxHelper(b) : null;

        public static casePrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new casePrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static casePrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new casePrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static casePrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new casePrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case"
        };

        public static string ice_staticId() => "::await::case";

        public static void write(Ice.OutputStream ostr, casePrx? v)
        {
            ostr.writeProxy(v);
        }

        public static casePrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new casePrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new casePrxHelper(reference);

        private casePrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private casePrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class typeofPrxHelper : Ice.ObjectPrxHelperBase, typeofPrx
    {
        public void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public static typeofPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new typeofPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static typeofPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new typeofPrxHelper(b) : null;

        public static typeofPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new typeofPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static typeofPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new typeofPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static typeofPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new typeofPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::typeof"
        };

        public static string ice_staticId() => "::await::typeof";

        public static void write(Ice.OutputStream ostr, typeofPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static typeofPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new typeofPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new typeofPrxHelper(reference);

        private typeofPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private typeofPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class explicitPrxHelper : Ice.ObjectPrxHelperBase, explicitPrx
    {
        public void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        public static explicitPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new explicitPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static explicitPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new explicitPrxHelper(b) : null;

        public static explicitPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new explicitPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static explicitPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new explicitPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static explicitPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new explicitPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case",
            "::await::explicit",
            "::await::typeof"
        };

        public static string ice_staticId() => "::await::explicit";

        public static void write(Ice.OutputStream ostr, explicitPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static explicitPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new explicitPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new explicitPrxHelper(reference);

        private explicitPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private explicitPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class whileHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, @break> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, @break> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, @break> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, @break> r = new global::System.Collections.Generic.Dictionary<string, @break>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                @break v;
                v = new @break(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class optionalParamsPrxHelper : Ice.ObjectPrxHelperBase, optionalParamsPrx
    {
        public @break? @for(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_forAsync(@goto, @if, @internal, @namespace, @null, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @continue(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_continueAsync(@goto, @if, @internal, @namespace, @null, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @in(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_inAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                @null = result_.@null;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @foreach(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_foreachAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                @null = result_.@null;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<@break?> forAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_forAsync(@goto, @if, @internal, @namespace, @null, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<@break?> _iceI_forAsync(var? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, explicitPrx? iceP_null, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_for_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<@break?>(progress, cancel);
            _iceI_for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context, synchronous, completed);
            return completed.Task;
        }

        private const string _for_name = "for";

        private void _iceI_for(var? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, explicitPrx? iceP_null, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<@break?>(completed);
            outAsync.invoke(
                _for_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_goto is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if (iceP_if is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if);
                        ostr.endSize(pos);
                    }
                    if (iceP_internal is not null && ostr.writeOptional(5, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                    if (iceP_null is not null && ostr.writeOptional(8, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_null);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    @break? ret;
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<@break?> continueAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_continueAsync(@goto, @if, @internal, @namespace, @null, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<@break?> _iceI_continueAsync(var? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, explicitPrx? iceP_null, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_continue_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<@break?>(progress, cancel);
            _iceI_continue(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context, synchronous, completed);
            return completed.Task;
        }

        private const string _continue_name = "continue";

        private void _iceI_continue(var? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, explicitPrx? iceP_null, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<@break?>(completed);
            outAsync.invoke(
                _continue_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_goto is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if (iceP_if is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if);
                        ostr.endSize(pos);
                    }
                    if (iceP_internal is not null && ostr.writeOptional(5, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                    if (iceP_null is not null && ostr.writeOptional(8, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_null);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    @break? ret;
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_inAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_InResult> _iceI_inAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<optionalParams_InResult>(progress, cancel);
            _iceI_in(context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_InResult>(completed);
            outAsync.invoke(
                _in_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    var ret = new optionalParams_InResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(2, Ice.OptionalFormat.Size))
                    {
                        var tmpVal;
                        tmpVal = (var)istr.readEnum(0);
                        ret.@goto = tmpVal;
                    }
                    else
                    {
                        ret.@goto = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = tmpVal;
                    }
                    else
                    {
                        ret.@if = null;
                    }
                    if (istr.readOptional(5, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = tmpVal;
                    }
                    else
                    {
                        ret.@internal = null;
                    }
                    ret.@namespace = istr.readString(7);
                    if (istr.readOptional(8, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@null = tmpVal;
                    }
                    else
                    {
                        ret.@null = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foreachAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_ForeachResult> _iceI_foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foreach_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<optionalParams_ForeachResult>(progress, cancel);
            _iceI_foreach(context, synchronous, completed);
            return completed.Task;
        }

        private const string _foreach_name = "foreach";

        private void _iceI_foreach(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_ForeachResult>(completed);
            outAsync.invoke(
                _foreach_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    var ret = new optionalParams_ForeachResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(2, Ice.OptionalFormat.Size))
                    {
                        var tmpVal;
                        tmpVal = (var)istr.readEnum(0);
                        ret.@goto = tmpVal;
                    }
                    else
                    {
                        ret.@goto = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = tmpVal;
                    }
                    else
                    {
                        ret.@if = null;
                    }
                    if (istr.readOptional(5, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = tmpVal;
                    }
                    else
                    {
                        ret.@internal = null;
                    }
                    ret.@namespace = istr.readString(7);
                    if (istr.readOptional(8, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@null = tmpVal;
                    }
                    else
                    {
                        ret.@null = null;
                    }
                    return ret;
                });
        }

        public static optionalParamsPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new optionalParamsPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static optionalParamsPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new optionalParamsPrxHelper(b) : null;

        public static optionalParamsPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new optionalParamsPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static optionalParamsPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new optionalParamsPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static optionalParamsPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new optionalParamsPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::optionalParams"
        };

        public static string ice_staticId() => "::await::optionalParams";

        public static void write(Ice.OutputStream ostr, optionalParamsPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static optionalParamsPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new optionalParamsPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new optionalParamsPrxHelper(reference);

        private optionalParamsPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private optionalParamsPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class implicitPrxHelper : Ice.ObjectPrxHelperBase, implicitPrx
    {
        public var @in(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @operator, @override, @params, @private, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<var> inAsync(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @operator, @override, @params, @private, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<var> _iceI_inAsync(@break iceP_internal, delete? iceP_is, explicitPrx? iceP_lock, casePrx? iceP_namespace, typeofPrx? iceP_new, delete? iceP_null, explicitPrx? iceP_operator, int iceP_override, int iceP_params, int iceP_private, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<var>(progress, cancel);
            _iceI_in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(@break iceP_internal, delete? iceP_is, explicitPrx? iceP_lock, casePrx? iceP_namespace, typeofPrx? iceP_new, delete? iceP_null, explicitPrx? iceP_operator, int iceP_override, int iceP_params, int iceP_private, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<var>(completed);
            outAsync.invoke(
                _in_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    iceP_internal.ice_writeMembers(ostr);
                    ostr.writeValue(iceP_is);
                    explicitPrxHelper.write(ostr, iceP_lock);
                    casePrxHelper.write(ostr, iceP_namespace);
                    typeofPrxHelper.write(ostr, iceP_new);
                    ostr.writeValue(iceP_null);
                    explicitPrxHelper.write(ostr, iceP_operator);
                    ostr.writeInt(iceP_override);
                    ostr.writeInt(iceP_params);
                    ostr.writeInt(iceP_private);
                    ostr.writePendingValues();
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@foreach)
                    {
                        throw;
                    }
                    catch(@fixed)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret;
                    ret = (var)istr.readEnum(0);
                    return ret;
                });
        }

        public static implicitPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new implicitPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static implicitPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new implicitPrxHelper(b) : null;

        public static implicitPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new implicitPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static implicitPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new implicitPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static implicitPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new implicitPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::implicit"
        };

        public static string ice_staticId() => "::await::implicit";

        public static void write(Ice.OutputStream ostr, implicitPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static implicitPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new implicitPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new implicitPrxHelper(reference);

        private implicitPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private implicitPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class TestPrxHelper : Ice.ObjectPrxHelperBase, TestPrx
        {
            public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public static TestPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TestPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestPrxHelper(b) : null;

            public static TestPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        return new TestPrxHelper(bb);
                    }
                }
                catch (Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TestPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                b is not null ? new TestPrxHelper(b.ice_facet(f)) : null;

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::await::System::Test"
            };

            public static string ice_staticId() => "::await::System::Test";

            public static void write(Ice.OutputStream ostr, TestPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TestPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestPrxHelper(reference);

            private TestPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TestPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestPrxHelper : Ice.ObjectPrxHelperBase, TestPrx
    {
        public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public static TestPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestPrxHelper(b) : null;

        public static TestPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new TestPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new TestPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::System::Test"
        };

        public static string ice_staticId() => "::System::Test";

        public static void write(Ice.OutputStream ostr, TestPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestPrxHelper(reference);

        private TestPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace @await
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class caseDisp_ : Ice.ObjectImpl, @case
    {
        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::await::case";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "catch" => @case.iceD_catchAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class typeofDisp_ : Ice.ObjectImpl, @typeof
    {
        public abstract void @default(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::await::typeof";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "default" => @typeof.iceD_defaultAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class explicitDisp_ : Ice.ObjectImpl, @explicit
    {
        public abstract void @default(Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::await::explicit";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "default" => @typeof.iceD_defaultAsync(this, request),
                "catch" => @case.iceD_catchAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class optionalParamsDisp_ : Ice.ObjectImpl, optionalParams
    {
        public abstract @break? @for(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<@break?> continueAsync(var? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, explicitPrx? @null, Ice.Current current);

        public abstract @break? @in(out var? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, out explicitPrx? @null, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::await::optionalParams";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "for" => optionalParams.iceD_forAsync(this, request),
                "continue" => optionalParams.iceD_continueAsync(this, request),
                "in" => optionalParams.iceD_inAsync(this, request),
                "foreach" => optionalParams.iceD_foreachAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class implicitDisp_ : Ice.ObjectImpl, @implicit
    {
        public abstract var @in(@break @internal, delete? @is, explicitPrx? @lock, casePrx? @namespace, typeofPrx? @new, delete? @null, explicitPrx? @operator, int @override, int @params, int @private, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::await::implicit";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "in" => @implicit.iceD_inAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class TestDisp_ : Ice.ObjectImpl, Test
        {
            public abstract void op(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::await::System::Test";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "op" => Test.iceD_opAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestDisp_ : Ice.ObjectImpl, Test
    {
        public abstract void op(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::System::Test";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "op" => Test.iceD_opAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace @await
{
    public partial interface @case
    {
        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_catchAsync(
            @case obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int iceP_checked;
            iceP_checked = istr.readInt();
            istr.endEncapsulation();
            var result = await obj.catchAsync(iceP_checked, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, iceP_continue) =>
                {
                    ostr.writeInt(iceP_continue);
                });
        }
    }

    public partial interface @typeof
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_defaultAsync(
            @typeof obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.@default(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface @explicit
    {
    }

    public partial interface optionalParams
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_forAsync(
            optionalParams obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            var? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            explicitPrx? iceP_null;
            if (istr.readOptional(2, Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr.readEnum(0);
                iceP_goto = tmpVal;
            }
            else
            {
                iceP_goto = null;
            }
            if (istr.readOptional(3, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = tmpVal;
            }
            else
            {
                iceP_if = null;
            }
            if (istr.readOptional(5, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = tmpVal;
            }
            else
            {
                iceP_internal = null;
            }
            iceP_namespace = istr.readString(7);
            if (istr.readOptional(8, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_null = tmpVal;
            }
            else
            {
                iceP_null = null;
            }
            istr.endEncapsulation();
            var ret = obj.@for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_continueAsync(
            optionalParams obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            var? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            explicitPrx? iceP_null;
            if (istr.readOptional(2, Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr.readEnum(0);
                iceP_goto = tmpVal;
            }
            else
            {
                iceP_goto = null;
            }
            if (istr.readOptional(3, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = tmpVal;
            }
            else
            {
                iceP_if = null;
            }
            if (istr.readOptional(5, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = tmpVal;
            }
            else
            {
                iceP_internal = null;
            }
            iceP_namespace = istr.readString(7);
            if (istr.readOptional(8, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_null = tmpVal;
            }
            else
            {
                iceP_null = null;
            }
            istr.endEncapsulation();
            var result = await obj.continueAsync(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.Value.ice_writeMembers(ostr);
                    }
                });
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_inAsync(
            optionalParams obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            explicitPrx? iceP_null;
            var ret = obj.@in(out iceP_goto, out iceP_if, out iceP_internal, out iceP_namespace, out iceP_null, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_goto is not null)
            {
                ostr.writeEnum(2, (int)iceP_goto.Value, 1);
            }
            if (iceP_if is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                explicitPrxHelper.write(ostr, iceP_if);
                ostr.endSize(pos);
            }
            if (iceP_internal is not null && ostr.writeOptional(5, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                whileHelper.write(ostr, iceP_internal);
                ostr.endSize(pos);
            }
            ostr.writeString(7, iceP_namespace);
            if (iceP_null is not null && ostr.writeOptional(8, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                explicitPrxHelper.write(ostr, iceP_null);
                ostr.endSize(pos);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_foreachAsync(
            optionalParams obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = await obj.foreachAsync(request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    if (ret.returnValue is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.returnValue.Value.ice_writeMembers(ostr);
                    }
                    if (ret.@goto is not null)
                    {
                        ostr.writeEnum(2, (int)ret.@goto.Value, 1);
                    }
                    if (ret.@if is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, ret.@if);
                        ostr.endSize(pos);
                    }
                    if (ret.@internal is not null && ostr.writeOptional(5, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, ret.@internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, ret.@namespace);
                    if (ret.@null is not null && ostr.writeOptional(8, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, ret.@null);
                        ostr.endSize(pos);
                    }
                });
        }
    }

    public partial interface @implicit
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_inAsync(
            @implicit obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            @break iceP_internal;
            delete? iceP_is = null;
            explicitPrx? iceP_lock;
            casePrx? iceP_namespace;
            typeofPrx? iceP_new;
            delete? iceP_null = null;
            explicitPrx? iceP_operator;
            int iceP_override;
            int iceP_params;
            int iceP_private;
            iceP_internal = new @break(istr);
            istr.readValue((delete? v) => { iceP_is = v; });
            iceP_lock = explicitPrxHelper.read(istr);
            iceP_namespace = casePrxHelper.read(istr);
            iceP_new = typeofPrxHelper.read(istr);
            istr.readValue((delete? v) => { iceP_null = v; });
            iceP_operator = explicitPrxHelper.read(istr);
            iceP_override = istr.readInt();
            iceP_params = istr.readInt();
            iceP_private = istr.readInt();
            istr.readPendingValues();
            istr.endEncapsulation();
            var ret = obj.@in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeEnum((int)ret, 0);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    namespace System
    {
        public partial interface Test
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
                Test obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.op(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}

namespace System
{
    public partial interface Test
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
            Test obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.op(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
