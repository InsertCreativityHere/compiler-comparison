//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum var
    {
        @base
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class varHelper
    {
        public static void write(global::Ice.OutputStream ostr, var v)
        {
            ostr.writeEnum((int)v, 0);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static var read(global::Ice.InputStream istr)
        {
            var v;
            v = (var)istr.readEnum(0);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct @break
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @while;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break(int @while)
        {
            this.@while = @while;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::await::break");
            global::IceInternal.HashUtil.hashAdd(ref h_, @while);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(!(other is @break))
            {
                return false;
            }
            @break o = (@break)other;
            if(!this.@while.Equals(o.@while))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(@break lhs, @break rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(@break lhs, @break rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.@while);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.@while = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, @break v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @break ice_read(global::Ice.InputStream istr)
        {
            var v = new @break();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @case : global::Ice.Object, caseOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @typeof : global::Ice.Object, typeofOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class delete : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public casePrx @else;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int export;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delete()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delete(int @if, casePrx @else, int export)
        {
            this.@if = @if;
            this.@else = @else;
            this.export = export;
            ice_initialize();
        }

        #endregion

        private const string _id = "::await::delete";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(@if);
            casePrxHelper.write(ostr_, @else);
            ostr_.writeInt(export);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @if = istr_.readInt();
            @else = casePrxHelper.read(istr_);
            export = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @explicit : global::Ice.Object, explicitOperations_, @typeof, @case
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class package : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<@break> @for;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<var> @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<explicitPrx> @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<string> debugger;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Optional<explicitPrx> @null;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public package()
        {
            this.@for = new global::Ice.Optional<@break>();
            this.@goto = new global::Ice.Optional<var>();
            this.@if = new global::Ice.Optional<explicitPrx>();
            this.@internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
            this.debugger = new global::Ice.Optional<string>();
            this.@null = new global::Ice.Optional<explicitPrx>();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public package(global::Ice.Optional<@break> @for, global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> debugger, global::Ice.Optional<explicitPrx> @null)
        {
            this.@for = @for;
            this.@goto = @goto;
            this.@if = @if;
            this.@internal = @internal;
            this.debugger = debugger;
            this.@null = @null;
            ice_initialize();
        }

        #endregion

        private const string _id = "::await::package";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            if(@for.HasValue && ostr_.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(4);
                @for.Value.ice_writeMembers(ostr_);
            }
            if(@goto.HasValue)
            {
                ostr_.writeEnum(2, (int)@goto.Value, 1);
            }
            if(@if.HasValue && ostr_.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                explicitPrxHelper.write(ostr_, @if.Value);
                ostr_.endSize(pos);
            }
            if(@internal.HasValue && ostr_.writeOptional(5, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                whileHelper.write(ostr_, @internal.Value);
                ostr_.endSize(pos);
            }
            ostr_.writeString(7, debugger);
            if(@null.HasValue && ostr_.writeOptional(8, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                explicitPrxHelper.write(ostr_, @null.Value);
                ostr_.endSize(pos);
            }
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            if(istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                @break tmpVal = new @break();
                tmpVal.ice_readMembers(istr_);
                @for = new global::Ice.Optional<@break>(tmpVal);
            }
            else
            {
                @for = new global::Ice.Optional<@break>();
            }
            if(istr_.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr_.readEnum(0);
                @goto = new global::Ice.Optional<var>(tmpVal);
            }
            else
            {
                @goto = new global::Ice.Optional<var>();
            }
            if(istr_.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr_);
                @if = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                @if = new global::Ice.Optional<explicitPrx>();
            }
            if(istr_.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr_);
                @internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>(tmpVal);
            }
            else
            {
                @internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
            }
            debugger = istr_.readString(7);
            if(istr_.readOptional(8, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr_);
                @null = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                @null = new global::Ice.Optional<explicitPrx>();
            }
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface optionalParams : global::Ice.Object, optionalParamsOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class @fixed : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @for;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(int @for)
        {
            this.@for = @for;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(int @for)
        {
            _initDM(@for);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(int @for, global::System.Exception ex) : base(ex)
        {
            _initDM(@for);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::fixed";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::fixed", -1, true);
            ostr_.writeInt(@for);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @for = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class @foreach : @fixed
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(int @goto, int @if)
        {
            this.@goto = @goto;
            this.@if = @if;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(int @for, int @goto, int @if) : base(@for)
        {
            _initDM(@goto, @if);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(int @for, int @goto, int @if, global::System.Exception ex) : base(@for, ex)
        {
            _initDM(@goto, @if);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::foreach";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::foreach", -1, false);
            ostr_.writeInt(@goto);
            ostr_.writeInt(@if);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @goto = istr_.readInt();
            @if = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class BaseMethods : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Data_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HelpLink_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_InnerException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Message_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Source_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_StackTrace_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_TargetSite_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HResult_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Equals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetBaseException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetHashCode_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetObjectData_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetType_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ReferenceEquals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ToString_;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(int Data, int HelpLink, int InnerException, int Message, int Source, int StackTrace, int TargetSite, int HResult, int Equals, int GetBaseException, int GetHashCode, int GetObjectData, int GetType, int ReferenceEquals, int ToString)
        {
            this.ice_Data_ = Data;
            this.ice_HelpLink_ = HelpLink;
            this.ice_InnerException_ = InnerException;
            this.ice_Message_ = Message;
            this.ice_Source_ = Source;
            this.ice_StackTrace_ = StackTrace;
            this.ice_TargetSite_ = TargetSite;
            this.ice_HResult_ = HResult;
            this.ice_Equals_ = Equals;
            this.ice_GetBaseException_ = GetBaseException;
            this.ice_GetHashCode_ = GetHashCode;
            this.ice_GetObjectData_ = GetObjectData;
            this.ice_GetType_ = GetType;
            this.ice_ReferenceEquals_ = ReferenceEquals;
            this.ice_ToString_ = ToString;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(int Data, int HelpLink, int InnerException, int Message, int Source, int StackTrace, int TargetSite, int HResult, int Equals, int GetBaseException, int GetHashCode, int GetObjectData, int GetType, int ReferenceEquals, int ToString)
        {
            _initDM(Data, HelpLink, InnerException, Message, Source, StackTrace, TargetSite, HResult, Equals, GetBaseException, GetHashCode, GetObjectData, GetType, ReferenceEquals, ToString);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(int Data, int HelpLink, int InnerException, int Message, int Source, int StackTrace, int TargetSite, int HResult, int Equals, int GetBaseException, int GetHashCode, int GetObjectData, int GetType, int ReferenceEquals, int ToString, global::System.Exception ex) : base(ex)
        {
            _initDM(Data, HelpLink, InnerException, Message, Source, StackTrace, TargetSite, HResult, Equals, GetBaseException, GetHashCode, GetObjectData, GetType, ReferenceEquals, ToString);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::await::BaseMethods";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::await::BaseMethods", -1, true);
            ostr_.writeInt(ice_Data_);
            ostr_.writeInt(ice_HelpLink_);
            ostr_.writeInt(ice_InnerException_);
            ostr_.writeInt(ice_Message_);
            ostr_.writeInt(ice_Source_);
            ostr_.writeInt(ice_StackTrace_);
            ostr_.writeInt(ice_TargetSite_);
            ostr_.writeInt(ice_HResult_);
            ostr_.writeInt(ice_Equals_);
            ostr_.writeInt(ice_GetBaseException_);
            ostr_.writeInt(ice_GetHashCode_);
            ostr_.writeInt(ice_GetObjectData_);
            ostr_.writeInt(ice_GetType_);
            ostr_.writeInt(ice_ReferenceEquals_);
            ostr_.writeInt(ice_ToString_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_Data_ = istr_.readInt();
            ice_HelpLink_ = istr_.readInt();
            ice_InnerException_ = istr_.readInt();
            ice_Message_ = istr_.readInt();
            ice_Source_ = istr_.readInt();
            ice_StackTrace_ = istr_.readInt();
            ice_TargetSite_ = istr_.readInt();
            ice_HResult_ = istr_.readInt();
            ice_Equals_ = istr_.readInt();
            ice_GetBaseException_ = istr_.readInt();
            ice_GetHashCode_ = istr_.readInt();
            ice_GetObjectData_ = istr_.readInt();
            ice_GetType_ = istr_.readInt();
            ice_ReferenceEquals_ = istr_.readInt();
            ice_ToString_ = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @implicit : global::Ice.Object, implicitOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @protected
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @public
    {
        public const int value = 0;
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Test : global::Ice.Object, TestOperations_
        {
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Test : global::Ice.Object, TestOperations_
    {
    }
}

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_case_catch(int @continue);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_typeof_default();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_optionalParams_for(global::Ice.Optional<@break> ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_optionalParams_continue(global::Ice.Optional<@break> ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_optionalParams_in(global::Ice.Optional<@break> ret, global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_optionalParams_foreach(global::Ice.Optional<@break> ret, global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_implicit_in(var ret);

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Test_op();
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Test_op();
}

namespace @await
{
    public struct optionalParams_InResult
    {
        public optionalParams_InResult(global::Ice.Optional<@break> returnValue, global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null)
        {
            this.returnValue = returnValue;
            this.@goto = @goto;
            this.@if = @if;
            this.@internal = @internal;
            this.@namespace = @namespace;
            this.@null = @null;
        }

        public global::Ice.Optional<@break> returnValue;
        public global::Ice.Optional<var> @goto;
        public global::Ice.Optional<explicitPrx> @if;
        public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal;
        public global::Ice.Optional<string> @namespace;
        public global::Ice.Optional<explicitPrx> @null;
    }

    public struct optionalParams_ForeachResult
    {
        public optionalParams_ForeachResult(global::Ice.Optional<@break> returnValue, global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null)
        {
            this.returnValue = returnValue;
            this.@goto = @goto;
            this.@if = @if;
            this.@internal = @internal;
            this.@namespace = @namespace;
            this.@null = @null;
        }

        public global::Ice.Optional<@break> returnValue;
        public global::Ice.Optional<var> @goto;
        public global::Ice.Optional<explicitPrx> @if;
        public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal;
        public global::Ice.Optional<string> @namespace;
        public global::Ice.Optional<explicitPrx> @null;
    }
}

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface casePrx : global::Ice.ObjectPrx
    {
        void @catch(int @checked, out int @continue, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface typeofPrx : global::Ice.ObjectPrx
    {
        void @default(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task defaultAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface explicitPrx : typeofPrx, casePrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface optionalParamsPrx : global::Ice.ObjectPrx
    {
        global::Ice.Optional<@break> @for(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> forAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.Optional<@break> @continue(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> continueAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.Optional<@break> @in(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.Optional<@break> @foreach(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface implicitPrx : global::Ice.ObjectPrx
    {
        var @in(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<var> inAsync(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestPrx : global::Ice.ObjectPrx
        {
            void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
        }
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestPrx : global::Ice.ObjectPrx
    {
        void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }
}

namespace @await
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface caseOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface typeofOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void @default(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface explicitOperations_ : typeofOperations_, caseOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface optionalParamsOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Optional<@break> @for(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> continueAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Optional<@break> @in(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface implicitOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        var @in(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.Current current = null);
    }

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(global::Ice.Current current = null);
        }
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void op(global::Ice.Current current = null);
    }
}

namespace @await
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class casePrxHelper : global::Ice.ObjectPrxHelperBase, casePrx
    {
        public casePrxHelper()
        {
        }

        #region Synchronous operations

        public void @catch(int @checked, out int @continue, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static casePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            casePrx r = b as casePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                casePrxHelper h = new casePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static casePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            casePrx r = b as casePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                casePrxHelper h = new casePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static casePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    casePrxHelper h = new casePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static casePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    casePrxHelper h = new casePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static casePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            casePrx r = b as casePrx;
            if(r == null)
            {
                casePrxHelper h = new casePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static casePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            casePrxHelper h = new casePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case"
        };

        public static string ice_staticId() => "::await::case";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, casePrx v)
        {
            ostr.writeProxy(v);
        }

        public static casePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                casePrxHelper result = new casePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class typeofPrxHelper : global::Ice.ObjectPrxHelperBase, typeofPrx
    {
        public typeofPrxHelper()
        {
        }

        #region Synchronous operations

        public void @default(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task defaultAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static typeofPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            typeofPrx r = b as typeofPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                typeofPrxHelper h = new typeofPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static typeofPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            typeofPrx r = b as typeofPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                typeofPrxHelper h = new typeofPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static typeofPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    typeofPrxHelper h = new typeofPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static typeofPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    typeofPrxHelper h = new typeofPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static typeofPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            typeofPrx r = b as typeofPrx;
            if(r == null)
            {
                typeofPrxHelper h = new typeofPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static typeofPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            typeofPrxHelper h = new typeofPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::typeof"
        };

        public static string ice_staticId() => "::await::typeof";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, typeofPrx v)
        {
            ostr.writeProxy(v);
        }

        public static typeofPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                typeofPrxHelper result = new typeofPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class explicitPrxHelper : global::Ice.ObjectPrxHelperBase, explicitPrx
    {
        public explicitPrxHelper()
        {
        }

        #region Synchronous operations

        public void @default(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void @catch(int @checked, out int @continue, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task defaultAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static explicitPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            explicitPrx r = b as explicitPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                explicitPrxHelper h = new explicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static explicitPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            explicitPrx r = b as explicitPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                explicitPrxHelper h = new explicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static explicitPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    explicitPrxHelper h = new explicitPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static explicitPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    explicitPrxHelper h = new explicitPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static explicitPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            explicitPrx r = b as explicitPrx;
            if(r == null)
            {
                explicitPrxHelper h = new explicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static explicitPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            explicitPrxHelper h = new explicitPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case",
            "::await::explicit",
            "::await::typeof"
        };

        public static string ice_staticId() => "::await::explicit";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, explicitPrx v)
        {
            ostr.writeProxy(v);
        }

        public static explicitPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                explicitPrxHelper result = new explicitPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class whileHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, @break> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, @break> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, @break> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, @break> r = new global::System.Collections.Generic.Dictionary<string, @break>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                @break v;
                v = new @break();
                v.ice_readMembers(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class optionalParamsPrxHelper : global::Ice.ObjectPrxHelperBase, optionalParamsPrx
    {
        public optionalParamsPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Ice.Optional<@break> @for(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_forAsync(@goto, @if, @internal, @namespace, @null, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Optional<@break> @continue(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_continueAsync(@goto, @if, @internal, @namespace, @null, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Optional<@break> @in(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_inAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                @null = result_.@null;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Optional<@break> @foreach(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_foreachAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                @null = result_.@null;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> forAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_forAsync(@goto, @if, @internal, @namespace, @null, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> _iceI_forAsync(global::Ice.Optional<var> iceP_goto, global::Ice.Optional<explicitPrx> iceP_if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal, global::Ice.Optional<string> iceP_namespace, global::Ice.Optional<explicitPrx> iceP_null, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_for_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<@break>>(progress, cancel);
            _iceI_for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context, synchronous, completed);
            return completed.Task;
        }

        private const string _for_name = "for";

        private void _iceI_for(global::Ice.Optional<var> iceP_goto, global::Ice.Optional<explicitPrx> iceP_if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal, global::Ice.Optional<string> iceP_namespace, global::Ice.Optional<explicitPrx> iceP_null, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Optional<@break>>(completed);
            outAsync.invoke(
                _for_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if(iceP_goto.HasValue)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if(iceP_if.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if.Value);
                        ostr.endSize(pos);
                    }
                    if(iceP_internal.HasValue && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal.Value);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                    if(iceP_null.HasValue && ostr.writeOptional(8, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_null.Value);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Optional<@break> ret;
                    if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal = new @break();
                        tmpVal.ice_readMembers(istr);
                        ret = new global::Ice.Optional<@break>(tmpVal);
                    }
                    else
                    {
                        ret = new global::Ice.Optional<@break>();
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> continueAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_continueAsync(@goto, @if, @internal, @namespace, @null, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> _iceI_continueAsync(global::Ice.Optional<var> iceP_goto, global::Ice.Optional<explicitPrx> iceP_if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal, global::Ice.Optional<string> iceP_namespace, global::Ice.Optional<explicitPrx> iceP_null, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_continue_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<@break>>(progress, cancel);
            _iceI_continue(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context, synchronous, completed);
            return completed.Task;
        }

        private const string _continue_name = "continue";

        private void _iceI_continue(global::Ice.Optional<var> iceP_goto, global::Ice.Optional<explicitPrx> iceP_if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal, global::Ice.Optional<string> iceP_namespace, global::Ice.Optional<explicitPrx> iceP_null, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Optional<@break>>(completed);
            outAsync.invoke(
                _continue_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if(iceP_goto.HasValue)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if(iceP_if.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if.Value);
                        ostr.endSize(pos);
                    }
                    if(iceP_internal.HasValue && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal.Value);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                    if(iceP_null.HasValue && ostr.writeOptional(8, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_null.Value);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Optional<@break> ret;
                    if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal = new @break();
                        tmpVal.ice_readMembers(istr);
                        ret = new global::Ice.Optional<@break>(tmpVal);
                    }
                    else
                    {
                        ret = new global::Ice.Optional<@break>();
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_inAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_InResult> _iceI_inAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<optionalParams_InResult>(progress, cancel);
            _iceI_in(context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_InResult>(completed);
            outAsync.invoke(
                _in_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    optionalParams_InResult ret = new optionalParams_InResult();
                    if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal = new @break();
                        tmpVal.ice_readMembers(istr);
                        ret.returnValue = new global::Ice.Optional<@break>(tmpVal);
                    }
                    else
                    {
                        ret.returnValue = new global::Ice.Optional<@break>();
                    }
                    if(istr.readOptional(2, global::Ice.OptionalFormat.Size))
                    {
                        var tmpVal;
                        tmpVal = (var)istr.readEnum(0);
                        ret.@goto = new global::Ice.Optional<var>(tmpVal);
                    }
                    else
                    {
                        ret.@goto = new global::Ice.Optional<var>();
                    }
                    if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = new global::Ice.Optional<explicitPrx>(tmpVal);
                    }
                    else
                    {
                        ret.@if = new global::Ice.Optional<explicitPrx>();
                    }
                    if(istr.readOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>(tmpVal);
                    }
                    else
                    {
                        ret.@internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
                    }
                    ret.@namespace = istr.readString(7);
                    if(istr.readOptional(8, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@null = new global::Ice.Optional<explicitPrx>(tmpVal);
                    }
                    else
                    {
                        ret.@null = new global::Ice.Optional<explicitPrx>();
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_foreachAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_ForeachResult> _iceI_foreachAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foreach_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<optionalParams_ForeachResult>(progress, cancel);
            _iceI_foreach(context, synchronous, completed);
            return completed.Task;
        }

        private const string _foreach_name = "foreach";

        private void _iceI_foreach(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_ForeachResult>(completed);
            outAsync.invoke(
                _foreach_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    optionalParams_ForeachResult ret = new optionalParams_ForeachResult();
                    if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal = new @break();
                        tmpVal.ice_readMembers(istr);
                        ret.returnValue = new global::Ice.Optional<@break>(tmpVal);
                    }
                    else
                    {
                        ret.returnValue = new global::Ice.Optional<@break>();
                    }
                    if(istr.readOptional(2, global::Ice.OptionalFormat.Size))
                    {
                        var tmpVal;
                        tmpVal = (var)istr.readEnum(0);
                        ret.@goto = new global::Ice.Optional<var>(tmpVal);
                    }
                    else
                    {
                        ret.@goto = new global::Ice.Optional<var>();
                    }
                    if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = new global::Ice.Optional<explicitPrx>(tmpVal);
                    }
                    else
                    {
                        ret.@if = new global::Ice.Optional<explicitPrx>();
                    }
                    if(istr.readOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>(tmpVal);
                    }
                    else
                    {
                        ret.@internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
                    }
                    ret.@namespace = istr.readString(7);
                    if(istr.readOptional(8, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@null = new global::Ice.Optional<explicitPrx>(tmpVal);
                    }
                    else
                    {
                        ret.@null = new global::Ice.Optional<explicitPrx>();
                    }
                    return ret;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static optionalParamsPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            optionalParamsPrx r = b as optionalParamsPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                optionalParamsPrxHelper h = new optionalParamsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static optionalParamsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            optionalParamsPrx r = b as optionalParamsPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                optionalParamsPrxHelper h = new optionalParamsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static optionalParamsPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    optionalParamsPrxHelper h = new optionalParamsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static optionalParamsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    optionalParamsPrxHelper h = new optionalParamsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static optionalParamsPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            optionalParamsPrx r = b as optionalParamsPrx;
            if(r == null)
            {
                optionalParamsPrxHelper h = new optionalParamsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static optionalParamsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            optionalParamsPrxHelper h = new optionalParamsPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::optionalParams"
        };

        public static string ice_staticId() => "::await::optionalParams";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, optionalParamsPrx v)
        {
            ostr.writeProxy(v);
        }

        public static optionalParamsPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                optionalParamsPrxHelper result = new optionalParamsPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class implicitPrxHelper : global::Ice.ObjectPrxHelperBase, implicitPrx
    {
        public implicitPrxHelper()
        {
        }

        #region Synchronous operations

        public var @in(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @operator, @override, @params, @private, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<var> inAsync(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @operator, @override, @params, @private, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<var> _iceI_inAsync(@break iceP_internal, delete iceP_is, explicitPrx iceP_lock, casePrx iceP_namespace, typeofPrx iceP_new, delete iceP_null, explicitPrx iceP_operator, int iceP_override, int iceP_params, int iceP_private, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<var>(progress, cancel);
            _iceI_in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(@break iceP_internal, delete iceP_is, explicitPrx iceP_lock, casePrx iceP_namespace, typeofPrx iceP_new, delete iceP_null, explicitPrx iceP_operator, int iceP_override, int iceP_params, int iceP_private, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<var>(completed);
            outAsync.invoke(
                _in_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_internal.ice_writeMembers(ostr);
                    ostr.writeValue(iceP_is);
                    explicitPrxHelper.write(ostr, iceP_lock);
                    casePrxHelper.write(ostr, iceP_namespace);
                    typeofPrxHelper.write(ostr, iceP_new);
                    ostr.writeValue(iceP_null);
                    explicitPrxHelper.write(ostr, iceP_operator);
                    ostr.writeInt(iceP_override);
                    ostr.writeInt(iceP_params);
                    ostr.writeInt(iceP_private);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@foreach)
                    {
                        throw;
                    }
                    catch(@fixed)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret;
                    ret = (var)istr.readEnum(0);
                    return ret;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static implicitPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            implicitPrx r = b as implicitPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                implicitPrxHelper h = new implicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static implicitPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            implicitPrx r = b as implicitPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                implicitPrxHelper h = new implicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static implicitPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    implicitPrxHelper h = new implicitPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static implicitPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    implicitPrxHelper h = new implicitPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static implicitPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            implicitPrx r = b as implicitPrx;
            if(r == null)
            {
                implicitPrxHelper h = new implicitPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static implicitPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            implicitPrxHelper h = new implicitPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::implicit"
        };

        public static string ice_staticId() => "::await::implicit";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, implicitPrx v)
        {
            ostr.writeProxy(v);
        }

        public static implicitPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                implicitPrxHelper result = new implicitPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class TestPrxHelper : global::Ice.ObjectPrxHelperBase, TestPrx
        {
            public TestPrxHelper()
            {
            }

            #region Synchronous operations

            public void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TestPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestPrx r = b as TestPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TestPrx r = b as TestPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TestPrxHelper h = new TestPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestPrxHelper h = new TestPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestPrx r = b as TestPrx;
                if(r == null)
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::await::System::Test"
            };

            public static string ice_staticId() => "::await::System::Test";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestPrx v)
            {
                ostr.writeProxy(v);
            }

            public static TestPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TestPrxHelper result = new TestPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestPrxHelper : global::Ice.ObjectPrxHelperBase, TestPrx
    {
        public TestPrxHelper()
        {
        }

        #region Synchronous operations

        public void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestPrxHelper h = new TestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestPrx r = b as TestPrx;
            if(r == null)
            {
                TestPrxHelper h = new TestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestPrxHelper h = new TestPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::System::Test"
        };

        public static string ice_staticId() => "::System::Test";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestPrxHelper result = new TestPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace @await
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class caseDisp_ : global::Ice.ObjectImpl, @case
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::await::case";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_catch(@case obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_checked;
            iceP_checked = istr.readInt();
            inS.endReadParams();
            return inS.setResultTask<int>(obj.catchAsync(iceP_checked, current),
                (ostr, iceP_continue) =>
                {
                    ostr.writeInt(iceP_continue);
                });
        }

        private static readonly string[] _all =
        {
            "catch",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_catch(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class typeofDisp_ : global::Ice.ObjectImpl, @typeof
    {
        #region Slice operations

        public abstract void @default(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::typeof"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::await::typeof";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_default(@typeof obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.@default(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "default",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_default(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class explicitDisp_ : global::Ice.ObjectImpl, @explicit
    {
        #region Inherited Slice operations

        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current = null);

        public abstract void @default(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::case",
            "::await::explicit",
            "::await::typeof"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::await::explicit";
        }

        #endregion

        private static readonly string[] _all =
        {
            "catch",
            "default",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return caseDisp_.iceD_catch(this, inS, current);
                }
                case 1:
                {
                    return typeofDisp_.iceD_default(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class optionalParamsDisp_ : global::Ice.ObjectImpl, optionalParams
    {
        #region Slice operations

        public abstract global::Ice.Optional<@break> @for(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<global::Ice.Optional<@break>> continueAsync(global::Ice.Optional<var> @goto, global::Ice.Optional<explicitPrx> @if, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, global::Ice.Optional<string> @namespace, global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        public abstract global::Ice.Optional<@break> @in(out global::Ice.Optional<var> @goto, out global::Ice.Optional<explicitPrx> @if, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> @internal, out global::Ice.Optional<string> @namespace, out global::Ice.Optional<explicitPrx> @null, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::optionalParams"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::await::optionalParams";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_for(optionalParams obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Optional<var> iceP_goto;
            global::Ice.Optional<explicitPrx> iceP_if;
            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal;
            global::Ice.Optional<string> iceP_namespace;
            global::Ice.Optional<explicitPrx> iceP_null;
            if(istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr.readEnum(0);
                iceP_goto = new global::Ice.Optional<var>(tmpVal);
            }
            else
            {
                iceP_goto = new global::Ice.Optional<var>();
            }
            if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                iceP_if = new global::Ice.Optional<explicitPrx>();
            }
            if(istr.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>(tmpVal);
            }
            else
            {
                iceP_internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
            }
            iceP_namespace = istr.readString(7);
            if(istr.readOptional(8, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_null = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                iceP_null = new global::Ice.Optional<explicitPrx>();
            }
            inS.endReadParams();
            var ret = obj.@for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current);
            var ostr = inS.startWriteParams();
            if(ret.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_continue(optionalParams obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Optional<var> iceP_goto;
            global::Ice.Optional<explicitPrx> iceP_if;
            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal;
            global::Ice.Optional<string> iceP_namespace;
            global::Ice.Optional<explicitPrx> iceP_null;
            if(istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                var tmpVal;
                tmpVal = (var)istr.readEnum(0);
                iceP_goto = new global::Ice.Optional<var>(tmpVal);
            }
            else
            {
                iceP_goto = new global::Ice.Optional<var>();
            }
            if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                iceP_if = new global::Ice.Optional<explicitPrx>();
            }
            if(istr.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>(tmpVal);
            }
            else
            {
                iceP_internal = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>>();
            }
            iceP_namespace = istr.readString(7);
            if(istr.readOptional(8, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_null = new global::Ice.Optional<explicitPrx>(tmpVal);
            }
            else
            {
                iceP_null = new global::Ice.Optional<explicitPrx>();
            }
            inS.endReadParams();
            return inS.setResultTask<global::Ice.Optional<@break>>(obj.continueAsync(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current),
                (ostr, ret) =>
                {
                    if(ret.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.Value.ice_writeMembers(ostr);
                    }
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_in(optionalParams obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            global::Ice.Optional<var> iceP_goto;
            global::Ice.Optional<explicitPrx> iceP_if;
            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, @break>> iceP_internal;
            global::Ice.Optional<string> iceP_namespace;
            global::Ice.Optional<explicitPrx> iceP_null;
            var ret = obj.@in(out iceP_goto, out iceP_if, out iceP_internal, out iceP_namespace, out iceP_null, current);
            var ostr = inS.startWriteParams();
            if(ret.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            if(iceP_goto.HasValue)
            {
                ostr.writeEnum(2, (int)iceP_goto.Value, 1);
            }
            if(iceP_if.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                explicitPrxHelper.write(ostr, iceP_if.Value);
                ostr.endSize(pos);
            }
            if(iceP_internal.HasValue && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                whileHelper.write(ostr, iceP_internal.Value);
                ostr.endSize(pos);
            }
            ostr.writeString(7, iceP_namespace);
            if(iceP_null.HasValue && ostr.writeOptional(8, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                explicitPrxHelper.write(ostr, iceP_null.Value);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foreach(optionalParams obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask<optionalParams_ForeachResult>(obj.foreachAsync(current),
                (ostr, ret) =>
                {
                    if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.returnValue.Value.ice_writeMembers(ostr);
                    }
                    if(ret.@goto.HasValue)
                    {
                        ostr.writeEnum(2, (int)ret.@goto.Value, 1);
                    }
                    if(ret.@if.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, ret.@if.Value);
                        ostr.endSize(pos);
                    }
                    if(ret.@internal.HasValue && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, ret.@internal.Value);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, ret.@namespace);
                    if(ret.@null.HasValue && ostr.writeOptional(8, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, ret.@null.Value);
                        ostr.endSize(pos);
                    }
                });
        }

        private static readonly string[] _all =
        {
            "continue",
            "for",
            "foreach",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "in"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_continue(this, inS, current);
                }
                case 1:
                {
                    return iceD_for(this, inS, current);
                }
                case 2:
                {
                    return iceD_foreach(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_in(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class implicitDisp_ : global::Ice.ObjectImpl, @implicit
    {
        #region Slice operations

        public abstract var @in(@break @internal, delete @is, explicitPrx @lock, casePrx @namespace, typeofPrx @new, delete @null, explicitPrx @operator, int @override, int @params, int @private, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::await::implicit"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::await::implicit";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_in(@implicit obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @break iceP_internal;
            iceP_internal = new @break();
            delete iceP_is;
            iceP_is = null;
            explicitPrx iceP_lock;
            casePrx iceP_namespace;
            typeofPrx iceP_new;
            delete iceP_null;
            iceP_null = null;
            explicitPrx iceP_operator;
            int iceP_override;
            int iceP_params;
            int iceP_private;
            iceP_internal.ice_readMembers(istr);
            istr.readValue((delete v) => {iceP_is = v; });
            iceP_lock = explicitPrxHelper.read(istr);
            iceP_namespace = casePrxHelper.read(istr);
            iceP_new = typeofPrxHelper.read(istr);
            istr.readValue((delete v) => {iceP_null = v; });
            iceP_operator = explicitPrxHelper.read(istr);
            iceP_override = istr.readInt();
            iceP_params = istr.readInt();
            iceP_private = istr.readInt();
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.@in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 0);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "in"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_in(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class TestDisp_ : global::Ice.ObjectImpl, Test
        {
            #region Slice operations

            public abstract void op(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::await::System::Test"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::await::System::Test";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_op(Test obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.op(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "op"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_op(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestDisp_ : global::Ice.ObjectImpl, Test
    {
        #region Slice operations

        public abstract void op(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::System::Test"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::System::Test";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(Test obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.op(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "op"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_op(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
