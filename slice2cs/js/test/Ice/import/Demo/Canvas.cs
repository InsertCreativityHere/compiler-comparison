//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Canvas.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Canvas.ice")]

#pragma warning disable 1591

namespace Demo
{
    namespace gx
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Demo::gx::Canvas")]
        public partial interface Canvas : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void paintSquare(Square square, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void paintCircle(Circle circle, global::Ice.Current current);
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Demo::gx::Session")]
        public partial interface Session : global::Ice.Object, global::Glacier2.Session
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void destroySession(global::Ice.Current current);
        }
    }
}

namespace Demo
{
    namespace gx
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface CanvasPrx : global::Ice.ObjectPrx
        {
            void paintSquare(Square square, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task paintSquareAsync(Square square, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void paintCircle(Circle circle, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task paintCircleAsync(Circle circle, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface SessionPrx : global::Glacier2.SessionPrx
        {
            void destroySession(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Demo
{
    namespace gx
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CanvasPrxHelper : global::Ice.ObjectPrxHelperBase, CanvasPrx
        {
            public CanvasPrxHelper()
            {
            }

            #region Synchronous operations

            public void paintSquare(Square square, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_paintSquareAsync(square, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void paintCircle(Circle circle, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_paintCircleAsync(circle, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task paintSquareAsync(Square square, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_paintSquareAsync(square, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_paintSquareAsync(Square iceP_square, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_paintSquare(iceP_square, context, synchronous, completed);
                return completed.Task;
            }

            private const string _paintSquare_name = "paintSquare";

            private void _iceI_paintSquare(Square iceP_square, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _paintSquare_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        iceP_square.ice_writeMembers(ostr);
                    });
            }

            public global::System.Threading.Tasks.Task paintCircleAsync(Circle circle, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_paintCircleAsync(circle, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_paintCircleAsync(Circle iceP_circle, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_paintCircle(iceP_circle, context, synchronous, completed);
                return completed.Task;
            }

            private const string _paintCircle_name = "paintCircle";

            private void _iceI_paintCircle(Circle iceP_circle, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _paintCircle_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        iceP_circle.ice_writeMembers(ostr);
                    });
            }

            #endregion

            #region Factory operations

            public static CanvasPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static CanvasPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    CanvasPrxHelper prx = new CanvasPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static CanvasPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        CanvasPrxHelper prx = new CanvasPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static CanvasPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new CanvasPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static CanvasPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new CanvasPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Demo::gx::Canvas",
                "::Ice::Object"
            };

            public static string ice_staticId() => "::Demo::gx::Canvas";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, CanvasPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static CanvasPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new CanvasPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SessionPrxHelper : global::Ice.ObjectPrxHelperBase, SessionPrx
        {
            public SessionPrxHelper()
            {
            }

            #region Synchronous operations

            public void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void destroySession(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_destroySessionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_destroyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroy(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroy_name = "destroy";

            private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroy_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_destroySessionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroySession(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroySession_name = "destroySession";

            private void _iceI_destroySession(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroySession_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static SessionPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static SessionPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    SessionPrxHelper prx = new SessionPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static SessionPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        SessionPrxHelper prx = new SessionPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static SessionPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new SessionPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static SessionPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new SessionPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Demo::gx::Session",
                "::Glacier2::Session",
                "::Ice::Object"
            };

            public static string ice_staticId() => "::Demo::gx::Session";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, SessionPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static SessionPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new SessionPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Demo
{
    namespace gx
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class CanvasDisp_ : global::Ice.ObjectImpl, Canvas
        {
            #region Slice operations

            public abstract void paintSquare(Square square, global::Ice.Current current);

            public abstract void paintCircle(Circle circle, global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Demo::gx::Canvas";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "paintSquare" => Canvas.iceD_paintSquareAsync(this, request),
                    "paintCircle" => Canvas.iceD_paintCircleAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class SessionDisp_ : global::Ice.ObjectImpl, Session
        {
            #region Slice operations

            public abstract void destroySession(global::Ice.Current current);

            #endregion

            #region Inherited Slice operations

            public abstract void destroy(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Demo::gx::Session";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "destroy" => global::Glacier2.Session.iceD_destroyAsync(this, request),
                    "destroySession" => Session.iceD_destroySessionAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }
    }
}

namespace Demo
{
    namespace gx
    {
        public partial interface Canvas
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_paintSquareAsync(
                Canvas obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Square iceP_square;
                iceP_square = new Square(istr);
                istr.endEncapsulation();
                obj.paintSquare(iceP_square, request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_paintCircleAsync(
                Canvas obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Circle iceP_circle;
                iceP_circle = new Circle(istr);
                istr.endEncapsulation();
                obj.paintCircle(iceP_circle, request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public partial interface Session
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_destroySessionAsync(
                Session obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.destroySession(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
