// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    public enum MyEnum
    {
        enum1,
        enum2,
        enum3
    }

    public sealed class MyEnumHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static MyEnum read(Ice.InputStream istr)
        {
            MyEnum v;
            v = (MyEnum)istr.readEnum(2);
            return v;
        }
    }

    public sealed partial record class LargeStruct
    {
        public bool bo;

        public byte by;

        public short sh;

        public int i;

        public long l;

        public float f;

        public double d;

        public string str = "";

        public MyEnum e;

        public MyInterfacePrx? p;

        partial void ice_initialize();

        public LargeStruct()
        {
            ice_initialize();
        }

        public LargeStruct(bool bo, byte by, short sh, int i, long l, float f, double d, string str, MyEnum e, MyInterfacePrx? p)
        {
            this.bo = bo;
            this.by = by;
            this.sh = sh;
            this.i = i;
            this.l = l;
            this.f = f;
            this.d = d;
            global::System.ArgumentNullException.ThrowIfNull(str);
            this.str = str;
            this.e = e;
            this.p = p;
            ice_initialize();
        }

        public LargeStruct(Ice.InputStream istr)
        {
            this.bo = istr.readBool();
            this.by = istr.readByte();
            this.sh = istr.readShort();
            this.i = istr.readInt();
            this.l = istr.readLong();
            this.f = istr.readFloat();
            this.d = istr.readDouble();
            this.str = istr.readString();
            this.e = (MyEnum)istr.readEnum(2);
            this.p = MyInterfacePrxHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeBool(this.bo);
            ostr.writeByte(this.by);
            ostr.writeShort(this.sh);
            ostr.writeInt(this.i);
            ostr.writeLong(this.l);
            ostr.writeFloat(this.f);
            ostr.writeDouble(this.d);
            ostr.writeString(this.str);
            ostr.writeEnum((int)this.e, 2);
            MyInterfacePrxHelper.write(ostr, this.p);
        }

        public static void ice_write(Ice.OutputStream ostr, LargeStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        public static LargeStruct ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::OptionalClass")]
    public partial class OptionalClass : Ice.Value
    {
        public bool bo;

        public byte by;

        public short? sh;

        public int? i;

        partial void ice_initialize();

        public OptionalClass(bool bo, byte by, short? sh, int? i)
        {
            this.bo = bo;
            this.by = by;
            this.sh = sh;
            this.i = i;
            ice_initialize();
        }

        public OptionalClass()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::OptionalClass";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeBool(bo);
            ostr_.writeByte(by);
            ostr_.writeShort(1, sh);
            ostr_.writeInt(2, i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            bo = istr_.readBool();
            by = istr_.readByte();
            sh = istr_.readShort(1);
            i = istr_.readInt(2);
            istr_.endSlice();
        }
    }

    public sealed class MyEnumSHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static MyEnum[] read(Ice.InputStream istr)
        {
            MyEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (MyEnum)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    public sealed class MyClassSHelper
    {
        public static void write(Ice.OutputStream ostr, MyClass?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static MyClass?[] read(Ice.InputStream istr)
        {
            MyClass?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyClass?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<MyClass>(v, ix));
                }
            }
            return v;
        }
    }

    public sealed class BoolSSHelper
    {
        public static void write(Ice.OutputStream ostr, bool[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.BoolSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.BoolSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class ByteSSHelper
    {
        public static void write(Ice.OutputStream ostr, byte[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.ByteSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.ByteSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class ShortSSHelper
    {
        public static void write(Ice.OutputStream ostr, short[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.ShortSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static short[][] read(Ice.InputStream istr)
        {
            short[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new short[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.ShortSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class IntSSHelper
    {
        public static void write(Ice.OutputStream ostr, int[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.IntSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static int[][] read(Ice.InputStream istr)
        {
            int[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new int[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.IntSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class LongSSHelper
    {
        public static void write(Ice.OutputStream ostr, long[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.LongSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static long[][] read(Ice.InputStream istr)
        {
            long[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new long[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.LongSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class FloatSSHelper
    {
        public static void write(Ice.OutputStream ostr, float[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.FloatSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static float[][] read(Ice.InputStream istr)
        {
            float[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new float[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.FloatSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class DoubleSSHelper
    {
        public static void write(Ice.OutputStream ostr, double[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.DoubleSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static double[][] read(Ice.InputStream istr)
        {
            double[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new double[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.DoubleSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class StringSSHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    global::Ice.StringSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = global::Ice.StringSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class MyEnumSSHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyEnumSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyEnum[][] read(Ice.InputStream istr)
        {
            MyEnum[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyEnum[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyEnumSHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class MyClassSSHelper
    {
        public static void write(Ice.OutputStream ostr, MyClass?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyClassSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyClass?[][] read(Ice.InputStream istr)
        {
            MyClass?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyClass?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyClassSHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class ByteBoolDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<byte, bool> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<byte, bool> e in v)
                {
                    ostr.writeByte(e.Key);
                    ostr.writeBool(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<byte, bool> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<byte, bool> r = new global::System.Collections.Generic.Dictionary<byte, bool>();
            for(int i = 0; i < sz; ++i)
            {
                byte k;
                k = istr.readByte();
                bool v;
                v = istr.readBool();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class ShortIntDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<short, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<short, int> e in v)
                {
                    ostr.writeShort(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<short, int> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<short, int> r = new global::System.Collections.Generic.Dictionary<short, int>();
            for(int i = 0; i < sz; ++i)
            {
                short k;
                k = istr.readShort();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class LongFloatDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<long, float> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<long, float> e in v)
                {
                    ostr.writeLong(e.Key);
                    ostr.writeFloat(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, float> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<long, float> r = new global::System.Collections.Generic.Dictionary<long, float>();
            for(int i = 0; i < sz; ++i)
            {
                long k;
                k = istr.readLong();
                float v;
                v = istr.readFloat();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class StringStringDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class StringMyClassDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, MyClass?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, MyClass?> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, MyClass?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, MyClass?> r = new global::System.Collections.Generic.Dictionary<string, MyClass?>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                istr.readValue((MyClass? v) => { r[k] = v; });
            }
            return r;
        }
    }

    [Ice.SliceTypeId("::Test::MyClass")]
    public partial class MyClass : Ice.Value
    {
        public MyClass? c;

        public Ice.Value? o;

        public LargeStruct s;

        public bool[] seq1;

        public byte[] seq2;

        public short[] seq3;

        public int[] seq4;

        public long[] seq5;

        public float[] seq6;

        public double[] seq7;

        public string[] seq8;

        public MyEnum[] seq9;

        public MyClass?[] seq10;

        public global::System.Collections.Generic.Dictionary<string, MyClass?> d;

        partial void ice_initialize();

        public MyClass(MyClass? c, Ice.Value? o, LargeStruct s, bool[] seq1, byte[] seq2, short[] seq3, int[] seq4, long[] seq5, float[] seq6, double[] seq7, string[] seq8, MyEnum[] seq9, MyClass?[] seq10, global::System.Collections.Generic.Dictionary<string, MyClass?> d)
        {
            this.c = c;
            this.o = o;
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            global::System.ArgumentNullException.ThrowIfNull(seq1);
            this.seq1 = seq1;
            global::System.ArgumentNullException.ThrowIfNull(seq2);
            this.seq2 = seq2;
            global::System.ArgumentNullException.ThrowIfNull(seq3);
            this.seq3 = seq3;
            global::System.ArgumentNullException.ThrowIfNull(seq4);
            this.seq4 = seq4;
            global::System.ArgumentNullException.ThrowIfNull(seq5);
            this.seq5 = seq5;
            global::System.ArgumentNullException.ThrowIfNull(seq6);
            this.seq6 = seq6;
            global::System.ArgumentNullException.ThrowIfNull(seq7);
            this.seq7 = seq7;
            global::System.ArgumentNullException.ThrowIfNull(seq8);
            this.seq8 = seq8;
            global::System.ArgumentNullException.ThrowIfNull(seq9);
            this.seq9 = seq9;
            global::System.ArgumentNullException.ThrowIfNull(seq10);
            this.seq10 = seq10;
            global::System.ArgumentNullException.ThrowIfNull(d);
            this.d = d;
            ice_initialize();
        }

        public MyClass(LargeStruct s, bool[] seq1, byte[] seq2, short[] seq3, int[] seq4, long[] seq5, float[] seq6, double[] seq7, string[] seq8, MyEnum[] seq9, MyClass?[] seq10, global::System.Collections.Generic.Dictionary<string, MyClass?> d)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            global::System.ArgumentNullException.ThrowIfNull(seq1);
            this.seq1 = seq1;
            global::System.ArgumentNullException.ThrowIfNull(seq2);
            this.seq2 = seq2;
            global::System.ArgumentNullException.ThrowIfNull(seq3);
            this.seq3 = seq3;
            global::System.ArgumentNullException.ThrowIfNull(seq4);
            this.seq4 = seq4;
            global::System.ArgumentNullException.ThrowIfNull(seq5);
            this.seq5 = seq5;
            global::System.ArgumentNullException.ThrowIfNull(seq6);
            this.seq6 = seq6;
            global::System.ArgumentNullException.ThrowIfNull(seq7);
            this.seq7 = seq7;
            global::System.ArgumentNullException.ThrowIfNull(seq8);
            this.seq8 = seq8;
            global::System.ArgumentNullException.ThrowIfNull(seq9);
            this.seq9 = seq9;
            global::System.ArgumentNullException.ThrowIfNull(seq10);
            this.seq10 = seq10;
            global::System.ArgumentNullException.ThrowIfNull(d);
            this.d = d;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public MyClass()
        {
            this.s = null!;
            this.seq1 = null!;
            this.seq2 = null!;
            this.seq3 = null!;
            this.seq4 = null!;
            this.seq5 = null!;
            this.seq6 = null!;
            this.seq7 = null!;
            this.seq8 = null!;
            this.seq9 = null!;
            this.seq10 = null!;
            this.d = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::MyClass";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(c);
            ostr_.writeValue(o);
            LargeStruct.ice_write(ostr_, s);
            global::Ice.BoolSeqHelper.write(ostr_, seq1);
            global::Ice.ByteSeqHelper.write(ostr_, seq2);
            global::Ice.ShortSeqHelper.write(ostr_, seq3);
            global::Ice.IntSeqHelper.write(ostr_, seq4);
            global::Ice.LongSeqHelper.write(ostr_, seq5);
            global::Ice.FloatSeqHelper.write(ostr_, seq6);
            global::Ice.DoubleSeqHelper.write(ostr_, seq7);
            global::Ice.StringSeqHelper.write(ostr_, seq8);
            MyEnumSHelper.write(ostr_, seq9);
            MyClassSHelper.write(ostr_, seq10);
            StringMyClassDHelper.write(ostr_, d);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((MyClass? v) => { this.c = v; });
            istr_.readValue((Ice.Value? v) => { this.o = v; });
            s = new LargeStruct(istr_);
            seq1 = global::Ice.BoolSeqHelper.read(istr_);
            seq2 = global::Ice.ByteSeqHelper.read(istr_);
            seq3 = global::Ice.ShortSeqHelper.read(istr_);
            seq4 = global::Ice.IntSeqHelper.read(istr_);
            seq5 = global::Ice.LongSeqHelper.read(istr_);
            seq6 = global::Ice.FloatSeqHelper.read(istr_);
            seq7 = global::Ice.DoubleSeqHelper.read(istr_);
            seq8 = global::Ice.StringSeqHelper.read(istr_);
            seq9 = MyEnumSHelper.read(istr_);
            seq10 = MyClassSHelper.read(istr_);
            d = StringMyClassDHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::MyException")]
    public partial class MyException : Ice.UserException
    {
        public MyClass? c;

        public MyException(MyClass? c)
        {
            this.c = c;
        }

        public MyException()
        {
        }

        public override string ice_id() => "::Test::MyException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::MyException", -1, true);
            ostr_.writeValue(c);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((MyClass? v) => { this.c = v; });
            istr_.endSlice();
        }

        public override bool iceUsesClasses()
        {
            return true;
        }
    }

    public interface MyInterfacePrx : Ice.ObjectPrx
    {
    }

    public sealed class MyInterfacePrxHelper : Ice.ObjectPrxHelperBase, MyInterfacePrx
    {
        public static MyInterfacePrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new MyInterfacePrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyInterfacePrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyInterfacePrxHelper(b) : null;

        public static MyInterfacePrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyInterfacePrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new MyInterfacePrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyInterfacePrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyInterface"
        };

        public static string ice_staticId() => "::Test::MyInterface";

        public static void write(Ice.OutputStream ostr, MyInterfacePrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyInterfacePrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new MyInterfacePrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyInterfacePrxHelper(reference);

        private MyInterfacePrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private MyInterfacePrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    [Ice.SliceTypeId("::Test::MyInterface")]
    public partial interface MyInterface : Ice.Object
    {
    }

    public abstract class MyInterfaceDisp_ : Ice.ObjectImpl, MyInterface
    {
        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::MyInterface";
    }
}
