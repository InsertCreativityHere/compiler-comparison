//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace classdef
{
    namespace @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum bitand
        {
            @break,
            @case,
            @catch,
            classdef,
            @continue,
            @else,
            elseif,
            end,
            enumeration,
            events,
            @for,
            function,
            global,
            @if,
            methods,
            otherwise,
            parfor,
            persistent,
            properties,
            @return,
            spmd,
            @switch,
            @try,
            @while,
            abs,
            and,
            @char,
            eq,
            length,
            size,
            xor,
            LAST
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class bitandHelper
        {
            public static void write(global::Ice.OutputStream ostr, bitand v)
            {
                ostr.writeEnum((int)v, 31);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bitand read(global::Ice.InputStream istr)
            {
                bitand v;
                v = (bitand)istr.readEnum(31);
                return v;
            }
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class bitor : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitand @case;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int @continue;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int eq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int ne;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitor()
            {
                this.@case = classdef.@break.bitand.@catch;
                this.@continue = 1;
                this.eq = 2;
                this.ne = 3;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitor(bitand @case, int @continue, int eq, int ne)
            {
                this.@case = @case;
                this.@continue = @continue;
                this.eq = eq;
                this.ne = ne;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::classdef::break::bitor");
                global::IceInternal.HashUtil.hashAdd(ref h_, @case);
                global::IceInternal.HashUtil.hashAdd(ref h_, @continue);
                global::IceInternal.HashUtil.hashAdd(ref h_, eq);
                global::IceInternal.HashUtil.hashAdd(ref h_, ne);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                bitor o = (bitor)other;
                if(!this.@case.Equals(o.@case))
                {
                    return false;
                }
                if(!this.@continue.Equals(o.@continue))
                {
                    return false;
                }
                if(!this.eq.Equals(o.eq))
                {
                    return false;
                }
                if(!this.ne.Equals(o.ne))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(bitor lhs, bitor rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(bitor lhs, bitor rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeEnum((int)this.@case, 31);
                ostr.writeInt(this.@continue);
                ostr.writeInt(this.eq);
                ostr.writeInt(this.ne);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.@case = (bitand)istr.readEnum(31);
                this.@continue = istr.readInt();
                this.eq = istr.readInt();
                this.ne = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, bitor v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bitor ice_read(global::Ice.InputStream istr)
            {
                var v = new bitor();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly bitor _nullMarshalValue = new bitor();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class logical : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitand @else;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitor @for;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool int64;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public logical()
            {
                this.@else = classdef.@break.bitand.enumeration;
                this.@for = new bitor();
                this.int64 = true;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public logical(bitand @else, bitor @for, bool int64)
            {
                this.@else = @else;
                this.@for = @for;
                this.int64 = int64;
                ice_initialize();
            }

            #endregion

            private const string _id = "::classdef::break::logical";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeEnum((int)@else, 31);
                bitor.ice_write(ostr_, @for);
                ostr_.writeBool(int64);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                @else = (bitand)istr_.readEnum(31);
                @for = bitor.ice_read(istr_);
                int64 = istr_.readBool();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class xor : logical
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int @return;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public xor() : base()
            {
                this.@return = 1;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public xor(bitand @else, bitor @for, bool int64, int @return) : base(@else, @for, int64)
            {
                this.@return = @return;
                ice_initialize();
            }

            #endregion

            private const string _id = "::classdef::break::xor";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(@return);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                @return = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class @try : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int @while;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int delete;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public @try()
            {
                this.@while = 1;
                this.delete = 2;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public @try(int @while, int delete)
            {
                this.@while = @while;
                this.delete = delete;
                ice_initialize();
            }

            #endregion

            private const string _id = "::classdef::break::try";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(@while);
                ostr_.writeInt(delete);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                @while = istr_.readInt();
                delete = istr_.readInt();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class properties : @try
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int @if;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public xor @catch;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bitor[] spmd;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::System.Collections.Generic.Dictionary<int, bitor> otherwise;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public properties() : base()
            {
                this.@if = 2;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public properties(int @while, int delete, int @if, xor @catch, bitor[] spmd, global::System.Collections.Generic.Dictionary<int, bitor> otherwise) : base(@while, delete)
            {
                this.@if = @if;
                this.@catch = @catch;
                this.spmd = spmd;
                this.otherwise = otherwise;
                ice_initialize();
            }

            #endregion

            private const string _id = "::classdef::break::properties";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(@if);
                ostr_.writeValue(@catch);
                parforHelper.write(ostr_, spmd);
                switchHelper.write(ostr_, otherwise);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                @if = istr_.readInt();
                istr_.readValue((xor v) => { this.@catch = v; });
                spmd = parforHelper.read(istr_);
                otherwise = switchHelper.read(istr_);
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class persistent : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string identifier;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string ice_message_;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string stack;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string cause;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string type;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public logical end;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.identifier = "1";
                this.ice_message_ = "2";
                this.stack = "3";
                this.cause = "4";
                this.type = "5";
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public persistent()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public persistent(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(string identifier, string message, string stack, string cause, string type, logical end)
            {
                this.identifier = identifier;
                this.ice_message_ = message;
                this.stack = stack;
                this.cause = cause;
                this.type = type;
                this.end = end;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public persistent(string identifier, string message, string stack, string cause, string type, logical end)
            {
                _initDM(identifier, message, stack, cause, type, end);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public persistent(string identifier, string message, string stack, string cause, string type, logical end, global::System.Exception ex) : base(ex)
            {
                _initDM(identifier, message, stack, cause, type, end);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::classdef::break::persistent";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::classdef::break::persistent", -1, true);
                ostr_.writeString(identifier);
                ostr_.writeString(ice_message_);
                ostr_.writeString(stack);
                ostr_.writeString(cause);
                ostr_.writeString(type);
                ostr_.writeValue(end);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                identifier = istr_.readString();
                ice_message_ = istr_.readString();
                stack = istr_.readString();
                cause = istr_.readString();
                type = istr_.readString();
                istr_.readValue((logical v) => { this.end = v; });
                istr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool iceUsesClasses()
            {
                return true;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class global : persistent
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int enumeration;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.enumeration = 1;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(int enumeration)
            {
                this.enumeration = enumeration;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global(string identifier, string message, string stack, string cause, string type, logical end, int enumeration) : base(identifier, message, stack, cause, type, end)
            {
                _initDM(enumeration);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global(string identifier, string message, string stack, string cause, string type, logical end, int enumeration, global::System.Exception ex) : base(identifier, message, stack, cause, type, end, ex)
            {
                _initDM(enumeration);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::classdef::break::global";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::classdef::break::global", -1, false);
                ostr_.writeInt(enumeration);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                enumeration = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface elseif : global::Ice.Object, elseifOperations_
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class methods
        {
            public const int value = 1;
        }
    }
}

namespace classdef
{
    namespace @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_elseif_events();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_elseif_function();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_elseif_delete();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_elseif_checkedCast();
    }
}

namespace classdef
{
    namespace @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface elseifPrx : global::Ice.ObjectPrx
        {
            void events(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task eventsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_elseif_events> begin_events(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_events(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_events(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_events(global::Ice.AsyncResult asyncResult);

            void function(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task functionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_elseif_function> begin_function(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_function(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_function(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_function(global::Ice.AsyncResult asyncResult);

            void delete(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task deleteAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_elseif_delete> begin_delete(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_delete(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_delete(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_delete(global::Ice.AsyncResult asyncResult);

            void ice_checkedCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task checkedCastAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_elseif_checkedCast> begin_checkedCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_checkedCast(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_checkedCast(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_checkedCast(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace classdef
{
    namespace @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface elseifOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void events(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void function(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void delete(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void ice_checkedCast(global::Ice.Current current = null);
        }
    }
}

namespace classdef
{
    namespace @break
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class parforHelper
        {
            public static void write(global::Ice.OutputStream ostr, bitor[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new bitor() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static bitor[] read(global::Ice.InputStream istr)
            {
                bitor[] v;
                {
                    int szx = istr.readAndCheckSeqSize(13);
                    v = new bitor[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new bitor();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class switchHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, bitor> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, bitor> e in v)
                    {
                        ostr.writeInt(e.Key);
                        bitor.ice_write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, bitor> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, bitor> r = new global::System.Collections.Generic.Dictionary<int, bitor>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    bitor v;
                    v = null;
                    v = bitor.ice_read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class elseifPrxHelper : global::Ice.ObjectPrxHelperBase, elseifPrx
        {
            public elseifPrxHelper()
            {
            }

            #region Synchronous operations

            public void events(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_eventsAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void function(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_functionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void delete(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_deleteAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void ice_checkedCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_checkedCastAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task eventsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_eventsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_eventsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_events(context, synchronous, completed);
                return completed.Task;
            }

            private const string _events_name = "events";

            private void _iceI_events(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _events_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task functionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_functionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_functionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_function(context, synchronous, completed);
                return completed.Task;
            }

            private const string _function_name = "function";

            private void _iceI_function(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _function_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task deleteAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_deleteAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_deleteAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_delete(context, synchronous, completed);
                return completed.Task;
            }

            private const string _delete_name = "delete";

            private void _iceI_delete(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _delete_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task checkedCastAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_checkedCastAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_checkedCastAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_checkedCast(context, synchronous, completed);
                return completed.Task;
            }

            private const string _checkedCast_name = "checkedCast";

            private void _iceI_checkedCast(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _checkedCast_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_elseif_events> begin_events(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_events(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_events(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_events(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_events(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_events(context, callback, cookie, false);
            }

            public void end_events(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _events_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_elseif_events> begin_events(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_elseif_events, object>(
                    (Callback_elseif_events cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _events_name, cookie, completedCallback);
                _iceI_events(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_elseif_function> begin_function(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_function(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_function(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_function(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_function(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_function(context, callback, cookie, false);
            }

            public void end_function(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _function_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_elseif_function> begin_function(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_elseif_function, object>(
                    (Callback_elseif_function cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _function_name, cookie, completedCallback);
                _iceI_function(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_elseif_delete> begin_delete(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_delete(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_delete(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_delete(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_delete(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_delete(context, callback, cookie, false);
            }

            public void end_delete(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _delete_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_elseif_delete> begin_delete(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_elseif_delete, object>(
                    (Callback_elseif_delete cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _delete_name, cookie, completedCallback);
                _iceI_delete(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_elseif_checkedCast> begin_checkedCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_checkedCast(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_checkedCast(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_checkedCast(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_checkedCast(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_checkedCast(context, callback, cookie, false);
            }

            public void end_checkedCast(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _checkedCast_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_elseif_checkedCast> begin_checkedCast(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_elseif_checkedCast, object>(
                    (Callback_elseif_checkedCast cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _checkedCast_name, cookie, completedCallback);
                _iceI_checkedCast(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static elseifPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                elseifPrx r = b as elseifPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    elseifPrxHelper h = new elseifPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static elseifPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                elseifPrx r = b as elseifPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    elseifPrxHelper h = new elseifPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static elseifPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        elseifPrxHelper h = new elseifPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static elseifPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        elseifPrxHelper h = new elseifPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static elseifPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                elseifPrx r = b as elseifPrx;
                if(r == null)
                {
                    elseifPrxHelper h = new elseifPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static elseifPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                elseifPrxHelper h = new elseifPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::classdef::break::elseif"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, elseifPrx v)
            {
                ostr.writeProxy(v);
            }

            public static elseifPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    elseifPrxHelper result = new elseifPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace classdef
{
    namespace @break
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class elseifDisp_ : global::Ice.ObjectImpl, elseif
        {
            #region Slice operations

            public abstract void events(global::Ice.Current current = null);

            public abstract void function(global::Ice.Current current = null);

            public abstract void delete(global::Ice.Current current = null);

            public abstract void ice_checkedCast(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::classdef::break::elseif"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_events(elseif obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.events(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_function(elseif obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.function(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_delete(elseif obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.delete(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_checkedCast(elseif obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.ice_checkedCast(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "checkedCast",
                "delete",
                "events",
                "function",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_checkedCast(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_delete(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_events(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_function(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
