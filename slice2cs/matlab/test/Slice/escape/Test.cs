// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace classdef
{
    namespace break
    {
        public enum bitand
        {
            break,
            case,
            catch,
            classdef,
            continue,
            else,
            elseif,
            end,
            enumeration,
            events,
            for,
            function,
            global,
            if,
            methods,
            otherwise,
            parfor,
            persistent,
            properties,
            return,
            spmd,
            switch,
            try,
            while,
            abs,
            and,
            char,
            eq,
            length,
            size,
            xor,
            LAST
        }

        public sealed class bitandHelper
        {
            public static void write(Ice.OutputStream ostr, bitand v)
            {
                ostr.writeEnum((int)v, 31);
            }

            public static bitand read(Ice.InputStream istr)
            {
                bitand v;
                v = (bitand)istr.readEnum(31);
                return v;
            }
        }

        public sealed partial record class bitor
        {
            public bitand case = classdef.break.bitand.catch;

            public int continue = 1;

            public int eq = 2;

            public int ne = 3;

            partial void ice_initialize();

            public bitor()
            {
                ice_initialize();
            }

            public bitor(bitand case, int continue, int eq, int ne)
            {
                this.case = case;
                this.continue = continue;
                this.eq = eq;
                this.ne = ne;
                ice_initialize();
            }

            public bitor(Ice.InputStream istr)
            {
                this.case = (bitand)istr.readEnum(31);
                this.continue = istr.readInt();
                this.eq = istr.readInt();
                this.ne = istr.readInt();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeEnum((int)this.case, 31);
                ostr.writeInt(this.continue);
                ostr.writeInt(this.eq);
                ostr.writeInt(this.ne);
            }

            public static void ice_write(Ice.OutputStream ostr, bitor v)
            {
                v.ice_writeMembers(ostr);
            }

            public static bitor ice_read(Ice.InputStream istr) => new(istr);
        }

        [Ice.SliceTypeId("::classdef::break::logical")]
        public partial class logical : Ice.Value
        {
            public bitand else = classdef.break.bitand.enumeration;

            public bitor for;

            public bool int64 = true;

            partial void ice_initialize();

            public logical(bitand else, bitor for, bool int64)
            {
                this.else = else;
                global::System.ArgumentNullException.ThrowIfNull(for);
                this.for = for;
                this.int64 = int64;
                ice_initialize();
            }

            public logical(bitor for)
            {
                global::System.ArgumentNullException.ThrowIfNull(for);
                this.for = for;
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public logical()
            {
                this.for = null!;
                ice_initialize();
            }

            public static new string ice_staticId() => "::classdef::break::logical";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeEnum((int)else, 31);
                bitor.ice_write(ostr_, for);
                ostr_.writeBool(int64);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                else = (bitand)istr_.readEnum(31);
                for = new bitor(istr_);
                int64 = istr_.readBool();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::classdef::break::xor")]
        public partial class xor : logical
        {
            public int return = 1;

            partial void ice_initialize();

            public xor(bitand else, bitor for, bool int64, int return) : base(else, for, int64)
            {
                this.return = return;
                ice_initialize();
            }

            public xor(bitor for) : base(for)
            {
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public xor()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::classdef::break::xor";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(return);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                return = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        public sealed class parforHelper
        {
            public static void write(Ice.OutputStream ostr, bitor[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static bitor[] read(Ice.InputStream istr)
            {
                bitor[] v;
                {
                    int szx = istr.readAndCheckSeqSize(13);
                    v = new bitor[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new bitor(istr);
                    }
                }
                return v;
            }
        }

        public sealed class switchHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, bitor> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, bitor> e in v)
                    {
                        ostr.writeInt(e.Key);
                        bitor.ice_write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, bitor> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, bitor> r = new global::System.Collections.Generic.Dictionary<int, bitor>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    bitor v;
                    v = new bitor(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [Ice.SliceTypeId("::classdef::break::try")]
        public partial class try : Ice.Value
        {
            public int while = 1;

            public int delete = 2;

            partial void ice_initialize();

            public try(int while, int delete)
            {
                this.while = while;
                this.delete = delete;
                ice_initialize();
            }

            public try()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::classdef::break::try";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(while);
                ostr_.writeInt(delete);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                while = istr_.readInt();
                delete = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::classdef::break::properties")]
        public partial class properties : try
        {
            public int if = 2;

            public xor? catch;

            public bitor[] spmd;

            public global::System.Collections.Generic.Dictionary<int, bitor> otherwise;

            partial void ice_initialize();

            public properties(int while, int delete, int if, xor? catch, bitor[] spmd, global::System.Collections.Generic.Dictionary<int, bitor> otherwise) : base(while, delete)
            {
                this.if = if;
                this.catch = catch;
                global::System.ArgumentNullException.ThrowIfNull(spmd);
                this.spmd = spmd;
                global::System.ArgumentNullException.ThrowIfNull(otherwise);
                this.otherwise = otherwise;
                ice_initialize();
            }

            public properties(bitor[] spmd, global::System.Collections.Generic.Dictionary<int, bitor> otherwise)
            {
                global::System.ArgumentNullException.ThrowIfNull(spmd);
                this.spmd = spmd;
                global::System.ArgumentNullException.ThrowIfNull(otherwise);
                this.otherwise = otherwise;
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public properties()
            {
                this.spmd = null!;
                this.otherwise = null!;
                ice_initialize();
            }

            public static new string ice_staticId() => "::classdef::break::properties";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(if);
                ostr_.writeValue(catch);
                parforHelper.write(ostr_, spmd);
                switchHelper.write(ostr_, otherwise);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                if = istr_.readInt();
                istr_.readValue((xor? v) => { this.catch = v; });
                spmd = parforHelper.read(istr_);
                otherwise = switchHelper.read(istr_);
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::classdef::break::persistent")]
        public partial class persistent : Ice.UserException
        {
            public string identifier = "1";

            public string message = "2";

            public string stack = "3";

            public string cause = "4";

            public string type = "5";

            public logical? end;

            public persistent(string identifier, string message, string stack, string cause, string type, logical? end)
            {
                global::System.ArgumentNullException.ThrowIfNull(identifier);
                this.identifier = identifier;
                global::System.ArgumentNullException.ThrowIfNull(message);
                this.message = message;
                global::System.ArgumentNullException.ThrowIfNull(stack);
                this.stack = stack;
                global::System.ArgumentNullException.ThrowIfNull(cause);
                this.cause = cause;
                global::System.ArgumentNullException.ThrowIfNull(type);
                this.type = type;
                this.end = end;
            }

            public persistent()
            {
            }

            public override string ice_id() => "::classdef::break::persistent";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::classdef::break::persistent", -1, true);
                ostr_.writeString(identifier);
                ostr_.writeString(message);
                ostr_.writeString(stack);
                ostr_.writeString(cause);
                ostr_.writeString(type);
                ostr_.writeValue(end);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                identifier = istr_.readString();
                message = istr_.readString();
                stack = istr_.readString();
                cause = istr_.readString();
                type = istr_.readString();
                istr_.readValue((logical? v) => { this.end = v; });
                istr_.endSlice();
            }

            public override bool iceUsesClasses()
            {
                return true;
            }
        }

        [Ice.SliceTypeId("::classdef::break::global")]
        public partial class global : persistent
        {
            public int enumeration = 1;

            public global(string identifier, string message, string stack, string cause, string type, logical? end, int enumeration) : base(identifier, message, stack, cause, type, end)
            {
                this.enumeration = enumeration;
            }

            public global()
            {
            }

            public override string ice_id() => "::classdef::break::global";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::classdef::break::global", -1, false);
                ostr_.writeInt(enumeration);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                enumeration = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        public interface elseifPrx : Ice.ObjectPrx
        {
            void events(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task eventsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void function(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task functionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void delete(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task deleteAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void checkedCast(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task checkedCastAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class elseifPrxHelper : Ice.ObjectPrxHelperBase, elseifPrx
        {
            public void events(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_eventsAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void function(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_functionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void delete(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_deleteAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void checkedCast(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_checkedCastAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task eventsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_eventsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_eventsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_events(context, synchronous, completed);
                return completed.Task;
            }

            private const string _events_name = "events";

            private void _iceI_events(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _events_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task functionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_functionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_functionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_function(context, synchronous, completed);
                return completed.Task;
            }

            private const string _function_name = "function";

            private void _iceI_function(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _function_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task deleteAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_deleteAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_deleteAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_delete(context, synchronous, completed);
                return completed.Task;
            }

            private const string _delete_name = "delete";

            private void _iceI_delete(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _delete_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task checkedCastAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_checkedCastAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_checkedCastAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_checkedCast(context, synchronous, completed);
                return completed.Task;
            }

            private const string _checkedCast_name = "checkedCast";

            private void _iceI_checkedCast(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _checkedCast_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static elseifPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new elseifPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static elseifPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new elseifPrxHelper(b) : null;

            public static elseifPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static elseifPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new elseifPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static elseifPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::classdef::break::elseif"
            };

            public static string ice_staticId() => "::classdef::break::elseif";

            public static void write(Ice.OutputStream ostr, elseifPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static elseifPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new elseifPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new elseifPrxHelper(reference);

            private elseifPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private elseifPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public abstract class methods
        {
            public const int value = 1;
        }
    }
}

namespace classdef
{
    namespace break
    {
        [Ice.SliceTypeId("::classdef::break::elseif")]
        public partial interface elseif : Ice.Object
        {
            void events(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_eventsAsync(
                elseif obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.events(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void function(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_functionAsync(
                elseif obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.function(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void delete(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_deleteAsync(
                elseif obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.delete(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void checkedCast(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_checkedCastAsync(
                elseif obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.checkedCast(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class elseifDisp_ : Ice.ObjectImpl, elseif
        {
            public abstract void events(Ice.Current current);

            public abstract void function(Ice.Current current);

            public abstract void delete(Ice.Current current);

            public abstract void checkedCast(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::classdef::break::elseif";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "events" => elseif.iceD_eventsAsync(this, request),
                    "function" => elseif.iceD_functionAsync(this, request),
                    "delete" => elseif.iceD_deleteAsync(this, request),
                    "checkedCast" => elseif.iceD_checkedCastAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}
