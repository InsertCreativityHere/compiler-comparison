//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("ClientPrivate.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::Base")]
    public partial class @Base : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string b = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Base(string b)
        {
            global::System.ArgumentNullException.ThrowIfNull(b);
            this.b = b;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Base()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::Base";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::Base", -1, true);
            ostr_.writeString(b);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            b = istr_.readString();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::KnownDerived")]
    public partial class KnownDerived : @Base
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string kd = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownDerived(string b, string kd) : base(b)
        {
            global::System.ArgumentNullException.ThrowIfNull(kd);
            this.kd = kd;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownDerived()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::KnownDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::KnownDerived", -1, false);
            ostr_.writeString(kd);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            kd = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::KnownIntermediate")]
    public partial class KnownIntermediate : @Base
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string ki = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownIntermediate(string b, string ki) : base(b)
        {
            global::System.ArgumentNullException.ThrowIfNull(ki);
            this.ki = ki;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownIntermediate()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::KnownIntermediate";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::KnownIntermediate", -1, false);
            ostr_.writeString(ki);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            ki = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::KnownMostDerived")]
    public partial class KnownMostDerived : KnownIntermediate
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string kmd = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownMostDerived(string b, string ki, string kmd) : base(b, ki)
        {
            global::System.ArgumentNullException.ThrowIfNull(kmd);
            this.kmd = kmd;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownMostDerived()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::KnownMostDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::KnownMostDerived", -1, false);
            ostr_.writeString(kmd);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            kmd = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::KnownPreserved")]
    public partial class KnownPreserved : @Base
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string kp = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownPreserved(string b, string kp) : base(b)
        {
            global::System.ArgumentNullException.ThrowIfNull(kp);
            this.kp = kp;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownPreserved()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::KnownPreserved";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::KnownPreserved", -1, false);
            ostr_.writeString(kp);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            kp = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::KnownPreservedDerived")]
    public partial class KnownPreservedDerived : KnownPreserved
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string kpd = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownPreservedDerived(string b, string kp, string kpd) : base(b, kp)
        {
            global::System.ArgumentNullException.ThrowIfNull(kpd);
            this.kpd = kpd;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public KnownPreservedDerived()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::KnownPreservedDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::KnownPreservedDerived", -1, false);
            ostr_.writeString(kpd);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            kpd = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::BaseClass")]
    public partial class BaseClass : Ice.Value
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string bc = "";

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseClass(string bc)
        {
            global::System.ArgumentNullException.ThrowIfNull(bc);
            this.bc = bc;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseClass()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId() => "::Test::BaseClass";
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => ice_staticId();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(bc);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            bc = istr_.readString();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::Relay")]
    public partial interface Relay : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownPreservedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownPreservedAsKnownPreserved(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownPreservedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownPreservedAsKnownPreserved(Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void baseAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownDerivedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownDerivedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownDerivedAsKnownDerived(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownIntermediateAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownIntermediateAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownMostDerivedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownIntermediateAsKnownIntermediate(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownMostDerivedAsKnownIntermediate(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownMostDerivedAsKnownMostDerived(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownMostDerived1AsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownMostDerived1AsKnownIntermediate(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownMostDerived2AsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownMostDerived2AsBaseCompact(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownPreservedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void knownPreservedAsKnownPreserved(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void relayKnownPreservedAsBase(RelayPrx? r, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void relayKnownPreservedAsKnownPreserved(RelayPrx? r, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownPreservedAsBase(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unknownPreservedAsKnownPreserved(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void relayUnknownPreservedAsBase(RelayPrx? r, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void relayUnknownPreservedAsKnownPreserved(RelayPrx? r, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::PreservedClass")]
    public partial class PreservedClass : BaseClass
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string pc = "";

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PreservedClass(string bc, string pc) : base(bc)
        {
            global::System.ArgumentNullException.ThrowIfNull(pc);
            this.pc = pc;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PreservedClass()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId() => "::Test::PreservedClass";
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => ice_staticId();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(pc);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            pc = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::Preserved1")]
    public partial class Preserved1 : KnownPreservedDerived
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseClass? p1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved1(string b, string kp, string kpd, BaseClass? p1) : base(b, kp, kpd)
        {
            this.p1 = p1;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved1()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::Preserved1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::Preserved1", -1, false);
            ostr_.writeValue(p1);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((BaseClass? v) => { this.p1 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::Preserved2")]
    public partial class Preserved2 : Preserved1
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseClass? p2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved2(string b, string kp, string kpd, BaseClass? p1, BaseClass? p2) : base(b, kp, kpd, p1)
        {
            this.p2 = p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved2()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id() => "::Test::Preserved2";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::Preserved2", -1, false);
            ostr_.writeValue(p2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((BaseClass? v) => { this.p2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RelayPrx : Ice.ObjectPrx
    {
        void knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : Ice.ObjectPrx
    {
        void baseAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task baseAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownDerivedAsKnownDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownDerivedAsKnownDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownMostDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownMostDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownIntermediateAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownIntermediateAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownMostDerivedAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownMostDerivedAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownMostDerivedAsKnownMostDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownMostDerivedAsKnownMostDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownMostDerived1AsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownMostDerived1AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownMostDerived1AsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownMostDerived1AsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownMostDerived2AsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownMostDerived2AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownMostDerived2AsBaseCompact(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownMostDerived2AsBaseCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void relayKnownPreservedAsBase(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task relayKnownPreservedAsBaseAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void relayKnownPreservedAsKnownPreserved(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task relayKnownPreservedAsKnownPreservedAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void relayUnknownPreservedAsBase(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task relayUnknownPreservedAsBaseAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void relayUnknownPreservedAsKnownPreserved(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task relayUnknownPreservedAsKnownPreservedAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class RelayPrxHelper : Ice.ObjectPrxHelperBase, RelayPrx
    {
        public void knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownPreservedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownPreservedAsKnownPreservedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownPreservedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownPreservedAsKnownPreservedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownPreservedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownPreservedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownPreservedAsBase_name = "knownPreservedAsBase";

        private void _iceI_knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownPreservedAsKnownPreservedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownPreservedAsKnownPreserved(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownPreservedAsKnownPreserved_name = "knownPreservedAsKnownPreserved";

        private void _iceI_knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownPreservedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownPreservedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownPreservedAsBase_name = "unknownPreservedAsBase";

        private void _iceI_unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownPreservedAsKnownPreservedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownPreservedAsKnownPreserved(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownPreservedAsKnownPreserved_name = "unknownPreservedAsKnownPreserved";

        private void _iceI_unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public static RelayPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new RelayPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RelayPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new RelayPrxHelper(b) : null;

        public static RelayPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RelayPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new RelayPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RelayPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Relay"
        };

        public static string ice_staticId() => "::Test::Relay";

        public static void write(Ice.OutputStream ostr, RelayPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RelayPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new RelayPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new RelayPrxHelper(reference);

        private RelayPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private RelayPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public void baseAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_baseAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownDerivedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownDerivedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownDerivedAsKnownDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownDerivedAsKnownDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownIntermediateAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownIntermediateAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownMostDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownMostDerivedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownIntermediateAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownIntermediateAsKnownIntermediateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownMostDerivedAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownMostDerivedAsKnownIntermediateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownMostDerivedAsKnownMostDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownMostDerived1AsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownMostDerived1AsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownMostDerived1AsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownMostDerived2AsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownMostDerived2AsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownMostDerived2AsBaseCompact(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownMostDerived2AsBaseCompactAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownPreservedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_knownPreservedAsKnownPreservedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void relayKnownPreservedAsBase(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_relayKnownPreservedAsBaseAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void relayKnownPreservedAsKnownPreserved(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_relayKnownPreservedAsKnownPreservedAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownPreservedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unknownPreservedAsKnownPreservedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void relayUnknownPreservedAsBase(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_relayUnknownPreservedAsBaseAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void relayUnknownPreservedAsKnownPreserved(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_relayUnknownPreservedAsKnownPreservedAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task baseAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_baseAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_baseAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_baseAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_baseAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _baseAsBase_name = "baseAsBase";

        private void _iceI_baseAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _baseAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownDerivedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownDerivedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownDerivedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownDerivedAsBase_name = "unknownDerivedAsBase";

        private void _iceI_unknownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownDerivedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownDerivedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownDerivedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownDerivedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownDerivedAsBase_name = "knownDerivedAsBase";

        private void _iceI_knownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownDerivedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownDerivedAsKnownDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownDerivedAsKnownDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownDerivedAsKnownDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownDerivedAsKnownDerived_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownDerivedAsKnownDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownDerivedAsKnownDerived_name = "knownDerivedAsKnownDerived";

        private void _iceI_knownDerivedAsKnownDerived(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownDerivedAsKnownDerived_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownDerived)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownIntermediateAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownIntermediateAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownIntermediateAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownIntermediateAsBase_name = "unknownIntermediateAsBase";

        private void _iceI_unknownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownIntermediateAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownIntermediateAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownIntermediateAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownIntermediateAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownIntermediateAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownIntermediateAsBase_name = "knownIntermediateAsBase";

        private void _iceI_knownIntermediateAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownIntermediateAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownMostDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownMostDerivedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownMostDerivedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownMostDerivedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownMostDerivedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownMostDerivedAsBase_name = "knownMostDerivedAsBase";

        private void _iceI_knownMostDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownMostDerivedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownIntermediateAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownIntermediateAsKnownIntermediateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownIntermediateAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownIntermediateAsKnownIntermediate_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownIntermediateAsKnownIntermediate(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownIntermediateAsKnownIntermediate_name = "knownIntermediateAsKnownIntermediate";

        private void _iceI_knownIntermediateAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownIntermediateAsKnownIntermediate_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownIntermediate)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownMostDerivedAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownMostDerivedAsKnownIntermediateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownMostDerivedAsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownMostDerivedAsKnownIntermediate_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownMostDerivedAsKnownIntermediate(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownMostDerivedAsKnownIntermediate_name = "knownMostDerivedAsKnownIntermediate";

        private void _iceI_knownMostDerivedAsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownMostDerivedAsKnownIntermediate_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownIntermediate)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownMostDerivedAsKnownMostDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownMostDerivedAsKnownMostDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownMostDerivedAsKnownMostDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownMostDerivedAsKnownMostDerived_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownMostDerivedAsKnownMostDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownMostDerivedAsKnownMostDerived_name = "knownMostDerivedAsKnownMostDerived";

        private void _iceI_knownMostDerivedAsKnownMostDerived(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownMostDerivedAsKnownMostDerived_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownMostDerived)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownMostDerived1AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownMostDerived1AsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownMostDerived1AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownMostDerived1AsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownMostDerived1AsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownMostDerived1AsBase_name = "unknownMostDerived1AsBase";

        private void _iceI_unknownMostDerived1AsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownMostDerived1AsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownMostDerived1AsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownMostDerived1AsKnownIntermediateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownMostDerived1AsKnownIntermediateAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownMostDerived1AsKnownIntermediate_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownMostDerived1AsKnownIntermediate(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownMostDerived1AsKnownIntermediate_name = "unknownMostDerived1AsKnownIntermediate";

        private void _iceI_unknownMostDerived1AsKnownIntermediate(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownMostDerived1AsKnownIntermediate_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownIntermediate)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownMostDerived2AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownMostDerived2AsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownMostDerived2AsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownMostDerived2AsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownMostDerived2AsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownMostDerived2AsBase_name = "unknownMostDerived2AsBase";

        private void _iceI_unknownMostDerived2AsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownMostDerived2AsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownMostDerived2AsBaseCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownMostDerived2AsBaseCompactAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownMostDerived2AsBaseCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownMostDerived2AsBaseCompact_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownMostDerived2AsBaseCompact(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownMostDerived2AsBaseCompact_name = "unknownMostDerived2AsBaseCompact";

        private void _iceI_unknownMostDerived2AsBaseCompact(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownMostDerived2AsBaseCompact_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.CompactFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownPreservedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownPreservedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownPreservedAsBase_name = "knownPreservedAsBase";

        private void _iceI_knownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_knownPreservedAsKnownPreservedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_knownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_knownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_knownPreservedAsKnownPreserved(context, synchronous, completed);
            return completed.Task;
        }

        private const string _knownPreservedAsKnownPreserved_name = "knownPreservedAsKnownPreserved";

        private void _iceI_knownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _knownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task relayKnownPreservedAsBaseAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_relayKnownPreservedAsBaseAsync(r, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_relayKnownPreservedAsBaseAsync(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_relayKnownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_relayKnownPreservedAsBase(iceP_r, context, synchronous, completed);
            return completed.Task;
        }

        private const string _relayKnownPreservedAsBase_name = "relayKnownPreservedAsBase";

        private void _iceI_relayKnownPreservedAsBase(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _relayKnownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RelayPrxHelper.write(ostr, iceP_r);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task relayKnownPreservedAsKnownPreservedAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_relayKnownPreservedAsKnownPreservedAsync(r, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_relayKnownPreservedAsKnownPreservedAsync(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_relayKnownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_relayKnownPreservedAsKnownPreserved(iceP_r, context, synchronous, completed);
            return completed.Task;
        }

        private const string _relayKnownPreservedAsKnownPreserved_name = "relayKnownPreservedAsKnownPreserved";

        private void _iceI_relayKnownPreservedAsKnownPreserved(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _relayKnownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RelayPrxHelper.write(ostr, iceP_r);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownPreservedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownPreservedAsBaseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownPreservedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownPreservedAsBase_name = "unknownPreservedAsBase";

        private void _iceI_unknownPreservedAsBase(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unknownPreservedAsKnownPreservedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unknownPreservedAsKnownPreservedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unknownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unknownPreservedAsKnownPreserved(context, synchronous, completed);
            return completed.Task;
        }

        private const string _unknownPreservedAsKnownPreserved_name = "unknownPreservedAsKnownPreserved";

        private void _iceI_unknownPreservedAsKnownPreserved(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unknownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task relayUnknownPreservedAsBaseAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_relayUnknownPreservedAsBaseAsync(r, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_relayUnknownPreservedAsBaseAsync(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_relayUnknownPreservedAsBase_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_relayUnknownPreservedAsBase(iceP_r, context, synchronous, completed);
            return completed.Task;
        }

        private const string _relayUnknownPreservedAsBase_name = "relayUnknownPreservedAsBase";

        private void _iceI_relayUnknownPreservedAsBase(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _relayUnknownPreservedAsBase_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RelayPrxHelper.write(ostr, iceP_r);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@Base)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task relayUnknownPreservedAsKnownPreservedAsync(RelayPrx? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_relayUnknownPreservedAsKnownPreservedAsync(r, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_relayUnknownPreservedAsKnownPreservedAsync(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_relayUnknownPreservedAsKnownPreserved_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_relayUnknownPreservedAsKnownPreserved(iceP_r, context, synchronous, completed);
            return completed.Task;
        }

        private const string _relayUnknownPreservedAsKnownPreserved_name = "relayUnknownPreservedAsKnownPreserved";

        private void _iceI_relayUnknownPreservedAsKnownPreserved(RelayPrx? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _relayUnknownPreservedAsKnownPreserved_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RelayPrxHelper.write(ostr, iceP_r);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(KnownPreserved)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous);
        }

        public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestIntfPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

        private TestIntfPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestIntfPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RelayDisp_ : Ice.ObjectImpl, Relay
    {
        public abstract void knownPreservedAsBase(Ice.Current current);

        public abstract void knownPreservedAsKnownPreserved(Ice.Current current);

        public abstract void unknownPreservedAsBase(Ice.Current current);

        public abstract void unknownPreservedAsKnownPreserved(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::Relay";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "knownPreservedAsBase" => Relay.iceD_knownPreservedAsBaseAsync(this, request),
                "knownPreservedAsKnownPreserved" => Relay.iceD_knownPreservedAsKnownPreservedAsync(this, request),
                "unknownPreservedAsBase" => Relay.iceD_unknownPreservedAsBaseAsync(this, request),
                "unknownPreservedAsKnownPreserved" => Relay.iceD_unknownPreservedAsKnownPreservedAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
    {
        public abstract void baseAsBase(Ice.Current current);

        public abstract void unknownDerivedAsBase(Ice.Current current);

        public abstract void knownDerivedAsBase(Ice.Current current);

        public abstract void knownDerivedAsKnownDerived(Ice.Current current);

        public abstract void unknownIntermediateAsBase(Ice.Current current);

        public abstract void knownIntermediateAsBase(Ice.Current current);

        public abstract void knownMostDerivedAsBase(Ice.Current current);

        public abstract void knownIntermediateAsKnownIntermediate(Ice.Current current);

        public abstract void knownMostDerivedAsKnownIntermediate(Ice.Current current);

        public abstract void knownMostDerivedAsKnownMostDerived(Ice.Current current);

        public abstract void unknownMostDerived1AsBase(Ice.Current current);

        public abstract void unknownMostDerived1AsKnownIntermediate(Ice.Current current);

        public abstract void unknownMostDerived2AsBase(Ice.Current current);

        public abstract void unknownMostDerived2AsBaseCompact(Ice.Current current);

        public abstract void knownPreservedAsBase(Ice.Current current);

        public abstract void knownPreservedAsKnownPreserved(Ice.Current current);

        public abstract void relayKnownPreservedAsBase(RelayPrx? r, Ice.Current current);

        public abstract void relayKnownPreservedAsKnownPreserved(RelayPrx? r, Ice.Current current);

        public abstract void unknownPreservedAsBase(Ice.Current current);

        public abstract void unknownPreservedAsKnownPreserved(Ice.Current current);

        public abstract void relayUnknownPreservedAsBase(RelayPrx? r, Ice.Current current);

        public abstract void relayUnknownPreservedAsKnownPreserved(RelayPrx? r, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "baseAsBase" => TestIntf.iceD_baseAsBaseAsync(this, request),
                "unknownDerivedAsBase" => TestIntf.iceD_unknownDerivedAsBaseAsync(this, request),
                "knownDerivedAsBase" => TestIntf.iceD_knownDerivedAsBaseAsync(this, request),
                "knownDerivedAsKnownDerived" => TestIntf.iceD_knownDerivedAsKnownDerivedAsync(this, request),
                "unknownIntermediateAsBase" => TestIntf.iceD_unknownIntermediateAsBaseAsync(this, request),
                "knownIntermediateAsBase" => TestIntf.iceD_knownIntermediateAsBaseAsync(this, request),
                "knownMostDerivedAsBase" => TestIntf.iceD_knownMostDerivedAsBaseAsync(this, request),
                "knownIntermediateAsKnownIntermediate" => TestIntf.iceD_knownIntermediateAsKnownIntermediateAsync(this, request),
                "knownMostDerivedAsKnownIntermediate" => TestIntf.iceD_knownMostDerivedAsKnownIntermediateAsync(this, request),
                "knownMostDerivedAsKnownMostDerived" => TestIntf.iceD_knownMostDerivedAsKnownMostDerivedAsync(this, request),
                "unknownMostDerived1AsBase" => TestIntf.iceD_unknownMostDerived1AsBaseAsync(this, request),
                "unknownMostDerived1AsKnownIntermediate" => TestIntf.iceD_unknownMostDerived1AsKnownIntermediateAsync(this, request),
                "unknownMostDerived2AsBase" => TestIntf.iceD_unknownMostDerived2AsBaseAsync(this, request),
                "unknownMostDerived2AsBaseCompact" => TestIntf.iceD_unknownMostDerived2AsBaseCompactAsync(this, request),
                "knownPreservedAsBase" => TestIntf.iceD_knownPreservedAsBaseAsync(this, request),
                "knownPreservedAsKnownPreserved" => TestIntf.iceD_knownPreservedAsKnownPreservedAsync(this, request),
                "relayKnownPreservedAsBase" => TestIntf.iceD_relayKnownPreservedAsBaseAsync(this, request),
                "relayKnownPreservedAsKnownPreserved" => TestIntf.iceD_relayKnownPreservedAsKnownPreservedAsync(this, request),
                "unknownPreservedAsBase" => TestIntf.iceD_unknownPreservedAsBaseAsync(this, request),
                "unknownPreservedAsKnownPreserved" => TestIntf.iceD_unknownPreservedAsKnownPreservedAsync(this, request),
                "relayUnknownPreservedAsBase" => TestIntf.iceD_relayUnknownPreservedAsBaseAsync(this, request),
                "relayUnknownPreservedAsKnownPreserved" => TestIntf.iceD_relayUnknownPreservedAsKnownPreservedAsync(this, request),
                "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface Relay
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownPreservedAsBaseAsync(
            Relay obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownPreservedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownPreservedAsKnownPreservedAsync(
            Relay obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownPreservedAsKnownPreserved(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownPreservedAsBaseAsync(
            Relay obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownPreservedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownPreservedAsKnownPreservedAsync(
            Relay obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownPreservedAsKnownPreserved(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface TestIntf
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_baseAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.baseAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownDerivedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownDerivedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownDerivedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownDerivedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownDerivedAsKnownDerivedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownDerivedAsKnownDerived(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownIntermediateAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownIntermediateAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownIntermediateAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownIntermediateAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownMostDerivedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownMostDerivedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownIntermediateAsKnownIntermediateAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownIntermediateAsKnownIntermediate(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownMostDerivedAsKnownIntermediateAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownMostDerivedAsKnownIntermediate(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownMostDerivedAsKnownMostDerivedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownMostDerivedAsKnownMostDerived(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownMostDerived1AsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownMostDerived1AsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownMostDerived1AsKnownIntermediateAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownMostDerived1AsKnownIntermediate(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownMostDerived2AsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownMostDerived2AsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownMostDerived2AsBaseCompactAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownMostDerived2AsBaseCompact(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownPreservedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownPreservedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_knownPreservedAsKnownPreservedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.knownPreservedAsKnownPreserved(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_relayKnownPreservedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RelayPrx? iceP_r;
            iceP_r = RelayPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.relayKnownPreservedAsBase(iceP_r, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_relayKnownPreservedAsKnownPreservedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RelayPrx? iceP_r;
            iceP_r = RelayPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.relayKnownPreservedAsKnownPreserved(iceP_r, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownPreservedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownPreservedAsBase(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownPreservedAsKnownPreservedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.unknownPreservedAsKnownPreserved(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_relayUnknownPreservedAsBaseAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RelayPrx? iceP_r;
            iceP_r = RelayPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.relayUnknownPreservedAsBase(iceP_r, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_relayUnknownPreservedAsKnownPreservedAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RelayPrx? iceP_r;
            iceP_r = RelayPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.relayUnknownPreservedAsKnownPreserved(iceP_r, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
