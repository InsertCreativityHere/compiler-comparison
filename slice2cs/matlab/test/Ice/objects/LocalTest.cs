//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `LocalTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("LocalTest.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace LocalTest
{
    [Ice.SliceTypeId("::LocalTest::C1")]
    public partial class C1 : Ice.Value
    {
        public int i;

        partial void ice_initialize();

        public C1(int i)
        {
            this.i = i;
            ice_initialize();
        }

        public C1()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::C1";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }
    }

    public sealed partial record class S1
    {
        public C1? c1;

        partial void ice_initialize();

        public S1()
        {
            ice_initialize();
        }

        public S1(C1? c1)
        {
            this.c1 = c1;
            ice_initialize();
        }

        public S1(Ice.InputStream istr)
        {
            istr.readValue((C1? v) => { this.c1 = v; });
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeValue(this.c1);
        }

        public static void ice_write(Ice.OutputStream ostr, S1 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S1 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S2
    {
        public S1 s1;

        partial void ice_initialize();

        public S2(S1 s1)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1);
            this.s1 = s1;
            ice_initialize();
        }

        public S2(Ice.InputStream istr)
        {
            this.s1 = new S1(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            S1.ice_write(ostr, this.s1);
        }

        public static void ice_write(Ice.OutputStream ostr, S2 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S2 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S3
    {
        public C1?[] c1seq;

        partial void ice_initialize();

        public S3(C1?[] c1seq)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1seq);
            this.c1seq = c1seq;
            ice_initialize();
        }

        public S3(Ice.InputStream istr)
        {
            this.c1seq = C1SeqHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            C1SeqHelper.write(ostr, this.c1seq);
        }

        public static void ice_write(Ice.OutputStream ostr, S3 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S3 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S4
    {
        public S1[] s1seq;

        partial void ice_initialize();

        public S4(S1[] s1seq)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1seq);
            this.s1seq = s1seq;
            ice_initialize();
        }

        public S4(Ice.InputStream istr)
        {
            this.s1seq = S1SeqHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            S1SeqHelper.write(ostr, this.s1seq);
        }

        public static void ice_write(Ice.OutputStream ostr, S4 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S4 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S5
    {
        public global::System.Collections.Generic.Dictionary<int, C1?> c1dict;

        partial void ice_initialize();

        public S5(global::System.Collections.Generic.Dictionary<int, C1?> c1dict)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1dict);
            this.c1dict = c1dict;
            ice_initialize();
        }

        public S5(Ice.InputStream istr)
        {
            this.c1dict = C1DictHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            C1DictHelper.write(ostr, this.c1dict);
        }

        public static void ice_write(Ice.OutputStream ostr, S5 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S5 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S6
    {
        public global::System.Collections.Generic.Dictionary<int, S1> s1dict;

        partial void ice_initialize();

        public S6(global::System.Collections.Generic.Dictionary<int, S1> s1dict)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1dict);
            this.s1dict = s1dict;
            ice_initialize();
        }

        public S6(Ice.InputStream istr)
        {
            this.s1dict = S1DictHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            S1DictHelper.write(ostr, this.s1dict);
        }

        public static void ice_write(Ice.OutputStream ostr, S6 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S6 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S7
    {
        public C1?[][] c1seqseq;

        partial void ice_initialize();

        public S7(C1?[][] c1seqseq)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1seqseq);
            this.c1seqseq = c1seqseq;
            ice_initialize();
        }

        public S7(Ice.InputStream istr)
        {
            this.c1seqseq = C1SeqSeqHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            C1SeqSeqHelper.write(ostr, this.c1seqseq);
        }

        public static void ice_write(Ice.OutputStream ostr, S7 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S7 ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class S8
    {
        public S1[][] s1seqseq;

        partial void ice_initialize();

        public S8(S1[][] s1seqseq)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1seqseq);
            this.s1seqseq = s1seqseq;
            ice_initialize();
        }

        public S8(Ice.InputStream istr)
        {
            this.s1seqseq = S1SeqSeqHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            S1SeqSeqHelper.write(ostr, this.s1seqseq);
        }

        public static void ice_write(Ice.OutputStream ostr, S8 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S8 ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::LocalTest::CB1")]
    public partial class CB1 : Ice.Value
    {
        public S1 s1;

        partial void ice_initialize();

        public CB1(S1 s1)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1);
            this.s1 = s1;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB1()
        {
            this.s1 = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB1";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S1.ice_write(ostr_, s1);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s1 = new S1(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB2")]
    public partial class CB2 : Ice.Value
    {
        public C1?[] c1seq;

        partial void ice_initialize();

        public CB2(C1?[] c1seq)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1seq);
            this.c1seq = c1seq;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB2()
        {
            this.c1seq = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            C1SeqHelper.write(ostr_, c1seq);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            c1seq = C1SeqHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB3")]
    public partial class CB3 : Ice.Value
    {
        public S1[] s1seq;

        partial void ice_initialize();

        public CB3(S1[] s1seq)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1seq);
            this.s1seq = s1seq;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB3()
        {
            this.s1seq = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB3";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S1SeqHelper.write(ostr_, s1seq);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s1seq = S1SeqHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB4")]
    public partial class CB4 : Ice.Value
    {
        public global::System.Collections.Generic.Dictionary<int, C1?> c1dict;

        partial void ice_initialize();

        public CB4(global::System.Collections.Generic.Dictionary<int, C1?> c1dict)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1dict);
            this.c1dict = c1dict;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB4()
        {
            this.c1dict = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB4";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            C1DictHelper.write(ostr_, c1dict);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            c1dict = C1DictHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB5")]
    public partial class CB5 : Ice.Value
    {
        public global::System.Collections.Generic.Dictionary<int, S1> s1dict;

        partial void ice_initialize();

        public CB5(global::System.Collections.Generic.Dictionary<int, S1> s1dict)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1dict);
            this.s1dict = s1dict;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB5()
        {
            this.s1dict = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB5";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S1DictHelper.write(ostr_, s1dict);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s1dict = S1DictHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB6")]
    public partial class CB6 : Ice.Value
    {
        public C1?[][] c1seqseq;

        partial void ice_initialize();

        public CB6(C1?[][] c1seqseq)
        {
            global::System.ArgumentNullException.ThrowIfNull(c1seqseq);
            this.c1seqseq = c1seqseq;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB6()
        {
            this.c1seqseq = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB6";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            C1SeqSeqHelper.write(ostr_, c1seqseq);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            c1seqseq = C1SeqSeqHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB7")]
    public partial class CB7 : Ice.Value
    {
        public S1[][] s1seqseq;

        partial void ice_initialize();

        public CB7(S1[][] s1seqseq)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1seqseq);
            this.s1seqseq = s1seqseq;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB7()
        {
            this.s1seqseq = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB7";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S1SeqSeqHelper.write(ostr_, s1seqseq);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s1seqseq = S1SeqSeqHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::LocalTest::CB8")]
    public partial class CB8 : Ice.Value
    {
        public S1 s1;

        public C1?[] c1seq;

        public global::System.Collections.Generic.Dictionary<int, S1> s1dict;

        partial void ice_initialize();

        public CB8(S1 s1, C1?[] c1seq, global::System.Collections.Generic.Dictionary<int, S1> s1dict)
        {
            global::System.ArgumentNullException.ThrowIfNull(s1);
            this.s1 = s1;
            global::System.ArgumentNullException.ThrowIfNull(c1seq);
            this.c1seq = c1seq;
            global::System.ArgumentNullException.ThrowIfNull(s1dict);
            this.s1dict = s1dict;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CB8()
        {
            this.s1 = null!;
            this.c1seq = null!;
            this.s1dict = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::LocalTest::CB8";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S1.ice_write(ostr_, s1);
            C1SeqHelper.write(ostr_, c1seq);
            S1DictHelper.write(ostr_, s1dict);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s1 = new S1(istr_);
            c1seq = C1SeqHelper.read(istr_);
            s1dict = S1DictHelper.read(istr_);
            istr_.endSlice();
        }
    }

    public partial record struct StructKey
    {
        public int i;

        public int j;

        partial void ice_initialize();

        public StructKey(int i, int j)
        {
            this.i = i;
            this.j = j;
            ice_initialize();
        }

        public StructKey(Ice.InputStream istr)
        {
            this.i = istr.readInt();
            this.j = istr.readInt();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeInt(this.i);
            ostr.writeInt(this.j);
        }

        public static void ice_write(Ice.OutputStream ostr, StructKey v)
        {
            v.ice_writeMembers(ostr);
        }

        public static StructKey ice_read(Ice.InputStream istr) => new(istr);
    }
}

namespace LocalTest
{
    public sealed class C1SeqHelper
    {
        public static void write(Ice.OutputStream ostr, C1?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C1?[] read(Ice.InputStream istr)
        {
            C1?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C1?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<C1>(v, ix));
                }
            }
            return v;
        }
    }

    public sealed class S1SeqHelper
    {
        public static void write(Ice.OutputStream ostr, S1[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S1[] read(Ice.InputStream istr)
        {
            S1[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new S1[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new S1(istr);
                }
            }
            return v;
        }
    }

    public sealed class C1DictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, C1?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, C1?> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, C1?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, C1?> r = new global::System.Collections.Generic.Dictionary<int, C1?>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((C1? v) => { r[k] = v; });
            }
            return r;
        }
    }

    public sealed class S1DictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, S1> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, S1> e in v)
                {
                    ostr.writeInt(e.Key);
                    S1.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, S1> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, S1> r = new global::System.Collections.Generic.Dictionary<int, S1>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                S1 v;
                v = new S1(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class C1SeqSeqHelper
    {
        public static void write(Ice.OutputStream ostr, C1?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    C1SeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static C1?[][] read(Ice.InputStream istr)
        {
            C1?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C1?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = C1SeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class S1SeqSeqHelper
    {
        public static void write(Ice.OutputStream ostr, S1[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    S1SeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static S1[][] read(Ice.InputStream istr)
        {
            S1[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new S1[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = S1SeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class StructDict1Helper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<StructKey, C1?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<StructKey, C1?> e in v)
                {
                    e.Key.ice_writeMembers(ostr);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<StructKey, C1?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<StructKey, C1?> r = new global::System.Collections.Generic.Dictionary<StructKey, C1?>();
            for(int i = 0; i < sz; ++i)
            {
                StructKey k;
                k = new StructKey(istr);
                istr.readValue((C1? v) => { r[k] = v; });
            }
            return r;
        }
    }

    public sealed class StructDict2Helper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<StructKey, S1> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<StructKey, S1> e in v)
                {
                    e.Key.ice_writeMembers(ostr);
                    S1.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<StructKey, S1> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<StructKey, S1> r = new global::System.Collections.Generic.Dictionary<StructKey, S1>();
            for(int i = 0; i < sz; ++i)
            {
                StructKey k;
                k = new StructKey(istr);
                S1 v;
                v = new S1(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class C1DictDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, C1?>> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, global::System.Collections.Generic.Dictionary<int, C1?>> e in v)
                {
                    ostr.writeInt(e.Key);
                    C1DictHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, C1?>> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, C1?>> r = new global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, C1?>>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                global::System.Collections.Generic.Dictionary<int, C1?> v;
                v = C1DictHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class S1DictDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, S1>> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, global::System.Collections.Generic.Dictionary<int, S1>> e in v)
                {
                    ostr.writeInt(e.Key);
                    S1DictHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, S1>> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, S1>> r = new global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<int, S1>>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                global::System.Collections.Generic.Dictionary<int, S1> v;
                v = S1DictHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }
}
