//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class C : global::Ice.Value
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public C()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum E
    {
        E1,
        E2,
        E3
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class EHelper
    {
        public static void write(global::Ice.OutputStream ostr, E v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static E read(global::Ice.InputStream istr)
        {
            E v;
            v = (E)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct S
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public E en;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public S(E en)
        {
            this.en = en;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::S");
            global::IceInternal.HashUtil.hashAdd(ref h_, en);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(!(other is S))
            {
                return false;
            }
            S o = (S)other;
            if(!this.en.Equals(o.en))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(S lhs, S rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(S lhs, S rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeEnum((int)this.en, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.en = (E)istr.readEnum(2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, S v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static S ice_read(global::Ice.InputStream istr)
        {
            var v = new S();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opCSeq(C[] ret, C[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opCArray(C[] ret, C[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opCList(C[] ret, C[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opBoolSeq(bool[] ret, bool[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opByteSeq(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opShortSeq(short[] ret, short[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opIntSeq(int[] ret, int[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opLongSeq(long[] ret, long[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opFloatSeq(float[] ret, float[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opDoubleSeq(double[] ret, double[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opStringSeq(string[] ret, string[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opESeq(E[] ret, E[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opSSeq(S[] ret, S[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] ret, global::System.Collections.Generic.Dictionary<int, string>[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opStringSeqSeq(string[][] ret, string[][] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opByteBufferSeq(byte[] ret, byte[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opShortBufferSeq(short[] ret, short[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opIntBufferSeq(int[] ret, int[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opLongBufferSeq(long[] ret, long[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opFloatBufferSeq(float[] ret, float[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opDoubleBufferSeq(double[] ret, double[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_shutdown();
}

namespace Test
{
    public struct TestIntf_OpCSeqResult
    {
        public TestIntf_OpCSeqResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;
    }

    public struct TestIntf_OpCArrayResult
    {
        public TestIntf_OpCArrayResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;
    }

    public struct TestIntf_OpCListResult
    {
        public TestIntf_OpCListResult(C[] returnValue, C[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public C[] returnValue;
        public C[] outSeq;
    }

    public struct TestIntf_OpBoolSeqResult
    {
        public TestIntf_OpBoolSeqResult(bool[] returnValue, bool[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public bool[] returnValue;
        public bool[] outSeq;
    }

    public struct TestIntf_OpByteSeqResult
    {
        public TestIntf_OpByteSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpShortSeqResult
    {
        public TestIntf_OpShortSeqResult(short[] returnValue, short[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public short[] returnValue;
        public short[] outSeq;
    }

    public struct TestIntf_OpIntSeqResult
    {
        public TestIntf_OpIntSeqResult(int[] returnValue, int[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public int[] returnValue;
        public int[] outSeq;
    }

    public struct TestIntf_OpLongSeqResult
    {
        public TestIntf_OpLongSeqResult(long[] returnValue, long[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public long[] returnValue;
        public long[] outSeq;
    }

    public struct TestIntf_OpFloatSeqResult
    {
        public TestIntf_OpFloatSeqResult(float[] returnValue, float[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public float[] returnValue;
        public float[] outSeq;
    }

    public struct TestIntf_OpDoubleSeqResult
    {
        public TestIntf_OpDoubleSeqResult(double[] returnValue, double[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public double[] returnValue;
        public double[] outSeq;
    }

    public struct TestIntf_OpStringSeqResult
    {
        public TestIntf_OpStringSeqResult(string[] returnValue, string[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public string[] returnValue;
        public string[] outSeq;
    }

    public struct TestIntf_OpESeqResult
    {
        public TestIntf_OpESeqResult(E[] returnValue, E[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public E[] returnValue;
        public E[] outSeq;
    }

    public struct TestIntf_OpSSeqResult
    {
        public TestIntf_OpSSeqResult(S[] returnValue, S[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public S[] returnValue;
        public S[] outSeq;
    }

    public struct TestIntf_OpDSeqResult
    {
        public TestIntf_OpDSeqResult(global::System.Collections.Generic.Dictionary<int, string>[] returnValue, global::System.Collections.Generic.Dictionary<int, string>[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public global::System.Collections.Generic.Dictionary<int, string>[] returnValue;
        public global::System.Collections.Generic.Dictionary<int, string>[] outSeq;
    }

    public struct TestIntf_OpStringSeqSeqResult
    {
        public TestIntf_OpStringSeqSeqResult(string[][] returnValue, string[][] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public string[][] returnValue;
        public string[][] outSeq;
    }

    public struct TestIntf_OpByteBufferSeqResult
    {
        public TestIntf_OpByteBufferSeqResult(byte[] returnValue, byte[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public byte[] returnValue;
        public byte[] outSeq;
    }

    public struct TestIntf_OpShortBufferSeqResult
    {
        public TestIntf_OpShortBufferSeqResult(short[] returnValue, short[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public short[] returnValue;
        public short[] outSeq;
    }

    public struct TestIntf_OpIntBufferSeqResult
    {
        public TestIntf_OpIntBufferSeqResult(int[] returnValue, int[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public int[] returnValue;
        public int[] outSeq;
    }

    public struct TestIntf_OpLongBufferSeqResult
    {
        public TestIntf_OpLongBufferSeqResult(long[] returnValue, long[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public long[] returnValue;
        public long[] outSeq;
    }

    public struct TestIntf_OpFloatBufferSeqResult
    {
        public TestIntf_OpFloatBufferSeqResult(float[] returnValue, float[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public float[] returnValue;
        public float[] outSeq;
    }

    public struct TestIntf_OpDoubleBufferSeqResult
    {
        public TestIntf_OpDoubleBufferSeqResult(double[] returnValue, double[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public double[] returnValue;
        public double[] outSeq;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opCSeq> begin_opCSeq(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opCSeq(C[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opCSeq(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C[] end_opCSeq(out C[] outSeq, global::Ice.AsyncResult asyncResult);

        C[] opCArray(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCArrayResult> opCArrayAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opCArray> begin_opCArray(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opCArray(C[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opCArray(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C[] end_opCArray(out C[] outSeq, global::Ice.AsyncResult asyncResult);

        C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opCList> begin_opCList(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opCList(C[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opCList(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C[] end_opCList(out C[] outSeq, global::Ice.AsyncResult asyncResult);

        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opBoolSeq> begin_opBoolSeq(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opBoolSeq(bool[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opBoolSeq(bool[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool[] end_opBoolSeq(out bool[] outSeq, global::Ice.AsyncResult asyncResult);

        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opByteSeq(byte[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opByteSeq(byte[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_opByteSeq(out byte[] outSeq, global::Ice.AsyncResult asyncResult);

        short[] opShortSeq(short[] inSeq, out short[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opShortSeq(short[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opShortSeq(short[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        short[] end_opShortSeq(out short[] outSeq, global::Ice.AsyncResult asyncResult);

        int[] opIntSeq(int[] inSeq, out int[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opIntSeq(int[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opIntSeq(int[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int[] end_opIntSeq(out int[] outSeq, global::Ice.AsyncResult asyncResult);

        long[] opLongSeq(long[] inSeq, out long[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> opLongSeqAsync(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opLongSeq> begin_opLongSeq(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opLongSeq(long[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opLongSeq(long[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long[] end_opLongSeq(out long[] outSeq, global::Ice.AsyncResult asyncResult);

        float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> opFloatSeqAsync(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opFloatSeq> begin_opFloatSeq(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opFloatSeq(float[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opFloatSeq(float[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float[] end_opFloatSeq(out float[] outSeq, global::Ice.AsyncResult asyncResult);

        double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> opDoubleSeqAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opDoubleSeq> begin_opDoubleSeq(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opDoubleSeq(double[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opDoubleSeq(double[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        double[] end_opDoubleSeq(out double[] outSeq, global::Ice.AsyncResult asyncResult);

        string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opStringSeq> begin_opStringSeq(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opStringSeq(string[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opStringSeq(string[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_opStringSeq(out string[] outSeq, global::Ice.AsyncResult asyncResult);

        E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opESeq> begin_opESeq(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opESeq(E[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opESeq(E[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        E[] end_opESeq(out E[] outSeq, global::Ice.AsyncResult asyncResult);

        S[] opSSeq(S[] inSeq, out S[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> opSSeqAsync(S[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opSSeq> begin_opSSeq(S[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opSSeq(S[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opSSeq(S[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        S[] end_opSSeq(out S[] outSeq, global::Ice.AsyncResult asyncResult);

        global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opDSeq> begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::System.Collections.Generic.Dictionary<int, string>[] end_opDSeq(out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.AsyncResult asyncResult);

        string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> opStringSeqSeqAsync(string[][] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opStringSeqSeq> begin_opStringSeqSeq(string[][] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opStringSeqSeq(string[][] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opStringSeqSeq(string[][] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[][] end_opStringSeqSeq(out string[][] outSeq, global::Ice.AsyncResult asyncResult);

        byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> opByteBufferSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opByteBufferSeq> begin_opByteBufferSeq(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opByteBufferSeq(byte[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opByteBufferSeq(byte[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        byte[] end_opByteBufferSeq(out byte[] outSeq, global::Ice.AsyncResult asyncResult);

        short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> opShortBufferSeqAsync(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opShortBufferSeq> begin_opShortBufferSeq(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opShortBufferSeq(short[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opShortBufferSeq(short[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        short[] end_opShortBufferSeq(out short[] outSeq, global::Ice.AsyncResult asyncResult);

        int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> opIntBufferSeqAsync(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opIntBufferSeq> begin_opIntBufferSeq(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opIntBufferSeq(int[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opIntBufferSeq(int[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int[] end_opIntBufferSeq(out int[] outSeq, global::Ice.AsyncResult asyncResult);

        long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> opLongBufferSeqAsync(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opLongBufferSeq> begin_opLongBufferSeq(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opLongBufferSeq(long[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opLongBufferSeq(long[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        long[] end_opLongBufferSeq(out long[] outSeq, global::Ice.AsyncResult asyncResult);

        float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> opFloatBufferSeqAsync(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opFloatBufferSeq> begin_opFloatBufferSeq(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opFloatBufferSeq(float[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opFloatBufferSeq(float[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float[] end_opFloatBufferSeq(out float[] outSeq, global::Ice.AsyncResult asyncResult);

        double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opDoubleBufferSeq> begin_opDoubleBufferSeq(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opDoubleBufferSeq(double[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opDoubleBufferSeq(double[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        double[] end_opDoubleBufferSeq(out double[] outSeq, global::Ice.AsyncResult asyncResult);

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TestIntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        C[] opCArray(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        short[] opShortSeq(short[] inSeq, out short[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        int[] opIntSeq(int[] inSeq, out int[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long[] opLongSeq(long[] inSeq, out long[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        S[] opSSeq(S[] inSeq, out S[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class CSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class CArrayHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class CListHelper
    {
        public static void write(global::Ice.OutputStream ostr, C[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C[] read(global::Ice.InputStream istr)
        {
            C[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class BoolSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ByteSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ShortSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class IntSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class LongSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class FloatSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class DoubleSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class StringSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ByteBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ShortBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class IntBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class LongBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class FloatBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class DoubleBufferHelper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ESeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, E[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(global::Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, S[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S[] read(global::Ice.InputStream istr)
        {
            S[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new S[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class DHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, string> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, string> r = new global::System.Collections.Generic.Dictionary<int, string>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class DSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<int, string>[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string>[] read(global::Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<int, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<int, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class StringSeqSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[][] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(global::Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        public TestIntfPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C[] opCArray(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opCListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opShortSeq(short[] inSeq, out short[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int[] opIntSeq(int[] inSeq, out int[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long[] opLongSeq(long[] inSeq, out long[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opLongSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFloatSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDoubleSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opESeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public S[] opSSeq(S[] inSeq, out S[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opSSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSeqSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opLongBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFloatBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opDoubleBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> opCSeqAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCSeqResult> _iceI_opCSeqAsync(C[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCSeqResult>(progress, cancel);
            _iceI_opCSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCSeq_name = "opCSeq";

        private void _iceI_opCSeq(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCSeqResult>(completed);
            outAsync.invoke(
                _opCSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CSeqHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCSeqResult ret = new TestIntf_OpCSeqResult();
                    ret.outSeq = CSeqHelper.read(istr);
                    ret.returnValue = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCArrayResult> opCArrayAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCArrayResult> _iceI_opCArrayAsync(C[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCArray_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCArrayResult>(progress, cancel);
            _iceI_opCArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCArray_name = "opCArray";

        private void _iceI_opCArray(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCArrayResult>(completed);
            outAsync.invoke(
                _opCArray_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CArrayHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCArrayResult ret = new TestIntf_OpCArrayResult();
                    ret.outSeq = CArrayHelper.read(istr);
                    ret.returnValue = CArrayHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpCListResult> opCListAsync(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opCListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpCListResult> _iceI_opCListAsync(C[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpCListResult>(progress, cancel);
            _iceI_opCList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCList_name = "opCList";

        private void _iceI_opCList(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpCListResult>(completed);
            outAsync.invoke(
                _opCList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    CListHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpCListResult ret = new TestIntf_OpCListResult();
                    ret.outSeq = CListHelper.read(istr);
                    ret.returnValue = CListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpBoolSeqResult ret = new TestIntf_OpBoolSeqResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteSeqResult ret = new TestIntf_OpByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortSeqResult ret = new TestIntf_OpShortSeqResult();
                    ret.outSeq = ShortSeqHelper.read(istr);
                    ret.returnValue = ShortSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpIntSeqResult ret = new TestIntf_OpIntSeqResult();
                    ret.outSeq = IntSeqHelper.read(istr);
                    ret.returnValue = IntSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> opLongSeqAsync(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLongSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpLongSeqResult>(progress, cancel);
            _iceI_opLongSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeq_name = "opLongSeq";

        private void _iceI_opLongSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpLongSeqResult>(completed);
            outAsync.invoke(
                _opLongSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    LongSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpLongSeqResult ret = new TestIntf_OpLongSeqResult();
                    ret.outSeq = LongSeqHelper.read(istr);
                    ret.returnValue = LongSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> opFloatSeqAsync(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloatSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpFloatSeqResult>(progress, cancel);
            _iceI_opFloatSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeq_name = "opFloatSeq";

        private void _iceI_opFloatSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFloatSeqResult>(completed);
            outAsync.invoke(
                _opFloatSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FloatSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpFloatSeqResult ret = new TestIntf_OpFloatSeqResult();
                    ret.outSeq = FloatSeqHelper.read(istr);
                    ret.returnValue = FloatSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> opDoubleSeqAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDoubleSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDoubleSeqResult>(progress, cancel);
            _iceI_opDoubleSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeq_name = "opDoubleSeq";

        private void _iceI_opDoubleSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleSeqResult>(completed);
            outAsync.invoke(
                _opDoubleSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DoubleSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDoubleSeqResult ret = new TestIntf_OpDoubleSeqResult();
                    ret.outSeq = DoubleSeqHelper.read(istr);
                    ret.returnValue = DoubleSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> _iceI_opStringSeqAsync(string[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringSeqResult>(progress, cancel);
            _iceI_opStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeq_name = "opStringSeq";

        private void _iceI_opStringSeq(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqResult>(completed);
            outAsync.invoke(
                _opStringSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringSeqResult ret = new TestIntf_OpStringSeqResult();
                    ret.outSeq = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opESeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> _iceI_opESeqAsync(E[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opESeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpESeqResult>(progress, cancel);
            _iceI_opESeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opESeq_name = "opESeq";

        private void _iceI_opESeq(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpESeqResult>(completed);
            outAsync.invoke(
                _opESeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ESeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpESeqResult ret = new TestIntf_OpESeqResult();
                    ret.outSeq = ESeqHelper.read(istr);
                    ret.returnValue = ESeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> opSSeqAsync(S[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opSSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpSSeqResult>(progress, cancel);
            _iceI_opSSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSSeq_name = "opSSeq";

        private void _iceI_opSSeq(S[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpSSeqResult>(completed);
            outAsync.invoke(
                _opSSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpSSeqResult ret = new TestIntf_OpSSeqResult();
                    ret.outSeq = SSeqHelper.read(istr);
                    ret.returnValue = SSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> _iceI_opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDSeqResult>(progress, cancel);
            _iceI_opDSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDSeq_name = "opDSeq";

        private void _iceI_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDSeqResult>(completed);
            outAsync.invoke(
                _opDSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDSeqResult ret = new TestIntf_OpDSeqResult();
                    ret.outSeq = DSeqHelper.read(istr);
                    ret.returnValue = DSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> opStringSeqSeqAsync(string[][] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSeqSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> _iceI_opStringSeqSeqAsync(string[][] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeqSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpStringSeqSeqResult>(progress, cancel);
            _iceI_opStringSeqSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeqSeq_name = "opStringSeqSeq";

        private void _iceI_opStringSeqSeq(string[][] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqSeqResult>(completed);
            outAsync.invoke(
                _opStringSeqSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringSeqSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpStringSeqSeqResult ret = new TestIntf_OpStringSeqSeqResult();
                    ret.outSeq = StringSeqSeqHelper.read(istr);
                    ret.returnValue = StringSeqSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> opByteBufferSeqAsync(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> _iceI_opByteBufferSeqAsync(byte[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteBufferSeqResult>(progress, cancel);
            _iceI_opByteBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBufferSeq_name = "opByteBufferSeq";

        private void _iceI_opByteBufferSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteBufferSeqResult>(completed);
            outAsync.invoke(
                _opByteBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteBufferSeqResult ret = new TestIntf_OpByteBufferSeqResult();
                    ret.outSeq = ByteBufferHelper.read(istr);
                    ret.returnValue = ByteBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> opShortBufferSeqAsync(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> _iceI_opShortBufferSeqAsync(short[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpShortBufferSeqResult>(progress, cancel);
            _iceI_opShortBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortBufferSeq_name = "opShortBufferSeq";

        private void _iceI_opShortBufferSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortBufferSeqResult>(completed);
            outAsync.invoke(
                _opShortBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortBufferSeqResult ret = new TestIntf_OpShortBufferSeqResult();
                    ret.outSeq = ShortBufferHelper.read(istr);
                    ret.returnValue = ShortBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> opIntBufferSeqAsync(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> _iceI_opIntBufferSeqAsync(int[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpIntBufferSeqResult>(progress, cancel);
            _iceI_opIntBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntBufferSeq_name = "opIntBufferSeq";

        private void _iceI_opIntBufferSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntBufferSeqResult>(completed);
            outAsync.invoke(
                _opIntBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpIntBufferSeqResult ret = new TestIntf_OpIntBufferSeqResult();
                    ret.outSeq = IntBufferHelper.read(istr);
                    ret.returnValue = IntBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> opLongBufferSeqAsync(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLongBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> _iceI_opLongBufferSeqAsync(long[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpLongBufferSeqResult>(progress, cancel);
            _iceI_opLongBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongBufferSeq_name = "opLongBufferSeq";

        private void _iceI_opLongBufferSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpLongBufferSeqResult>(completed);
            outAsync.invoke(
                _opLongBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    LongBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpLongBufferSeqResult ret = new TestIntf_OpLongBufferSeqResult();
                    ret.outSeq = LongBufferHelper.read(istr);
                    ret.returnValue = LongBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> opFloatBufferSeqAsync(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloatBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> _iceI_opFloatBufferSeqAsync(float[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpFloatBufferSeqResult>(progress, cancel);
            _iceI_opFloatBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatBufferSeq_name = "opFloatBufferSeq";

        private void _iceI_opFloatBufferSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFloatBufferSeqResult>(completed);
            outAsync.invoke(
                _opFloatBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FloatBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpFloatBufferSeqResult ret = new TestIntf_OpFloatBufferSeqResult();
                    ret.outSeq = FloatBufferHelper.read(istr);
                    ret.returnValue = FloatBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDoubleBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> _iceI_opDoubleBufferSeqAsync(double[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleBufferSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpDoubleBufferSeqResult>(progress, cancel);
            _iceI_opDoubleBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleBufferSeq_name = "opDoubleBufferSeq";

        private void _iceI_opDoubleBufferSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleBufferSeqResult>(completed);
            outAsync.invoke(
                _opDoubleBufferSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DoubleBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpDoubleBufferSeqResult ret = new TestIntf_OpDoubleBufferSeqResult();
                    ret.outSeq = DoubleBufferHelper.read(istr);
                    ret.returnValue = DoubleBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_TestIntf_opCSeq> begin_opCSeq(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opCSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opCSeq(C[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opCSeq(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCSeq(inSeq, context, callback, cookie, false);
        }

        public C[] end_opCSeq(out C[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opCSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpCSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opCSeq> begin_opCSeq(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opCSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opCSeq, TestIntf_OpCSeqResult>(
                (Callback_TestIntf_opCSeq cb, TestIntf_OpCSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opCSeq_name, cookie, completedCallback);
            _iceI_opCSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opCArray> begin_opCArray(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opCArray(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opCArray(C[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCArray(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opCArray(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCArray(inSeq, context, callback, cookie, false);
        }

        public C[] end_opCArray(out C[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opCArray_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpCArrayResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opCArray> begin_opCArray(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opCArray_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opCArray, TestIntf_OpCArrayResult>(
                (Callback_TestIntf_opCArray cb, TestIntf_OpCArrayResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opCArray_name, cookie, completedCallback);
            _iceI_opCArray(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opCList> begin_opCList(C[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opCList(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opCList(C[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCList(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opCList(C[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opCList(inSeq, context, callback, cookie, false);
        }

        public C[] end_opCList(out C[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opCList_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpCListResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opCList> begin_opCList(C[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opCList_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opCList, TestIntf_OpCListResult>(
                (Callback_TestIntf_opCList cb, TestIntf_OpCListResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opCList_name, cookie, completedCallback);
            _iceI_opCList(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opBoolSeq> begin_opBoolSeq(bool[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opBoolSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opBoolSeq(bool[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opBoolSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opBoolSeq(bool[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opBoolSeq(inSeq, context, callback, cookie, false);
        }

        public bool[] end_opBoolSeq(out bool[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opBoolSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpBoolSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opBoolSeq> begin_opBoolSeq(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opBoolSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opBoolSeq, TestIntf_OpBoolSeqResult>(
                (Callback_TestIntf_opBoolSeq cb, TestIntf_OpBoolSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opBoolSeq_name, cookie, completedCallback);
            _iceI_opBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opByteSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opByteSeq(byte[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opByteSeq(byte[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteSeq(inSeq, context, callback, cookie, false);
        }

        public byte[] end_opByteSeq(out byte[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByteSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpByteSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opByteSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opByteSeq, TestIntf_OpByteSeqResult>(
                (Callback_TestIntf_opByteSeq cb, TestIntf_OpByteSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opByteSeq_name, cookie, completedCallback);
            _iceI_opByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opShortSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opShortSeq(short[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opShortSeq(short[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortSeq(inSeq, context, callback, cookie, false);
        }

        public short[] end_opShortSeq(out short[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShortSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpShortSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opShortSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opShortSeq, TestIntf_OpShortSeqResult>(
                (Callback_TestIntf_opShortSeq cb, TestIntf_OpShortSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opShortSeq_name, cookie, completedCallback);
            _iceI_opShortSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opIntSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opIntSeq(int[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opIntSeq(int[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntSeq(inSeq, context, callback, cookie, false);
        }

        public int[] end_opIntSeq(out int[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opIntSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpIntSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opIntSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opIntSeq, TestIntf_OpIntSeqResult>(
                (Callback_TestIntf_opIntSeq cb, TestIntf_OpIntSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opIntSeq_name, cookie, completedCallback);
            _iceI_opIntSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opLongSeq> begin_opLongSeq(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opLongSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opLongSeq(long[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opLongSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opLongSeq(long[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opLongSeq(inSeq, context, callback, cookie, false);
        }

        public long[] end_opLongSeq(out long[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opLongSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpLongSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opLongSeq> begin_opLongSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opLongSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opLongSeq, TestIntf_OpLongSeqResult>(
                (Callback_TestIntf_opLongSeq cb, TestIntf_OpLongSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opLongSeq_name, cookie, completedCallback);
            _iceI_opLongSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opFloatSeq> begin_opFloatSeq(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opFloatSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opFloatSeq(float[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opFloatSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opFloatSeq(float[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opFloatSeq(inSeq, context, callback, cookie, false);
        }

        public float[] end_opFloatSeq(out float[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opFloatSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpFloatSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opFloatSeq> begin_opFloatSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opFloatSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opFloatSeq, TestIntf_OpFloatSeqResult>(
                (Callback_TestIntf_opFloatSeq cb, TestIntf_OpFloatSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opFloatSeq_name, cookie, completedCallback);
            _iceI_opFloatSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opDoubleSeq> begin_opDoubleSeq(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opDoubleSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opDoubleSeq(double[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDoubleSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opDoubleSeq(double[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDoubleSeq(inSeq, context, callback, cookie, false);
        }

        public double[] end_opDoubleSeq(out double[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opDoubleSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpDoubleSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opDoubleSeq> begin_opDoubleSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opDoubleSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opDoubleSeq, TestIntf_OpDoubleSeqResult>(
                (Callback_TestIntf_opDoubleSeq cb, TestIntf_OpDoubleSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opDoubleSeq_name, cookie, completedCallback);
            _iceI_opDoubleSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opStringSeq> begin_opStringSeq(string[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opStringSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opStringSeq(string[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opStringSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opStringSeq(string[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opStringSeq(inSeq, context, callback, cookie, false);
        }

        public string[] end_opStringSeq(out string[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opStringSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpStringSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opStringSeq> begin_opStringSeq(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opStringSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opStringSeq, TestIntf_OpStringSeqResult>(
                (Callback_TestIntf_opStringSeq cb, TestIntf_OpStringSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opStringSeq_name, cookie, completedCallback);
            _iceI_opStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opESeq> begin_opESeq(E[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opESeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opESeq(E[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opESeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opESeq(E[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opESeq(inSeq, context, callback, cookie, false);
        }

        public E[] end_opESeq(out E[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opESeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpESeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opESeq> begin_opESeq(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opESeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opESeq, TestIntf_OpESeqResult>(
                (Callback_TestIntf_opESeq cb, TestIntf_OpESeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opESeq_name, cookie, completedCallback);
            _iceI_opESeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opSSeq> begin_opSSeq(S[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opSSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opSSeq(S[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opSSeq(S[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSSeq(inSeq, context, callback, cookie, false);
        }

        public S[] end_opSSeq(out S[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opSSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpSSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opSSeq> begin_opSSeq(S[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opSSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opSSeq, TestIntf_OpSSeqResult>(
                (Callback_TestIntf_opSSeq cb, TestIntf_OpSSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opSSeq_name, cookie, completedCallback);
            _iceI_opSSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opDSeq> begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opDSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDSeq(inSeq, context, callback, cookie, false);
        }

        public global::System.Collections.Generic.Dictionary<int, string>[] end_opDSeq(out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opDSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpDSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opDSeq> begin_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opDSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opDSeq, TestIntf_OpDSeqResult>(
                (Callback_TestIntf_opDSeq cb, TestIntf_OpDSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opDSeq_name, cookie, completedCallback);
            _iceI_opDSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opStringSeqSeq> begin_opStringSeqSeq(string[][] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opStringSeqSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opStringSeqSeq(string[][] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opStringSeqSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opStringSeqSeq(string[][] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opStringSeqSeq(inSeq, context, callback, cookie, false);
        }

        public string[][] end_opStringSeqSeq(out string[][] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opStringSeqSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpStringSeqSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opStringSeqSeq> begin_opStringSeqSeq(string[][] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opStringSeqSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opStringSeqSeq, TestIntf_OpStringSeqSeqResult>(
                (Callback_TestIntf_opStringSeqSeq cb, TestIntf_OpStringSeqSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opStringSeqSeq_name, cookie, completedCallback);
            _iceI_opStringSeqSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opByteBufferSeq> begin_opByteBufferSeq(byte[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opByteBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opByteBufferSeq(byte[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opByteBufferSeq(byte[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteBufferSeq(inSeq, context, callback, cookie, false);
        }

        public byte[] end_opByteBufferSeq(out byte[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByteBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpByteBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opByteBufferSeq> begin_opByteBufferSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opByteBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opByteBufferSeq, TestIntf_OpByteBufferSeqResult>(
                (Callback_TestIntf_opByteBufferSeq cb, TestIntf_OpByteBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opByteBufferSeq_name, cookie, completedCallback);
            _iceI_opByteBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opShortBufferSeq> begin_opShortBufferSeq(short[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opShortBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opShortBufferSeq(short[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opShortBufferSeq(short[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortBufferSeq(inSeq, context, callback, cookie, false);
        }

        public short[] end_opShortBufferSeq(out short[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShortBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpShortBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opShortBufferSeq> begin_opShortBufferSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opShortBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opShortBufferSeq, TestIntf_OpShortBufferSeqResult>(
                (Callback_TestIntf_opShortBufferSeq cb, TestIntf_OpShortBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opShortBufferSeq_name, cookie, completedCallback);
            _iceI_opShortBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opIntBufferSeq> begin_opIntBufferSeq(int[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opIntBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opIntBufferSeq(int[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opIntBufferSeq(int[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntBufferSeq(inSeq, context, callback, cookie, false);
        }

        public int[] end_opIntBufferSeq(out int[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opIntBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpIntBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opIntBufferSeq> begin_opIntBufferSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opIntBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opIntBufferSeq, TestIntf_OpIntBufferSeqResult>(
                (Callback_TestIntf_opIntBufferSeq cb, TestIntf_OpIntBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opIntBufferSeq_name, cookie, completedCallback);
            _iceI_opIntBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opLongBufferSeq> begin_opLongBufferSeq(long[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opLongBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opLongBufferSeq(long[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opLongBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opLongBufferSeq(long[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opLongBufferSeq(inSeq, context, callback, cookie, false);
        }

        public long[] end_opLongBufferSeq(out long[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opLongBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpLongBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opLongBufferSeq> begin_opLongBufferSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opLongBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opLongBufferSeq, TestIntf_OpLongBufferSeqResult>(
                (Callback_TestIntf_opLongBufferSeq cb, TestIntf_OpLongBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opLongBufferSeq_name, cookie, completedCallback);
            _iceI_opLongBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opFloatBufferSeq> begin_opFloatBufferSeq(float[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opFloatBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opFloatBufferSeq(float[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opFloatBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opFloatBufferSeq(float[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opFloatBufferSeq(inSeq, context, callback, cookie, false);
        }

        public float[] end_opFloatBufferSeq(out float[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opFloatBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpFloatBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opFloatBufferSeq> begin_opFloatBufferSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opFloatBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opFloatBufferSeq, TestIntf_OpFloatBufferSeqResult>(
                (Callback_TestIntf_opFloatBufferSeq cb, TestIntf_OpFloatBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opFloatBufferSeq_name, cookie, completedCallback);
            _iceI_opFloatBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opDoubleBufferSeq> begin_opDoubleBufferSeq(double[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opDoubleBufferSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opDoubleBufferSeq(double[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDoubleBufferSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opDoubleBufferSeq(double[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opDoubleBufferSeq(inSeq, context, callback, cookie, false);
        }

        public double[] end_opDoubleBufferSeq(out double[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opDoubleBufferSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpDoubleBufferSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opDoubleBufferSeq> begin_opDoubleBufferSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opDoubleBufferSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opDoubleBufferSeq, TestIntf_OpDoubleBufferSeqResult>(
                (Callback_TestIntf_opDoubleBufferSeq cb, TestIntf_OpDoubleBufferSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opDoubleBufferSeq_name, cookie, completedCallback);
            _iceI_opDoubleBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_shutdown, object>(
                (Callback_TestIntf_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if(r == null)
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestIntfPrxHelper h = new TestIntfPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestIntfPrxHelper result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract C[] opCSeq(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        public abstract C[] opCArray(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        public abstract C[] opCList(C[] inSeq, out C[] outSeq, global::Ice.Current current = null);

        public abstract bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::Ice.Current current = null);

        public abstract byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::Ice.Current current = null);

        public abstract short[] opShortSeq(short[] inSeq, out short[] outSeq, global::Ice.Current current = null);

        public abstract int[] opIntSeq(int[] inSeq, out int[] outSeq, global::Ice.Current current = null);

        public abstract long[] opLongSeq(long[] inSeq, out long[] outSeq, global::Ice.Current current = null);

        public abstract float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::Ice.Current current = null);

        public abstract double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::Ice.Current current = null);

        public abstract string[] opStringSeq(string[] inSeq, out string[] outSeq, global::Ice.Current current = null);

        public abstract E[] opESeq(E[] inSeq, out E[] outSeq, global::Ice.Current current = null);

        public abstract S[] opSSeq(S[] inSeq, out S[] outSeq, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::Ice.Current current = null);

        public abstract string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::Ice.Current current = null);

        public abstract byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::Ice.Current current = null);

        public abstract short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::Ice.Current current = null);

        public abstract int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::Ice.Current current = null);

        public abstract long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::Ice.Current current = null);

        public abstract float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::Ice.Current current = null);

        public abstract double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_inSeq;
            iceP_inSeq = CSeqHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            C[] iceP_outSeq;
            var ret = obj.opCSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            CSeqHelper.write(ostr, iceP_outSeq);
            CSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCArray(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_inSeq;
            iceP_inSeq = CArrayHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            C[] iceP_outSeq;
            var ret = obj.opCArray(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            CArrayHelper.write(ostr, iceP_outSeq);
            CArrayHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opCList(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C[] iceP_inSeq;
            iceP_inSeq = CListHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            C[] iceP_outSeq;
            var ret = obj.opCList(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            CListHelper.write(ostr, iceP_outSeq);
            CListHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            inS.endReadParams();
            bool[] iceP_outSeq;
            var ret = obj.opBoolSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            BoolSeqHelper.write(ostr, iceP_outSeq);
            BoolSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_outSeq;
            var ret = obj.opByteSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            ByteSeqHelper.write(ostr, iceP_outSeq);
            ByteSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_inSeq;
            iceP_inSeq = ShortSeqHelper.read(istr);
            inS.endReadParams();
            short[] iceP_outSeq;
            var ret = obj.opShortSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            ShortSeqHelper.write(ostr, iceP_outSeq);
            ShortSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int[] iceP_inSeq;
            iceP_inSeq = IntSeqHelper.read(istr);
            inS.endReadParams();
            int[] iceP_outSeq;
            var ret = obj.opIntSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            IntSeqHelper.write(ostr, iceP_outSeq);
            IntSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long[] iceP_inSeq;
            iceP_inSeq = LongSeqHelper.read(istr);
            inS.endReadParams();
            long[] iceP_outSeq;
            var ret = obj.opLongSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            LongSeqHelper.write(ostr, iceP_outSeq);
            LongSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[] iceP_inSeq;
            iceP_inSeq = FloatSeqHelper.read(istr);
            inS.endReadParams();
            float[] iceP_outSeq;
            var ret = obj.opFloatSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            FloatSeqHelper.write(ostr, iceP_outSeq);
            FloatSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleSeqHelper.read(istr);
            inS.endReadParams();
            double[] iceP_outSeq;
            var ret = obj.opDoubleSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            DoubleSeqHelper.write(ostr, iceP_outSeq);
            DoubleSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_inSeq;
            iceP_inSeq = StringSeqHelper.read(istr);
            inS.endReadParams();
            string[] iceP_outSeq;
            var ret = obj.opStringSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            StringSeqHelper.write(ostr, iceP_outSeq);
            StringSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opESeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            E[] iceP_inSeq;
            iceP_inSeq = ESeqHelper.read(istr);
            inS.endReadParams();
            E[] iceP_outSeq;
            var ret = obj.opESeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            ESeqHelper.write(ostr, iceP_outSeq);
            ESeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            S[] iceP_inSeq;
            iceP_inSeq = SSeqHelper.read(istr);
            inS.endReadParams();
            S[] iceP_outSeq;
            var ret = obj.opSSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            SSeqHelper.write(ostr, iceP_outSeq);
            SSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq;
            iceP_inSeq = DSeqHelper.read(istr);
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<int, string>[] iceP_outSeq;
            var ret = obj.opDSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            DSeqHelper.write(ostr, iceP_outSeq);
            DSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSeqSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[][] iceP_inSeq;
            iceP_inSeq = StringSeqSeqHelper.read(istr);
            inS.endReadParams();
            string[][] iceP_outSeq;
            var ret = obj.opStringSeqSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            StringSeqSeqHelper.write(ostr, iceP_outSeq);
            StringSeqSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteBufferHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_outSeq;
            var ret = obj.opByteBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            ByteBufferHelper.write(ostr, iceP_outSeq);
            ByteBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_inSeq;
            iceP_inSeq = ShortBufferHelper.read(istr);
            inS.endReadParams();
            short[] iceP_outSeq;
            var ret = obj.opShortBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            ShortBufferHelper.write(ostr, iceP_outSeq);
            ShortBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int[] iceP_inSeq;
            iceP_inSeq = IntBufferHelper.read(istr);
            inS.endReadParams();
            int[] iceP_outSeq;
            var ret = obj.opIntBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            IntBufferHelper.write(ostr, iceP_outSeq);
            IntBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long[] iceP_inSeq;
            iceP_inSeq = LongBufferHelper.read(istr);
            inS.endReadParams();
            long[] iceP_outSeq;
            var ret = obj.opLongBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            LongBufferHelper.write(ostr, iceP_outSeq);
            LongBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[] iceP_inSeq;
            iceP_inSeq = FloatBufferHelper.read(istr);
            inS.endReadParams();
            float[] iceP_outSeq;
            var ret = obj.opFloatBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            FloatBufferHelper.write(ostr, iceP_outSeq);
            FloatBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleBufferSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleBufferHelper.read(istr);
            inS.endReadParams();
            double[] iceP_outSeq;
            var ret = obj.opDoubleBufferSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            DoubleBufferHelper.write(ostr, iceP_outSeq);
            DoubleBufferHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBoolSeq",
            "opByteBufferSeq",
            "opByteSeq",
            "opCArray",
            "opCList",
            "opCSeq",
            "opDSeq",
            "opDoubleBufferSeq",
            "opDoubleSeq",
            "opESeq",
            "opFloatBufferSeq",
            "opFloatSeq",
            "opIntBufferSeq",
            "opIntSeq",
            "opLongBufferSeq",
            "opLongSeq",
            "opSSeq",
            "opShortBufferSeq",
            "opShortSeq",
            "opStringSeq",
            "opStringSeqSeq",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opBoolSeq(this, inS, current);
                }
                case 5:
                {
                    return iceD_opByteBufferSeq(this, inS, current);
                }
                case 6:
                {
                    return iceD_opByteSeq(this, inS, current);
                }
                case 7:
                {
                    return iceD_opCArray(this, inS, current);
                }
                case 8:
                {
                    return iceD_opCList(this, inS, current);
                }
                case 9:
                {
                    return iceD_opCSeq(this, inS, current);
                }
                case 10:
                {
                    return iceD_opDSeq(this, inS, current);
                }
                case 11:
                {
                    return iceD_opDoubleBufferSeq(this, inS, current);
                }
                case 12:
                {
                    return iceD_opDoubleSeq(this, inS, current);
                }
                case 13:
                {
                    return iceD_opESeq(this, inS, current);
                }
                case 14:
                {
                    return iceD_opFloatBufferSeq(this, inS, current);
                }
                case 15:
                {
                    return iceD_opFloatSeq(this, inS, current);
                }
                case 16:
                {
                    return iceD_opIntBufferSeq(this, inS, current);
                }
                case 17:
                {
                    return iceD_opIntSeq(this, inS, current);
                }
                case 18:
                {
                    return iceD_opLongBufferSeq(this, inS, current);
                }
                case 19:
                {
                    return iceD_opLongSeq(this, inS, current);
                }
                case 20:
                {
                    return iceD_opSSeq(this, inS, current);
                }
                case 21:
                {
                    return iceD_opShortBufferSeq(this, inS, current);
                }
                case 22:
                {
                    return iceD_opShortSeq(this, inS, current);
                }
                case 23:
                {
                    return iceD_opStringSeq(this, inS, current);
                }
                case 24:
                {
                    return iceD_opStringSeqSeq(this, inS, current);
                }
                case 25:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
