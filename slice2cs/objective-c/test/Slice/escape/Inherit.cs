//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct Struct1
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int isa;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int retainCount;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Struct1(int isa, int retainCount)
        {
            this.isa = isa;
            this.retainCount = retainCount;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::Struct1");
            global::IceInternal.HashUtil.hashAdd(ref h_, isa);
            global::IceInternal.HashUtil.hashAdd(ref h_, retainCount);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(!(other is Struct1))
            {
                return false;
            }
            Struct1 o = (Struct1)other;
            if(!this.isa.Equals(o.isa))
            {
                return false;
            }
            if(!this.retainCount.Equals(o.retainCount))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(Struct1 lhs, Struct1 rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(Struct1 lhs, Struct1 rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.isa);
            ostr.writeInt(this.retainCount);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.isa = istr.readInt();
            this.retainCount = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, Struct1 v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static Struct1 ice_read(global::Ice.InputStream istr)
        {
            var v = new Struct1();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Exception1 : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int isa;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int reason;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int raise;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int callStackReturnAddresses;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int userInfo;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int reserved;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Exception1()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Exception1(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(int isa, int reason, int raise, int name, int callStackReturnAddresses, int userInfo, int reserved)
        {
            this.isa = isa;
            this.reason = reason;
            this.raise = raise;
            this.name = name;
            this.callStackReturnAddresses = callStackReturnAddresses;
            this.userInfo = userInfo;
            this.reserved = reserved;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Exception1(int isa, int reason, int raise, int name, int callStackReturnAddresses, int userInfo, int reserved)
        {
            _initDM(isa, reason, raise, name, callStackReturnAddresses, userInfo, reserved);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Exception1(int isa, int reason, int raise, int name, int callStackReturnAddresses, int userInfo, int reserved, global::System.Exception ex) : base(ex)
        {
            _initDM(isa, reason, raise, name, callStackReturnAddresses, userInfo, reserved);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Test::Exception1";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::Exception1", -1, true);
            ostr_.writeInt(isa);
            ostr_.writeInt(reason);
            ostr_.writeInt(raise);
            ostr_.writeInt(name);
            ostr_.writeInt(callStackReturnAddresses);
            ostr_.writeInt(userInfo);
            ostr_.writeInt(reserved);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            isa = istr_.readInt();
            reason = istr_.readInt();
            raise = istr_.readInt();
            name = istr_.readInt();
            callStackReturnAddresses = istr_.readInt();
            userInfo = istr_.readInt();
            reserved = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Class1 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int reason;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int isa;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int autorelease;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int classForCoder;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int copy;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int dealloc;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int description;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int hash;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int init;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int isProxy;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int mutableCopy;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int release;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int retain;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int retainCount;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int self;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int superclass;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int zone;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Class1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public Class1(int reason, int isa, int autorelease, int classForCoder, int copy, int dealloc, int description, int hash, int init, int isProxy, int mutableCopy, int release, int retain, int retainCount, int self, int superclass, int zone)
        {
            this.reason = reason;
            this.isa = isa;
            this.autorelease = autorelease;
            this.classForCoder = classForCoder;
            this.copy = copy;
            this.dealloc = dealloc;
            this.description = description;
            this.hash = hash;
            this.init = init;
            this.isProxy = isProxy;
            this.mutableCopy = mutableCopy;
            this.release = release;
            this.retain = retain;
            this.retainCount = retainCount;
            this.self = self;
            this.superclass = superclass;
            this.zone = zone;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Class1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(reason);
            ostr_.writeInt(isa);
            ostr_.writeInt(autorelease);
            ostr_.writeInt(classForCoder);
            ostr_.writeInt(copy);
            ostr_.writeInt(dealloc);
            ostr_.writeInt(description);
            ostr_.writeInt(hash);
            ostr_.writeInt(init);
            ostr_.writeInt(isProxy);
            ostr_.writeInt(mutableCopy);
            ostr_.writeInt(release);
            ostr_.writeInt(retain);
            ostr_.writeInt(retainCount);
            ostr_.writeInt(self);
            ostr_.writeInt(superclass);
            ostr_.writeInt(zone);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readInt();
            isa = istr_.readInt();
            autorelease = istr_.readInt();
            classForCoder = istr_.readInt();
            copy = istr_.readInt();
            dealloc = istr_.readInt();
            description = istr_.readInt();
            hash = istr_.readInt();
            init = istr_.readInt();
            isProxy = istr_.readInt();
            mutableCopy = istr_.readInt();
            release = istr_.readInt();
            retain = istr_.readInt();
            retainCount = istr_.readInt();
            self = istr_.readInt();
            superclass = istr_.readInt();
            zone = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Intf1 : global::Ice.Object, Intf1Operations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Intf2 : global::Ice.Object, Intf2Operations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_isa();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_reason();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_autorelease();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_classForCoder();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_copy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_dealloc();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_description();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_hash();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_init();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_isProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_mutableCopy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_release();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_retain();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_retainCount();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_self();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_superclass();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf1_zone();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_isa();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_reason();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_autorelease();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_classForCoder();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_copy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_dealloc();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_description();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_hash();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_init();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_isProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_mutableCopy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_release();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_retain();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_retainCount();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_self();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_superclass();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Intf2_zone();
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Intf1Prx : global::Ice.ObjectPrx
    {
        void isa(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task isaAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_isa> begin_isa(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_isa(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_isa(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_isa(global::Ice.AsyncResult asyncResult);

        void reason(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task reasonAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_reason> begin_reason(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_reason(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_reason(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_reason(global::Ice.AsyncResult asyncResult);

        void autorelease(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task autoreleaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_autorelease> begin_autorelease(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_autorelease(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_autorelease(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_autorelease(global::Ice.AsyncResult asyncResult);

        void classForCoder(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task classForCoderAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_classForCoder> begin_classForCoder(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_classForCoder(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_classForCoder(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_classForCoder(global::Ice.AsyncResult asyncResult);

        void copy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task copyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_copy> begin_copy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_copy(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_copy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_copy(global::Ice.AsyncResult asyncResult);

        void dealloc(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task deallocAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_dealloc> begin_dealloc(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_dealloc(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_dealloc(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_dealloc(global::Ice.AsyncResult asyncResult);

        void description(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task descriptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_description> begin_description(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_description(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_description(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_description(global::Ice.AsyncResult asyncResult);

        void hash(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task hashAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_hash> begin_hash(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_hash(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_hash(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_hash(global::Ice.AsyncResult asyncResult);

        void init(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_init> begin_init(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_init(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_init(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_init(global::Ice.AsyncResult asyncResult);

        void isProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task isProxyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_isProxy> begin_isProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_isProxy(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_isProxy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_isProxy(global::Ice.AsyncResult asyncResult);

        void mutableCopy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task mutableCopyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_mutableCopy> begin_mutableCopy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_mutableCopy(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_mutableCopy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_mutableCopy(global::Ice.AsyncResult asyncResult);

        void release(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task releaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_release> begin_release(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_release(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_release(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_release(global::Ice.AsyncResult asyncResult);

        void retain(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task retainAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_retain> begin_retain(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_retain(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_retain(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_retain(global::Ice.AsyncResult asyncResult);

        void retainCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task retainCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_retainCount> begin_retainCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_retainCount(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_retainCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_retainCount(global::Ice.AsyncResult asyncResult);

        void self(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task selfAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_self> begin_self(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_self(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_self(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_self(global::Ice.AsyncResult asyncResult);

        void superclass(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task superclassAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_superclass> begin_superclass(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_superclass(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_superclass(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_superclass(global::Ice.AsyncResult asyncResult);

        void zone(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task zoneAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf1_zone> begin_zone(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_zone(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_zone(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_zone(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Intf2Prx : global::Ice.ObjectPrx
    {
        void isa(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task isaAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_isa> begin_isa(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_isa(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_isa(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_isa(global::Ice.AsyncResult asyncResult);

        void reason(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task reasonAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_reason> begin_reason(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_reason(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_reason(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_reason(global::Ice.AsyncResult asyncResult);

        void autorelease(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task autoreleaseAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_autorelease> begin_autorelease(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_autorelease(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_autorelease(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_autorelease(global::Ice.AsyncResult asyncResult);

        void classForCoder(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task classForCoderAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_classForCoder> begin_classForCoder(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_classForCoder(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_classForCoder(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_classForCoder(global::Ice.AsyncResult asyncResult);

        void copy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task copyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_copy> begin_copy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_copy(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_copy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_copy(global::Ice.AsyncResult asyncResult);

        void dealloc(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task deallocAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_dealloc> begin_dealloc(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_dealloc(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_dealloc(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_dealloc(global::Ice.AsyncResult asyncResult);

        void description(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task descriptionAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_description> begin_description(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_description(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_description(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_description(global::Ice.AsyncResult asyncResult);

        void hash(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task hashAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_hash> begin_hash(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_hash(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_hash(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_hash(global::Ice.AsyncResult asyncResult);

        void init(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_init> begin_init(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_init(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_init(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_init(global::Ice.AsyncResult asyncResult);

        void isProxy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task isProxyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_isProxy> begin_isProxy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_isProxy(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_isProxy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_isProxy(global::Ice.AsyncResult asyncResult);

        void mutableCopy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task mutableCopyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_mutableCopy> begin_mutableCopy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_mutableCopy(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_mutableCopy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_mutableCopy(global::Ice.AsyncResult asyncResult);

        void release(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task releaseAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_release> begin_release(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_release(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_release(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_release(global::Ice.AsyncResult asyncResult);

        void retain(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task retainAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_retain> begin_retain(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_retain(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_retain(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_retain(global::Ice.AsyncResult asyncResult);

        void retainCount(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task retainCountAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_retainCount> begin_retainCount(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_retainCount(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_retainCount(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_retainCount(global::Ice.AsyncResult asyncResult);

        void self(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task selfAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_self> begin_self(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_self(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_self(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_self(global::Ice.AsyncResult asyncResult);

        void superclass(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task superclassAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_superclass> begin_superclass(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_superclass(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_superclass(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_superclass(global::Ice.AsyncResult asyncResult);

        void zone(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task zoneAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf2_zone> begin_zone(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_zone(int a, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_zone(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_zone(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Intf1Operations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void isa(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void reason(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void autorelease(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void classForCoder(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void copy(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void dealloc(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void description(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void hash(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void init(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void isProxy(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void mutableCopy(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void release(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void retain(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void retainCount(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void self(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void superclass(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void zone(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Intf2Operations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void isa(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void reason(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void autorelease(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void classForCoder(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void copy(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void dealloc(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void description(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void hash(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void init(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void isProxy(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void mutableCopy(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void release(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void retain(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void retainCount(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void self(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void superclass(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void zone(int a, global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class Intf1PrxHelper : global::Ice.ObjectPrxHelperBase, Intf1Prx
    {
        public Intf1PrxHelper()
        {
        }

        #region Synchronous operations

        public void isa(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_isaAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void reason(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_reasonAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void autorelease(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_autoreleaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void classForCoder(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_classForCoderAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void copy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_copyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void dealloc(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_deallocAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void description(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_descriptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void hash(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_hashAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void init(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void isProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_isProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void mutableCopy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_mutableCopyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void release(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_releaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void retain(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_retainAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void retainCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_retainCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void self(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_selfAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void superclass(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_superclassAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void zone(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_zoneAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task isaAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isaAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_isaAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_isa(context, synchronous, completed);
            return completed.Task;
        }

        private const string _isa_name = "isa";

        private void _iceI_isa(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _isa_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task reasonAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_reasonAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_reasonAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_reason(context, synchronous, completed);
            return completed.Task;
        }

        private const string _reason_name = "reason";

        private void _iceI_reason(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _reason_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task autoreleaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_autoreleaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_autoreleaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_autorelease(context, synchronous, completed);
            return completed.Task;
        }

        private const string _autorelease_name = "autorelease";

        private void _iceI_autorelease(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _autorelease_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task classForCoderAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_classForCoderAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_classForCoderAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_classForCoder(context, synchronous, completed);
            return completed.Task;
        }

        private const string _classForCoder_name = "classForCoder";

        private void _iceI_classForCoder(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _classForCoder_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task copyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_copyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_copyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_copy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _copy_name = "copy";

        private void _iceI_copy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _copy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task deallocAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_deallocAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_deallocAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_dealloc(context, synchronous, completed);
            return completed.Task;
        }

        private const string _dealloc_name = "dealloc";

        private void _iceI_dealloc(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _dealloc_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task descriptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_descriptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_descriptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_description(context, synchronous, completed);
            return completed.Task;
        }

        private const string _description_name = "description";

        private void _iceI_description(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _description_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task hashAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_hashAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_hashAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_hash(context, synchronous, completed);
            return completed.Task;
        }

        private const string _hash_name = "hash";

        private void _iceI_hash(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _hash_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task initAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task isProxyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_isProxyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_isProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _isProxy_name = "isProxy";

        private void _iceI_isProxy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _isProxy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task mutableCopyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_mutableCopyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_mutableCopyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_mutableCopy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _mutableCopy_name = "mutableCopy";

        private void _iceI_mutableCopy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _mutableCopy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task releaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_releaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_releaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_release(context, synchronous, completed);
            return completed.Task;
        }

        private const string _release_name = "release";

        private void _iceI_release(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _release_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task retainAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retainAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_retainAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_retain(context, synchronous, completed);
            return completed.Task;
        }

        private const string _retain_name = "retain";

        private void _iceI_retain(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _retain_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task retainCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retainCountAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_retainCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_retainCount(context, synchronous, completed);
            return completed.Task;
        }

        private const string _retainCount_name = "retainCount";

        private void _iceI_retainCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _retainCount_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task selfAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_selfAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_selfAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_self(context, synchronous, completed);
            return completed.Task;
        }

        private const string _self_name = "self";

        private void _iceI_self(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _self_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task superclassAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_superclassAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_superclassAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_superclass(context, synchronous, completed);
            return completed.Task;
        }

        private const string _superclass_name = "superclass";

        private void _iceI_superclass(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _superclass_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task zoneAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_zoneAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_zoneAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_zone(context, synchronous, completed);
            return completed.Task;
        }

        private const string _zone_name = "zone";

        private void _iceI_zone(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _zone_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Intf1_isa> begin_isa(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_isa(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_isa(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isa(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_isa(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isa(context, callback, cookie, false);
        }

        public void end_isa(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isa_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_isa> begin_isa(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_isa, object>(
                (Callback_Intf1_isa cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _isa_name, cookie, completedCallback);
            _iceI_isa(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_reason> begin_reason(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_reason(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_reason(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_reason(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_reason(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_reason(context, callback, cookie, false);
        }

        public void end_reason(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _reason_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_reason> begin_reason(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_reason, object>(
                (Callback_Intf1_reason cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _reason_name, cookie, completedCallback);
            _iceI_reason(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_autorelease> begin_autorelease(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_autorelease(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_autorelease(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_autorelease(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_autorelease(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_autorelease(context, callback, cookie, false);
        }

        public void end_autorelease(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _autorelease_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_autorelease> begin_autorelease(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_autorelease, object>(
                (Callback_Intf1_autorelease cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _autorelease_name, cookie, completedCallback);
            _iceI_autorelease(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_classForCoder> begin_classForCoder(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_classForCoder(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_classForCoder(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_classForCoder(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_classForCoder(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_classForCoder(context, callback, cookie, false);
        }

        public void end_classForCoder(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _classForCoder_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_classForCoder> begin_classForCoder(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_classForCoder, object>(
                (Callback_Intf1_classForCoder cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _classForCoder_name, cookie, completedCallback);
            _iceI_classForCoder(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_copy> begin_copy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_copy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_copy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_copy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(context, callback, cookie, false);
        }

        public void end_copy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _copy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_copy> begin_copy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_copy, object>(
                (Callback_Intf1_copy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _copy_name, cookie, completedCallback);
            _iceI_copy(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_dealloc> begin_dealloc(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_dealloc(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_dealloc(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dealloc(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_dealloc(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dealloc(context, callback, cookie, false);
        }

        public void end_dealloc(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _dealloc_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_dealloc> begin_dealloc(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_dealloc, object>(
                (Callback_Intf1_dealloc cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _dealloc_name, cookie, completedCallback);
            _iceI_dealloc(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_description> begin_description(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_description(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_description(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_description(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_description(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_description(context, callback, cookie, false);
        }

        public void end_description(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _description_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_description> begin_description(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_description, object>(
                (Callback_Intf1_description cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _description_name, cookie, completedCallback);
            _iceI_description(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_hash> begin_hash(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_hash(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_hash(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hash(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_hash(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hash(context, callback, cookie, false);
        }

        public void end_hash(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _hash_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_hash> begin_hash(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_hash, object>(
                (Callback_Intf1_hash cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _hash_name, cookie, completedCallback);
            _iceI_hash(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_init> begin_init(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_init(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_init(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_init(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(context, callback, cookie, false);
        }

        public void end_init(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _init_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_init> begin_init(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_init, object>(
                (Callback_Intf1_init cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _init_name, cookie, completedCallback);
            _iceI_init(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_isProxy> begin_isProxy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_isProxy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_isProxy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isProxy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_isProxy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isProxy(context, callback, cookie, false);
        }

        public void end_isProxy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isProxy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_isProxy> begin_isProxy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_isProxy, object>(
                (Callback_Intf1_isProxy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _isProxy_name, cookie, completedCallback);
            _iceI_isProxy(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_mutableCopy> begin_mutableCopy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_mutableCopy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_mutableCopy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_mutableCopy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_mutableCopy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_mutableCopy(context, callback, cookie, false);
        }

        public void end_mutableCopy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _mutableCopy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_mutableCopy> begin_mutableCopy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_mutableCopy, object>(
                (Callback_Intf1_mutableCopy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _mutableCopy_name, cookie, completedCallback);
            _iceI_mutableCopy(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_release> begin_release(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_release(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_release(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_release(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_release(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_release(context, callback, cookie, false);
        }

        public void end_release(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _release_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_release> begin_release(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_release, object>(
                (Callback_Intf1_release cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _release_name, cookie, completedCallback);
            _iceI_release(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_retain> begin_retain(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retain(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retain(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retain(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retain(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retain(context, callback, cookie, false);
        }

        public void end_retain(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retain_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_retain> begin_retain(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_retain, object>(
                (Callback_Intf1_retain cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _retain_name, cookie, completedCallback);
            _iceI_retain(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_retainCount> begin_retainCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retainCount(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retainCount(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retainCount(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retainCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retainCount(context, callback, cookie, false);
        }

        public void end_retainCount(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retainCount_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_retainCount> begin_retainCount(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_retainCount, object>(
                (Callback_Intf1_retainCount cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _retainCount_name, cookie, completedCallback);
            _iceI_retainCount(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_self> begin_self(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_self(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_self(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_self(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_self(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_self(context, callback, cookie, false);
        }

        public void end_self(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _self_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_self> begin_self(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_self, object>(
                (Callback_Intf1_self cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _self_name, cookie, completedCallback);
            _iceI_self(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_superclass> begin_superclass(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_superclass(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_superclass(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_superclass(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_superclass(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_superclass(context, callback, cookie, false);
        }

        public void end_superclass(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _superclass_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_superclass> begin_superclass(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_superclass, object>(
                (Callback_Intf1_superclass cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _superclass_name, cookie, completedCallback);
            _iceI_superclass(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf1_zone> begin_zone(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_zone(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_zone(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_zone(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_zone(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_zone(context, callback, cookie, false);
        }

        public void end_zone(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _zone_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf1_zone> begin_zone(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf1_zone, object>(
                (Callback_Intf1_zone cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _zone_name, cookie, completedCallback);
            _iceI_zone(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static Intf1Prx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Intf1Prx r = b as Intf1Prx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                Intf1PrxHelper h = new Intf1PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf1Prx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Intf1Prx r = b as Intf1Prx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                Intf1PrxHelper h = new Intf1PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf1Prx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    Intf1PrxHelper h = new Intf1PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Intf1Prx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    Intf1PrxHelper h = new Intf1PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Intf1Prx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Intf1Prx r = b as Intf1Prx;
            if(r == null)
            {
                Intf1PrxHelper h = new Intf1PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf1Prx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            Intf1PrxHelper h = new Intf1PrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Intf1"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, Intf1Prx v)
        {
            ostr.writeProxy(v);
        }

        public static Intf1Prx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                Intf1PrxHelper result = new Intf1PrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class Intf2PrxHelper : global::Ice.ObjectPrxHelperBase, Intf2Prx
    {
        public Intf2PrxHelper()
        {
        }

        #region Synchronous operations

        public void isa(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_isaAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void reason(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_reasonAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void autorelease(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_autoreleaseAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void classForCoder(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_classForCoderAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void copy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_copyAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void dealloc(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_deallocAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void description(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_descriptionAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void hash(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_hashAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void init(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void isProxy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_isProxyAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void mutableCopy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_mutableCopyAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void release(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_releaseAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void retain(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_retainAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void retainCount(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_retainCountAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void self(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_selfAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void superclass(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_superclassAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void zone(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_zoneAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task isaAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isaAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_isaAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_isa(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _isa_name = "isa";

        private void _iceI_isa(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _isa_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task reasonAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_reasonAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_reasonAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_reason(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _reason_name = "reason";

        private void _iceI_reason(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _reason_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task autoreleaseAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_autoreleaseAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_autoreleaseAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_autorelease(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _autorelease_name = "autorelease";

        private void _iceI_autorelease(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _autorelease_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task classForCoderAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_classForCoderAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_classForCoderAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_classForCoder(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _classForCoder_name = "classForCoder";

        private void _iceI_classForCoder(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _classForCoder_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task copyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_copyAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_copyAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_copy(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _copy_name = "copy";

        private void _iceI_copy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _copy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task deallocAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_deallocAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_deallocAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_dealloc(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _dealloc_name = "dealloc";

        private void _iceI_dealloc(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _dealloc_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task descriptionAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_descriptionAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_descriptionAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_description(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _description_name = "description";

        private void _iceI_description(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _description_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task hashAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_hashAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_hashAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_hash(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _hash_name = "hash";

        private void _iceI_hash(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _hash_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task initAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task isProxyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isProxyAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_isProxyAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_isProxy(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _isProxy_name = "isProxy";

        private void _iceI_isProxy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _isProxy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task mutableCopyAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_mutableCopyAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_mutableCopyAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_mutableCopy(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _mutableCopy_name = "mutableCopy";

        private void _iceI_mutableCopy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _mutableCopy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task releaseAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_releaseAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_releaseAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_release(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _release_name = "release";

        private void _iceI_release(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _release_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task retainAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retainAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_retainAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_retain(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _retain_name = "retain";

        private void _iceI_retain(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _retain_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task retainCountAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retainCountAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_retainCountAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_retainCount(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _retainCount_name = "retainCount";

        private void _iceI_retainCount(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _retainCount_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task selfAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_selfAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_selfAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_self(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _self_name = "self";

        private void _iceI_self(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _self_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task superclassAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_superclassAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_superclassAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_superclass(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _superclass_name = "superclass";

        private void _iceI_superclass(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _superclass_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task zoneAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_zoneAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_zoneAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_zone(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _zone_name = "zone";

        private void _iceI_zone(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _zone_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Intf2_isa> begin_isa(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_isa(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_isa(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isa(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_isa(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isa(a, context, callback, cookie, false);
        }

        public void end_isa(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isa_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_isa> begin_isa(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_isa, object>(
                (Callback_Intf2_isa cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _isa_name, cookie, completedCallback);
            _iceI_isa(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_reason> begin_reason(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_reason(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_reason(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_reason(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_reason(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_reason(a, context, callback, cookie, false);
        }

        public void end_reason(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _reason_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_reason> begin_reason(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_reason, object>(
                (Callback_Intf2_reason cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _reason_name, cookie, completedCallback);
            _iceI_reason(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_autorelease> begin_autorelease(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_autorelease(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_autorelease(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_autorelease(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_autorelease(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_autorelease(a, context, callback, cookie, false);
        }

        public void end_autorelease(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _autorelease_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_autorelease> begin_autorelease(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_autorelease, object>(
                (Callback_Intf2_autorelease cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _autorelease_name, cookie, completedCallback);
            _iceI_autorelease(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_classForCoder> begin_classForCoder(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_classForCoder(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_classForCoder(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_classForCoder(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_classForCoder(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_classForCoder(a, context, callback, cookie, false);
        }

        public void end_classForCoder(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _classForCoder_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_classForCoder> begin_classForCoder(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_classForCoder, object>(
                (Callback_Intf2_classForCoder cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _classForCoder_name, cookie, completedCallback);
            _iceI_classForCoder(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_copy> begin_copy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_copy(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_copy(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_copy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_copy(a, context, callback, cookie, false);
        }

        public void end_copy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _copy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_copy> begin_copy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_copy, object>(
                (Callback_Intf2_copy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _copy_name, cookie, completedCallback);
            _iceI_copy(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_dealloc> begin_dealloc(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_dealloc(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_dealloc(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dealloc(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_dealloc(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_dealloc(a, context, callback, cookie, false);
        }

        public void end_dealloc(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _dealloc_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_dealloc> begin_dealloc(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_dealloc, object>(
                (Callback_Intf2_dealloc cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _dealloc_name, cookie, completedCallback);
            _iceI_dealloc(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_description> begin_description(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_description(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_description(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_description(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_description(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_description(a, context, callback, cookie, false);
        }

        public void end_description(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _description_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_description> begin_description(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_description, object>(
                (Callback_Intf2_description cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _description_name, cookie, completedCallback);
            _iceI_description(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_hash> begin_hash(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_hash(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_hash(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hash(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_hash(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hash(a, context, callback, cookie, false);
        }

        public void end_hash(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _hash_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_hash> begin_hash(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_hash, object>(
                (Callback_Intf2_hash cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _hash_name, cookie, completedCallback);
            _iceI_hash(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_init> begin_init(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_init(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_init(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_init(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_init(a, context, callback, cookie, false);
        }

        public void end_init(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _init_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_init> begin_init(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_init, object>(
                (Callback_Intf2_init cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _init_name, cookie, completedCallback);
            _iceI_init(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_isProxy> begin_isProxy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_isProxy(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_isProxy(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isProxy(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_isProxy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isProxy(a, context, callback, cookie, false);
        }

        public void end_isProxy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isProxy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_isProxy> begin_isProxy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_isProxy, object>(
                (Callback_Intf2_isProxy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _isProxy_name, cookie, completedCallback);
            _iceI_isProxy(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_mutableCopy> begin_mutableCopy(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_mutableCopy(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_mutableCopy(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_mutableCopy(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_mutableCopy(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_mutableCopy(a, context, callback, cookie, false);
        }

        public void end_mutableCopy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _mutableCopy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_mutableCopy> begin_mutableCopy(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_mutableCopy, object>(
                (Callback_Intf2_mutableCopy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _mutableCopy_name, cookie, completedCallback);
            _iceI_mutableCopy(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_release> begin_release(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_release(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_release(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_release(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_release(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_release(a, context, callback, cookie, false);
        }

        public void end_release(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _release_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_release> begin_release(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_release, object>(
                (Callback_Intf2_release cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _release_name, cookie, completedCallback);
            _iceI_release(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_retain> begin_retain(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retain(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retain(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retain(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retain(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retain(a, context, callback, cookie, false);
        }

        public void end_retain(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retain_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_retain> begin_retain(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_retain, object>(
                (Callback_Intf2_retain cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _retain_name, cookie, completedCallback);
            _iceI_retain(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_retainCount> begin_retainCount(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retainCount(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retainCount(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retainCount(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retainCount(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retainCount(a, context, callback, cookie, false);
        }

        public void end_retainCount(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retainCount_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_retainCount> begin_retainCount(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_retainCount, object>(
                (Callback_Intf2_retainCount cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _retainCount_name, cookie, completedCallback);
            _iceI_retainCount(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_self> begin_self(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_self(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_self(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_self(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_self(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_self(a, context, callback, cookie, false);
        }

        public void end_self(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _self_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_self> begin_self(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_self, object>(
                (Callback_Intf2_self cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _self_name, cookie, completedCallback);
            _iceI_self(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_superclass> begin_superclass(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_superclass(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_superclass(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_superclass(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_superclass(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_superclass(a, context, callback, cookie, false);
        }

        public void end_superclass(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _superclass_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_superclass> begin_superclass(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_superclass, object>(
                (Callback_Intf2_superclass cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _superclass_name, cookie, completedCallback);
            _iceI_superclass(iceP_a, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf2_zone> begin_zone(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_zone(a, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_zone(int a, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_zone(a, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_zone(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_zone(a, context, callback, cookie, false);
        }

        public void end_zone(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _zone_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf2_zone> begin_zone(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf2_zone, object>(
                (Callback_Intf2_zone cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _zone_name, cookie, completedCallback);
            _iceI_zone(iceP_a, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static Intf2Prx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Intf2Prx r = b as Intf2Prx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                Intf2PrxHelper h = new Intf2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf2Prx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Intf2Prx r = b as Intf2Prx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                Intf2PrxHelper h = new Intf2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf2Prx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    Intf2PrxHelper h = new Intf2PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Intf2Prx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    Intf2PrxHelper h = new Intf2PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Intf2Prx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Intf2Prx r = b as Intf2Prx;
            if(r == null)
            {
                Intf2PrxHelper h = new Intf2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Intf2Prx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            Intf2PrxHelper h = new Intf2PrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Intf2"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, Intf2Prx v)
        {
            ostr.writeProxy(v);
        }

        public static Intf2Prx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                Intf2PrxHelper result = new Intf2PrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class Intf1Disp_ : global::Ice.ObjectImpl, Intf1
    {
        #region Slice operations

        public abstract void isa(global::Ice.Current current = null);

        public abstract void reason(global::Ice.Current current = null);

        public abstract void autorelease(global::Ice.Current current = null);

        public abstract void classForCoder(global::Ice.Current current = null);

        public abstract void copy(global::Ice.Current current = null);

        public abstract void dealloc(global::Ice.Current current = null);

        public abstract void description(global::Ice.Current current = null);

        public abstract void hash(global::Ice.Current current = null);

        public abstract void init(global::Ice.Current current = null);

        public abstract void isProxy(global::Ice.Current current = null);

        public abstract void mutableCopy(global::Ice.Current current = null);

        public abstract void release(global::Ice.Current current = null);

        public abstract void retain(global::Ice.Current current = null);

        public abstract void retainCount(global::Ice.Current current = null);

        public abstract void self(global::Ice.Current current = null);

        public abstract void superclass(global::Ice.Current current = null);

        public abstract void zone(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Intf1"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isa(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.isa(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_reason(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.reason(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_autorelease(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.autorelease(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_classForCoder(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.classForCoder(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_copy(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.copy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_dealloc(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.dealloc(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_description(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.description(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_hash(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.hash(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_init(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.init(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isProxy(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.isProxy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_mutableCopy(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.mutableCopy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_release(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.release(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retain(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.retain(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retainCount(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.retainCount(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_self(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.self(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_superclass(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.superclass(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_zone(Intf1 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.zone(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "autorelease",
            "classForCoder",
            "copy",
            "dealloc",
            "description",
            "hash",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "init",
            "isProxy",
            "isa",
            "mutableCopy",
            "reason",
            "release",
            "retain",
            "retainCount",
            "self",
            "superclass",
            "zone"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_autorelease(this, inS, current);
                }
                case 1:
                {
                    return iceD_classForCoder(this, inS, current);
                }
                case 2:
                {
                    return iceD_copy(this, inS, current);
                }
                case 3:
                {
                    return iceD_dealloc(this, inS, current);
                }
                case 4:
                {
                    return iceD_description(this, inS, current);
                }
                case 5:
                {
                    return iceD_hash(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return iceD_init(this, inS, current);
                }
                case 11:
                {
                    return iceD_isProxy(this, inS, current);
                }
                case 12:
                {
                    return iceD_isa(this, inS, current);
                }
                case 13:
                {
                    return iceD_mutableCopy(this, inS, current);
                }
                case 14:
                {
                    return iceD_reason(this, inS, current);
                }
                case 15:
                {
                    return iceD_release(this, inS, current);
                }
                case 16:
                {
                    return iceD_retain(this, inS, current);
                }
                case 17:
                {
                    return iceD_retainCount(this, inS, current);
                }
                case 18:
                {
                    return iceD_self(this, inS, current);
                }
                case 19:
                {
                    return iceD_superclass(this, inS, current);
                }
                case 20:
                {
                    return iceD_zone(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class Intf2Disp_ : global::Ice.ObjectImpl, Intf2
    {
        #region Slice operations

        public abstract void isa(int a, global::Ice.Current current = null);

        public abstract void reason(int a, global::Ice.Current current = null);

        public abstract void autorelease(int a, global::Ice.Current current = null);

        public abstract void classForCoder(int a, global::Ice.Current current = null);

        public abstract void copy(int a, global::Ice.Current current = null);

        public abstract void dealloc(int a, global::Ice.Current current = null);

        public abstract void description(int a, global::Ice.Current current = null);

        public abstract void hash(int a, global::Ice.Current current = null);

        public abstract void init(int a, global::Ice.Current current = null);

        public abstract void isProxy(int a, global::Ice.Current current = null);

        public abstract void mutableCopy(int a, global::Ice.Current current = null);

        public abstract void release(int a, global::Ice.Current current = null);

        public abstract void retain(int a, global::Ice.Current current = null);

        public abstract void retainCount(int a, global::Ice.Current current = null);

        public abstract void self(int a, global::Ice.Current current = null);

        public abstract void superclass(int a, global::Ice.Current current = null);

        public abstract void zone(int a, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Intf2"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isa(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.isa(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_reason(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.reason(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_autorelease(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.autorelease(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_classForCoder(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.classForCoder(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_copy(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.copy(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_dealloc(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.dealloc(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_description(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.description(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_hash(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.hash(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_init(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.init(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isProxy(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.isProxy(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_mutableCopy(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.mutableCopy(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_release(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.release(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retain(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.retain(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retainCount(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.retainCount(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_self(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.self(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_superclass(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.superclass(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_zone(Intf2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.zone(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "autorelease",
            "classForCoder",
            "copy",
            "dealloc",
            "description",
            "hash",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "init",
            "isProxy",
            "isa",
            "mutableCopy",
            "reason",
            "release",
            "retain",
            "retainCount",
            "self",
            "superclass",
            "zone"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_autorelease(this, inS, current);
                }
                case 1:
                {
                    return iceD_classForCoder(this, inS, current);
                }
                case 2:
                {
                    return iceD_copy(this, inS, current);
                }
                case 3:
                {
                    return iceD_dealloc(this, inS, current);
                }
                case 4:
                {
                    return iceD_description(this, inS, current);
                }
                case 5:
                {
                    return iceD_hash(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return iceD_init(this, inS, current);
                }
                case 11:
                {
                    return iceD_isProxy(this, inS, current);
                }
                case 12:
                {
                    return iceD_isa(this, inS, current);
                }
                case 13:
                {
                    return iceD_mutableCopy(this, inS, current);
                }
                case 14:
                {
                    return iceD_reason(this, inS, current);
                }
                case 15:
                {
                    return iceD_release(this, inS, current);
                }
                case 16:
                {
                    return iceD_retain(this, inS, current);
                }
                case 17:
                {
                    return iceD_retainCount(this, inS, current);
                }
                case 18:
                {
                    return iceD_self(this, inS, current);
                }
                case 19:
                {
                    return iceD_superclass(this, inS, current);
                }
                case 20:
                {
                    return iceD_zone(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
