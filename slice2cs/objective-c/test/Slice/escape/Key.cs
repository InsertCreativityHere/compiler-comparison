//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace and
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum @continue
    {
        asm
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class continueHelper
    {
        public static void write(global::Ice.OutputStream ostr, @continue v)
        {
            ostr.writeEnum((int)v, 0);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static @continue read(global::Ice.InputStream istr)
        {
            @continue v;
            v = (@continue)istr.readEnum(0);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct auto
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int @default;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public auto(int @default)
        {
            this.@default = @default;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::and::auto");
            global::IceInternal.HashUtil.hashAdd(ref h_, @default);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(!(other is auto))
            {
                return false;
            }
            auto o = (auto)other;
            if(!this.@default.Equals(o.@default))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(auto lhs, auto rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(auto lhs, auto rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.@default);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.@default = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, auto v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static auto ice_read(global::Ice.InputStream istr)
        {
            var v = new auto();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class delete : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string @else;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delete()
        {
            this.@else = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delete(string @else)
        {
            this.@else = @else;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::and::delete");
            global::IceInternal.HashUtil.hashAdd(ref h_, @else);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            delete o = (delete)other;
            if(this.@else == null)
            {
                if(o.@else != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.@else.Equals(o.@else))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(delete lhs, delete rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(delete lhs, delete rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.@else);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.@else = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, delete v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static delete ice_read(global::Ice.InputStream istr)
        {
            var v = new delete();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly delete _nullMarshalValue = new delete();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @break : global::Ice.Object, breakOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @char : global::Ice.Object, charOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @switch : global::Ice.Object, switchOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1012")]
    public partial class @do : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int @if;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @do()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @do(int @if)
        {
            this.@if = @if;
            ice_initialize();
        }

        #endregion

        private const string _id = "::and::do";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(@if);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @if = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class @return : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int signed;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @return()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @return(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(int signed)
        {
            this.signed = signed;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @return(int signed)
        {
            _initDM(signed);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @return(int signed, global::System.Exception ex) : base(ex)
        {
            _initDM(signed);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::and::return";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::and::return", -1, true);
            ostr_.writeInt(signed);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            signed = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class @sizeof : @return
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int @static;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int @switch;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @sizeof()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @sizeof(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(int @static, int @switch)
        {
            this.@static = @static;
            this.@switch = @switch;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @sizeof(int signed, int @static, int @switch) : base(signed)
        {
            _initDM(@static, @switch);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public @sizeof(int signed, int @static, int @switch, global::System.Exception ex) : base(signed, ex)
        {
            _initDM(@static, @switch);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::and::sizeof";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::and::sizeof", -1, false);
            ostr_.writeInt(@static);
            ostr_.writeInt(@switch);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @static = istr_.readInt();
            @switch = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface friend : global::Ice.Object, friendOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class template
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class @this
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class @throw
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class typedef
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class typeid
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class typename
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class union
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class unsigned
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class @using
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class @virtual
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class @while
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class xor
    {
        public const int value = 0;
    }
}

namespace and
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_break_case(int @try);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_char_explicit();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_switch_foo(int @volatile);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_switch_foo2(int nil);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_switch_foo3(int nil);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_friend_goto(auto ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_friend_objc();
}

namespace and
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface breakPrx : global::Ice.ObjectPrx
    {
        void @case(int @catch, out int @try, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> caseAsync(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_break_case> begin_case(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_case(int @catch, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_case(int @catch, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_case(out int @try, global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface charPrx : global::Ice.ObjectPrx
    {
        void @explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task explicitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_char_explicit> begin_explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_explicit(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_explicit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_explicit(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface switchPrx : global::Ice.ObjectPrx
    {
        void foo(charPrx export, out int @volatile, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> fooAsync(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_switch_foo> begin_foo(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_foo(out int @volatile, global::Ice.AsyncResult asyncResult);

        void foo2(charPrx export, int YES, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> foo2Async(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_switch_foo2> begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_foo2(out int nil, global::Ice.AsyncResult asyncResult);

        void foo3(charPrx export, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> foo3Async(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_switch_foo3> begin_foo3(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_foo3(out int nil, global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface doPrx : charPrx, breakPrx, switchPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface friendPrx : global::Ice.ObjectPrx
    {
        auto @goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<auto> gotoAsync(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_friend_goto> begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        auto end_goto(global::Ice.AsyncResult asyncResult);

        void objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task objcAsync(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_friend_objc> begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_objc(global::Ice.AsyncResult asyncResult);
    }
}

namespace and
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface breakOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void @case(int @catch, out int @try, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface charOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void @explicit(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface switchOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void foo(charPrx export, out int @volatile, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void foo2(charPrx export, int YES, out int nil, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void foo3(charPrx export, out int nil, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface doOperations_ : charOperations_, breakOperations_, switchOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface friendOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        auto @goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.Current current = null);
    }
}

namespace and
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class breakPrxHelper : global::Ice.ObjectPrxHelperBase, breakPrx
    {
        public breakPrxHelper()
        {
        }

        #region Synchronous operations

        public void @case(int @catch, out int @try, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @try = _iceI_caseAsync(@catch, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<int> caseAsync(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_caseAsync(@catch, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_caseAsync(int iceP_catch, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_case_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_case(iceP_catch, context, synchronous, completed);
            return completed.Task;
        }

        private const string _case_name = "case";

        private void _iceI_case(int iceP_catch, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _case_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_catch);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_try;
                    iceP_try = istr.readInt();
                    return iceP_try;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_break_case> begin_case(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_case(@catch, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_case(int @catch, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_case(@catch, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_case(int @catch, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_case(@catch, context, callback, cookie, false);
        }

        public void end_case(out int @try, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _case_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            @try = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_break_case> begin_case(int iceP_catch, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_case_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_break_case, int>(
                (Callback_break_case cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _case_name, cookie, completedCallback);
            _iceI_case(iceP_catch, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static breakPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            breakPrx r = b as breakPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                breakPrxHelper h = new breakPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static breakPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            breakPrx r = b as breakPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                breakPrxHelper h = new breakPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static breakPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    breakPrxHelper h = new breakPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static breakPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    breakPrxHelper h = new breakPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static breakPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            breakPrx r = b as breakPrx;
            if(r == null)
            {
                breakPrxHelper h = new breakPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static breakPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            breakPrxHelper h = new breakPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::break"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, breakPrx v)
        {
            ostr.writeProxy(v);
        }

        public static breakPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                breakPrxHelper result = new breakPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class charPrxHelper : global::Ice.ObjectPrxHelperBase, charPrx
    {
        public charPrxHelper()
        {
        }

        #region Synchronous operations

        public void @explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_explicitAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task explicitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_explicitAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_explicitAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_explicit(context, synchronous, completed);
            return completed.Task;
        }

        private const string _explicit_name = "explicit";

        private void _iceI_explicit(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _explicit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_char_explicit> begin_explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_explicit(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_explicit(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_explicit(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_explicit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_explicit(context, callback, cookie, false);
        }

        public void end_explicit(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _explicit_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_char_explicit> begin_explicit(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_char_explicit, object>(
                (Callback_char_explicit cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _explicit_name, cookie, completedCallback);
            _iceI_explicit(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static charPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            charPrx r = b as charPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                charPrxHelper h = new charPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static charPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            charPrx r = b as charPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                charPrxHelper h = new charPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static charPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    charPrxHelper h = new charPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static charPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    charPrxHelper h = new charPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static charPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            charPrx r = b as charPrx;
            if(r == null)
            {
                charPrxHelper h = new charPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static charPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            charPrxHelper h = new charPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::char"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, charPrx v)
        {
            ostr.writeProxy(v);
        }

        public static charPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                charPrxHelper result = new charPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class switchPrxHelper : global::Ice.ObjectPrxHelperBase, switchPrx
    {
        public switchPrxHelper()
        {
        }

        #region Synchronous operations

        public void foo(charPrx export, out int @volatile, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @volatile = _iceI_fooAsync(export, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foo2(charPrx export, int YES, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                nil = _iceI_foo2Async(export, YES, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foo3(charPrx export, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                nil = _iceI_foo3Async(export, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<int> fooAsync(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_fooAsync(export, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_fooAsync(charPrx iceP_export, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo(iceP_export, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo_name = "foo";

        private void _iceI_foo(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_volatile;
                    iceP_volatile = istr.readInt();
                    return iceP_volatile;
                });
        }

        public global::System.Threading.Tasks.Task<int> foo2Async(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_foo2Async(export, YES, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_foo2Async(charPrx iceP_export, int iceP_YES, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo2(iceP_export, iceP_YES, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo2_name = "foo2";

        private void _iceI_foo2(charPrx iceP_export, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                    ostr.writeInt(iceP_YES);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_nil;
                    iceP_nil = istr.readInt();
                    return iceP_nil;
                });
        }

        public global::System.Threading.Tasks.Task<int> foo3Async(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_foo3Async(export, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_foo3Async(charPrx iceP_export, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo3(iceP_export, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo3_name = "foo3";

        private void _iceI_foo3(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_nil;
                    iceP_nil = istr.readInt();
                    return iceP_nil;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_switch_foo> begin_foo(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo(export, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo(export, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo(export, context, callback, cookie, false);
        }

        public void end_foo(out int @volatile, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            @volatile = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo> begin_foo(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo, int>(
                (Callback_switch_foo cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo_name, cookie, completedCallback);
            _iceI_foo(iceP_export, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_switch_foo2> begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo2(export, YES, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo2(export, YES, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo2(export, YES, context, callback, cookie, false);
        }

        public void end_foo2(out int nil, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            nil = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo2> begin_foo2(charPrx iceP_export, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo2, int>(
                (Callback_switch_foo2 cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo2_name, cookie, completedCallback);
            _iceI_foo2(iceP_export, iceP_YES, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_switch_foo3> begin_foo3(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo3(export, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo3(export, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo3(export, context, callback, cookie, false);
        }

        public void end_foo3(out int nil, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo3_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            nil = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo3> begin_foo3(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo3_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo3, int>(
                (Callback_switch_foo3 cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo3_name, cookie, completedCallback);
            _iceI_foo3(iceP_export, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static switchPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            switchPrx r = b as switchPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                switchPrxHelper h = new switchPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static switchPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            switchPrx r = b as switchPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                switchPrxHelper h = new switchPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static switchPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    switchPrxHelper h = new switchPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static switchPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    switchPrxHelper h = new switchPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static switchPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            switchPrx r = b as switchPrx;
            if(r == null)
            {
                switchPrxHelper h = new switchPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static switchPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            switchPrxHelper h = new switchPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::switch"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, switchPrx v)
        {
            ostr.writeProxy(v);
        }

        public static switchPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                switchPrxHelper result = new switchPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class doPrxHelper : global::Ice.ObjectPrxHelperBase, doPrx
    {
        public doPrxHelper()
        {
        }

        #region Synchronous operations

        public void @explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_explicitAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void @case(int @catch, out int @try, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @try = _iceI_caseAsync(@catch, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foo(charPrx export, out int @volatile, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                @volatile = _iceI_fooAsync(export, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foo2(charPrx export, int YES, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                nil = _iceI_foo2Async(export, YES, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foo3(charPrx export, out int nil, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                nil = _iceI_foo3Async(export, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task explicitAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_explicitAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_explicitAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_explicit(context, synchronous, completed);
            return completed.Task;
        }

        private const string _explicit_name = "explicit";

        private void _iceI_explicit(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _explicit_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<int> caseAsync(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_caseAsync(@catch, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_caseAsync(int iceP_catch, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_case_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_case(iceP_catch, context, synchronous, completed);
            return completed.Task;
        }

        private const string _case_name = "case";

        private void _iceI_case(int iceP_catch, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _case_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_catch);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_try;
                    iceP_try = istr.readInt();
                    return iceP_try;
                });
        }

        public global::System.Threading.Tasks.Task<int> fooAsync(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_fooAsync(export, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_fooAsync(charPrx iceP_export, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo(iceP_export, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo_name = "foo";

        private void _iceI_foo(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_volatile;
                    iceP_volatile = istr.readInt();
                    return iceP_volatile;
                });
        }

        public global::System.Threading.Tasks.Task<int> foo2Async(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_foo2Async(export, YES, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_foo2Async(charPrx iceP_export, int iceP_YES, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo2(iceP_export, iceP_YES, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo2_name = "foo2";

        private void _iceI_foo2(charPrx iceP_export, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                    ostr.writeInt(iceP_YES);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_nil;
                    iceP_nil = istr.readInt();
                    return iceP_nil;
                });
        }

        public global::System.Threading.Tasks.Task<int> foo3Async(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_foo3Async(export, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_foo3Async(charPrx iceP_export, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foo3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_foo3(iceP_export, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foo3_name = "foo3";

        private void _iceI_foo3(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _foo3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    charPrxHelper.write(ostr, iceP_export);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_nil;
                    iceP_nil = istr.readInt();
                    return iceP_nil;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_char_explicit> begin_explicit(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_explicit(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_explicit(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_explicit(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_explicit(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_explicit(context, callback, cookie, false);
        }

        public void end_explicit(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _explicit_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_char_explicit> begin_explicit(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_char_explicit, object>(
                (Callback_char_explicit cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _explicit_name, cookie, completedCallback);
            _iceI_explicit(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_break_case> begin_case(int @catch, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_case(@catch, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_case(int @catch, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_case(@catch, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_case(int @catch, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_case(@catch, context, callback, cookie, false);
        }

        public void end_case(out int @try, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _case_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            @try = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_break_case> begin_case(int iceP_catch, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_case_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_break_case, int>(
                (Callback_break_case cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _case_name, cookie, completedCallback);
            _iceI_case(iceP_catch, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_switch_foo> begin_foo(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo(export, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo(export, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo(export, context, callback, cookie, false);
        }

        public void end_foo(out int @volatile, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            @volatile = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo> begin_foo(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo, int>(
                (Callback_switch_foo cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo_name, cookie, completedCallback);
            _iceI_foo(iceP_export, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_switch_foo2> begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo2(export, YES, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo2(export, YES, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo2(charPrx export, int YES, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo2(export, YES, context, callback, cookie, false);
        }

        public void end_foo2(out int nil, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            nil = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo2> begin_foo2(charPrx iceP_export, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo2, int>(
                (Callback_switch_foo2 cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo2_name, cookie, completedCallback);
            _iceI_foo2(iceP_export, iceP_YES, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_switch_foo3> begin_foo3(charPrx export, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_foo3(export, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo3(export, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_foo3(charPrx export, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_foo3(export, context, callback, cookie, false);
        }

        public void end_foo3(out int nil, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _foo3_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            nil = outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_switch_foo3> begin_foo3(charPrx iceP_export, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_foo3_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_switch_foo3, int>(
                (Callback_switch_foo3 cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _foo3_name, cookie, completedCallback);
            _iceI_foo3(iceP_export, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static doPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            doPrx r = b as doPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                doPrxHelper h = new doPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static doPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            doPrx r = b as doPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                doPrxHelper h = new doPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static doPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    doPrxHelper h = new doPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static doPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    doPrxHelper h = new doPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static doPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            doPrx r = b as doPrx;
            if(r == null)
            {
                doPrxHelper h = new doPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static doPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            doPrxHelper h = new doPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::break",
            "::and::char",
            "::and::do",
            "::and::switch"
        };

        public static string ice_staticId()
        {
            return _ids[3];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, doPrx v)
        {
            ostr.writeProxy(v);
        }

        public static doPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                doPrxHelper result = new doPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class externHelper
    {
        public static void write(global::Ice.OutputStream ostr, auto[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static auto[] read(global::Ice.InputStream istr)
        {
            auto[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new auto[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class forHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, auto> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, auto> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, auto> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, auto> r = new global::System.Collections.Generic.Dictionary<string, auto>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                auto v;
                v = new auto();
                v.ice_readMembers(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class friendPrxHelper : global::Ice.ObjectPrxHelperBase, friendPrx
    {
        public friendPrxHelper()
        {
        }

        #region Synchronous operations

        public auto @goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_gotoAsync(@if, d, inline, @private, mutable, @namespace, @new, not, @operator, or, @protected, @public, register, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_objcAsync(bycopy, byref, id, IMP, @in, inout, nil, NO, oneway, SEL, super, YES, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<auto> gotoAsync(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_gotoAsync(@if, d, inline, @private, mutable, @namespace, @new, not, @operator, or, @protected, @public, register, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<auto> _iceI_gotoAsync(@continue iceP_if, auto iceP_d, delete iceP_inline, global::Ice.Value iceP_private, @do iceP_mutable, breakPrx iceP_namespace, charPrx iceP_new, switchPrx iceP_not, doPrx iceP_operator, int iceP_or, int iceP_protected, int iceP_public, int iceP_register, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_goto_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<auto>(progress, cancel);
            _iceI_goto(iceP_if, iceP_d, iceP_inline, iceP_private, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_operator, iceP_or, iceP_protected, iceP_public, iceP_register, context, synchronous, completed);
            return completed.Task;
        }

        private const string _goto_name = "goto";

        private void _iceI_goto(@continue iceP_if, auto iceP_d, delete iceP_inline, global::Ice.Value iceP_private, @do iceP_mutable, breakPrx iceP_namespace, charPrx iceP_new, switchPrx iceP_not, doPrx iceP_operator, int iceP_or, int iceP_protected, int iceP_public, int iceP_register, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<auto>(completed);
            outAsync.invoke(
                _goto_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_if, 0);
                    iceP_d.ice_writeMembers(ostr);
                    delete.ice_write(ostr, iceP_inline);
                    ostr.writeValue(iceP_private);
                    ostr.writeValue(iceP_mutable);
                    breakPrxHelper.write(ostr, iceP_namespace);
                    charPrxHelper.write(ostr, iceP_new);
                    switchPrxHelper.write(ostr, iceP_not);
                    doPrxHelper.write(ostr, iceP_operator);
                    ostr.writeInt(iceP_or);
                    ostr.writeInt(iceP_protected);
                    ostr.writeInt(iceP_public);
                    ostr.writeInt(iceP_register);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@sizeof)
                    {
                        throw;
                    }
                    catch(@return)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    auto ret = new auto();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task objcAsync(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_objcAsync(bycopy, byref, id, IMP, @in, inout, nil, NO, oneway, SEL, super, YES, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_objcAsync(int iceP_bycopy, int iceP_byref, int iceP_id, int iceP_IMP, int iceP_in, int iceP_inout, int iceP_nil, int iceP_NO, int iceP_oneway, int iceP_SEL, int iceP_super, int iceP_YES, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, context, synchronous, completed);
            return completed.Task;
        }

        private const string _objc_name = "objc";

        private void _iceI_objc(int iceP_bycopy, int iceP_byref, int iceP_id, int iceP_IMP, int iceP_in, int iceP_inout, int iceP_nil, int iceP_NO, int iceP_oneway, int iceP_SEL, int iceP_super, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _objc_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_bycopy);
                    ostr.writeInt(iceP_byref);
                    ostr.writeInt(iceP_id);
                    ostr.writeInt(iceP_IMP);
                    ostr.writeInt(iceP_in);
                    ostr.writeInt(iceP_inout);
                    ostr.writeInt(iceP_nil);
                    ostr.writeInt(iceP_NO);
                    ostr.writeInt(iceP_oneway);
                    ostr.writeInt(iceP_SEL);
                    ostr.writeInt(iceP_super);
                    ostr.writeInt(iceP_YES);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_friend_goto> begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_goto(@if, d, inline, @private, mutable, @namespace, @new, not, @operator, or, @protected, @public, register, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_goto(@if, d, inline, @private, mutable, @namespace, @new, not, @operator, or, @protected, @public, register, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_goto(@if, d, inline, @private, mutable, @namespace, @new, not, @operator, or, @protected, @public, register, context, callback, cookie, false);
        }

        public auto end_goto(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _goto_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<auto>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_friend_goto> begin_goto(@continue iceP_if, auto iceP_d, delete iceP_inline, global::Ice.Value iceP_private, @do iceP_mutable, breakPrx iceP_namespace, charPrx iceP_new, switchPrx iceP_not, doPrx iceP_operator, int iceP_or, int iceP_protected, int iceP_public, int iceP_register, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_goto_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_friend_goto, auto>(
                (Callback_friend_goto cb, auto ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _goto_name, cookie, completedCallback);
            _iceI_goto(iceP_if, iceP_d, iceP_inline, iceP_private, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_operator, iceP_or, iceP_protected, iceP_public, iceP_register, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_friend_objc> begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_objc(bycopy, byref, id, IMP, @in, inout, nil, NO, oneway, SEL, super, YES, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_objc(bycopy, byref, id, IMP, @in, inout, nil, NO, oneway, SEL, super, YES, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_objc(bycopy, byref, id, IMP, @in, inout, nil, NO, oneway, SEL, super, YES, context, callback, cookie, false);
        }

        public void end_objc(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _objc_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_friend_objc> begin_objc(int iceP_bycopy, int iceP_byref, int iceP_id, int iceP_IMP, int iceP_in, int iceP_inout, int iceP_nil, int iceP_NO, int iceP_oneway, int iceP_SEL, int iceP_super, int iceP_YES, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_friend_objc, object>(
                (Callback_friend_objc cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _objc_name, cookie, completedCallback);
            _iceI_objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static friendPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            friendPrx r = b as friendPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                friendPrxHelper h = new friendPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static friendPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            friendPrx r = b as friendPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                friendPrxHelper h = new friendPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static friendPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    friendPrxHelper h = new friendPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static friendPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    friendPrxHelper h = new friendPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static friendPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            friendPrx r = b as friendPrx;
            if(r == null)
            {
                friendPrxHelper h = new friendPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static friendPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            friendPrxHelper h = new friendPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::friend"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, friendPrx v)
        {
            ostr.writeProxy(v);
        }

        public static friendPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                friendPrxHelper result = new friendPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace and
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class breakDisp_ : global::Ice.ObjectImpl, @break
    {
        #region Slice operations

        public abstract void @case(int @catch, out int @try, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::break"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_case(@break obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_catch;
            iceP_catch = istr.readInt();
            inS.endReadParams();
            int iceP_try;
            obj.@case(iceP_catch, out iceP_try, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_try);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "case",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_case(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class charDisp_ : global::Ice.ObjectImpl, @char
    {
        #region Slice operations

        public abstract void @explicit(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::char"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_explicit(@char obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.@explicit(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "explicit",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_explicit(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class switchDisp_ : global::Ice.ObjectImpl, @switch
    {
        #region Slice operations

        public abstract void foo(charPrx export, out int @volatile, global::Ice.Current current = null);

        public abstract void foo2(charPrx export, int YES, out int nil, global::Ice.Current current = null);

        public abstract void foo3(charPrx export, out int nil, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::switch"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foo(@switch obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            charPrx iceP_export;
            iceP_export = charPrxHelper.read(istr);
            inS.endReadParams();
            int iceP_volatile;
            obj.foo(iceP_export, out iceP_volatile, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_volatile);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foo2(@switch obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            charPrx iceP_export;
            int iceP_YES;
            iceP_export = charPrxHelper.read(istr);
            iceP_YES = istr.readInt();
            inS.endReadParams();
            int iceP_nil;
            obj.foo2(iceP_export, iceP_YES, out iceP_nil, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_nil);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foo3(@switch obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            charPrx iceP_export;
            iceP_export = charPrxHelper.read(istr);
            inS.endReadParams();
            int iceP_nil;
            obj.foo3(iceP_export, out iceP_nil, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_nil);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "foo",
            "foo2",
            "foo3",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_foo(this, inS, current);
                }
                case 1:
                {
                    return iceD_foo2(this, inS, current);
                }
                case 2:
                {
                    return iceD_foo3(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class doDisp_ : global::Ice.ObjectImpl, doOperations_, @char, @break, @switch
    {
        #region Inherited Slice operations

        public abstract void @case(int @catch, out int @try, global::Ice.Current current = null);

        public abstract void @explicit(global::Ice.Current current = null);

        public abstract void foo(charPrx export, out int @volatile, global::Ice.Current current = null);

        public abstract void foo2(charPrx export, int YES, out int nil, global::Ice.Current current = null);

        public abstract void foo3(charPrx export, out int nil, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::break",
            "::and::char",
            "::and::do",
            "::and::switch"
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[3];
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static new string ice_staticId()
        {
            return _ids[3];
        }

        #endregion

        private static readonly string[] _all =
        {
            "case",
            "explicit",
            "foo",
            "foo2",
            "foo3",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return breakDisp_.iceD_case(this, inS, current);
                }
                case 1:
                {
                    return charDisp_.iceD_explicit(this, inS, current);
                }
                case 2:
                {
                    return switchDisp_.iceD_foo(this, inS, current);
                }
                case 3:
                {
                    return switchDisp_.iceD_foo2(this, inS, current);
                }
                case 4:
                {
                    return switchDisp_.iceD_foo3(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class friendDisp_ : global::Ice.ObjectImpl, friend
    {
        #region Slice operations

        public abstract auto @goto(@continue @if, auto d, delete inline, global::Ice.Value @private, @do mutable, breakPrx @namespace, charPrx @new, switchPrx not, doPrx @operator, int or, int @protected, int @public, int register, global::Ice.Current current = null);

        public abstract void objc(int bycopy, int byref, int id, int IMP, int @in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::and::friend"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_goto(friend obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @continue iceP_if;
            auto iceP_d;
            iceP_d = new auto();
            delete iceP_inline;
            iceP_inline = null;
            global::Ice.Value iceP_private;
            iceP_private = null;
            @do iceP_mutable;
            iceP_mutable = null;
            breakPrx iceP_namespace;
            charPrx iceP_new;
            switchPrx iceP_not;
            doPrx iceP_operator;
            int iceP_or;
            int iceP_protected;
            int iceP_public;
            int iceP_register;
            iceP_if = (@continue)istr.readEnum(0);
            iceP_d.ice_readMembers(istr);
            iceP_inline = delete.ice_read(istr);
            istr.readValue((global::Ice.Value v) => {iceP_private = v; });
            istr.readValue((@do v) => {iceP_mutable = v; });
            iceP_namespace = breakPrxHelper.read(istr);
            iceP_new = charPrxHelper.read(istr);
            iceP_not = switchPrxHelper.read(istr);
            iceP_operator = doPrxHelper.read(istr);
            iceP_or = istr.readInt();
            iceP_protected = istr.readInt();
            iceP_public = istr.readInt();
            iceP_register = istr.readInt();
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.@goto(iceP_if, iceP_d, iceP_inline, iceP_private, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_operator, iceP_or, iceP_protected, iceP_public, iceP_register, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_objc(friend obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_bycopy;
            int iceP_byref;
            int iceP_id;
            int iceP_IMP;
            int iceP_in;
            int iceP_inout;
            int iceP_nil;
            int iceP_NO;
            int iceP_oneway;
            int iceP_SEL;
            int iceP_super;
            int iceP_YES;
            iceP_bycopy = istr.readInt();
            iceP_byref = istr.readInt();
            iceP_id = istr.readInt();
            iceP_IMP = istr.readInt();
            iceP_in = istr.readInt();
            iceP_inout = istr.readInt();
            iceP_nil = istr.readInt();
            iceP_NO = istr.readInt();
            iceP_oneway = istr.readInt();
            iceP_SEL = istr.readInt();
            iceP_super = istr.readInt();
            iceP_YES = istr.readInt();
            inS.endReadParams();
            obj.objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "goto",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "objc"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_goto(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_objc(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
