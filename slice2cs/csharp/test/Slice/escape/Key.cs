//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Key.ice")]

#pragma warning disable 1591

namespace @abstract
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum @as
    {
        @base
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class asHelper
    {
        public static void write(global::Ice.OutputStream ostr, @as v)
        {
            ostr.writeEnum((int)v, 0);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @as read(global::Ice.InputStream istr)
        {
            @as v;
            v = (@as)istr.readEnum(0);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct @break
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @readonly;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break(int @readonly)
        {
            this.@readonly = @readonly;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break(global::Ice.InputStream istr)
        {
            this.@readonly = istr.readInt();
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.@readonly);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, @break v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static @break ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @case : global::Ice.Object, caseOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @decimal : global::Ice.Object, decimalOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::abstract::delegate")]
    public partial class @delegate : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public casePrx? @else;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @event;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @delegate(int @if, casePrx? @else, int @event)
        {
            this.@if = @if;
            this.@else = @else;
            this.@event = @event;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @delegate()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::abstract::delegate";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(@if);
            casePrxHelper.write(ostr_, @else);
            ostr_.writeInt(@event);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @if = istr_.readInt();
            @else = casePrxHelper.read(istr_);
            @event = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @explicit : global::Ice.Object, explicitOperations_, @decimal, @case
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::abstract::optionalMembers")]
    public partial class optionalMembers : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @break? @for;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @as? @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public explicitPrx? @if;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, @break>? @internal;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? @namespace;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public optionalMembers(@break? @for, @as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace)
        {
            this.@for = @for;
            this.@goto = @goto;
            this.@if = @if;
            this.@internal = @internal;
            this.@namespace = @namespace;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public optionalMembers()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::abstract::optionalMembers";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            if (@for is not null && ostr_.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(4);
                @for.Value.ice_writeMembers(ostr_);
            }
            if (@goto is not null)
            {
                ostr_.writeEnum(2, (int)@goto.Value, 1);
            }
            if (@if is not null && ostr_.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                explicitPrxHelper.write(ostr_, @if);
                ostr_.endSize(pos);
            }
            if (@internal is not null && ostr_.writeOptional(5, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                whileHelper.write(ostr_, @internal);
                ostr_.endSize(pos);
            }
            ostr_.writeString(7, @namespace);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            if (istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                @break tmpVal;
                tmpVal = new @break(istr_);
                @for = tmpVal;
            }
            else
            {
                @for = null;
            }
            if (istr_.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                @as tmpVal;
                tmpVal = (@as)istr_.readEnum(0);
                @goto = tmpVal;
            }
            else
            {
                @goto = null;
            }
            if (istr_.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr_);
                @if = tmpVal;
            }
            else
            {
                @if = null;
            }
            if (istr_.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr_);
                @internal = tmpVal;
            }
            else
            {
                @internal = null;
            }
            @namespace = istr_.readString(7);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface optionalParams : global::Ice.Object, optionalParamsOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::abstract::fixed")]
    public partial class @fixed : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @for;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(int @for, global::System.Exception? innerException = null) : base(innerException)
        {
            this.@for = @for;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @fixed()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::abstract::fixed";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::abstract::fixed", -1, true);
            ostr_.writeInt(@for);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @for = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::abstract::foreach")]
    public partial class @foreach : @fixed
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @goto;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int @if;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(int @for, int @goto, int @if, global::System.Exception? innerException = null) : base(@for, innerException)
        {
            this.@goto = @goto;
            this.@if = @if;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @foreach()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::abstract::foreach";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::abstract::foreach", -1, false);
            ostr_.writeInt(@goto);
            ostr_.writeInt(@if);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            @goto = istr_.readInt();
            @if = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::abstract::BaseMethods")]
    public partial class BaseMethods : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Data_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HelpLink_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_InnerException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Message_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Source_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_StackTrace_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_TargetSite_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_HResult_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_Equals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetBaseException_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetHashCode_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetObjectData_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_GetType_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ReferenceEquals_;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int ice_ToString_;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(int ice_Data_, int ice_HelpLink_, int ice_InnerException_, int ice_Message_, int ice_Source_, int ice_StackTrace_, int ice_TargetSite_, int ice_HResult_, int ice_Equals_, int ice_GetBaseException_, int ice_GetHashCode_, int ice_GetObjectData_, int ice_GetType_, int ice_ReferenceEquals_, int ice_ToString_, global::System.Exception? innerException = null) : base(innerException)
        {
            this.ice_Data_ = ice_Data_;
            this.ice_HelpLink_ = ice_HelpLink_;
            this.ice_InnerException_ = ice_InnerException_;
            this.ice_Message_ = ice_Message_;
            this.ice_Source_ = ice_Source_;
            this.ice_StackTrace_ = ice_StackTrace_;
            this.ice_TargetSite_ = ice_TargetSite_;
            this.ice_HResult_ = ice_HResult_;
            this.ice_Equals_ = ice_Equals_;
            this.ice_GetBaseException_ = ice_GetBaseException_;
            this.ice_GetHashCode_ = ice_GetHashCode_;
            this.ice_GetObjectData_ = ice_GetObjectData_;
            this.ice_GetType_ = ice_GetType_;
            this.ice_ReferenceEquals_ = ice_ReferenceEquals_;
            this.ice_ToString_ = ice_ToString_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseMethods()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::abstract::BaseMethods";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::abstract::BaseMethods", -1, true);
            ostr_.writeInt(ice_Data_);
            ostr_.writeInt(ice_HelpLink_);
            ostr_.writeInt(ice_InnerException_);
            ostr_.writeInt(ice_Message_);
            ostr_.writeInt(ice_Source_);
            ostr_.writeInt(ice_StackTrace_);
            ostr_.writeInt(ice_TargetSite_);
            ostr_.writeInt(ice_HResult_);
            ostr_.writeInt(ice_Equals_);
            ostr_.writeInt(ice_GetBaseException_);
            ostr_.writeInt(ice_GetHashCode_);
            ostr_.writeInt(ice_GetObjectData_);
            ostr_.writeInt(ice_GetType_);
            ostr_.writeInt(ice_ReferenceEquals_);
            ostr_.writeInt(ice_ToString_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ice_Data_ = istr_.readInt();
            ice_HelpLink_ = istr_.readInt();
            ice_InnerException_ = istr_.readInt();
            ice_Message_ = istr_.readInt();
            ice_Source_ = istr_.readInt();
            ice_StackTrace_ = istr_.readInt();
            ice_TargetSite_ = istr_.readInt();
            ice_HResult_ = istr_.readInt();
            ice_Equals_ = istr_.readInt();
            ice_GetBaseException_ = istr_.readInt();
            ice_GetHashCode_ = istr_.readInt();
            ice_GetObjectData_ = istr_.readInt();
            ice_GetType_ = istr_.readInt();
            ice_ReferenceEquals_ = istr_.readInt();
            ice_ToString_ = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface @implicit : global::Ice.Object, implicitOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @protected
    {
        public const int value = 0;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class @public
    {
        public const int value = 0;
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Test : global::Ice.Object, TestOperations_
        {
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Test : global::Ice.Object, TestOperations_
    {
    }
}

namespace @abstract
{
    public record struct optionalParams_InResult(@break? returnValue, @as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace);

    public record struct optionalParams_ForeachResult(@break? returnValue, @as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace);
}

namespace @abstract
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface casePrx : global::Ice.ObjectPrx
    {
        void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface decimalPrx : global::Ice.ObjectPrx
    {
        void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface explicitPrx : decimalPrx, casePrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface optionalParamsPrx : global::Ice.ObjectPrx
    {
        @break? @for(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<@break?> forAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @continue(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<@break?> continueAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @in(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        @break? @foreach(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface implicitPrx : global::Ice.ObjectPrx
    {
        @as @in(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<@as> inAsync(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestPrx : global::Ice.ObjectPrx
        {
            void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestPrx : global::Ice.ObjectPrx
    {
        void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace @abstract
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface caseOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface decimalOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void @default(global::Ice.Current current);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface explicitOperations_ : decimalOperations_, caseOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface optionalParamsOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @break? @for(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<@break?> continueAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @break? @in(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.Current current);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface implicitOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @as @in(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::Ice.Current current);
    }

    namespace System
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(global::Ice.Current current);
        }
    }
}

namespace System
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void op(global::Ice.Current current);
    }
}

namespace @abstract
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class casePrxHelper : global::Ice.ObjectPrxHelperBase, casePrx
    {
        public casePrxHelper()
        {
        }

        #region Synchronous operations

        public void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        #endregion

        #region Factory operations

        public static casePrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static casePrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                casePrxHelper prx = new casePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static casePrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    casePrxHelper prx = new casePrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static casePrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new casePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static casePrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new casePrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::case"
        };

        public static string ice_staticId() => "::abstract::case";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, casePrx? v)
        {
            ostr.writeProxy(v);
        }

        public static casePrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new casePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class decimalPrxHelper : global::Ice.ObjectPrxHelperBase, decimalPrx
    {
        public decimalPrxHelper()
        {
        }

        #region Synchronous operations

        public void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Factory operations

        public static decimalPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static decimalPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                decimalPrxHelper prx = new decimalPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static decimalPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    decimalPrxHelper prx = new decimalPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static decimalPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new decimalPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static decimalPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new decimalPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::decimal"
        };

        public static string ice_staticId() => "::abstract::decimal";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, decimalPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static decimalPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new decimalPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class explicitPrxHelper : global::Ice.ObjectPrxHelperBase, explicitPrx
    {
        public explicitPrxHelper()
        {
        }

        #region Synchronous operations

        public void @default(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_defaultAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void @catch(int @checked, out int @continue, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                @continue = _iceI_catchAsync(@checked, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_defaultAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_defaultAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_default(context, synchronous, completed);
            return completed.Task;
        }

        private const string _default_name = "default";

        private void _iceI_default(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _default_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_catchAsync(@checked, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_catchAsync(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_catch_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_catch(iceP_checked, context, synchronous, completed);
            return completed.Task;
        }

        private const string _catch_name = "catch";

        private void _iceI_catch(int iceP_checked, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _catch_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_checked);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int iceP_continue;
                    iceP_continue = istr.readInt();
                    return iceP_continue;
                });
        }

        #endregion

        #region Factory operations

        public static explicitPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static explicitPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                explicitPrxHelper prx = new explicitPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static explicitPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    explicitPrxHelper prx = new explicitPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static explicitPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new explicitPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static explicitPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new explicitPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::case",
            "::abstract::decimal",
            "::abstract::explicit"
        };

        public static string ice_staticId() => "::abstract::explicit";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, explicitPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static explicitPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new explicitPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class whileHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, @break> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, @break> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, @break> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, @break> r = new global::System.Collections.Generic.Dictionary<string, @break>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                @break v;
                v = new @break(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class optionalParamsPrxHelper : global::Ice.ObjectPrxHelperBase, optionalParamsPrx
    {
        public optionalParamsPrxHelper()
        {
        }

        #region Synchronous operations

        public @break? @for(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_forAsync(@goto, @if, @internal, @namespace, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @continue(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_continueAsync(@goto, @if, @internal, @namespace, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @in(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_inAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public @break? @foreach(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_foreachAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                @goto = result_.@goto;
                @if = result_.@if;
                @internal = result_.@internal;
                @namespace = result_.@namespace;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<@break?> forAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_forAsync(@goto, @if, @internal, @namespace, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<@break?> _iceI_forAsync(@as? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_for_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<@break?>(progress, cancel);
            _iceI_for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, context, synchronous, completed);
            return completed.Task;
        }

        private const string _for_name = "for";

        private void _iceI_for(@as? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<@break?>(completed);
            outAsync.invoke(
                _for_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_goto is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if (iceP_if is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if);
                        ostr.endSize(pos);
                    }
                    if (iceP_internal is not null && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    @break? ret;
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<@break?> continueAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_continueAsync(@goto, @if, @internal, @namespace, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<@break?> _iceI_continueAsync(@as? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_continue_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<@break?>(progress, cancel);
            _iceI_continue(iceP_goto, iceP_if, iceP_internal, iceP_namespace, context, synchronous, completed);
            return completed.Task;
        }

        private const string _continue_name = "continue";

        private void _iceI_continue(@as? iceP_goto, explicitPrx? iceP_if, global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal, string? iceP_namespace, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<@break?>(completed);
            outAsync.invoke(
                _continue_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_goto is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_goto.Value, 1);
                    }
                    if (iceP_if is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, iceP_if);
                        ostr.endSize(pos);
                    }
                    if (iceP_internal is not null && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, iceP_internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, iceP_namespace);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    @break? ret;
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_InResult> inAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_inAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_InResult> _iceI_inAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<optionalParams_InResult>(progress, cancel);
            _iceI_in(context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_InResult>(completed);
            outAsync.invoke(
                _in_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new optionalParams_InResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
                    {
                        @as tmpVal;
                        tmpVal = (@as)istr.readEnum(0);
                        ret.@goto = tmpVal;
                    }
                    else
                    {
                        ret.@goto = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = tmpVal;
                    }
                    else
                    {
                        ret.@if = null;
                    }
                    if (istr.readOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = tmpVal;
                    }
                    else
                    {
                        ret.@internal = null;
                    }
                    ret.@namespace = istr.readString(7);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foreachAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<optionalParams_ForeachResult> _iceI_foreachAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_foreach_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<optionalParams_ForeachResult>(progress, cancel);
            _iceI_foreach(context, synchronous, completed);
            return completed.Task;
        }

        private const string _foreach_name = "foreach";

        private void _iceI_foreach(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<optionalParams_ForeachResult>(completed);
            outAsync.invoke(
                _foreach_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new optionalParams_ForeachResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        @break tmpVal;
                        tmpVal = new @break(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
                    {
                        @as tmpVal;
                        tmpVal = (@as)istr.readEnum(0);
                        ret.@goto = tmpVal;
                    }
                    else
                    {
                        ret.@goto = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        explicitPrx? tmpVal;
                        tmpVal = explicitPrxHelper.read(istr);
                        ret.@if = tmpVal;
                    }
                    else
                    {
                        ret.@if = null;
                    }
                    if (istr.readOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                        tmpVal = whileHelper.read(istr);
                        ret.@internal = tmpVal;
                    }
                    else
                    {
                        ret.@internal = null;
                    }
                    ret.@namespace = istr.readString(7);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static optionalParamsPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static optionalParamsPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                optionalParamsPrxHelper prx = new optionalParamsPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static optionalParamsPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    optionalParamsPrxHelper prx = new optionalParamsPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static optionalParamsPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new optionalParamsPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static optionalParamsPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new optionalParamsPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::optionalParams"
        };

        public static string ice_staticId() => "::abstract::optionalParams";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, optionalParamsPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static optionalParamsPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new optionalParamsPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class implicitPrxHelper : global::Ice.ObjectPrxHelperBase, implicitPrx
    {
        public implicitPrxHelper()
        {
        }

        #region Synchronous operations

        public @as @in(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @override, @params, @private, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<@as> inAsync(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_inAsync(@internal, @is, @lock, @namespace, @new, @null, @override, @params, @private, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<@as> _iceI_inAsync(@break iceP_internal, @delegate? iceP_is, explicitPrx? iceP_lock, casePrx? iceP_namespace, decimalPrx? iceP_new, @delegate? iceP_null, int iceP_override, int iceP_params, int iceP_private, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_in_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<@as>(progress, cancel);
            _iceI_in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private, context, synchronous, completed);
            return completed.Task;
        }

        private const string _in_name = "in";

        private void _iceI_in(@break iceP_internal, @delegate? iceP_is, explicitPrx? iceP_lock, casePrx? iceP_namespace, decimalPrx? iceP_new, @delegate? iceP_null, int iceP_override, int iceP_params, int iceP_private, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<@as>(completed);
            outAsync.invoke(
                _in_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_internal.ice_writeMembers(ostr);
                    ostr.writeValue(iceP_is);
                    explicitPrxHelper.write(ostr, iceP_lock);
                    casePrxHelper.write(ostr, iceP_namespace);
                    decimalPrxHelper.write(ostr, iceP_new);
                    ostr.writeValue(iceP_null);
                    ostr.writeInt(iceP_override);
                    ostr.writeInt(iceP_params);
                    ostr.writeInt(iceP_private);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(@foreach)
                    {
                        throw;
                    }
                    catch(@fixed)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    @as ret;
                    ret = (@as)istr.readEnum(0);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static implicitPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static implicitPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                implicitPrxHelper prx = new implicitPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static implicitPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    implicitPrxHelper prx = new implicitPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static implicitPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new implicitPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static implicitPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new implicitPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::implicit"
        };

        public static string ice_staticId() => "::abstract::implicit";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, implicitPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static implicitPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new implicitPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class TestPrxHelper : global::Ice.ObjectPrxHelperBase, TestPrx
        {
            public TestPrxHelper()
            {
            }

            #region Synchronous operations

            public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static TestPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    TestPrxHelper prx = new TestPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static TestPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestPrxHelper prx = new TestPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new TestPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new TestPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::abstract::System::Test"
            };

            public static string ice_staticId() => "::abstract::System::Test";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new TestPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestPrxHelper : global::Ice.ObjectPrxHelperBase, TestPrx
    {
        public TestPrxHelper()
        {
        }

        #region Synchronous operations

        public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Factory operations

        public static TestPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                TestPrxHelper prx = new TestPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TestPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    TestPrxHelper prx = new TestPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new TestPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new TestPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::System::Test"
        };

        public static string ice_staticId() => "::System::Test";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new TestPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace @abstract
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class caseDisp_ : global::Ice.ObjectImpl, @case
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::case"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::abstract::case";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_catch(@case obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_checked;
            iceP_checked = istr.readInt();
            inS.endReadParams();
            return inS.setResultTask<int>(obj.catchAsync(iceP_checked, current),
                (ostr, iceP_continue) =>
                {
                    ostr.writeInt(iceP_continue);
                });
        }

        private static readonly string[] _all =
        {
            "catch",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_catch(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class decimalDisp_ : global::Ice.ObjectImpl, @decimal
    {
        #region Slice operations

        public abstract void @default(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::decimal"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::abstract::decimal";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_default(@decimal obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.@default(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "default",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_default(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class explicitDisp_ : global::Ice.ObjectImpl, @explicit
    {
        #region Inherited Slice operations

        public abstract global::System.Threading.Tasks.Task<int> catchAsync(int @checked, global::Ice.Current current);

        public abstract void @default(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::case",
            "::abstract::decimal",
            "::abstract::explicit"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::abstract::explicit";
        }

        #endregion

        private static readonly string[] _all =
        {
            "catch",
            "default",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return caseDisp_.iceD_catch(this, inS, current);
                }
                case 1:
                {
                    return decimalDisp_.iceD_default(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class optionalParamsDisp_ : global::Ice.ObjectImpl, optionalParams
    {
        #region Slice operations

        public abstract @break? @for(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<@break?> continueAsync(@as? @goto, explicitPrx? @if, global::System.Collections.Generic.Dictionary<string, @break>? @internal, string? @namespace, global::Ice.Current current);

        public abstract @break? @in(out @as? @goto, out explicitPrx? @if, out global::System.Collections.Generic.Dictionary<string, @break>? @internal, out string? @namespace, global::Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<optionalParams_ForeachResult> foreachAsync(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::optionalParams"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::abstract::optionalParams";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_for(optionalParams obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @as? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                @as tmpVal;
                tmpVal = (@as)istr.readEnum(0);
                iceP_goto = tmpVal;
            }
            else
            {
                iceP_goto = null;
            }
            if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = tmpVal;
            }
            else
            {
                iceP_if = null;
            }
            if (istr.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = tmpVal;
            }
            else
            {
                iceP_internal = null;
            }
            iceP_namespace = istr.readString(7);
            inS.endReadParams();
            var ret = obj.@for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_continue(optionalParams obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @as? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                @as tmpVal;
                tmpVal = (@as)istr.readEnum(0);
                iceP_goto = tmpVal;
            }
            else
            {
                iceP_goto = null;
            }
            if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                explicitPrx? tmpVal;
                tmpVal = explicitPrxHelper.read(istr);
                iceP_if = tmpVal;
            }
            else
            {
                iceP_if = null;
            }
            if (istr.readOptional(5, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, @break> tmpVal = new global::System.Collections.Generic.Dictionary<string, @break>();
                tmpVal = whileHelper.read(istr);
                iceP_internal = tmpVal;
            }
            else
            {
                iceP_internal = null;
            }
            iceP_namespace = istr.readString(7);
            inS.endReadParams();
            return inS.setResultTask<@break?>(obj.continueAsync(iceP_goto, iceP_if, iceP_internal, iceP_namespace, current),
                (ostr, ret) =>
                {
                    if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.Value.ice_writeMembers(ostr);
                    }
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_in(optionalParams obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            @as? iceP_goto;
            explicitPrx? iceP_if;
            global::System.Collections.Generic.Dictionary<string, @break>? iceP_internal;
            string? iceP_namespace;
            var ret = obj.@in(out iceP_goto, out iceP_if, out iceP_internal, out iceP_namespace, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_goto is not null)
            {
                ostr.writeEnum(2, (int)iceP_goto.Value, 1);
            }
            if (iceP_if is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                explicitPrxHelper.write(ostr, iceP_if);
                ostr.endSize(pos);
            }
            if (iceP_internal is not null && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                whileHelper.write(ostr, iceP_internal);
                ostr.endSize(pos);
            }
            ostr.writeString(7, iceP_namespace);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foreach(optionalParams obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setResultTask<optionalParams_ForeachResult>(obj.foreachAsync(current),
                (ostr, ret) =>
                {
                    if (ret.returnValue is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        ret.returnValue.Value.ice_writeMembers(ostr);
                    }
                    if (ret.@goto is not null)
                    {
                        ostr.writeEnum(2, (int)ret.@goto.Value, 1);
                    }
                    if (ret.@if is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        explicitPrxHelper.write(ostr, ret.@if);
                        ostr.endSize(pos);
                    }
                    if (ret.@internal is not null && ostr.writeOptional(5, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        whileHelper.write(ostr, ret.@internal);
                        ostr.endSize(pos);
                    }
                    ostr.writeString(7, ret.@namespace);
                });
        }

        private static readonly string[] _all =
        {
            "continue",
            "for",
            "foreach",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "in"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_continue(this, inS, current);
                }
                case 1:
                {
                    return iceD_for(this, inS, current);
                }
                case 2:
                {
                    return iceD_foreach(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_in(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class implicitDisp_ : global::Ice.ObjectImpl, @implicit
    {
        #region Slice operations

        public abstract @as @in(@break @internal, @delegate? @is, explicitPrx? @lock, casePrx? @namespace, decimalPrx? @new, @delegate? @null, int @override, int @params, int @private, global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::abstract::implicit"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::abstract::implicit";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_in(@implicit obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @break iceP_internal;
            @delegate? iceP_is = null;
            explicitPrx? iceP_lock;
            casePrx? iceP_namespace;
            decimalPrx? iceP_new;
            @delegate? iceP_null = null;
            int iceP_override;
            int iceP_params;
            int iceP_private;
            iceP_internal = new @break(istr);
            istr.readValue((@delegate? v) => { iceP_is = v; });
            iceP_lock = explicitPrxHelper.read(istr);
            iceP_namespace = casePrxHelper.read(istr);
            iceP_new = decimalPrxHelper.read(istr);
            istr.readValue((@delegate? v) => { iceP_null = v; });
            iceP_override = istr.readInt();
            iceP_params = istr.readInt();
            iceP_private = istr.readInt();
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.@in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 0);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "in"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_in(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    namespace System
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class TestDisp_ : global::Ice.ObjectImpl, Test
        {
            #region Slice operations

            public abstract void op(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::abstract::System::Test"
            };

            public override bool ice_isA(string s, global::Ice.Current current)
            {
                return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::abstract::System::Test";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_op(Test obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.op(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "op"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
            iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_op(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}

namespace System
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestDisp_ : global::Ice.ObjectImpl, Test
    {
        #region Slice operations

        public abstract void op(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::System::Test"
        };

        public override bool ice_isA(string s, global::Ice.Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::System::Test";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(Test obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.op(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "op"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_op(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
