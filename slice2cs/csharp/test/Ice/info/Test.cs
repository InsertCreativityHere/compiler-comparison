//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.info
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
        {
        }
    }
}

namespace Ice.info
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_TestIntf_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_TestIntf_getEndpointInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_TestIntf_getConnectionInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> ret);
    }
}

namespace Ice.info
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public interface TestIntfPrx : global::Ice.ObjectPrx
        {
            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);

            global::System.Collections.Generic.Dictionary<string, string> getEndpointInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getEndpointInfoAsContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_getEndpointInfoAsContext> begin_getEndpointInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getEndpointInfoAsContext(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getEndpointInfoAsContext(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::System.Collections.Generic.Dictionary<string, string> end_getEndpointInfoAsContext(global::Ice.AsyncResult asyncResult);

            global::System.Collections.Generic.Dictionary<string, string> getConnectionInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getConnectionInfoAsContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_getConnectionInfoAsContext> begin_getConnectionInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getConnectionInfoAsContext(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getConnectionInfoAsContext(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::System.Collections.Generic.Dictionary<string, string> end_getConnectionInfoAsContext(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ice.info
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public interface TestIntfOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            void shutdown(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            global::System.Collections.Generic.Dictionary<string, string> getEndpointInfoAsContext(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            global::System.Collections.Generic.Dictionary<string, string> getConnectionInfoAsContext(global::Ice.Current current = null);
        }
    }
}

namespace Ice.info
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        [global::System.Serializable]
        public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
        {
            public TestIntfPrxHelper()
            {
            }

            public TestIntfPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> getEndpointInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getEndpointInfoAsContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> getConnectionInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getConnectionInfoAsContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getEndpointInfoAsContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getEndpointInfoAsContextAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getEndpointInfoAsContextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getEndpointInfoAsContext_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_getEndpointInfoAsContext(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getEndpointInfoAsContext_name = "getEndpointInfoAsContext";

            private void _iceI_getEndpointInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _getEndpointInfoAsContext_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = global::Ice.ContextHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getConnectionInfoAsContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getConnectionInfoAsContextAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getConnectionInfoAsContextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getConnectionInfoAsContext_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_getConnectionInfoAsContext(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getConnectionInfoAsContext_name = "getConnectionInfoAsContext";

            private void _iceI_getConnectionInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _getConnectionInfoAsContext_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = global::Ice.ContextHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_shutdown, object>(
                    (Callback_TestIntf_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_getEndpointInfoAsContext> begin_getEndpointInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getEndpointInfoAsContext(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getEndpointInfoAsContext(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getEndpointInfoAsContext(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getEndpointInfoAsContext(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getEndpointInfoAsContext(context, callback, cookie, false);
            }

            public global::System.Collections.Generic.Dictionary<string, string> end_getEndpointInfoAsContext(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getEndpointInfoAsContext_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, string>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_getEndpointInfoAsContext> begin_getEndpointInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getEndpointInfoAsContext_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_getEndpointInfoAsContext, global::System.Collections.Generic.Dictionary<string, string>>(
                    (Callback_TestIntf_getEndpointInfoAsContext cb, global::System.Collections.Generic.Dictionary<string, string> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getEndpointInfoAsContext_name, cookie, completedCallback);
                _iceI_getEndpointInfoAsContext(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_getConnectionInfoAsContext> begin_getConnectionInfoAsContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getConnectionInfoAsContext(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getConnectionInfoAsContext(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getConnectionInfoAsContext(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getConnectionInfoAsContext(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getConnectionInfoAsContext(context, callback, cookie, false);
            }

            public global::System.Collections.Generic.Dictionary<string, string> end_getConnectionInfoAsContext(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getConnectionInfoAsContext_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, string>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_getConnectionInfoAsContext> begin_getConnectionInfoAsContext(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getConnectionInfoAsContext_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_getConnectionInfoAsContext, global::System.Collections.Generic.Dictionary<string, string>>(
                    (Callback_TestIntf_getConnectionInfoAsContext cb, global::System.Collections.Generic.Dictionary<string, string> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getConnectionInfoAsContext_name, cookie, completedCallback);
                _iceI_getConnectionInfoAsContext(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TestIntfPrxHelper h = new TestIntfPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestIntfPrxHelper h = new TestIntfPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if(r == null)
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
            {
                ostr.writeProxy(v);
            }

            public static TestIntfPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TestIntfPrxHelper result = new TestIntfPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.info
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
        {
            #region Slice operations

            public abstract void shutdown(global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> getEndpointInfoAsContext(global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> getConnectionInfoAsContext(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getEndpointInfoAsContext(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getEndpointInfoAsContext(current);
                var ostr = inS.startWriteParams();
                global::Ice.ContextHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getConnectionInfoAsContext(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getConnectionInfoAsContext(current);
                var ostr = inS.startWriteParams();
                global::Ice.ContextHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getConnectionInfoAsContext",
                "getEndpointInfoAsContext",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getConnectionInfoAsContext(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getEndpointInfoAsContext(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
