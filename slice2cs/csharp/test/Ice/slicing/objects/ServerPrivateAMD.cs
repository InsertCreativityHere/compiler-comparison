//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("ServerPrivateAMD.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::SBSUnknownDerived")]
    public partial class SBSUnknownDerived : SBase
    {
        public string sbsud = "";

        partial void ice_initialize();

        public SBSUnknownDerived(string sb, string sbsud) : base(sb)
        {
            global::System.ArgumentNullException.ThrowIfNull(sbsud);
            this.sbsud = sbsud;
            ice_initialize();
        }

        public SBSUnknownDerived()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::SBSUnknownDerived";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sbsud);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            sbsud = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::SUnknown")]
    public partial class SUnknown : Ice.Value
    {
        public string su = "";

        public SUnknown? cycle;

        partial void ice_initialize();

        public SUnknown(string su, SUnknown? cycle)
        {
            global::System.ArgumentNullException.ThrowIfNull(su);
            this.su = su;
            this.cycle = cycle;
            ice_initialize();
        }

        public SUnknown()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::SUnknown";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(su);
            ostr_.writeValue(cycle);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            su = istr_.readString();
            istr_.readValue((SUnknown? v) => { this.cycle = v; });
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::D2")]
    public partial class D2 : B
    {
        public string sd2 = "";

        public B? pd2;

        partial void ice_initialize();

        public D2(string sb, B? pb, string sd2, B? pd2) : base(sb, pb)
        {
            global::System.ArgumentNullException.ThrowIfNull(sd2);
            this.sd2 = sd2;
            this.pd2 = pd2;
            ice_initialize();
        }

        public D2()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::D2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sd2);
            ostr_.writeValue(pd2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            sd2 = istr_.readString();
            istr_.readValue((B? v) => { this.pd2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::D4")]
    public partial class D4 : B
    {
        public B? p1;

        public B? p2;

        partial void ice_initialize();

        public D4(string sb, B? pb, B? p1, B? p2) : base(sb, pb)
        {
            this.p1 = p1;
            this.p2 = p2;
            ice_initialize();
        }

        public D4()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::D4";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(p1);
            ostr_.writeValue(p2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((B? v) => { this.p1 = v; });
            istr_.readValue((B? v) => { this.p2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::UnknownDerivedException")]
    public partial class UnknownDerivedException : BaseException
    {
        public string sude = "";

        public D2? pd2;

        public UnknownDerivedException(string sbe, B? pb, string sude, D2? pd2) : base(sbe, pb)
        {
            global::System.ArgumentNullException.ThrowIfNull(sude);
            this.sude = sude;
            this.pd2 = pd2;
        }

        public UnknownDerivedException()
        {
        }

        public override string ice_id() => "::Test::UnknownDerivedException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::UnknownDerivedException", -1, false);
            ostr_.writeString(sude);
            ostr_.writeValue(pd2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            sude = istr_.readString();
            istr_.readValue((D2? v) => { this.pd2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::MyClass")]
    public partial class MyClass : Ice.Value
    {
        public int i;

        partial void ice_initialize();

        public MyClass(int i)
        {
            this.i = i;
            ice_initialize();
        }

        public MyClass()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::MyClass";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::PSUnknown")]
    public partial class PSUnknown : Preserved
    {
        public string psu = "";

        public PNode? graph;

        public MyClass? cl;

        partial void ice_initialize();

        public PSUnknown(int pi, string ps, string psu, PNode? graph, MyClass? cl) : base(pi, ps)
        {
            global::System.ArgumentNullException.ThrowIfNull(psu);
            this.psu = psu;
            this.graph = graph;
            this.cl = cl;
            ice_initialize();
        }

        public PSUnknown()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PSUnknown";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(psu);
            ostr_.writeValue(graph);
            ostr_.writeValue(cl);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            psu = istr_.readString();
            istr_.readValue((PNode? v) => { this.graph = v; });
            istr_.readValue((MyClass? v) => { this.cl = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PSUnknown2")]
    public partial class PSUnknown2 : Preserved
    {
        public PBase? pb;

        partial void ice_initialize();

        public PSUnknown2(int pi, string ps, PBase? pb) : base(pi, ps)
        {
            this.pb = pb;
            ice_initialize();
        }

        public PSUnknown2()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PSUnknown2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(pb);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PBase? v) => { this.pb = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PSUnknownException")]
    public partial class PSUnknownException : PreservedException
    {
        public PSUnknown2? p;

        public PSUnknownException(PSUnknown2? p)
        {
            this.p = p;
        }

        public PSUnknownException()
        {
        }

        public override string ice_id() => "::Test::PSUnknownException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::PSUnknownException", -1, false);
            ostr_.writeValue(p);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PSUnknown2? v) => { this.p = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        public override bool iceUsesClasses()
        {
            return true;
        }
    }
}
