//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Ice.scope
{
    namespace Test
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial record struct S
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int v;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S(int v)
            {
                this.v = v;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S(global::Ice.InputStream istr)
            {
                this.v = istr.readInt();
                ice_initialize();
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.v);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static S ice_read(global::Ice.InputStream istr) => new(istr);

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::C")]
        public partial class C : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S s;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C(S s)
            {
                this.s = s;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C()
            {
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::C";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                s.ice_writeMembers(ostr_);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                s = new S(istr_);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum E1
        {
            v1,
            v2,
            v3
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class E1Helper
        {
            public static void write(global::Ice.OutputStream ostr, E1 v)
            {
                ostr.writeEnum((int)v, 2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static E1 read(global::Ice.InputStream istr)
            {
                E1 v;
                v = (E1)istr.readEnum(2);
                return v;
            }
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public sealed partial class S1 : global::System.IEquatable<S1>
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string s = "";

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1(string s)
            {
                this.s = s;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1(global::Ice.InputStream istr)
            {
                this.s = istr.readString();
                ice_initialize();
            }

            #endregion

            #region Clone method

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1 Clone() => (S1)MemberwiseClone();

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                var hash = new global::System.HashCode();
                hash.Add(this.s);
                return hash.ToHashCode();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object? other) => Equals(other as S1);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool Equals(S1? other)
            {
                if (ReferenceEquals(this, other))
                {
                    return true;
                }
                return other is not null && 
                    this.s == other.s;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator ==(S1? lhs, S1? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator !=(S1? lhs, S1? rhs) => !(lhs == rhs);

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.s);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, S1 v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static S1 ice_read(global::Ice.InputStream istr) => new(istr);

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::C1")]
        public partial class C1 : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string s = "";

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C1(string s)
            {
                this.s = s;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C1()
            {
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::C1";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(s);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                s = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public sealed partial class S2 : global::System.IEquatable<S2>
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public E1 E1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1 S1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C1? C1;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S2(S1 S1)
            {
                this.S1 = S1;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S2(E1 E1, S1 S1, C1? C1)
            {
                this.E1 = E1;
                this.S1 = S1;
                this.C1 = C1;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S2(global::Ice.InputStream istr)
            {
                this.E1 = (E1)istr.readEnum(2);
                this.S1 = new S1(istr);
                istr.readValue((C1? v) => { this.C1 = v; });
                ice_initialize();
            }

            #endregion

            #region Clone method

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S2 Clone() => (S2)MemberwiseClone();

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                var hash = new global::System.HashCode();
                hash.Add(this.E1);
                hash.Add(this.S1);
                hash.Add(this.C1);
                return hash.ToHashCode();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object? other) => Equals(other as S2);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool Equals(S2? other)
            {
                if (ReferenceEquals(this, other))
                {
                    return true;
                }
                return other is not null && 
                    this.E1 == other.E1 && 
                    this.S1 == other.S1 && 
                    this.C1 == other.C1;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator ==(S2? lhs, S2? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator !=(S2? lhs, S2? rhs) => !(lhs == rhs);

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeEnum((int)this.E1, 2);
                S1.ice_write(ostr, this.S1);
                ostr.writeValue(this.C1);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, S2 v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static S2 ice_read(global::Ice.InputStream istr) => new(istr);

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::C2")]
        public partial class C2 : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public E1 E1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S1 S1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C1? C1;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C2(E1 E1, S1 S1, C1? C1)
            {
                this.E1 = E1;
                this.S1 = S1;
                this.C1 = C1;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C2(S1 S1)
            {
                this.S1 = S1;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public C2()
            {
                this.S1 = null!;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::C2";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeEnum((int)E1, 2);
                S1.ice_write(ostr_, S1);
                ostr_.writeValue(C1);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                E1 = (E1)istr_.readEnum(2);
                S1 = new S1(istr_);
                istr_.readValue((C1? v) => { this.C1 = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::I")]
        public partial interface I : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            S opS(S s1, out S s2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            C? opC(C? c1, out C? c2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            C?[] opCSeq(C?[] c1, out C?[] c2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            E1 opE1(E1 E1, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            S1 opS1(S1 S1, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            C1? opC1(C1? C1, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current);
        }

        namespace Inner
        {
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial record struct S
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public int v;

                #endregion

                partial void ice_initialize();

                #region Constructor

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public S(int v)
                {
                    this.v = v;
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public S(global::Ice.InputStream istr)
                {
                    this.v = istr.readInt();
                    ice_initialize();
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeInt(this.v);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static void ice_write(global::Ice.OutputStream ostr, S v)
                {
                    v.ice_writeMembers(ostr);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static S ice_read(global::Ice.InputStream istr) => new(istr);

                #endregion
            }

            namespace Inner2
            {
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial record struct S
                {
                    #region Slice data members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public int v;

                    #endregion

                    partial void ice_initialize();

                    #region Constructor

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public S(int v)
                    {
                        this.v = v;
                        ice_initialize();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public S(global::Ice.InputStream istr)
                    {
                        this.v = istr.readInt();
                        ice_initialize();
                    }

                    #endregion

                    #region Marshaling support

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public void ice_writeMembers(global::Ice.OutputStream ostr)
                    {
                        ostr.writeInt(this.v);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public static void ice_write(global::Ice.OutputStream ostr, S v)
                    {
                        v.ice_writeMembers(ostr);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public static S ice_read(global::Ice.InputStream istr) => new(istr);

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                [Ice.SliceTypeId("::Test::Inner::Inner2::C")]
                public partial class C : global::Ice.Value
                {
                    #region Slice data members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public S s;

                    #endregion

                    partial void ice_initialize();

                    #region Constructors

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public C(S s)
                    {
                        this.s = s;
                        ice_initialize();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public C()
                    {
                        ice_initialize();
                    }

                    #endregion

                    private const string _id = "::Test::Inner::Inner2::C";

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public static new string ice_staticId()
                    {
                        return _id;
                    }
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    public override string ice_id()
                    {
                        return _id;
                    }

                    #region Marshaling support

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                    {
                        ostr_.startSlice(ice_staticId(), -1, true);
                        s.ice_writeMembers(ostr_);
                        ostr_.endSlice();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    protected override void iceReadImpl(global::Ice.InputStream istr_)
                    {
                        istr_.startSlice();
                        s = new S(istr_);
                        istr_.endSlice();
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                [Ice.SliceTypeId("::Test::Inner::Inner2::I")]
                public partial interface I : global::Ice.Object
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    S opS(S s1, out S s2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    C? opC(C? c1, out C? c2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    C?[] opCSeq(C?[] c1, out C?[] c2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::Ice.Current current);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                    void shutdown(global::Ice.Current current);
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [Ice.SliceTypeId("::Test::Inner::C")]
            public partial class C : global::Ice.Value
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public S s;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public C(S s)
                {
                    this.s = s;
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public C()
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Test::Inner::C";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    s.ice_writeMembers(ostr_);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    s = new S(istr_);
                    istr_.endSlice();
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [Ice.SliceTypeId("::Test::Inner::I")]
            public partial interface I : global::Ice.Object
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.Inner.Inner2.S opS(global::Ice.scope.Test.Inner.Inner2.S s1, out global::Ice.scope.Test.Inner.Inner2.S s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.Inner.Inner2.S[] opSSeq(global::Ice.scope.Test.Inner.Inner2.S[] s1, out global::Ice.scope.Test.Inner.Inner2.S[] s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.Inner.Inner2.C? opC(global::Ice.scope.Test.Inner.Inner2.C? c1, out global::Ice.scope.Test.Inner.Inner2.C? c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.Inner.Inner2.C?[] opCSeq(global::Ice.scope.Test.Inner.Inner2.C?[] c1, out global::Ice.scope.Test.Inner.Inner2.C?[] c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                void shutdown(global::Ice.Current current);
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [Ice.SliceTypeId("::Inner::Test::Inner2::I")]
            public partial interface I : global::Ice.Object
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.S opS(global::Ice.scope.Test.S s1, out global::Ice.scope.Test.S s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.S[] opSSeq(global::Ice.scope.Test.S[] s1, out global::Ice.scope.Test.S[] s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.C? opC(global::Ice.scope.Test.C? c1, out global::Ice.scope.Test.C? c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::Ice.scope.Test.C?[] opCSeq(global::Ice.scope.Test.C?[] c1, out global::Ice.scope.Test.C?[] c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c2, global::Ice.Current current);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                void shutdown(global::Ice.Current current);
            }
        }
    }
}

namespace Ice.scope
{
    namespace Test
    {
        public record struct I_OpSResult(S returnValue, S s2);

        public record struct I_OpSSeqResult(S[] returnValue, S[] s2);

        public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2);

        public record struct I_OpCResult(C? returnValue, C? c2);

        public record struct I_OpCSeqResult(C?[] returnValue, C?[] c2);

        public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C?> returnValue, global::System.Collections.Generic.Dictionary<string, C?> c2);

        namespace Inner
        {
            namespace Inner2
            {
                public record struct I_OpSResult(S returnValue, S s2);

                public record struct I_OpSSeqResult(S[] returnValue, S[] s2);

                public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2);

                public record struct I_OpCResult(C? returnValue, C? c2);

                public record struct I_OpCSeqResult(C?[] returnValue, C?[] c2);

                public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C?> returnValue, global::System.Collections.Generic.Dictionary<string, C?> c2);
            }

            public record struct I_OpSResult(global::Ice.scope.Test.Inner.Inner2.S returnValue, global::Ice.scope.Test.Inner.Inner2.S s2);

            public record struct I_OpSSeqResult(global::Ice.scope.Test.Inner.Inner2.S[] returnValue, global::Ice.scope.Test.Inner.Inner2.S[] s2);

            public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s2);

            public record struct I_OpCResult(global::Ice.scope.Test.Inner.Inner2.C? returnValue, global::Ice.scope.Test.Inner.Inner2.C? c2);

            public record struct I_OpCSeqResult(global::Ice.scope.Test.Inner.Inner2.C?[] returnValue, global::Ice.scope.Test.Inner.Inner2.C?[] c2);

            public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c2);
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public record struct I_OpSResult(global::Ice.scope.Test.S returnValue, global::Ice.scope.Test.S s2);

            public record struct I_OpSSeqResult(global::Ice.scope.Test.S[] returnValue, global::Ice.scope.Test.S[] s2);

            public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s2);

            public record struct I_OpCResult(global::Ice.scope.Test.C? returnValue, global::Ice.scope.Test.C? c2);

            public record struct I_OpCSeqResult(global::Ice.scope.Test.C?[] returnValue, global::Ice.scope.Test.C?[] c2);

            public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c2);
        }
    }
}

namespace Ice.scope
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface IPrx : global::Ice.ObjectPrx
        {
            S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            C1? opC1(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<C1?> opC1Async(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        namespace Inner
        {
            namespace Inner2
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public interface IPrx : global::Ice.ObjectPrx
                {
                    S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                    void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

                    global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IPrx : global::Ice.ObjectPrx
            {
                global::Ice.scope.Test.Inner.Inner2.S opS(global::Ice.scope.Test.Inner.Inner2.S s1, out global::Ice.scope.Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Ice.scope.Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.Inner.Inner2.S[] opSSeq(global::Ice.scope.Test.Inner.Inner2.S[] s1, out global::Ice.scope.Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Ice.scope.Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.Inner.Inner2.C? opC(global::Ice.scope.Test.Inner.Inner2.C? c1, out global::Ice.scope.Test.Inner.Inner2.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Ice.scope.Test.Inner.Inner2.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.Inner.Inner2.C?[] opCSeq(global::Ice.scope.Test.Inner.Inner2.C?[] c1, out global::Ice.scope.Test.Inner.Inner2.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Ice.scope.Test.Inner.Inner2.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public interface IPrx : global::Ice.ObjectPrx
            {
                global::Ice.scope.Test.S opS(global::Ice.scope.Test.S s1, out global::Ice.scope.Test.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Ice.scope.Test.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.S[] opSSeq(global::Ice.scope.Test.S[] s1, out global::Ice.scope.Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Ice.scope.Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.C? opC(global::Ice.scope.Test.C? c1, out global::Ice.scope.Test.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Ice.scope.Test.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Ice.scope.Test.C?[] opCSeq(global::Ice.scope.Test.C?[] c1, out global::Ice.scope.Test.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Ice.scope.Test.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }
    }
}

namespace Ice.scope
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, S> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                    {
                        ostr.writeString(e.Key);
                        e.Value.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, S> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    S v;
                    v = new S(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, S[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static S[] read(global::Ice.InputStream istr)
            {
                S[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new S(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, C?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, C?> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, C?> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, C?> r = new global::System.Collections.Generic.Dictionary<string, C?>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    istr.readValue((C? v) => { r[k] = v; });
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, C?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static C?[] read(global::Ice.InputStream istr)
            {
                C?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new C?[szx];
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
        {
            public IPrxHelper()
            {
            }

            #region Synchronous operations

            public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opE1Async(E1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opS1Async(S1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public C1? opC1(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opC1Async(C1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                _iceI_opS(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opS_name = "opS";

            private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                outAsync.invoke(
                    _opS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        iceP_s1.ice_writeMembers(ostr);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSResult();
                        ret.s2 = new S(istr);
                        ret.returnValue = new S(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSSeq_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSSeq_name = "opSSeq";

            private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                outAsync.invoke(
                    _opSSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SSeqHelper.write(ostr, iceP_s1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSSeqResult();
                        ret.s2 = SSeqHelper.read(istr);
                        ret.returnValue = SSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSMapAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSMap_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                _iceI_opSMap(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSMap_name = "opSMap";

            private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                outAsync.invoke(
                    _opSMap_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SMapHelper.write(ostr, iceP_s1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSMapResult();
                        ret.s2 = SMapHelper.read(istr);
                        ret.returnValue = SMapHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opC_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                _iceI_opC(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opC_name = "opC";

            private void _iceI_opC(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                outAsync.invoke(
                    _opC_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCResult();
                        istr.readValue((C? v) => { ret.c2 = v; });
                        istr.readValue((C? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCSeq_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCSeq_name = "opCSeq";

            private void _iceI_opCSeq(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                outAsync.invoke(
                    _opCSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CSeqHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCSeqResult();
                        ret.c2 = CSeqHelper.read(istr);
                        ret.returnValue = CSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCMapAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCMap_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                _iceI_opCMap(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCMap_name = "opCMap";

            private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                outAsync.invoke(
                    _opCMap_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CMapHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCMapResult();
                        ret.c2 = CMapHelper.read(istr);
                        ret.returnValue = CMapHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opE1Async(E1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<E1> _iceI_opE1Async(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opE1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<E1>(progress, cancel);
                _iceI_opE1(iceP_E1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opE1_name = "opE1";

            private void _iceI_opE1(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<E1>(completed);
                outAsync.invoke(
                    _opE1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeEnum((int)iceP_E1, 2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        E1 ret;
                        ret = (E1)istr.readEnum(2);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opS1Async(S1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<S1> _iceI_opS1Async(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opS1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<S1>(progress, cancel);
                _iceI_opS1(iceP_S1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opS1_name = "opS1";

            private void _iceI_opS1(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<S1>(completed);
                outAsync.invoke(
                    _opS1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        S1.ice_write(ostr, iceP_S1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        S1 ret;
                        ret = new S1(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<C1?> opC1Async(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opC1Async(C1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<C1?> _iceI_opC1Async(C1? iceP_C1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opC1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<C1?>(progress, cancel);
                _iceI_opC1(iceP_C1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opC1_name = "opC1";

            private void _iceI_opC1(C1? iceP_C1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<C1?>(completed);
                outAsync.invoke(
                    _opC1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_C1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        C1? ret = null;
                        istr.readValue((C1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static IPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static IPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new IPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::I"
            };

            public static string ice_staticId() => "::Test::I";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, IPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static IPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new IPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IMapHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, IPrx?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                    {
                        ostr.writeString(e.Key);
                        IPrxHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    IPrx? v;
                    v = IPrxHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ISeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, IPrx?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static IPrx?[] read(global::Ice.InputStream istr)
            {
                IPrx?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new IPrx?[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        namespace Inner
        {
            namespace Inner2
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class SMapHelper
                {
                    public static void write(global::Ice.OutputStream ostr,
                                             global::System.Collections.Generic.Dictionary<string, S> v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Count);
                            foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                            {
                                ostr.writeString(e.Key);
                                e.Value.ice_writeMembers(ostr);
                            }
                        }
                    }

                    public static global::System.Collections.Generic.Dictionary<string, S> read(global::Ice.InputStream istr)
                    {
                        int sz = istr.readSize();
                        global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
                        for(int i = 0; i < sz; ++i)
                        {
                            string k;
                            k = istr.readString();
                            S v;
                            v = new S(istr);
                            r[k] = v;
                        }
                        return r;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class SSeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, S[] v)
                    {
                        if (v is null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                v[ix].ice_writeMembers(ostr);
                            }
                        }
                    }

                    public static S[] read(global::Ice.InputStream istr)
                    {
                        S[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(4);
                            v = new S[szx];
                            for(int ix = 0; ix < szx; ++ix)
                            {
                                v[ix] = new S(istr);
                            }
                        }
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class CMapHelper
                {
                    public static void write(global::Ice.OutputStream ostr,
                                             global::System.Collections.Generic.Dictionary<string, C?> v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Count);
                            foreach(global::System.Collections.Generic.KeyValuePair<string, C?> e in v)
                            {
                                ostr.writeString(e.Key);
                                ostr.writeValue(e.Value);
                            }
                        }
                    }

                    public static global::System.Collections.Generic.Dictionary<string, C?> read(global::Ice.InputStream istr)
                    {
                        int sz = istr.readSize();
                        global::System.Collections.Generic.Dictionary<string, C?> r = new global::System.Collections.Generic.Dictionary<string, C?>();
                        for(int i = 0; i < sz; ++i)
                        {
                            string k;
                            k = istr.readString();
                            istr.readValue((C? v) => { r[k] = v; });
                        }
                        return r;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class CSeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, C?[] v)
                    {
                        if (v is null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                ostr.writeValue(v[ix]);
                            }
                        }
                    }

                    public static C?[] read(global::Ice.InputStream istr)
                    {
                        C?[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(1);
                            v = new C?[szx];
                            for (int ix = 0; ix < szx; ++ix)
                            {
                                istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                            }
                        }
                        return v;
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
                {
                    public IPrxHelper()
                    {
                    }

                    #region Synchronous operations

                    public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            s2 = result_.s2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            s2 = result_.s2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            s2 = result_.s2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            c2 = result_.c2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            c2 = result_.c2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            c2 = result_.c2;
                            return result_.returnValue;
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
                    {
                        try
                        {
                            _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch (global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException!;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opSAsync(s1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opS_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                        _iceI_opS(iceP_s1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opS_name = "opS";

                    private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                        outAsync.invoke(
                            _opS_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                iceP_s1.ice_writeMembers(ostr);
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpSResult();
                                ret.s2 = new S(istr);
                                ret.returnValue = new S(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opSSeq_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                        _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opSSeq_name = "opSSeq";

                    private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                        outAsync.invoke(
                            _opSSeq_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                SSeqHelper.write(ostr, iceP_s1);
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpSSeqResult();
                                ret.s2 = SSeqHelper.read(istr);
                                ret.returnValue = SSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opSMap_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                        _iceI_opSMap(iceP_s1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opSMap_name = "opSMap";

                    private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                        outAsync.invoke(
                            _opSMap_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                SMapHelper.write(ostr, iceP_s1);
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpSMapResult();
                                ret.s2 = SMapHelper.read(istr);
                                ret.returnValue = SMapHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opCAsync(c1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opC_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                        _iceI_opC(iceP_c1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opC_name = "opC";

                    private void _iceI_opC(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                        outAsync.invoke(
                            _opC_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                ostr.writeValue(iceP_c1);
                                ostr.writePendingValues();
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpCResult();
                                istr.readValue((C? v) => { ret.c2 = v; });
                                istr.readValue((C? v) => {ret.returnValue = v; });
                                istr.readPendingValues();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opCSeq_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                        _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opCSeq_name = "opCSeq";

                    private void _iceI_opCSeq(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                        outAsync.invoke(
                            _opCSeq_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                CSeqHelper.write(ostr, iceP_c1);
                                ostr.writePendingValues();
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpCSeqResult();
                                ret.c2 = CSeqHelper.read(istr);
                                ret.returnValue = CSeqHelper.read(istr);
                                istr.readPendingValues();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_opCMap_name);
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                        _iceI_opCMap(iceP_c1, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _opCMap_name = "opCMap";

                    private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                        outAsync.invoke(
                            _opCMap_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                CMapHelper.write(ostr, iceP_c1);
                                ostr.writePendingValues();
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                var ret = new I_OpCMapResult();
                                ret.c2 = CMapHelper.read(istr);
                                ret.returnValue = CMapHelper.read(istr);
                                istr.readPendingValues();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                    {
                        return _iceI_shutdownAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_shutdown(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _shutdown_name = "shutdown";

                    private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _shutdown_name,
                            global::Ice.OperationMode.Normal,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Factory operations

                    public static IPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                        uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

                    public static IPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                    {
                        if (b is not null && b.ice_isA(ice_staticId(), ctx))
                        {
                            IPrxHelper prx = new IPrxHelper();
                            prx.iceCopyFrom(b);
                            return prx;
                        }
                        return null;
                    }

                    public static IPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                    {
                        global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                        try
                        {
                            if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                            {
                                IPrxHelper prx = new IPrxHelper();
                                prx.iceCopyFrom(bb);
                                return prx;
                            }
                        }
                        catch (global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                    public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b)
                    {
                        if (b is not null)
                        {
                            var prx = new IPrxHelper();
                            prx.iceCopyFrom(b);
                            return prx;
                        }
                        return null;
                    }

                    [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                    public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
                    {
                        if (b is not null)
                        {
                            global::Ice.ObjectPrx? bb = b.ice_facet(f);
                            var prx = new IPrxHelper();
                            prx.iceCopyFrom(bb);
                            return prx;
                        }
                        return null;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ice::Object",
                        "::Test::Inner::Inner2::I"
                    };

                    public static string ice_staticId() => "::Test::Inner::Inner2::I";

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, IPrx? v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static IPrx? read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx? proxy = istr.readProxy();
                        if (proxy is not null)
                        {
                             var result = new IPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class IMapHelper
                {
                    public static void write(global::Ice.OutputStream ostr,
                                             global::System.Collections.Generic.Dictionary<string, IPrx?> v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Count);
                            foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                            {
                                ostr.writeString(e.Key);
                                IPrxHelper.write(ostr, e.Value);
                            }
                        }
                    }

                    public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(global::Ice.InputStream istr)
                    {
                        int sz = istr.readSize();
                        global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
                        for(int i = 0; i < sz; ++i)
                        {
                            string k;
                            k = istr.readString();
                            IPrx? v;
                            v = IPrxHelper.read(istr);
                            r[k] = v;
                        }
                        return r;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public sealed class ISeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, IPrx?[] v)
                    {
                        if (v is null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                IPrxHelper.write(ostr, v[ix]);
                            }
                        }
                    }

                    public static IPrx?[] read(global::Ice.InputStream istr)
                    {
                        IPrx?[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(2);
                            v = new IPrx?[szx];
                            for(int ix = 0; ix < szx; ++ix)
                            {
                                v[ix] = IPrxHelper.read(istr);
                            }
                        }
                        return v;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class SSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, global::Ice.scope.Test.Inner.Inner2.S[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            v[ix].ice_writeMembers(ostr);
                        }
                    }
                }

                public static global::Ice.scope.Test.Inner.Inner2.S[] read(global::Ice.InputStream istr)
                {
                    global::Ice.scope.Test.Inner.Inner2.S[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(4);
                        v = new global::Ice.scope.Test.Inner.Inner2.S[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = new global::Ice.scope.Test.Inner.Inner2.S(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class SMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, global::Ice.scope.Test.Inner.Inner2.S> e in v)
                        {
                            ostr.writeString(e.Key);
                            e.Value.ice_writeMembers(ostr);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> r = new global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        global::Ice.scope.Test.Inner.Inner2.S v;
                        v = new global::Ice.scope.Test.Inner.Inner2.S(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class CMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, global::Ice.scope.Test.Inner.Inner2.C?> e in v)
                        {
                            ostr.writeString(e.Key);
                            ostr.writeValue(e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> r = new global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        istr.readValue((global::Ice.scope.Test.Inner.Inner2.C? v) => { r[k] = v; });
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class CSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, global::Ice.scope.Test.Inner.Inner2.C?[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            ostr.writeValue(v[ix]);
                        }
                    }
                }

                public static global::Ice.scope.Test.Inner.Inner2.C?[] read(global::Ice.InputStream istr)
                {
                    global::Ice.scope.Test.Inner.Inner2.C?[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(1);
                        v = new global::Ice.scope.Test.Inner.Inner2.C?[szx];
                        for (int ix = 0; ix < szx; ++ix)
                        {
                            istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<global::Ice.scope.Test.Inner.Inner2.C>(v, ix));
                        }
                    }
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
            {
                public IPrxHelper()
                {
                }

                #region Synchronous operations

                public global::Ice.scope.Test.Inner.Inner2.S opS(global::Ice.scope.Test.Inner.Inner2.S s1, out global::Ice.scope.Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.Inner.Inner2.S[] opSSeq(global::Ice.scope.Test.Inner.Inner2.S[] s1, out global::Ice.scope.Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.Inner.Inner2.C? opC(global::Ice.scope.Test.Inner.Inner2.C? c1, out global::Ice.scope.Test.Inner.Inner2.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.Inner.Inner2.C?[] opCSeq(global::Ice.scope.Test.Inner.Inner2.C?[] c1, out global::Ice.scope.Test.Inner.Inner2.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Ice.scope.Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Ice.scope.Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(global::Ice.scope.Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSResult();
                            ret.s2 = new global::Ice.scope.Test.Inner.Inner2.S(istr);
                            ret.returnValue = new global::Ice.scope.Test.Inner.Inner2.S(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Ice.scope.Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Ice.scope.Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(global::Ice.scope.Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSSeqResult();
                            ret.s2 = global::Ice.scope.Test.Inner.Inner2.SSeqHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.Inner.Inner2.SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSMapResult();
                            ret.s2 = global::Ice.scope.Test.Inner.Inner2.SMapHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.Inner.Inner2.SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Ice.scope.Test.Inner.Inner2.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Ice.scope.Test.Inner.Inner2.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(global::Ice.scope.Test.Inner.Inner2.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCResult();
                            istr.readValue((global::Ice.scope.Test.Inner.Inner2.C? v) => { ret.c2 = v; });
                            istr.readValue((global::Ice.scope.Test.Inner.Inner2.C? v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Ice.scope.Test.Inner.Inner2.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Ice.scope.Test.Inner.Inner2.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(global::Ice.scope.Test.Inner.Inner2.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCSeqResult();
                            ret.c2 = global::Ice.scope.Test.Inner.Inner2.CSeqHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.Inner.Inner2.CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCMapResult();
                            ret.c2 = global::Ice.scope.Test.Inner.Inner2.CMapHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.Inner.Inner2.CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous);
                }

                #endregion

                #region Factory operations

                public static IPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                    uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

                public static IPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                {
                    if (b is not null && b.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                {
                    global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                    try
                    {
                        if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                        {
                            IPrxHelper prx = new IPrxHelper();
                            prx.iceCopyFrom(bb);
                            return prx;
                        }
                    }
                    catch (global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b)
                {
                    if (b is not null)
                    {
                        var prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
                {
                    if (b is not null)
                    {
                        global::Ice.ObjectPrx? bb = b.ice_facet(f);
                        var prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                    return null;
                }

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Test::Inner::I"
                };

                public static string ice_staticId() => "::Test::Inner::I";

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, IPrx? v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx? read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx? proxy = istr.readProxy();
                    if (proxy is not null)
                    {
                         var result = new IPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IMapHelper
            {
                public static void write(global::Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, IPrx?> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                        {
                            ostr.writeString(e.Key);
                            IPrxHelper.write(ostr, e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(global::Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        IPrx? v;
                        v = IPrxHelper.read(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class ISeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, IPrx?[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            IPrxHelper.write(ostr, v[ix]);
                        }
                    }
                }

                public static IPrx?[] read(global::Ice.InputStream istr)
                {
                    IPrx?[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new IPrx?[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = IPrxHelper.read(istr);
                        }
                    }
                    return v;
                }
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
            {
                public IPrxHelper()
                {
                }

                #region Synchronous operations

                public global::Ice.scope.Test.S opS(global::Ice.scope.Test.S s1, out global::Ice.scope.Test.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.S[] opSSeq(global::Ice.scope.Test.S[] s1, out global::Ice.scope.Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.C? opC(global::Ice.scope.Test.C? c1, out global::Ice.scope.Test.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Ice.scope.Test.C?[] opCSeq(global::Ice.scope.Test.C?[] c1, out global::Ice.scope.Test.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Ice.scope.Test.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Ice.scope.Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(global::Ice.scope.Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSResult();
                            ret.s2 = new global::Ice.scope.Test.S(istr);
                            ret.returnValue = new global::Ice.scope.Test.S(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Ice.scope.Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Ice.scope.Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(global::Ice.scope.Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSSeqResult();
                            ret.s2 = global::Ice.scope.Test.SSeqHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSMapResult();
                            ret.s2 = global::Ice.scope.Test.SMapHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Ice.scope.Test.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Ice.scope.Test.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(global::Ice.scope.Test.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCResult();
                            istr.readValue((global::Ice.scope.Test.C? v) => { ret.c2 = v; });
                            istr.readValue((global::Ice.scope.Test.C? v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Ice.scope.Test.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Ice.scope.Test.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(global::Ice.scope.Test.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCSeqResult();
                            ret.c2 = global::Ice.scope.Test.CSeqHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ice.scope.Test.CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCMapResult();
                            ret.c2 = global::Ice.scope.Test.CMapHelper.read(istr);
                            ret.returnValue = global::Ice.scope.Test.CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous);
                }

                #endregion

                #region Factory operations

                public static IPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                    uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

                public static IPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                {
                    if (b is not null && b.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                public static IPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
                {
                    global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                    try
                    {
                        if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                        {
                            IPrxHelper prx = new IPrxHelper();
                            prx.iceCopyFrom(bb);
                            return prx;
                        }
                    }
                    catch (global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b)
                {
                    if (b is not null)
                    {
                        var prx = new IPrxHelper();
                        prx.iceCopyFrom(b);
                        return prx;
                    }
                    return null;
                }

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
                {
                    if (b is not null)
                    {
                        global::Ice.ObjectPrx? bb = b.ice_facet(f);
                        var prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                    return null;
                }

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Inner::Test::Inner2::I"
                };

                public static string ice_staticId() => "::Inner::Test::Inner2::I";

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, IPrx? v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx? read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx? proxy = istr.readProxy();
                    if (proxy is not null)
                    {
                         var result = new IPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace Ice.scope
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class IDisp_ : global::Ice.ObjectImpl, I
        {
            #region Slice operations

            public abstract S opS(S s1, out S s2, global::Ice.Current current);

            public abstract S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current);

            public abstract C? opC(C? c1, out C? c2, global::Ice.Current current);

            public abstract C?[] opCSeq(C?[] c1, out C?[] c2, global::Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::Ice.Current current);

            public abstract E1 opE1(E1 E1, global::Ice.Current current);

            public abstract S1 opS1(S1 S1, global::Ice.Current current);

            public abstract C1? opC1(C1? C1, global::Ice.Current current);

            public abstract void shutdown(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::I";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "opS" => I.iceD_opSAsync(this, request),
                    "opSSeq" => I.iceD_opSSeqAsync(this, request),
                    "opSMap" => I.iceD_opSMapAsync(this, request),
                    "opC" => I.iceD_opCAsync(this, request),
                    "opCSeq" => I.iceD_opCSeqAsync(this, request),
                    "opCMap" => I.iceD_opCMapAsync(this, request),
                    "opE1" => I.iceD_opE1Async(this, request),
                    "opS1" => I.iceD_opS1Async(this, request),
                    "opC1" => I.iceD_opC1Async(this, request),
                    "shutdown" => I.iceD_shutdownAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }

        namespace Inner
        {
            namespace Inner2
            {
                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public abstract class IDisp_ : global::Ice.ObjectImpl, I
                {
                    #region Slice operations

                    public abstract S opS(S s1, out S s2, global::Ice.Current current);

                    public abstract S[] opSSeq(S[] s1, out S[] s2, global::Ice.Current current);

                    public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::Ice.Current current);

                    public abstract C? opC(C? c1, out C? c2, global::Ice.Current current);

                    public abstract C?[] opCSeq(C?[] c1, out C?[] c2, global::Ice.Current current);

                    public abstract global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::Ice.Current current);

                    public abstract void shutdown(global::Ice.Current current);

                    #endregion

                    #region Slice type-related members

                    public override string ice_id(global::Ice.Current current) => ice_staticId();

                    public static new string ice_staticId() => "::Test::Inner::Inner2::I";

                    #endregion

                    #region Operation dispatch

                    public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                        request.current.operation switch
                        {
                            "opS" => I.iceD_opSAsync(this, request),
                            "opSSeq" => I.iceD_opSSeqAsync(this, request),
                            "opSMap" => I.iceD_opSMapAsync(this, request),
                            "opC" => I.iceD_opCAsync(this, request),
                            "opCSeq" => I.iceD_opCSeqAsync(this, request),
                            "opCMap" => I.iceD_opCMapAsync(this, request),
                            "shutdown" => I.iceD_shutdownAsync(this, request),
                            "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                            "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                            "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                            "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                            _ => throw new global::Ice.OperationNotExistException()
                        };

                    #endregion
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public abstract class IDisp_ : global::Ice.ObjectImpl, I
            {
                #region Slice operations

                public abstract global::Ice.scope.Test.Inner.Inner2.S opS(global::Ice.scope.Test.Inner.Inner2.S s1, out global::Ice.scope.Test.Inner.Inner2.S s2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.Inner.Inner2.S[] opSSeq(global::Ice.scope.Test.Inner.Inner2.S[] s1, out global::Ice.scope.Test.Inner.Inner2.S[] s2, global::Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> s2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.Inner.Inner2.C? opC(global::Ice.scope.Test.Inner.Inner2.C? c1, out global::Ice.scope.Test.Inner.Inner2.C? c2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.Inner.Inner2.C?[] opCSeq(global::Ice.scope.Test.Inner.Inner2.C?[] c1, out global::Ice.scope.Test.Inner.Inner2.C?[] c2, global::Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> c2, global::Ice.Current current);

                public abstract void shutdown(global::Ice.Current current);

                #endregion

                #region Slice type-related members

                public override string ice_id(global::Ice.Current current) => ice_staticId();

                public static new string ice_staticId() => "::Test::Inner::I";

                #endregion

                #region Operation dispatch

                public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                    request.current.operation switch
                    {
                        "opS" => I.iceD_opSAsync(this, request),
                        "opSSeq" => I.iceD_opSSeqAsync(this, request),
                        "opSMap" => I.iceD_opSMapAsync(this, request),
                        "opC" => I.iceD_opCAsync(this, request),
                        "opCSeq" => I.iceD_opCSeqAsync(this, request),
                        "opCMap" => I.iceD_opCMapAsync(this, request),
                        "shutdown" => I.iceD_shutdownAsync(this, request),
                        "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                        "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                        "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                        "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                        _ => throw new global::Ice.OperationNotExistException()
                    };

                #endregion
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public abstract class IDisp_ : global::Ice.ObjectImpl, I
            {
                #region Slice operations

                public abstract global::Ice.scope.Test.S opS(global::Ice.scope.Test.S s1, out global::Ice.scope.Test.S s2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.S[] opSSeq(global::Ice.scope.Test.S[] s1, out global::Ice.scope.Test.S[] s2, global::Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> s2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.C? opC(global::Ice.scope.Test.C? c1, out global::Ice.scope.Test.C? c2, global::Ice.Current current);

                public abstract global::Ice.scope.Test.C?[] opCSeq(global::Ice.scope.Test.C?[] c1, out global::Ice.scope.Test.C?[] c2, global::Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> c2, global::Ice.Current current);

                public abstract void shutdown(global::Ice.Current current);

                #endregion

                #region Slice type-related members

                public override string ice_id(global::Ice.Current current) => ice_staticId();

                public static new string ice_staticId() => "::Inner::Test::Inner2::I";

                #endregion

                #region Operation dispatch

                public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                    request.current.operation switch
                    {
                        "opS" => I.iceD_opSAsync(this, request),
                        "opSSeq" => I.iceD_opSSeqAsync(this, request),
                        "opSMap" => I.iceD_opSMapAsync(this, request),
                        "opC" => I.iceD_opCAsync(this, request),
                        "opCSeq" => I.iceD_opCSeqAsync(this, request),
                        "opCMap" => I.iceD_opCMapAsync(this, request),
                        "shutdown" => I.iceD_shutdownAsync(this, request),
                        "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                        "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                        "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                        "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                        _ => throw new global::Ice.OperationNotExistException()
                    };

                #endregion
            }
        }
    }
}

namespace Ice.scope
{
    namespace Test
    {
        public partial interface I
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                S iceP_s1;
                iceP_s1 = new S(istr);
                istr.endEncapsulation();
                S iceP_s2;
                var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                iceP_s2.ice_writeMembers(ostr);
                ret.ice_writeMembers(ostr);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSSeqAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                S[] iceP_s1;
                iceP_s1 = SSeqHelper.read(istr);
                istr.endEncapsulation();
                S[] iceP_s2;
                var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                SSeqHelper.write(ostr, iceP_s2);
                SSeqHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSMapAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, S> iceP_s1;
                iceP_s1 = SMapHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
                var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                SMapHelper.write(ostr, iceP_s2);
                SMapHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                C? iceP_c1 = null;
                istr.readValue((C? v) => { iceP_c1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                C? iceP_c2;
                var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(iceP_c2);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCSeqAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                C?[] iceP_c1;
                iceP_c1 = CSeqHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                C?[] iceP_c2;
                var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                CSeqHelper.write(ostr, iceP_c2);
                CSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCMapAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, C?> iceP_c1;
                iceP_c1 = CMapHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, C?> iceP_c2;
                var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                CMapHelper.write(ostr, iceP_c2);
                CMapHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opE1Async(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                E1 iceP_E1;
                iceP_E1 = (E1)istr.readEnum(2);
                istr.endEncapsulation();
                var ret = obj.opE1(iceP_E1, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeEnum((int)ret, 2);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opS1Async(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                S1 iceP_S1;
                iceP_S1 = new S1(istr);
                istr.endEncapsulation();
                var ret = obj.opS1(iceP_S1, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                S1.ice_write(ostr, ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opC1Async(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                C1? iceP_C1 = null;
                istr.readValue((C1? v) => { iceP_C1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                var ret = obj.opC1(iceP_C1, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                I obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        namespace Inner
        {
            namespace Inner2
            {
                public partial interface I
                {
                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        S iceP_s1;
                        iceP_s1 = new S(istr);
                        istr.endEncapsulation();
                        S iceP_s2;
                        var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        iceP_s2.ice_writeMembers(ostr);
                        ret.ice_writeMembers(ostr);
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSSeqAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        S[] iceP_s1;
                        iceP_s1 = SSeqHelper.read(istr);
                        istr.endEncapsulation();
                        S[] iceP_s2;
                        var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        SSeqHelper.write(ostr, iceP_s2);
                        SSeqHelper.write(ostr, ret);
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSMapAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        global::System.Collections.Generic.Dictionary<string, S> iceP_s1;
                        iceP_s1 = SMapHelper.read(istr);
                        istr.endEncapsulation();
                        global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
                        var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        SMapHelper.write(ostr, iceP_s2);
                        SMapHelper.write(ostr, ret);
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        C? iceP_c1 = null;
                        istr.readValue((C? v) => { iceP_c1 = v; });
                        istr.readPendingValues();
                        istr.endEncapsulation();
                        C? iceP_c2;
                        var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        ostr.writeValue(iceP_c2);
                        ostr.writeValue(ret);
                        ostr.writePendingValues();
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCSeqAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        C?[] iceP_c1;
                        iceP_c1 = CSeqHelper.read(istr);
                        istr.readPendingValues();
                        istr.endEncapsulation();
                        C?[] iceP_c2;
                        var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        CSeqHelper.write(ostr, iceP_c2);
                        CSeqHelper.write(ostr, ret);
                        ostr.writePendingValues();
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCMapAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        var istr = request.inputStream;
                        istr.startEncapsulation();
                        global::System.Collections.Generic.Dictionary<string, C?> iceP_c1;
                        iceP_c1 = CMapHelper.read(istr);
                        istr.readPendingValues();
                        istr.endEncapsulation();
                        global::System.Collections.Generic.Dictionary<string, C?> iceP_c2;
                        var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                        var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                        ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                        CMapHelper.write(ostr, iceP_c2);
                        CMapHelper.write(ostr, ret);
                        ostr.writePendingValues();
                        ostr.endEncapsulation();
                        return new(new global::Ice.OutgoingResponse(ostr));
                    }

                    protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                        I obj,
                        global::Ice.IncomingRequest request)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                        request.inputStream.skipEmptyEncapsulation();
                        obj.shutdown(request.current);
                        return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
                    }
                }
            }

            public partial interface I
            {
                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.S iceP_s1;
                    iceP_s1 = new global::Ice.scope.Test.Inner.Inner2.S(istr);
                    istr.endEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSSeqAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.S[] iceP_s1;
                    iceP_s1 = global::Ice.scope.Test.Inner.Inner2.SSeqHelper.read(istr);
                    istr.endEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s2);
                    global::Ice.scope.Test.Inner.Inner2.SSeqHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSMapAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> iceP_s1;
                    iceP_s1 = global::Ice.scope.Test.Inner.Inner2.SMapHelper.read(istr);
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s2);
                    global::Ice.scope.Test.Inner.Inner2.SMapHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.C? iceP_c1 = null;
                    istr.readValue((global::Ice.scope.Test.Inner.Inner2.C? v) => { iceP_c1 = v; });
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.C? iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCSeqAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.C?[] iceP_c1;
                    iceP_c1 = global::Ice.scope.Test.Inner.Inner2.CSeqHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Ice.scope.Test.Inner.Inner2.C?[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c2);
                    global::Ice.scope.Test.Inner.Inner2.CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCMapAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> iceP_c1;
                    iceP_c1 = global::Ice.scope.Test.Inner.Inner2.CMapHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.Inner.Inner2.C?> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c2);
                    global::Ice.scope.Test.Inner.Inner2.CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    request.inputStream.skipEmptyEncapsulation();
                    obj.shutdown(request.current);
                    return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
                }
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public partial interface I
            {
                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.S iceP_s1;
                    iceP_s1 = new global::Ice.scope.Test.S(istr);
                    istr.endEncapsulation();
                    global::Ice.scope.Test.S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSSeqAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.S[] iceP_s1;
                    iceP_s1 = global::Ice.scope.Test.SSeqHelper.read(istr);
                    istr.endEncapsulation();
                    global::Ice.scope.Test.S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.SSeqHelper.write(ostr, iceP_s2);
                    global::Ice.scope.Test.SSeqHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opSMapAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> iceP_s1;
                    iceP_s1 = global::Ice.scope.Test.SMapHelper.read(istr);
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.SMapHelper.write(ostr, iceP_s2);
                    global::Ice.scope.Test.SMapHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.C? iceP_c1 = null;
                    istr.readValue((global::Ice.scope.Test.C? v) => { iceP_c1 = v; });
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Ice.scope.Test.C? iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCSeqAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Ice.scope.Test.C?[] iceP_c1;
                    iceP_c1 = global::Ice.scope.Test.CSeqHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Ice.scope.Test.C?[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.CSeqHelper.write(ostr, iceP_c2);
                    global::Ice.scope.Test.CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_opCMapAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> iceP_c1;
                    iceP_c1 = global::Ice.scope.Test.CMapHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Ice.scope.Test.C?> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                    var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                    global::Ice.scope.Test.CMapHelper.write(ostr, iceP_c2);
                    global::Ice.scope.Test.CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new global::Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                    I obj,
                    global::Ice.IncomingRequest request)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                    request.inputStream.skipEmptyEncapsulation();
                    obj.shutdown(request.current);
                    return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
                }
            }
        }
    }
}
