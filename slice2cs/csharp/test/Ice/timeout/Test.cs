// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.timeout
{
    namespace Test
    {
        public sealed class ByteSeqHelper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        public interface TimeoutPrx : Ice.ObjectPrx
        {
            void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void sendData(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task sendDataAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void sleep(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task sleepAsync(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class TimeoutPrxHelper : Ice.ObjectPrxHelperBase, TimeoutPrx
        {
            public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void sendData(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_sendDataAsync(seq, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void sleep(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_sleepAsync(to, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task sendDataAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_sendDataAsync(seq, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_sendDataAsync(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_sendData(iceP_seq, context, synchronous, completed);
                return completed.Task;
            }

            private const string _sendData_name = "sendData";

            private void _iceI_sendData(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _sendData_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ByteSeqHelper.write(ostr, iceP_seq);
                    });
            }

            public global::System.Threading.Tasks.Task sleepAsync(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_sleepAsync(to, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_sleepAsync(int iceP_to, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_sleep(iceP_to, context, synchronous, completed);
                return completed.Task;
            }

            private const string _sleep_name = "sleep";

            private void _iceI_sleep(int iceP_to, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _sleep_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_to);
                    });
            }

            public static TimeoutPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TimeoutPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TimeoutPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TimeoutPrxHelper(b) : null;

            public static TimeoutPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TimeoutPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TimeoutPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TimeoutPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Timeout"
            };

            public static string ice_staticId() => "::Test::Timeout";

            public static void write(Ice.OutputStream ostr, TimeoutPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TimeoutPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TimeoutPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TimeoutPrxHelper(reference);

            private TimeoutPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TimeoutPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public interface ControllerPrx : Ice.ObjectPrx
        {
            void holdAdapter(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task holdAdapterAsync(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void resumeAdapter(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task resumeAdapterAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class ControllerPrxHelper : Ice.ObjectPrxHelperBase, ControllerPrx
        {
            public void holdAdapter(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_holdAdapterAsync(to, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void resumeAdapter(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_resumeAdapterAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task holdAdapterAsync(int to, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_holdAdapterAsync(to, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_holdAdapterAsync(int iceP_to, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_holdAdapter(iceP_to, context, synchronous, completed);
                return completed.Task;
            }

            private const string _holdAdapter_name = "holdAdapter";

            private void _iceI_holdAdapter(int iceP_to, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _holdAdapter_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_to);
                    });
            }

            public global::System.Threading.Tasks.Task resumeAdapterAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_resumeAdapterAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_resumeAdapterAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_resumeAdapter(context, synchronous, completed);
                return completed.Task;
            }

            private const string _resumeAdapter_name = "resumeAdapter";

            private void _iceI_resumeAdapter(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _resumeAdapter_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static ControllerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ControllerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ControllerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ControllerPrxHelper(b) : null;

            public static ControllerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ControllerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ControllerPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ControllerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Controller"
            };

            public static string ice_staticId() => "::Test::Controller";

            public static void write(Ice.OutputStream ostr, ControllerPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ControllerPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ControllerPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ControllerPrxHelper(reference);

            private ControllerPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ControllerPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.timeout
{
    namespace Test
    {
        [Ice.SliceTypeId("::Test::Timeout")]
        public partial interface Timeout : Ice.Object
        {
            void op(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
                Timeout obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.op(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void sendData(byte[] seq, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_sendDataAsync(
                Timeout obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                byte[] iceP_seq;
                iceP_seq = ByteSeqHelper.read(istr);
                istr.endEncapsulation();
                obj.sendData(iceP_seq, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void sleep(int to, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_sleepAsync(
                Timeout obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_to;
                iceP_to = istr.readInt();
                istr.endEncapsulation();
                obj.sleep(iceP_to, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class TimeoutDisp_ : Ice.ObjectImpl, Timeout
        {
            public abstract void op(Ice.Current current);

            public abstract void sendData(byte[] seq, Ice.Current current);

            public abstract void sleep(int to, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Timeout";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "op" => Timeout.iceD_opAsync(this, request),
                    "sendData" => Timeout.iceD_sendDataAsync(this, request),
                    "sleep" => Timeout.iceD_sleepAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Controller")]
        public partial interface Controller : Ice.Object
        {
            void holdAdapter(int to, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_holdAdapterAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_to;
                iceP_to = istr.readInt();
                istr.endEncapsulation();
                obj.holdAdapter(iceP_to, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void resumeAdapter(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_resumeAdapterAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.resumeAdapter(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            void shutdown(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class ControllerDisp_ : Ice.ObjectImpl, Controller
        {
            public abstract void holdAdapter(int to, Ice.Current current);

            public abstract void resumeAdapter(Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Controller";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "holdAdapter" => Controller.iceD_holdAdapterAsync(this, request),
                    "resumeAdapter" => Controller.iceD_resumeAdapterAsync(this, request),
                    "shutdown" => Controller.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}
