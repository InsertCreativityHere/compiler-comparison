//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.acm
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RemoteObjectAdapter : global::Ice.Object, RemoteObjectAdapterOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RemoteCommunicator : global::Ice.Object, RemoteCommunicatorOperations_
        {
        }
    }
}

namespace Ice.acm
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_TestIntf_sleep();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_TestIntf_sleepAndHold();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_TestIntf_interruptSleep();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_TestIntf_startHeartbeatCount();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_TestIntf_waitForHeartbeatCount();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteObjectAdapter_getTestIntf(TestIntfPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteObjectAdapter_activate();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteObjectAdapter_hold();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteObjectAdapter_deactivate();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteCommunicator_createObjectAdapter(RemoteObjectAdapterPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_RemoteCommunicator_shutdown();
    }
}

namespace Ice.acm
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface TestIntfPrx : global::Ice.ObjectPrx
        {
            void sleep(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task sleepAsync(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_sleep> begin_sleep(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_sleep(int seconds, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_sleep(int seconds, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_sleep(global::Ice.AsyncResult asyncResult);

            void sleepAndHold(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task sleepAndHoldAsync(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_sleepAndHold> begin_sleepAndHold(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_sleepAndHold(int seconds, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_sleepAndHold(int seconds, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_sleepAndHold(global::Ice.AsyncResult asyncResult);

            void interruptSleep(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task interruptSleepAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_interruptSleep> begin_interruptSleep(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_interruptSleep(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_interruptSleep(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_interruptSleep(global::Ice.AsyncResult asyncResult);

            void startHeartbeatCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task startHeartbeatCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_startHeartbeatCount> begin_startHeartbeatCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_startHeartbeatCount(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_startHeartbeatCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_startHeartbeatCount(global::Ice.AsyncResult asyncResult);

            void waitForHeartbeatCount(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task waitForHeartbeatCountAsync(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestIntf_waitForHeartbeatCount> begin_waitForHeartbeatCount(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_waitForHeartbeatCount(int count, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_waitForHeartbeatCount(int count, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_waitForHeartbeatCount(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface RemoteObjectAdapterPrx : global::Ice.ObjectPrx
        {
            TestIntfPrx getTestIntf(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<TestIntfPrx> getTestIntfAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteObjectAdapter_getTestIntf> begin_getTestIntf(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getTestIntf(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getTestIntf(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            TestIntfPrx end_getTestIntf(global::Ice.AsyncResult asyncResult);

            void activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task activateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteObjectAdapter_activate> begin_activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_activate(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_activate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_activate(global::Ice.AsyncResult asyncResult);

            void hold(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task holdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteObjectAdapter_hold> begin_hold(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_hold(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_hold(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_hold(global::Ice.AsyncResult asyncResult);

            void deactivate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task deactivateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteObjectAdapter_deactivate> begin_deactivate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_deactivate(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_deactivate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_deactivate(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface RemoteCommunicatorPrx : global::Ice.ObjectPrx
        {
            RemoteObjectAdapterPrx createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx> createObjectAdapterAsync(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_createObjectAdapter> begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            RemoteObjectAdapterPrx end_createObjectAdapter(global::Ice.AsyncResult asyncResult);

            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ice.acm
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface TestIntfOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void sleep(int seconds, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void sleepAndHold(int seconds, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void interruptSleep(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void startHeartbeatCount(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void waitForHeartbeatCount(int count, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface RemoteObjectAdapterOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            TestIntfPrx getTestIntf(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void activate(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void hold(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void deactivate(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface RemoteCommunicatorOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            RemoteObjectAdapterPrx createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            void shutdown(global::Ice.Current current = null);
        }
    }
}

namespace Ice.acm
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
        {
            public TestIntfPrxHelper()
            {
            }

            #region Synchronous operations

            public void sleep(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_sleepAsync(seconds, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void sleepAndHold(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_sleepAndHoldAsync(seconds, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void interruptSleep(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_interruptSleepAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void startHeartbeatCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_startHeartbeatCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void waitForHeartbeatCount(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_waitForHeartbeatCountAsync(count, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task sleepAsync(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_sleepAsync(seconds, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_sleepAsync(int iceP_seconds, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_sleep(iceP_seconds, context, synchronous, completed);
                return completed.Task;
            }

            private const string _sleep_name = "sleep";

            private void _iceI_sleep(int iceP_seconds, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _sleep_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_seconds);
                    });
            }

            public global::System.Threading.Tasks.Task sleepAndHoldAsync(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_sleepAndHoldAsync(seconds, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_sleepAndHoldAsync(int iceP_seconds, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_sleepAndHold(iceP_seconds, context, synchronous, completed);
                return completed.Task;
            }

            private const string _sleepAndHold_name = "sleepAndHold";

            private void _iceI_sleepAndHold(int iceP_seconds, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _sleepAndHold_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_seconds);
                    });
            }

            public global::System.Threading.Tasks.Task interruptSleepAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_interruptSleepAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_interruptSleepAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_interruptSleep(context, synchronous, completed);
                return completed.Task;
            }

            private const string _interruptSleep_name = "interruptSleep";

            private void _iceI_interruptSleep(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _interruptSleep_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task startHeartbeatCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_startHeartbeatCountAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_startHeartbeatCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_startHeartbeatCount(context, synchronous, completed);
                return completed.Task;
            }

            private const string _startHeartbeatCount_name = "startHeartbeatCount";

            private void _iceI_startHeartbeatCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _startHeartbeatCount_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task waitForHeartbeatCountAsync(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_waitForHeartbeatCountAsync(count, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_waitForHeartbeatCountAsync(int iceP_count, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_waitForHeartbeatCount(iceP_count, context, synchronous, completed);
                return completed.Task;
            }

            private const string _waitForHeartbeatCount_name = "waitForHeartbeatCount";

            private void _iceI_waitForHeartbeatCount(int iceP_count, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _waitForHeartbeatCount_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_count);
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_TestIntf_sleep> begin_sleep(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_sleep(seconds, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_sleep(int seconds, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_sleep(seconds, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_sleep(int seconds, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_sleep(seconds, context, callback, cookie, false);
            }

            public void end_sleep(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sleep_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_sleep> begin_sleep(int iceP_seconds, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_sleep, object>(
                    (Callback_TestIntf_sleep cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _sleep_name, cookie, completedCallback);
                _iceI_sleep(iceP_seconds, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_sleepAndHold> begin_sleepAndHold(int seconds, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_sleepAndHold(seconds, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_sleepAndHold(int seconds, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_sleepAndHold(seconds, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_sleepAndHold(int seconds, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_sleepAndHold(seconds, context, callback, cookie, false);
            }

            public void end_sleepAndHold(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sleepAndHold_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_sleepAndHold> begin_sleepAndHold(int iceP_seconds, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_sleepAndHold, object>(
                    (Callback_TestIntf_sleepAndHold cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _sleepAndHold_name, cookie, completedCallback);
                _iceI_sleepAndHold(iceP_seconds, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_interruptSleep> begin_interruptSleep(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_interruptSleep(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_interruptSleep(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_interruptSleep(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_interruptSleep(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_interruptSleep(context, callback, cookie, false);
            }

            public void end_interruptSleep(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _interruptSleep_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_interruptSleep> begin_interruptSleep(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_interruptSleep, object>(
                    (Callback_TestIntf_interruptSleep cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _interruptSleep_name, cookie, completedCallback);
                _iceI_interruptSleep(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_startHeartbeatCount> begin_startHeartbeatCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_startHeartbeatCount(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_startHeartbeatCount(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_startHeartbeatCount(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_startHeartbeatCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_startHeartbeatCount(context, callback, cookie, false);
            }

            public void end_startHeartbeatCount(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _startHeartbeatCount_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_startHeartbeatCount> begin_startHeartbeatCount(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_startHeartbeatCount, object>(
                    (Callback_TestIntf_startHeartbeatCount cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _startHeartbeatCount_name, cookie, completedCallback);
                _iceI_startHeartbeatCount(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TestIntf_waitForHeartbeatCount> begin_waitForHeartbeatCount(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_waitForHeartbeatCount(count, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_waitForHeartbeatCount(int count, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_waitForHeartbeatCount(count, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_waitForHeartbeatCount(int count, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_waitForHeartbeatCount(count, context, callback, cookie, false);
            }

            public void end_waitForHeartbeatCount(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _waitForHeartbeatCount_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestIntf_waitForHeartbeatCount> begin_waitForHeartbeatCount(int iceP_count, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_waitForHeartbeatCount, object>(
                    (Callback_TestIntf_waitForHeartbeatCount cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _waitForHeartbeatCount_name, cookie, completedCallback);
                _iceI_waitForHeartbeatCount(iceP_count, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TestIntfPrxHelper h = new TestIntfPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestIntfPrxHelper h = new TestIntfPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestIntfPrx r = b as TestIntfPrx;
                if(r == null)
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
            {
                ostr.writeProxy(v);
            }

            public static TestIntfPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TestIntfPrxHelper result = new TestIntfPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public sealed class RemoteObjectAdapterPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteObjectAdapterPrx
        {
            public RemoteObjectAdapterPrxHelper()
            {
            }

            #region Synchronous operations

            public TestIntfPrx getTestIntf(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getTestIntfAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_activateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void hold(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_holdAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void deactivate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_deactivateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<TestIntfPrx> getTestIntfAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getTestIntfAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<TestIntfPrx> _iceI_getTestIntfAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getTestIntf_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntfPrx>(progress, cancel);
                _iceI_getTestIntf(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getTestIntf_name = "getTestIntf";

            private void _iceI_getTestIntf(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<TestIntfPrx>(completed);
                outAsync.invoke(
                    _getTestIntf_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        TestIntfPrx ret;
                        ret = TestIntfPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task activateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_activateAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_activateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_activate(context, synchronous, completed);
                return completed.Task;
            }

            private const string _activate_name = "activate";

            private void _iceI_activate(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _activate_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task holdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_holdAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_holdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_hold(context, synchronous, completed);
                return completed.Task;
            }

            private const string _hold_name = "hold";

            private void _iceI_hold(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _hold_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task deactivateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_deactivateAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_deactivateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_deactivate(context, synchronous, completed);
                return completed.Task;
            }

            private const string _deactivate_name = "deactivate";

            private void _iceI_deactivate(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _deactivate_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_RemoteObjectAdapter_getTestIntf> begin_getTestIntf(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getTestIntf(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getTestIntf(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getTestIntf(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getTestIntf(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getTestIntf(context, callback, cookie, false);
            }

            public TestIntfPrx end_getTestIntf(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTestIntf_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntfPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteObjectAdapter_getTestIntf> begin_getTestIntf(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getTestIntf_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteObjectAdapter_getTestIntf, TestIntfPrx>(
                    (Callback_RemoteObjectAdapter_getTestIntf cb, TestIntfPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getTestIntf_name, cookie, completedCallback);
                _iceI_getTestIntf(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteObjectAdapter_activate> begin_activate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_activate(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_activate(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_activate(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_activate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_activate(context, callback, cookie, false);
            }

            public void end_activate(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _activate_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteObjectAdapter_activate> begin_activate(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteObjectAdapter_activate, object>(
                    (Callback_RemoteObjectAdapter_activate cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _activate_name, cookie, completedCallback);
                _iceI_activate(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteObjectAdapter_hold> begin_hold(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_hold(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_hold(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_hold(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_hold(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_hold(context, callback, cookie, false);
            }

            public void end_hold(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _hold_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteObjectAdapter_hold> begin_hold(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteObjectAdapter_hold, object>(
                    (Callback_RemoteObjectAdapter_hold cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _hold_name, cookie, completedCallback);
                _iceI_hold(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteObjectAdapter_deactivate> begin_deactivate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_deactivate(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_deactivate(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_deactivate(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_deactivate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_deactivate(context, callback, cookie, false);
            }

            public void end_deactivate(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _deactivate_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteObjectAdapter_deactivate> begin_deactivate(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteObjectAdapter_deactivate, object>(
                    (Callback_RemoteObjectAdapter_deactivate cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _deactivate_name, cookie, completedCallback);
                _iceI_deactivate(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static RemoteObjectAdapterPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteObjectAdapterPrx r = b as RemoteObjectAdapterPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteObjectAdapterPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteObjectAdapterPrx r = b as RemoteObjectAdapterPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteObjectAdapterPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteObjectAdapterPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteObjectAdapterPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteObjectAdapterPrx r = b as RemoteObjectAdapterPrx;
                if(r == null)
                {
                    RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteObjectAdapterPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                RemoteObjectAdapterPrxHelper h = new RemoteObjectAdapterPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteObjectAdapter"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteObjectAdapterPrx v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteObjectAdapterPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    RemoteObjectAdapterPrxHelper result = new RemoteObjectAdapterPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public sealed class RemoteCommunicatorPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteCommunicatorPrx
        {
            public RemoteCommunicatorPrxHelper()
            {
            }

            #region Synchronous operations

            public RemoteObjectAdapterPrx createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_createObjectAdapterAsync(acmTimeout, close, heartbeat, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx> createObjectAdapterAsync(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_createObjectAdapterAsync(acmTimeout, close, heartbeat, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx> _iceI_createObjectAdapterAsync(int iceP_acmTimeout, int iceP_close, int iceP_heartbeat, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createObjectAdapter_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<RemoteObjectAdapterPrx>(progress, cancel);
                _iceI_createObjectAdapter(iceP_acmTimeout, iceP_close, iceP_heartbeat, context, synchronous, completed);
                return completed.Task;
            }

            private const string _createObjectAdapter_name = "createObjectAdapter";

            private void _iceI_createObjectAdapter(int iceP_acmTimeout, int iceP_close, int iceP_heartbeat, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RemoteObjectAdapterPrx>(completed);
                outAsync.invoke(
                    _createObjectAdapter_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_acmTimeout);
                        ostr.writeInt(iceP_close);
                        ostr.writeInt(iceP_heartbeat);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        RemoteObjectAdapterPrx ret;
                        ret = RemoteObjectAdapterPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_createObjectAdapter> begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_createObjectAdapter(acmTimeout, close, heartbeat, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createObjectAdapter(acmTimeout, close, heartbeat, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createObjectAdapter(acmTimeout, close, heartbeat, context, callback, cookie, false);
            }

            public RemoteObjectAdapterPrx end_createObjectAdapter(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createObjectAdapter_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<RemoteObjectAdapterPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_createObjectAdapter> begin_createObjectAdapter(int iceP_acmTimeout, int iceP_close, int iceP_heartbeat, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_createObjectAdapter_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_createObjectAdapter, RemoteObjectAdapterPrx>(
                    (Callback_RemoteCommunicator_createObjectAdapter cb, RemoteObjectAdapterPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _createObjectAdapter_name, cookie, completedCallback);
                _iceI_createObjectAdapter(iceP_acmTimeout, iceP_close, iceP_heartbeat, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_shutdown, object>(
                    (Callback_RemoteCommunicator_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if(r == null)
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicator"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteCommunicatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteCommunicatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    RemoteCommunicatorPrxHelper result = new RemoteCommunicatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.acm
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
        {
            #region Slice operations

            public abstract void sleep(int seconds, global::Ice.Current current = null);

            public abstract void sleepAndHold(int seconds, global::Ice.Current current = null);

            public abstract void interruptSleep(global::Ice.Current current = null);

            public abstract void startHeartbeatCount(global::Ice.Current current = null);

            public abstract void waitForHeartbeatCount(int count, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_sleep(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_seconds;
                iceP_seconds = istr.readInt();
                inS.endReadParams();
                obj.sleep(iceP_seconds, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_sleepAndHold(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_seconds;
                iceP_seconds = istr.readInt();
                inS.endReadParams();
                obj.sleepAndHold(iceP_seconds, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_interruptSleep(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.interruptSleep(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_startHeartbeatCount(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.startHeartbeatCount(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_waitForHeartbeatCount(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_count;
                iceP_count = istr.readInt();
                inS.endReadParams();
                obj.waitForHeartbeatCount(iceP_count, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "interruptSleep",
                "sleep",
                "sleepAndHold",
                "startHeartbeatCount",
                "waitForHeartbeatCount"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_interruptSleep(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_sleep(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_sleepAndHold(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_startHeartbeatCount(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_waitForHeartbeatCount(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class RemoteObjectAdapterDisp_ : global::Ice.ObjectImpl, RemoteObjectAdapter
        {
            #region Slice operations

            public abstract TestIntfPrx getTestIntf(global::Ice.Current current = null);

            public abstract void activate(global::Ice.Current current = null);

            public abstract void hold(global::Ice.Current current = null);

            public abstract void deactivate(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteObjectAdapter"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getTestIntf(RemoteObjectAdapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getTestIntf(current);
                var ostr = inS.startWriteParams();
                TestIntfPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_activate(RemoteObjectAdapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.activate(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_hold(RemoteObjectAdapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.hold(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_deactivate(RemoteObjectAdapter obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.deactivate(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "activate",
                "deactivate",
                "getTestIntf",
                "hold",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_activate(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_deactivate(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getTestIntf(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_hold(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class RemoteCommunicatorDisp_ : global::Ice.ObjectImpl, RemoteCommunicator
        {
            #region Slice operations

            public abstract RemoteObjectAdapterPrx createObjectAdapter(int acmTimeout, int close, int heartbeat, global::Ice.Current current = null);

            public abstract void shutdown(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicator"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_createObjectAdapter(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_acmTimeout;
                int iceP_close;
                int iceP_heartbeat;
                iceP_acmTimeout = istr.readInt();
                iceP_close = istr.readInt();
                iceP_heartbeat = istr.readInt();
                inS.endReadParams();
                var ret = obj.createObjectAdapter(iceP_acmTimeout, iceP_close, iceP_heartbeat, current);
                var ostr = inS.startWriteParams();
                RemoteObjectAdapterPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "createObjectAdapter",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_createObjectAdapter(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
