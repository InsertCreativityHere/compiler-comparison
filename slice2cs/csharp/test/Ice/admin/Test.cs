//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.admin
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RemoteCommunicator : global::Ice.Object, RemoteCommunicatorOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RemoteCommunicatorFactory : global::Ice.Object, RemoteCommunicatorFactoryOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface TestFacet : global::Ice.Object, TestFacetOperations_
        {
        }
    }
}

namespace Ice.admin
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_getAdmin(global::Ice.ObjectPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_getChanges(global::System.Collections.Generic.Dictionary<string, string> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_print();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_trace();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_warning();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_error();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_waitForShutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicator_destroy();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicatorFactory_createCommunicator(RemoteCommunicatorPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_RemoteCommunicatorFactory_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_TestFacet_op();
    }
}

namespace Ice.admin
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteCommunicatorPrx : global::Ice.ObjectPrx
        {
            global::Ice.ObjectPrx getAdmin(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getAdminAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_getAdmin> begin_getAdmin(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getAdmin(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getAdmin(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.ObjectPrx end_getAdmin(global::Ice.AsyncResult asyncResult);

            global::System.Collections.Generic.Dictionary<string, string> getChanges(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getChangesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_getChanges> begin_getChanges(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getChanges(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getChanges(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::System.Collections.Generic.Dictionary<string, string> end_getChanges(global::Ice.AsyncResult asyncResult);

            void print(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task printAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_print> begin_print(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_print(string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_print(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_print(global::Ice.AsyncResult asyncResult);

            void trace(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task traceAsync(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_trace> begin_trace(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_trace(string category, string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_trace(string category, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_trace(global::Ice.AsyncResult asyncResult);

            void warning(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task warningAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_warning> begin_warning(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_warning(string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_warning(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_warning(global::Ice.AsyncResult asyncResult);

            void error(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task errorAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_error> begin_error(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_error(string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_error(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_error(global::Ice.AsyncResult asyncResult);

            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);

            void waitForShutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task waitForShutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_waitForShutdown> begin_waitForShutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_waitForShutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_waitForShutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_waitForShutdown(global::Ice.AsyncResult asyncResult);

            void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicator_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_destroy(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteCommunicatorFactoryPrx : global::Ice.ObjectPrx
        {
            RemoteCommunicatorPrx createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<RemoteCommunicatorPrx> createCommunicatorAsync(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_createCommunicator> begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            RemoteCommunicatorPrx end_createCommunicator(global::Ice.AsyncResult asyncResult);

            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestFacetPrx : global::Ice.ObjectPrx
        {
            void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TestFacet_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_op(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ice.admin
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteCommunicatorOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Ice.ObjectPrx getAdmin(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string> getChanges(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void print(string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void trace(string category, string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void warning(string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void error(string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void waitForShutdown(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void destroy(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteCommunicatorFactoryOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            RemoteCommunicatorPrx createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestFacetOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(global::Ice.Current current = null);
        }
    }
}

namespace Ice.admin
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class RemoteCommunicatorPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteCommunicatorPrx
        {
            public RemoteCommunicatorPrxHelper()
            {
            }

            #region Synchronous operations

            public global::Ice.ObjectPrx getAdmin(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getAdminAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> getChanges(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getChangesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void print(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_printAsync(message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void trace(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_traceAsync(category, message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void warning(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_warningAsync(message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void error(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_errorAsync(message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void waitForShutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_waitForShutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getAdminAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getAdminAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_getAdminAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAdmin_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
                _iceI_getAdmin(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAdmin_name = "getAdmin";

            private void _iceI_getAdmin(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
                outAsync.invoke(
                    _getAdmin_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.ObjectPrx ret;
                        ret = istr.readProxy();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getChangesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getChangesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getChangesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getChanges_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_getChanges(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getChanges_name = "getChanges";

            private void _iceI_getChanges(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _getChanges_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = global::Ice.PropertyDictHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task printAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_printAsync(message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_printAsync(string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_print(iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _print_name = "print";

            private void _iceI_print(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _print_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task traceAsync(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_traceAsync(category, message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_traceAsync(string iceP_category, string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_trace(iceP_category, iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _trace_name = "trace";

            private void _iceI_trace(string iceP_category, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _trace_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_category);
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task warningAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_warningAsync(message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_warningAsync(string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_warning(iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _warning_name = "warning";

            private void _iceI_warning(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _warning_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task errorAsync(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_errorAsync(message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_errorAsync(string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_error(iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _error_name = "error";

            private void _iceI_error(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _error_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task waitForShutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_waitForShutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_waitForShutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_waitForShutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _waitForShutdown_name = "waitForShutdown";

            private void _iceI_waitForShutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _waitForShutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_destroyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroy(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroy_name = "destroy";

            private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroy_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_getAdmin> begin_getAdmin(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getAdmin(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getAdmin(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdmin(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getAdmin(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdmin(context, callback, cookie, false);
            }

            public global::Ice.ObjectPrx end_getAdmin(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAdmin_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_getAdmin> begin_getAdmin(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getAdmin_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_getAdmin, global::Ice.ObjectPrx>(
                    (Callback_RemoteCommunicator_getAdmin cb, global::Ice.ObjectPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getAdmin_name, cookie, completedCallback);
                _iceI_getAdmin(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_getChanges> begin_getChanges(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getChanges(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getChanges(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getChanges(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getChanges(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getChanges(context, callback, cookie, false);
            }

            public global::System.Collections.Generic.Dictionary<string, string> end_getChanges(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getChanges_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, string>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_getChanges> begin_getChanges(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getChanges_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_getChanges, global::System.Collections.Generic.Dictionary<string, string>>(
                    (Callback_RemoteCommunicator_getChanges cb, global::System.Collections.Generic.Dictionary<string, string> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getChanges_name, cookie, completedCallback);
                _iceI_getChanges(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_print> begin_print(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_print(message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_print(string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_print(message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_print(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_print(message, context, callback, cookie, false);
            }

            public void end_print(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _print_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_print> begin_print(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_print, object>(
                    (Callback_RemoteCommunicator_print cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _print_name, cookie, completedCallback);
                _iceI_print(iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_trace> begin_trace(string category, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_trace(category, message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_trace(string category, string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_trace(category, message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_trace(string category, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_trace(category, message, context, callback, cookie, false);
            }

            public void end_trace(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _trace_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_trace> begin_trace(string iceP_category, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_trace, object>(
                    (Callback_RemoteCommunicator_trace cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _trace_name, cookie, completedCallback);
                _iceI_trace(iceP_category, iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_warning> begin_warning(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_warning(message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_warning(string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_warning(message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_warning(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_warning(message, context, callback, cookie, false);
            }

            public void end_warning(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _warning_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_warning> begin_warning(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_warning, object>(
                    (Callback_RemoteCommunicator_warning cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _warning_name, cookie, completedCallback);
                _iceI_warning(iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_error> begin_error(string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_error(message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_error(string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_error(message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_error(string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_error(message, context, callback, cookie, false);
            }

            public void end_error(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _error_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_error> begin_error(string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_error, object>(
                    (Callback_RemoteCommunicator_error cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _error_name, cookie, completedCallback);
                _iceI_error(iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_shutdown, object>(
                    (Callback_RemoteCommunicator_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_waitForShutdown> begin_waitForShutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_waitForShutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_waitForShutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_waitForShutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_waitForShutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_waitForShutdown(context, callback, cookie, false);
            }

            public void end_waitForShutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _waitForShutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_waitForShutdown> begin_waitForShutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_waitForShutdown, object>(
                    (Callback_RemoteCommunicator_waitForShutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _waitForShutdown_name, cookie, completedCallback);
                _iceI_waitForShutdown(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicator_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_destroy(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroy(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroy(context, callback, cookie, false);
            }

            public void end_destroy(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroy_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicator_destroy> begin_destroy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicator_destroy, object>(
                    (Callback_RemoteCommunicator_destroy cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _destroy_name, cookie, completedCallback);
                _iceI_destroy(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorPrx r = b as RemoteCommunicatorPrx;
                if(r == null)
                {
                    RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                RemoteCommunicatorPrxHelper h = new RemoteCommunicatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicator"
            };

            public static string ice_staticId() => "::Test::RemoteCommunicator";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteCommunicatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteCommunicatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    RemoteCommunicatorPrxHelper result = new RemoteCommunicatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class RemoteCommunicatorFactoryPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteCommunicatorFactoryPrx
        {
            public RemoteCommunicatorFactoryPrxHelper()
            {
            }

            #region Synchronous operations

            public RemoteCommunicatorPrx createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_createCommunicatorAsync(props, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<RemoteCommunicatorPrx> createCommunicatorAsync(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_createCommunicatorAsync(props, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<RemoteCommunicatorPrx> _iceI_createCommunicatorAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_props, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createCommunicator_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<RemoteCommunicatorPrx>(progress, cancel);
                _iceI_createCommunicator(iceP_props, context, synchronous, completed);
                return completed.Task;
            }

            private const string _createCommunicator_name = "createCommunicator";

            private void _iceI_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> iceP_props, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RemoteCommunicatorPrx>(completed);
                outAsync.invoke(
                    _createCommunicator_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ice.PropertyDictHelper.write(ostr, iceP_props);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        RemoteCommunicatorPrx ret;
                        ret = RemoteCommunicatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_createCommunicator> begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_createCommunicator(props, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createCommunicator(props, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createCommunicator(props, context, callback, cookie, false);
            }

            public RemoteCommunicatorPrx end_createCommunicator(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createCommunicator_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<RemoteCommunicatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_createCommunicator> begin_createCommunicator(global::System.Collections.Generic.Dictionary<string, string> iceP_props, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_createCommunicator_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicatorFactory_createCommunicator, RemoteCommunicatorPrx>(
                    (Callback_RemoteCommunicatorFactory_createCommunicator cb, RemoteCommunicatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _createCommunicator_name, cookie, completedCallback);
                _iceI_createCommunicator(iceP_props, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RemoteCommunicatorFactory_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RemoteCommunicatorFactory_shutdown, object>(
                    (Callback_RemoteCommunicatorFactory_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static RemoteCommunicatorFactoryPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorFactoryPrx r = b as RemoteCommunicatorFactoryPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorFactoryPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorFactoryPrx r = b as RemoteCommunicatorFactoryPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorFactoryPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorFactoryPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static RemoteCommunicatorFactoryPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                RemoteCommunicatorFactoryPrx r = b as RemoteCommunicatorFactoryPrx;
                if(r == null)
                {
                    RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static RemoteCommunicatorFactoryPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                RemoteCommunicatorFactoryPrxHelper h = new RemoteCommunicatorFactoryPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicatorFactory"
            };

            public static string ice_staticId() => "::Test::RemoteCommunicatorFactory";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteCommunicatorFactoryPrx v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteCommunicatorFactoryPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    RemoteCommunicatorFactoryPrxHelper result = new RemoteCommunicatorFactoryPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class TestFacetPrxHelper : global::Ice.ObjectPrxHelperBase, TestFacetPrx
        {
            public TestFacetPrxHelper()
            {
            }

            #region Synchronous operations

            public void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_TestFacet_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_op(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_op(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_op(context, callback, cookie, false);
            }

            public void end_op(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _op_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_TestFacet_op> begin_op(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestFacet_op, object>(
                    (Callback_TestFacet_op cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _op_name, cookie, completedCallback);
                _iceI_op(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TestFacetPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestFacetPrx r = b as TestFacetPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TestFacetPrxHelper h = new TestFacetPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestFacetPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TestFacetPrx r = b as TestFacetPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TestFacetPrxHelper h = new TestFacetPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestFacetPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TestFacetPrxHelper h = new TestFacetPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestFacetPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestFacetPrxHelper h = new TestFacetPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TestFacetPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TestFacetPrx r = b as TestFacetPrx;
                if(r == null)
                {
                    TestFacetPrxHelper h = new TestFacetPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TestFacetPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TestFacetPrxHelper h = new TestFacetPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestFacet"
            };

            public static string ice_staticId() => "::Test::TestFacet";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestFacetPrx v)
            {
                ostr.writeProxy(v);
            }

            public static TestFacetPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TestFacetPrxHelper result = new TestFacetPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.admin
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class RemoteCommunicatorDisp_ : global::Ice.ObjectImpl, RemoteCommunicator
        {
            #region Slice operations

            public abstract global::Ice.ObjectPrx getAdmin(global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> getChanges(global::Ice.Current current = null);

            public abstract void print(string message, global::Ice.Current current = null);

            public abstract void trace(string category, string message, global::Ice.Current current = null);

            public abstract void warning(string message, global::Ice.Current current = null);

            public abstract void error(string message, global::Ice.Current current = null);

            public abstract void shutdown(global::Ice.Current current = null);

            public abstract void waitForShutdown(global::Ice.Current current = null);

            public abstract void destroy(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicator"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::RemoteCommunicator";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getAdmin(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getAdmin(current);
                var ostr = inS.startWriteParams();
                ostr.writeProxy(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getChanges(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getChanges(current);
                var ostr = inS.startWriteParams();
                global::Ice.PropertyDictHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_print(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_message;
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.print(iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_trace(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_category;
                string iceP_message;
                iceP_category = istr.readString();
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.trace(iceP_category, iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_warning(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_message;
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.warning(iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_error(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_message;
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.error(iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_waitForShutdown(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.waitForShutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_destroy(RemoteCommunicator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.destroy(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "destroy",
                "error",
                "getAdmin",
                "getChanges",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "print",
                "shutdown",
                "trace",
                "waitForShutdown",
                "warning"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_destroy(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_error(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getAdmin(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_getChanges(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_print(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_trace(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_waitForShutdown(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_warning(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class RemoteCommunicatorFactoryDisp_ : global::Ice.ObjectImpl, RemoteCommunicatorFactory
        {
            #region Slice operations

            public abstract RemoteCommunicatorPrx createCommunicator(global::System.Collections.Generic.Dictionary<string, string> props, global::Ice.Current current = null);

            public abstract void shutdown(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicatorFactory"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::RemoteCommunicatorFactory";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_createCommunicator(RemoteCommunicatorFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, string> iceP_props;
                iceP_props = global::Ice.PropertyDictHelper.read(istr);
                inS.endReadParams();
                var ret = obj.createCommunicator(iceP_props, current);
                var ostr = inS.startWriteParams();
                RemoteCommunicatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(RemoteCommunicatorFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "createCommunicator",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_createCommunicator(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class TestFacetDisp_ : global::Ice.ObjectImpl, TestFacet
        {
            #region Slice operations

            public abstract void op(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestFacet"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::TestFacet";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_op(TestFacet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.op(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "op"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_op(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
