//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Ice.namespacemd
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::Initial")]
        public partial interface Initial : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::NoNamespace.C1? getNoNamespaceC2AsC1(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::NoNamespace.C2? getNoNamespaceC2AsC2(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void throwNoNamespaceE2AsE1(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void throwNoNamespaceE2AsE2(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void throwNoNamespaceNotify(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void throwWithNamespaceE2AsE1(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void throwWithNamespaceE2AsE2(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current);
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface InitialPrx : global::Ice.ObjectPrx
        {
            global::NoNamespace.C1? getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::NoNamespace.C1?> getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::NoNamespace.C2? getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::NoNamespace.C2?> getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class InitialPrxHelper : global::Ice.ObjectPrxHelperBase, InitialPrx
        {
            public InitialPrxHelper()
            {
            }

            #region Synchronous operations

            public global::NoNamespace.C1? getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getNoNamespaceC2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::NoNamespace.C2? getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getNoNamespaceC2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceE2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceE2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceNotifyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getWithNamespaceC2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getWithNamespaceC2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwWithNamespaceE2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwWithNamespaceE2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<global::NoNamespace.C1?> getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getNoNamespaceC2AsC1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::NoNamespace.C1?> _iceI_getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getNoNamespaceC2AsC1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::NoNamespace.C1?>(progress, cancel);
                _iceI_getNoNamespaceC2AsC1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getNoNamespaceC2AsC1_name = "getNoNamespaceC2AsC1";

            private void _iceI_getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::NoNamespace.C1?>(completed);
                outAsync.invoke(
                    _getNoNamespaceC2AsC1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::NoNamespace.C1? ret = null;
                        istr.readValue((global::NoNamespace.C1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::NoNamespace.C2?> getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getNoNamespaceC2AsC2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::NoNamespace.C2?> _iceI_getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getNoNamespaceC2AsC2_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::NoNamespace.C2?>(progress, cancel);
                _iceI_getNoNamespaceC2AsC2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getNoNamespaceC2AsC2_name = "getNoNamespaceC2AsC2";

            private void _iceI_getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::NoNamespace.C2?>(completed);
                outAsync.invoke(
                    _getNoNamespaceC2AsC2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::NoNamespace.C2? ret = null;
                        istr.readValue((global::NoNamespace.C2? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceE2AsE1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceE2AsE1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceE2AsE1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceE2AsE1_name = "throwNoNamespaceE2AsE1";

            private void _iceI_throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceE2AsE1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.E1)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceE2AsE2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceE2AsE2_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceE2AsE2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceE2AsE2_name = "throwNoNamespaceE2AsE2";

            private void _iceI_throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceE2AsE2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.E2)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceNotifyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceNotify_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceNotify(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceNotify_name = "throwNoNamespaceNotify";

            private void _iceI_throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceNotify_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.notify)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getWithNamespaceC2AsC1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> _iceI_getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getWithNamespaceC2AsC1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.namespacemd.WithNamespace.C1?>(progress, cancel);
                _iceI_getWithNamespaceC2AsC1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getWithNamespaceC2AsC1_name = "getWithNamespaceC2AsC1";

            private void _iceI_getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.namespacemd.WithNamespace.C1?>(completed);
                outAsync.invoke(
                    _getWithNamespaceC2AsC1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.namespacemd.WithNamespace.C1? ret = null;
                        istr.readValue((global::Ice.namespacemd.WithNamespace.C1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getWithNamespaceC2AsC2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> _iceI_getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getWithNamespaceC2AsC2_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.namespacemd.WithNamespace.C2?>(progress, cancel);
                _iceI_getWithNamespaceC2AsC2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getWithNamespaceC2AsC2_name = "getWithNamespaceC2AsC2";

            private void _iceI_getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.namespacemd.WithNamespace.C2?>(completed);
                outAsync.invoke(
                    _getWithNamespaceC2AsC2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.namespacemd.WithNamespace.C2? ret = null;
                        istr.readValue((global::Ice.namespacemd.WithNamespace.C2? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwWithNamespaceE2AsE1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwWithNamespaceE2AsE1_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwWithNamespaceE2AsE1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwWithNamespaceE2AsE1_name = "throwWithNamespaceE2AsE1";

            private void _iceI_throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwWithNamespaceE2AsE1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.namespacemd.WithNamespace.E1)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwWithNamespaceE2AsE2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwWithNamespaceE2AsE2_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwWithNamespaceE2AsE2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwWithNamespaceE2AsE2_name = "throwWithNamespaceE2AsE2";

            private void _iceI_throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwWithNamespaceE2AsE2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.namespacemd.WithNamespace.E2)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static InitialPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static InitialPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper prx = new InitialPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static InitialPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        InitialPrxHelper prx = new InitialPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new InitialPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new InitialPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Initial"
            };

            public static string ice_staticId() => "::Test::Initial";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, InitialPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static InitialPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new InitialPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class InitialDisp_ : global::Ice.ObjectImpl, Initial
        {
            #region Slice operations

            public abstract global::NoNamespace.C1? getNoNamespaceC2AsC1(global::Ice.Current current);

            public abstract global::NoNamespace.C2? getNoNamespaceC2AsC2(global::Ice.Current current);

            public abstract void throwNoNamespaceE2AsE1(global::Ice.Current current);

            public abstract void throwNoNamespaceE2AsE2(global::Ice.Current current);

            public abstract void throwNoNamespaceNotify(global::Ice.Current current);

            public abstract global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::Ice.Current current);

            public abstract global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::Ice.Current current);

            public abstract void throwWithNamespaceE2AsE1(global::Ice.Current current);

            public abstract void throwWithNamespaceE2AsE2(global::Ice.Current current);

            public abstract void shutdown(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Initial";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "getNoNamespaceC2AsC1" => Initial.iceD_getNoNamespaceC2AsC1Async(this, request),
                    "getNoNamespaceC2AsC2" => Initial.iceD_getNoNamespaceC2AsC2Async(this, request),
                    "throwNoNamespaceE2AsE1" => Initial.iceD_throwNoNamespaceE2AsE1Async(this, request),
                    "throwNoNamespaceE2AsE2" => Initial.iceD_throwNoNamespaceE2AsE2Async(this, request),
                    "throwNoNamespaceNotify" => Initial.iceD_throwNoNamespaceNotifyAsync(this, request),
                    "getWithNamespaceC2AsC1" => Initial.iceD_getWithNamespaceC2AsC1Async(this, request),
                    "getWithNamespaceC2AsC2" => Initial.iceD_getWithNamespaceC2AsC2Async(this, request),
                    "throwWithNamespaceE2AsE1" => Initial.iceD_throwWithNamespaceE2AsE1Async(this, request),
                    "throwWithNamespaceE2AsE2" => Initial.iceD_throwWithNamespaceE2AsE2Async(this, request),
                    "shutdown" => Initial.iceD_shutdownAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        public partial interface Initial
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getNoNamespaceC2AsC1Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getNoNamespaceC2AsC1(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getNoNamespaceC2AsC2Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getNoNamespaceC2AsC2(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_throwNoNamespaceE2AsE1Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceE2AsE1(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_throwNoNamespaceE2AsE2Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceE2AsE2(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_throwNoNamespaceNotifyAsync(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceNotify(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getWithNamespaceC2AsC1Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getWithNamespaceC2AsC1(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getWithNamespaceC2AsC2Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getWithNamespaceC2AsC2(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_throwWithNamespaceE2AsE1Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwWithNamespaceE2AsE1(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_throwWithNamespaceE2AsE2Async(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwWithNamespaceE2AsE2(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                Initial obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
