// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.namespacemd
{
    namespace Test
    {
        [Ice.SliceTypeId("::Test::Initial")]
        public partial interface Initial : Ice.Object
        {
            global::NoNamespace.C1? getNoNamespaceC2AsC1(Ice.Current current);

            global::NoNamespace.C2? getNoNamespaceC2AsC2(Ice.Current current);

            void throwNoNamespaceE2AsE1(Ice.Current current);

            void throwNoNamespaceE2AsE2(Ice.Current current);

            void throwNoNamespaceNotify(Ice.Current current);

            global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(Ice.Current current);

            global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(Ice.Current current);

            void throwWithNamespaceE2AsE1(Ice.Current current);

            void throwWithNamespaceE2AsE2(Ice.Current current);

            void shutdown(Ice.Current current);
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        public interface InitialPrx : Ice.ObjectPrx
        {
            global::NoNamespace.C1? getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::NoNamespace.C1?> getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::NoNamespace.C2? getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::NoNamespace.C2?> getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        public sealed class InitialPrxHelper : Ice.ObjectPrxHelperBase, InitialPrx
        {
            public global::NoNamespace.C1? getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getNoNamespaceC2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::NoNamespace.C2? getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getNoNamespaceC2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceE2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceE2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNoNamespaceNotifyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getWithNamespaceC2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getWithNamespaceC2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwWithNamespaceE2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwWithNamespaceE2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<global::NoNamespace.C1?> getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getNoNamespaceC2AsC1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::NoNamespace.C1?> _iceI_getNoNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getNoNamespaceC2AsC1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::NoNamespace.C1?>(progress, cancel);
                _iceI_getNoNamespaceC2AsC1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getNoNamespaceC2AsC1_name = "getNoNamespaceC2AsC1";

            private void _iceI_getNoNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::NoNamespace.C1?>(completed);
                outAsync.invoke(
                    _getNoNamespaceC2AsC1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::NoNamespace.C1? ret = null;
                        istr.readValue((global::NoNamespace.C1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::NoNamespace.C2?> getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getNoNamespaceC2AsC2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::NoNamespace.C2?> _iceI_getNoNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getNoNamespaceC2AsC2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::NoNamespace.C2?>(progress, cancel);
                _iceI_getNoNamespaceC2AsC2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getNoNamespaceC2AsC2_name = "getNoNamespaceC2AsC2";

            private void _iceI_getNoNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::NoNamespace.C2?>(completed);
                outAsync.invoke(
                    _getNoNamespaceC2AsC2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::NoNamespace.C2? ret = null;
                        istr.readValue((global::NoNamespace.C2? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceE2AsE1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceE2AsE1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceE2AsE1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceE2AsE1_name = "throwNoNamespaceE2AsE1";

            private void _iceI_throwNoNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceE2AsE1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.E1)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceE2AsE2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceE2AsE2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceE2AsE2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceE2AsE2_name = "throwNoNamespaceE2AsE2";

            private void _iceI_throwNoNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceE2AsE2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.E2)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNoNamespaceNotifyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNoNamespaceNotifyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwNoNamespaceNotify_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNoNamespaceNotify(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNoNamespaceNotify_name = "throwNoNamespaceNotify";

            private void _iceI_throwNoNamespaceNotify(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNoNamespaceNotify_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::NoNamespace.notify)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getWithNamespaceC2AsC1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C1?> _iceI_getWithNamespaceC2AsC1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getWithNamespaceC2AsC1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.namespacemd.WithNamespace.C1?>(progress, cancel);
                _iceI_getWithNamespaceC2AsC1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getWithNamespaceC2AsC1_name = "getWithNamespaceC2AsC1";

            private void _iceI_getWithNamespaceC2AsC1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.namespacemd.WithNamespace.C1?>(completed);
                outAsync.invoke(
                    _getWithNamespaceC2AsC1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::Ice.namespacemd.WithNamespace.C1? ret = null;
                        istr.readValue((global::Ice.namespacemd.WithNamespace.C1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getWithNamespaceC2AsC2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.namespacemd.WithNamespace.C2?> _iceI_getWithNamespaceC2AsC2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getWithNamespaceC2AsC2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.namespacemd.WithNamespace.C2?>(progress, cancel);
                _iceI_getWithNamespaceC2AsC2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getWithNamespaceC2AsC2_name = "getWithNamespaceC2AsC2";

            private void _iceI_getWithNamespaceC2AsC2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.namespacemd.WithNamespace.C2?>(completed);
                outAsync.invoke(
                    _getWithNamespaceC2AsC2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::Ice.namespacemd.WithNamespace.C2? ret = null;
                        istr.readValue((global::Ice.namespacemd.WithNamespace.C2? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwWithNamespaceE2AsE1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwWithNamespaceE2AsE1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwWithNamespaceE2AsE1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwWithNamespaceE2AsE1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwWithNamespaceE2AsE1_name = "throwWithNamespaceE2AsE1";

            private void _iceI_throwWithNamespaceE2AsE1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwWithNamespaceE2AsE1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.namespacemd.WithNamespace.E1)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwWithNamespaceE2AsE2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwWithNamespaceE2AsE2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwWithNamespaceE2AsE2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwWithNamespaceE2AsE2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwWithNamespaceE2AsE2_name = "throwWithNamespaceE2AsE2";

            private void _iceI_throwWithNamespaceE2AsE2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwWithNamespaceE2AsE2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.namespacemd.WithNamespace.E2)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static InitialPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new InitialPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static InitialPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new InitialPrxHelper(b) : null;

            public static InitialPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new InitialPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Initial"
            };

            public static string ice_staticId() => "::Test::Initial";

            public static void write(Ice.OutputStream ostr, InitialPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static InitialPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new InitialPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new InitialPrxHelper(reference);

            private InitialPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private InitialPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        public abstract class InitialDisp_ : Ice.ObjectImpl, Initial
        {
            public abstract global::NoNamespace.C1? getNoNamespaceC2AsC1(Ice.Current current);

            public abstract global::NoNamespace.C2? getNoNamespaceC2AsC2(Ice.Current current);

            public abstract void throwNoNamespaceE2AsE1(Ice.Current current);

            public abstract void throwNoNamespaceE2AsE2(Ice.Current current);

            public abstract void throwNoNamespaceNotify(Ice.Current current);

            public abstract global::Ice.namespacemd.WithNamespace.C1? getWithNamespaceC2AsC1(Ice.Current current);

            public abstract global::Ice.namespacemd.WithNamespace.C2? getWithNamespaceC2AsC2(Ice.Current current);

            public abstract void throwWithNamespaceE2AsE1(Ice.Current current);

            public abstract void throwWithNamespaceE2AsE2(Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Initial";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "getNoNamespaceC2AsC1" => Initial.iceD_getNoNamespaceC2AsC1Async(this, request),
                    "getNoNamespaceC2AsC2" => Initial.iceD_getNoNamespaceC2AsC2Async(this, request),
                    "throwNoNamespaceE2AsE1" => Initial.iceD_throwNoNamespaceE2AsE1Async(this, request),
                    "throwNoNamespaceE2AsE2" => Initial.iceD_throwNoNamespaceE2AsE2Async(this, request),
                    "throwNoNamespaceNotify" => Initial.iceD_throwNoNamespaceNotifyAsync(this, request),
                    "getWithNamespaceC2AsC1" => Initial.iceD_getWithNamespaceC2AsC1Async(this, request),
                    "getWithNamespaceC2AsC2" => Initial.iceD_getWithNamespaceC2AsC2Async(this, request),
                    "throwWithNamespaceE2AsE1" => Initial.iceD_throwWithNamespaceE2AsE1Async(this, request),
                    "throwWithNamespaceE2AsE2" => Initial.iceD_throwWithNamespaceE2AsE2Async(this, request),
                    "shutdown" => Initial.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.namespacemd
{
    namespace Test
    {
        public partial interface Initial
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getNoNamespaceC2AsC1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getNoNamespaceC2AsC1(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getNoNamespaceC2AsC2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getNoNamespaceC2AsC2(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwNoNamespaceE2AsE1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceE2AsE1(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwNoNamespaceE2AsE2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceE2AsE2(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwNoNamespaceNotifyAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwNoNamespaceNotify(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getWithNamespaceC2AsC1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getWithNamespaceC2AsC1(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getWithNamespaceC2AsC2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getWithNamespaceC2AsC2(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwWithNamespaceE2AsE1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwWithNamespaceE2AsE1(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwWithNamespaceE2AsE2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwWithNamespaceE2AsE2(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
