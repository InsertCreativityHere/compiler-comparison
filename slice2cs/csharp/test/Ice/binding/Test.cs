//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Ice.binding
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::TestIntf")]
        public partial interface TestIntf : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string getAdapterName(global::Ice.Current current);
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::RemoteObjectAdapter")]
        public partial interface RemoteObjectAdapter : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            TestIntfPrx? getTestIntf(global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void deactivate(global::Ice.Current current);
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::RemoteCommunicator")]
        public partial interface RemoteCommunicator : global::Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            RemoteObjectAdapterPrx? createObjectAdapter(string name, string endpoints, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void deactivateObjectAdapter(RemoteObjectAdapterPrx? adapter, global::Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current);
        }
    }
}

namespace Ice.binding
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface TestIntfPrx : global::Ice.ObjectPrx
        {
            string getAdapterName(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> getAdapterNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteObjectAdapterPrx : global::Ice.ObjectPrx
        {
            TestIntfPrx? getTestIntf(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<TestIntfPrx?> getTestIntfAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void deactivate(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task deactivateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface RemoteCommunicatorPrx : global::Ice.ObjectPrx
        {
            RemoteObjectAdapterPrx? createObjectAdapter(string name, string endpoints, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx?> createObjectAdapterAsync(string name, string endpoints, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void deactivateObjectAdapter(RemoteObjectAdapterPrx? adapter, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task deactivateObjectAdapterAsync(RemoteObjectAdapterPrx? adapter, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.binding
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
        {
            public TestIntfPrxHelper()
            {
            }

            #region Synchronous operations

            public string getAdapterName(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getAdapterNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getAdapterNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getAdapterNameAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getAdapterNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAdapterName_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getAdapterName(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAdapterName_name = "getAdapterName";

            private void _iceI_getAdapterName(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getAdapterName_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Factory operations

            public static TestIntfPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestIntfPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper prx = new TestIntfPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static TestIntfPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        TestIntfPrxHelper prx = new TestIntfPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new TestIntfPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new TestIntfPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public static string ice_staticId() => "::Test::TestIntf";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TestIntfPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestIntfPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new TestIntfPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class RemoteObjectAdapterPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteObjectAdapterPrx
        {
            public RemoteObjectAdapterPrxHelper()
            {
            }

            #region Synchronous operations

            public TestIntfPrx? getTestIntf(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getTestIntfAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void deactivate(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_deactivateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<TestIntfPrx?> getTestIntfAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getTestIntfAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<TestIntfPrx?> _iceI_getTestIntfAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getTestIntf_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<TestIntfPrx?>(progress, cancel);
                _iceI_getTestIntf(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getTestIntf_name = "getTestIntf";

            private void _iceI_getTestIntf(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<TestIntfPrx?>(completed);
                outAsync.invoke(
                    _getTestIntf_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        TestIntfPrx? ret;
                        ret = TestIntfPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task deactivateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_deactivateAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_deactivateAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_deactivate(context, synchronous, completed);
                return completed.Task;
            }

            private const string _deactivate_name = "deactivate";

            private void _iceI_deactivate(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _deactivate_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static RemoteObjectAdapterPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static RemoteObjectAdapterPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteObjectAdapterPrxHelper prx = new RemoteObjectAdapterPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static RemoteObjectAdapterPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteObjectAdapterPrxHelper prx = new RemoteObjectAdapterPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static RemoteObjectAdapterPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new RemoteObjectAdapterPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static RemoteObjectAdapterPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new RemoteObjectAdapterPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteObjectAdapter"
            };

            public static string ice_staticId() => "::Test::RemoteObjectAdapter";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteObjectAdapterPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteObjectAdapterPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new RemoteObjectAdapterPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class RemoteCommunicatorPrxHelper : global::Ice.ObjectPrxHelperBase, RemoteCommunicatorPrx
        {
            public RemoteCommunicatorPrxHelper()
            {
            }

            #region Synchronous operations

            public RemoteObjectAdapterPrx? createObjectAdapter(string name, string endpoints, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_createObjectAdapterAsync(name, endpoints, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void deactivateObjectAdapter(RemoteObjectAdapterPrx? adapter, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_deactivateObjectAdapterAsync(adapter, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx?> createObjectAdapterAsync(string name, string endpoints, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_createObjectAdapterAsync(name, endpoints, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<RemoteObjectAdapterPrx?> _iceI_createObjectAdapterAsync(string iceP_name, string iceP_endpoints, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createObjectAdapter_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<RemoteObjectAdapterPrx?>(progress, cancel);
                _iceI_createObjectAdapter(iceP_name, iceP_endpoints, context, synchronous, completed);
                return completed.Task;
            }

            private const string _createObjectAdapter_name = "createObjectAdapter";

            private void _iceI_createObjectAdapter(string iceP_name, string iceP_endpoints, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RemoteObjectAdapterPrx?>(completed);
                outAsync.invoke(
                    _createObjectAdapter_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_name);
                        ostr.writeString(iceP_endpoints);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        RemoteObjectAdapterPrx? ret;
                        ret = RemoteObjectAdapterPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task deactivateObjectAdapterAsync(RemoteObjectAdapterPrx? adapter, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_deactivateObjectAdapterAsync(adapter, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_deactivateObjectAdapterAsync(RemoteObjectAdapterPrx? iceP_adapter, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_deactivateObjectAdapter(iceP_adapter, context, synchronous, completed);
                return completed.Task;
            }

            private const string _deactivateObjectAdapter_name = "deactivateObjectAdapter";

            private void _iceI_deactivateObjectAdapter(RemoteObjectAdapterPrx? iceP_adapter, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _deactivateObjectAdapter_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        RemoteObjectAdapterPrxHelper.write(ostr, iceP_adapter);
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Factory operations

            public static RemoteCommunicatorPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
                uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static RemoteCommunicatorPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    RemoteCommunicatorPrxHelper prx = new RemoteCommunicatorPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static RemoteCommunicatorPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                global::Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        RemoteCommunicatorPrxHelper prx = new RemoteCommunicatorPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static RemoteCommunicatorPrx? uncheckedCast(global::Ice.ObjectPrx? b)
            {
                if (b is not null)
                {
                    var prx = new RemoteCommunicatorPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static RemoteCommunicatorPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx? bb = b.ice_facet(f);
                    var prx = new RemoteCommunicatorPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::RemoteCommunicator"
            };

            public static string ice_staticId() => "::Test::RemoteCommunicator";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RemoteCommunicatorPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static RemoteCommunicatorPrx? read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx? proxy = istr.readProxy();
                if (proxy is not null)
                {
                     var result = new RemoteCommunicatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.binding
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
        {
            #region Slice operations

            public abstract string getAdapterName(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::TestIntf";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "getAdapterName" => TestIntf.iceD_getAdapterNameAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class RemoteObjectAdapterDisp_ : global::Ice.ObjectImpl, RemoteObjectAdapter
        {
            #region Slice operations

            public abstract TestIntfPrx? getTestIntf(global::Ice.Current current);

            public abstract void deactivate(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::RemoteObjectAdapter";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "getTestIntf" => RemoteObjectAdapter.iceD_getTestIntfAsync(this, request),
                    "deactivate" => RemoteObjectAdapter.iceD_deactivateAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class RemoteCommunicatorDisp_ : global::Ice.ObjectImpl, RemoteCommunicator
        {
            #region Slice operations

            public abstract RemoteObjectAdapterPrx? createObjectAdapter(string name, string endpoints, global::Ice.Current current);

            public abstract void deactivateObjectAdapter(RemoteObjectAdapterPrx? adapter, global::Ice.Current current);

            public abstract void shutdown(global::Ice.Current current);

            #endregion

            #region Slice type-related members

            public override string ice_id(global::Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::RemoteCommunicator";

            #endregion

            #region Operation dispatch

            public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "createObjectAdapter" => RemoteCommunicator.iceD_createObjectAdapterAsync(this, request),
                    "deactivateObjectAdapter" => RemoteCommunicator.iceD_deactivateObjectAdapterAsync(this, request),
                    "shutdown" => RemoteCommunicator.iceD_shutdownAsync(this, request),
                    "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new global::Ice.OperationNotExistException()
                };

            #endregion
        }
    }
}

namespace Ice.binding
{
    namespace Test
    {
        public partial interface TestIntf
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getAdapterNameAsync(
                TestIntf obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getAdapterName(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }
        }

        public partial interface RemoteObjectAdapter
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getTestIntfAsync(
                RemoteObjectAdapter obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getTestIntf(request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                TestIntfPrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_deactivateAsync(
                RemoteObjectAdapter obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.deactivate(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public partial interface RemoteCommunicator
        {
            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_createObjectAdapterAsync(
                RemoteCommunicator obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_name;
                string iceP_endpoints;
                iceP_name = istr.readString();
                iceP_endpoints = istr.readString();
                istr.endEncapsulation();
                var ret = obj.createObjectAdapter(iceP_name, iceP_endpoints, request.current);
                var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
                RemoteObjectAdapterPrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new global::Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_deactivateObjectAdapterAsync(
                RemoteCommunicator obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                RemoteObjectAdapterPrx? iceP_adapter;
                iceP_adapter = RemoteObjectAdapterPrxHelper.read(istr);
                istr.endEncapsulation();
                obj.deactivateObjectAdapter(iceP_adapter, request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_shutdownAsync(
                RemoteCommunicator obj,
                global::Ice.IncomingRequest request)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
