//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.servantLocator
{
    namespace Test
    {
        [Ice.SliceTypeId("::Test::TestIntfUserException")]
        public partial class TestIntfUserException : Ice.UserException
        {
            public override string ice_id() => "::Test::TestIntfUserException";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::TestIntfUserException", -1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::TestImpossibleException")]
        public partial class TestImpossibleException : Ice.UserException
        {
            public override string ice_id() => "::Test::TestImpossibleException";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::TestImpossibleException", -1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::TestIntf")]
        public partial interface TestIntf : Ice.Object
        {
            void requestFailedException(Ice.Current current);

            void unknownUserException(Ice.Current current);

            void unknownLocalException(Ice.Current current);

            void unknownException(Ice.Current current);

            void localException(Ice.Current current);

            void userException(Ice.Current current);

            void csException(Ice.Current current);

            void unknownExceptionWithServantException(Ice.Current current);

            string impossibleException(bool @throw, Ice.Current current);

            string intfUserException(bool @throw, Ice.Current current);

            void asyncResponse(Ice.Current current);

            void asyncException(Ice.Current current);

            void shutdown(Ice.Current current);
        }

        [Ice.SliceTypeId("::Test::TestActivation")]
        public partial interface TestActivation : Ice.Object
        {
            void activateServantLocator(bool activate, Ice.Current current);
        }
    }
}

namespace Ice.servantLocator
{
    namespace Test
    {
        public interface TestIntfPrx : Ice.ObjectPrx
        {
            void requestFailedException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task requestFailedExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void unknownUserException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task unknownUserExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void unknownLocalException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task unknownLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void unknownException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task unknownExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void localException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task localExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void userException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task userExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void csException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task csExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void unknownExceptionWithServantException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task unknownExceptionWithServantExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string impossibleException(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> impossibleExceptionAsync(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string intfUserException(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> intfUserExceptionAsync(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void asyncResponse(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task asyncResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void asyncException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task asyncExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public interface TestActivationPrx : Ice.ObjectPrx
        {
            void activateServantLocator(bool activate, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task activateServantLocatorAsync(bool activate, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.servantLocator
{
    namespace Test
    {
        public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
        {
            public void requestFailedException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_requestFailedExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void unknownUserException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_unknownUserExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void unknownLocalException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_unknownLocalExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void unknownException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_unknownExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void localException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_localExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void userException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_userExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void csException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_csExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void unknownExceptionWithServantException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_unknownExceptionWithServantExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string impossibleException(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_impossibleExceptionAsync(@throw, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string intfUserException(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_intfUserExceptionAsync(@throw, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void asyncResponse(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_asyncResponseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void asyncException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_asyncExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task requestFailedExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_requestFailedExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_requestFailedExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_requestFailedException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _requestFailedException_name = "requestFailedException";

            private void _iceI_requestFailedException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _requestFailedException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task unknownUserExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_unknownUserExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_unknownUserExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_unknownUserException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _unknownUserException_name = "unknownUserException";

            private void _iceI_unknownUserException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _unknownUserException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task unknownLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_unknownLocalExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_unknownLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_unknownLocalException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _unknownLocalException_name = "unknownLocalException";

            private void _iceI_unknownLocalException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _unknownLocalException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task unknownExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_unknownExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_unknownExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_unknownException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _unknownException_name = "unknownException";

            private void _iceI_unknownException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _unknownException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task localExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_localExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_localExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_localException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _localException_name = "localException";

            private void _iceI_localException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _localException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task userExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_userExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_userExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_userException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _userException_name = "userException";

            private void _iceI_userException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _userException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task csExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_csExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_csExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_csException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _csException_name = "csException";

            private void _iceI_csException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _csException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task unknownExceptionWithServantExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_unknownExceptionWithServantExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_unknownExceptionWithServantExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_unknownExceptionWithServantException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _unknownExceptionWithServantException_name = "unknownExceptionWithServantException";

            private void _iceI_unknownExceptionWithServantException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _unknownExceptionWithServantException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<string> impossibleExceptionAsync(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_impossibleExceptionAsync(@throw, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_impossibleExceptionAsync(bool iceP_throw, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_impossibleException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_impossibleException(iceP_throw, context, synchronous, completed);
                return completed.Task;
            }

            private const string _impossibleException_name = "impossibleException";

            private void _iceI_impossibleException(bool iceP_throw, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _impossibleException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_throw);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestImpossibleException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> intfUserExceptionAsync(bool @throw, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_intfUserExceptionAsync(@throw, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_intfUserExceptionAsync(bool iceP_throw, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_intfUserException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_intfUserException(iceP_throw, context, synchronous, completed);
                return completed.Task;
            }

            private const string _intfUserException_name = "intfUserException";

            private void _iceI_intfUserException(bool iceP_throw, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _intfUserException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_throw);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestIntfUserException)
                        {
                            throw;
                        }
                        catch(TestImpossibleException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task asyncResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_asyncResponseAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_asyncResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_asyncResponse_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_asyncResponse(context, synchronous, completed);
                return completed.Task;
            }

            private const string _asyncResponse_name = "asyncResponse";

            private void _iceI_asyncResponse(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _asyncResponse_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestIntfUserException)
                        {
                            throw;
                        }
                        catch(TestImpossibleException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task asyncExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_asyncExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_asyncExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_asyncException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_asyncException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _asyncException_name = "asyncException";

            private void _iceI_asyncException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _asyncException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestIntfUserException)
                        {
                            throw;
                        }
                        catch(TestImpossibleException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

            public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TestIntfPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public static string ice_staticId() => "::Test::TestIntf";

            public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestIntfPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

            private TestIntfPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TestIntfPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class TestActivationPrxHelper : Ice.ObjectPrxHelperBase, TestActivationPrx
        {
            public void activateServantLocator(bool activate, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_activateServantLocatorAsync(activate, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task activateServantLocatorAsync(bool activate, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_activateServantLocatorAsync(activate, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_activateServantLocatorAsync(bool iceP_activate, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_activateServantLocator(iceP_activate, context, synchronous, completed);
                return completed.Task;
            }

            private const string _activateServantLocator_name = "activateServantLocator";

            private void _iceI_activateServantLocator(bool iceP_activate, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _activateServantLocator_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_activate);
                    });
            }

            public static TestActivationPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TestActivationPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestActivationPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestActivationPrxHelper(b) : null;

            public static TestActivationPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestActivationPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TestActivationPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestActivationPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestActivation"
            };

            public static string ice_staticId() => "::Test::TestActivation";

            public static void write(Ice.OutputStream ostr, TestActivationPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestActivationPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TestActivationPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestActivationPrxHelper(reference);

            private TestActivationPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TestActivationPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.servantLocator
{
    namespace Test
    {
        public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
        {
            public abstract void requestFailedException(Ice.Current current);

            public abstract void unknownUserException(Ice.Current current);

            public abstract void unknownLocalException(Ice.Current current);

            public abstract void unknownException(Ice.Current current);

            public abstract void localException(Ice.Current current);

            public abstract void userException(Ice.Current current);

            public abstract void csException(Ice.Current current);

            public abstract void unknownExceptionWithServantException(Ice.Current current);

            public abstract string impossibleException(bool @throw, Ice.Current current);

            public abstract string intfUserException(bool @throw, Ice.Current current);

            public abstract void asyncResponse(Ice.Current current);

            public abstract void asyncException(Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::TestIntf";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "requestFailedException" => TestIntf.iceD_requestFailedExceptionAsync(this, request),
                    "unknownUserException" => TestIntf.iceD_unknownUserExceptionAsync(this, request),
                    "unknownLocalException" => TestIntf.iceD_unknownLocalExceptionAsync(this, request),
                    "unknownException" => TestIntf.iceD_unknownExceptionAsync(this, request),
                    "localException" => TestIntf.iceD_localExceptionAsync(this, request),
                    "userException" => TestIntf.iceD_userExceptionAsync(this, request),
                    "csException" => TestIntf.iceD_csExceptionAsync(this, request),
                    "unknownExceptionWithServantException" => TestIntf.iceD_unknownExceptionWithServantExceptionAsync(this, request),
                    "impossibleException" => TestIntf.iceD_impossibleExceptionAsync(this, request),
                    "intfUserException" => TestIntf.iceD_intfUserExceptionAsync(this, request),
                    "asyncResponse" => TestIntf.iceD_asyncResponseAsync(this, request),
                    "asyncException" => TestIntf.iceD_asyncExceptionAsync(this, request),
                    "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        public abstract class TestActivationDisp_ : Ice.ObjectImpl, TestActivation
        {
            public abstract void activateServantLocator(bool activate, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::TestActivation";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "activateServantLocator" => TestActivation.iceD_activateServantLocatorAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.servantLocator
{
    namespace Test
    {
        public partial interface TestIntf
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_requestFailedExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.requestFailedException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownUserExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.unknownUserException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownLocalExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.unknownLocalException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.unknownException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_localExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.localException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_userExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.userException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_csExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.csException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unknownExceptionWithServantExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.unknownExceptionWithServantException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_impossibleExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool iceP_throw;
                iceP_throw = istr.readBool();
                istr.endEncapsulation();
                var ret = obj.impossibleException(iceP_throw, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_intfUserExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool iceP_throw;
                iceP_throw = istr.readBool();
                istr.endEncapsulation();
                var ret = obj.intfUserException(iceP_throw, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_asyncResponseAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.asyncResponse(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_asyncExceptionAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.asyncException(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public partial interface TestActivation
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_activateServantLocatorAsync(
                TestActivation obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool iceP_activate;
                iceP_activate = istr.readBool();
                istr.endEncapsulation();
                obj.activateServantLocator(iceP_activate, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
