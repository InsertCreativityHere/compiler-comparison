//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.operations
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum MyEnum
        {
            enum1,
            enum2,
            enum3
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum v)
            {
                ostr.writeEnum((int)v, 2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static MyEnum read(global::Ice.InputStream istr)
            {
                MyEnum v;
                v = (MyEnum)istr.readEnum(2);
                return v;
            }
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class AnotherStruct : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string s;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public AnotherStruct()
            {
                this.s = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public AnotherStruct(string s)
            {
                this.s = s;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::AnotherStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, s);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                AnotherStruct o = (AnotherStruct)other;
                if(this.s == null)
                {
                    if(o.s != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.s.Equals(o.s))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(AnotherStruct lhs, AnotherStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(AnotherStruct lhs, AnotherStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.s);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.s = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, AnotherStruct v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static AnotherStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new AnotherStruct();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly AnotherStruct _nullMarshalValue = new AnotherStruct();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class Structure : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClassPrx p;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyEnum e;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public AnotherStruct s;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Structure()
            {
                this.s = new AnotherStruct();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Structure(MyClassPrx p, MyEnum e, AnotherStruct s)
            {
                this.p = p;
                this.e = e;
                this.s = s;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::Structure");
                global::IceInternal.HashUtil.hashAdd(ref h_, p);
                global::IceInternal.HashUtil.hashAdd(ref h_, e);
                global::IceInternal.HashUtil.hashAdd(ref h_, s);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                Structure o = (Structure)other;
                if(this.p == null)
                {
                    if(o.p != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.p.Equals(o.p))
                    {
                        return false;
                    }
                }
                if(!this.e.Equals(o.e))
                {
                    return false;
                }
                if(this.s == null)
                {
                    if(o.s != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.s.Equals(o.s))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(Structure lhs, Structure rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(Structure lhs, Structure rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                MyClassPrxHelper.write(ostr, this.p);
                ostr.writeEnum((int)this.e, 2);
                AnotherStruct.ice_write(ostr, this.s);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.p = MyClassPrxHelper.read(istr);
                this.e = (MyEnum)istr.readEnum(2);
                this.s = AnotherStruct.ice_read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, Structure v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static Structure ice_read(global::Ice.InputStream istr)
            {
                var v = new Structure();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly Structure _nullMarshalValue = new Structure();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial struct MyStruct
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int i;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int j;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyStruct(int i, int j)
            {
                this.i = i;
                this.j = j;
                ice_initialize();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::MyStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, i);
                global::IceInternal.HashUtil.hashAdd(ref h_, j);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(!(other is MyStruct))
                {
                    return false;
                }
                MyStruct o = (MyStruct)other;
                if(!this.i.Equals(o.i))
                {
                    return false;
                }
                if(!this.j.Equals(o.j))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(MyStruct lhs, MyStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(MyStruct lhs, MyStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
                ostr.writeInt(this.j);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.i = istr.readInt();
                this.j = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, MyStruct v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static MyStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new MyStruct();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class SomeException : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SomeException()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SomeException(global::System.Exception ex) : base(ex)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::SomeException";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::SomeException", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface MyClass : global::Ice.Object, MyClassOperations_
        {
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class MyStruct1 : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string tesT;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClassPrx myClass;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string myStruct1;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyStruct1()
            {
                this.tesT = "";
                this.myStruct1 = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyStruct1(string tesT, MyClassPrx myClass, string myStruct1)
            {
                this.tesT = tesT;
                this.myClass = myClass;
                this.myStruct1 = myStruct1;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::MyStruct1");
                global::IceInternal.HashUtil.hashAdd(ref h_, tesT);
                global::IceInternal.HashUtil.hashAdd(ref h_, myClass);
                global::IceInternal.HashUtil.hashAdd(ref h_, myStruct1);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                MyStruct1 o = (MyStruct1)other;
                if(this.tesT == null)
                {
                    if(o.tesT != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.tesT.Equals(o.tesT))
                    {
                        return false;
                    }
                }
                if(this.myClass == null)
                {
                    if(o.myClass != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.myClass.Equals(o.myClass))
                    {
                        return false;
                    }
                }
                if(this.myStruct1 == null)
                {
                    if(o.myStruct1 != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.myStruct1.Equals(o.myStruct1))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(MyStruct1 lhs, MyStruct1 rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(MyStruct1 lhs, MyStruct1 rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.tesT);
                MyClassPrxHelper.write(ostr, this.myClass);
                ostr.writeString(this.myStruct1);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.tesT = istr.readString();
                this.myClass = MyClassPrxHelper.read(istr);
                this.myStruct1 = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, MyStruct1 v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static MyStruct1 ice_read(global::Ice.InputStream istr)
            {
                var v = new MyStruct1();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly MyStruct1 _nullMarshalValue = new MyStruct1();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class MyClass1 : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string tesT;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClassPrx myClass;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string myClass1;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass1()
            {
                this.tesT = "";
                this.myClass1 = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass1(string tesT, MyClassPrx myClass, string myClass1)
            {
                this.tesT = tesT;
                this.myClass = myClass;
                this.myClass1 = myClass1;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::MyClass1";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(tesT);
                MyClassPrxHelper.write(ostr_, myClass);
                ostr_.writeString(myClass1);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                tesT = istr_.readString();
                myClass = MyClassPrxHelper.read(istr_);
                myClass1 = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface MyDerivedClass : global::Ice.Object, MyDerivedClassOperations_, MyClass
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s0
        {
            public const string value = "\\";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s1
        {
            public const string value = "A";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s2
        {
            public const string value = "Ice";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s3
        {
            public const string value = "A21";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s4
        {
            public const string value = "\\u0041 \\U00000041";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s5
        {
            public const string value = "\u00FF";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s6
        {
            public const string value = "\u03FF";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s7
        {
            public const string value = "\u05F0";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s8
        {
            public const string value = "\U00010000";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s9
        {
            public const string value = "\U0001F34C";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class s10
        {
            public const string value = "\u0DA7";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw0
        {
            public const string value = "\\";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw1
        {
            public const string value = "A";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw2
        {
            public const string value = "Ice";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw3
        {
            public const string value = "A21";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw4
        {
            public const string value = "\\u0041 \\U00000041";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw5
        {
            public const string value = "\U000000FF";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw6
        {
            public const string value = "\U000003FF";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw7
        {
            public const string value = "\U000005F0";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw8
        {
            public const string value = "\U00010000";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw9
        {
            public const string value = "\U0001F34C";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class sw10
        {
            public const string value = "\U00000DA7";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss0
        {
            public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss1
        {
            public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss2
        {
            public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss3
        {
            public const string value = "\\\\U\\u\\";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss4
        {
            public const string value = "\\A\\";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ss5
        {
            public const string value = "\\u0041\\";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class su0
        {
            public const string value = "\u0128\u0178\u00ff\u0100\u1f00\U00010194\U0001016a\U00010198\U0001f340\U0001f341\U0001f342\U0001f343";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class su1
        {
            public const string value = "\u0128\u0178\u00FF\u0100\u1F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class su2
        {
            public const string value = "\U00000128\U00000178\U000000FF\U00000100\U00001F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343";
        }
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MyDerivedClass : global::Ice.Object, MyDerivedClassOperations_, global::Ice.operations.Test.MyClass
    {
    }
}

namespace Ice.operations.TypeId.Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class SomeException
    {
        public abstract global::Ice.operations.Test.SomeException targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyClass1
    {
        public abstract global::Ice.operations.Test.MyClass1 targetClass { get; }
    }
}

namespace Ice.operations
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_supportsCompress(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opVoid();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByte(byte ret, byte p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opBool(bool ret, bool p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortIntLong(long ret, short p4, int p5, long p6);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opFloatDouble(double ret, float p3, double p4);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opString(string ret, string p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyEnum(MyEnum ret, MyEnum p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyClass(MyClassPrx ret, MyClassPrx p2, MyClassPrx p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStruct(Structure ret, Structure p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteS(byte[] ret, byte[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opBoolS(bool[] ret, bool[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortIntLongS(long[] ret, short[] p4, int[] p5, long[] p6);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opFloatDoubleS(double[] ret, float[] p3, double[] p4);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringS(string[] ret, string[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteSS(byte[][] ret, byte[][] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opBoolSS(bool[][] ret, bool[][] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortIntLongSS(long[][] ret, short[][] p4, int[][] p5, long[][] p6);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opFloatDoubleSS(double[][] ret, float[][] p3, double[][] p4);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringSS(string[][] ret, string[][] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringSSS(string[][][] ret, string[][][] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> ret, global::System.Collections.Generic.Dictionary<byte, bool> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> ret, global::System.Collections.Generic.Dictionary<short, int> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> ret, global::System.Collections.Generic.Dictionary<long, float> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> ret, global::System.Collections.Generic.Dictionary<string, string> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> ret, global::System.Collections.Generic.Dictionary<string, MyEnum> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> ret, global::System.Collections.Generic.Dictionary<MyEnum, string> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> ret, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] ret, global::System.Collections.Generic.Dictionary<byte, bool>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] ret, global::System.Collections.Generic.Dictionary<short, int>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] ret, global::System.Collections.Generic.Dictionary<long, float>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] ret, global::System.Collections.Generic.Dictionary<string, string>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] ret, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] ret, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] ret, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> ret, global::System.Collections.Generic.Dictionary<byte, byte[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> ret, global::System.Collections.Generic.Dictionary<bool, bool[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> ret, global::System.Collections.Generic.Dictionary<short, short[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> ret, global::System.Collections.Generic.Dictionary<int, int[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> ret, global::System.Collections.Generic.Dictionary<long, long[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> ret, global::System.Collections.Generic.Dictionary<string, float[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> ret, global::System.Collections.Generic.Dictionary<string, double[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> ret, global::System.Collections.Generic.Dictionary<string, string[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> ret, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opIntS(int[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteSOneway();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteSOnewayCallCount(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opContext(global::System.Collections.Generic.Dictionary<string, string> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opDoubleMarshaling();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opIdempotent();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opNonmutating();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByte1(byte ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opShort1(short ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opInt1(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opLong1(long ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opFloat1(float ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opDouble1(double ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opString1(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringS1(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringS2(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opStringLiterals(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opWStringLiterals(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMStruct1(Structure ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMStruct2(Structure ret, Structure p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMSeq1(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMSeq2(string[] ret, string[] p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMDict1(global::System.Collections.Generic.Dictionary<string, string> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyClass_opMDict2(global::System.Collections.Generic.Dictionary<string, string> ret, global::System.Collections.Generic.Dictionary<string, string> p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyDerivedClass_opDerived();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyDerivedClass_opMyClass1(MyClass1 ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyDerivedClass_opMyStruct1(MyStruct1 ret);
    }
}

namespace Ice.operations
{
    namespace Test
    {
        public struct MyClass_OpByteResult
        {
            public MyClass_OpByteResult(byte returnValue, byte p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public byte returnValue;
            public byte p3;
        }

        public struct MyClass_OpBoolResult
        {
            public MyClass_OpBoolResult(bool returnValue, bool p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public bool returnValue;
            public bool p3;
        }

        public struct MyClass_OpShortIntLongResult
        {
            public MyClass_OpShortIntLongResult(long returnValue, short p4, int p5, long p6)
            {
                this.returnValue = returnValue;
                this.p4 = p4;
                this.p5 = p5;
                this.p6 = p6;
            }

            public long returnValue;
            public short p4;
            public int p5;
            public long p6;
        }

        public struct MyClass_OpFloatDoubleResult
        {
            public MyClass_OpFloatDoubleResult(double returnValue, float p3, double p4)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
                this.p4 = p4;
            }

            public double returnValue;
            public float p3;
            public double p4;
        }

        public struct MyClass_OpStringResult
        {
            public MyClass_OpStringResult(string returnValue, string p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public string returnValue;
            public string p3;
        }

        public struct MyClass_OpMyEnumResult
        {
            public MyClass_OpMyEnumResult(MyEnum returnValue, MyEnum p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public MyEnum returnValue;
            public MyEnum p2;
        }

        public struct MyClass_OpMyClassResult
        {
            public MyClass_OpMyClassResult(MyClassPrx returnValue, MyClassPrx p2, MyClassPrx p3)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
                this.p3 = p3;
            }

            public MyClassPrx returnValue;
            public MyClassPrx p2;
            public MyClassPrx p3;
        }

        public struct MyClass_OpStructResult
        {
            public MyClass_OpStructResult(Structure returnValue, Structure p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public Structure returnValue;
            public Structure p3;
        }

        public struct MyClass_OpByteSResult
        {
            public MyClass_OpByteSResult(byte[] returnValue, byte[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public byte[] returnValue;
            public byte[] p3;
        }

        public struct MyClass_OpBoolSResult
        {
            public MyClass_OpBoolSResult(bool[] returnValue, bool[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public bool[] returnValue;
            public bool[] p3;
        }

        public struct MyClass_OpShortIntLongSResult
        {
            public MyClass_OpShortIntLongSResult(long[] returnValue, short[] p4, int[] p5, long[] p6)
            {
                this.returnValue = returnValue;
                this.p4 = p4;
                this.p5 = p5;
                this.p6 = p6;
            }

            public long[] returnValue;
            public short[] p4;
            public int[] p5;
            public long[] p6;
        }

        public struct MyClass_OpFloatDoubleSResult
        {
            public MyClass_OpFloatDoubleSResult(double[] returnValue, float[] p3, double[] p4)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
                this.p4 = p4;
            }

            public double[] returnValue;
            public float[] p3;
            public double[] p4;
        }

        public struct MyClass_OpStringSResult
        {
            public MyClass_OpStringSResult(string[] returnValue, string[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public string[] returnValue;
            public string[] p3;
        }

        public struct MyClass_OpByteSSResult
        {
            public MyClass_OpByteSSResult(byte[][] returnValue, byte[][] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public byte[][] returnValue;
            public byte[][] p3;
        }

        public struct MyClass_OpBoolSSResult
        {
            public MyClass_OpBoolSSResult(bool[][] returnValue, bool[][] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public bool[][] returnValue;
            public bool[][] p3;
        }

        public struct MyClass_OpShortIntLongSSResult
        {
            public MyClass_OpShortIntLongSSResult(long[][] returnValue, short[][] p4, int[][] p5, long[][] p6)
            {
                this.returnValue = returnValue;
                this.p4 = p4;
                this.p5 = p5;
                this.p6 = p6;
            }

            public long[][] returnValue;
            public short[][] p4;
            public int[][] p5;
            public long[][] p6;
        }

        public struct MyClass_OpFloatDoubleSSResult
        {
            public MyClass_OpFloatDoubleSSResult(double[][] returnValue, float[][] p3, double[][] p4)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
                this.p4 = p4;
            }

            public double[][] returnValue;
            public float[][] p3;
            public double[][] p4;
        }

        public struct MyClass_OpStringSSResult
        {
            public MyClass_OpStringSSResult(string[][] returnValue, string[][] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public string[][] returnValue;
            public string[][] p3;
        }

        public struct MyClass_OpStringSSSResult
        {
            public MyClass_OpStringSSSResult(string[][][] returnValue, string[][][] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public string[][][] returnValue;
            public string[][][] p3;
        }

        public struct MyClass_OpByteBoolDResult
        {
            public MyClass_OpByteBoolDResult(global::System.Collections.Generic.Dictionary<byte, bool> returnValue, global::System.Collections.Generic.Dictionary<byte, bool> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> returnValue;
            public global::System.Collections.Generic.Dictionary<byte, bool> p3;
        }

        public struct MyClass_OpShortIntDResult
        {
            public MyClass_OpShortIntDResult(global::System.Collections.Generic.Dictionary<short, int> returnValue, global::System.Collections.Generic.Dictionary<short, int> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<short, int> returnValue;
            public global::System.Collections.Generic.Dictionary<short, int> p3;
        }

        public struct MyClass_OpLongFloatDResult
        {
            public MyClass_OpLongFloatDResult(global::System.Collections.Generic.Dictionary<long, float> returnValue, global::System.Collections.Generic.Dictionary<long, float> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<long, float> returnValue;
            public global::System.Collections.Generic.Dictionary<long, float> p3;
        }

        public struct MyClass_OpStringStringDResult
        {
            public MyClass_OpStringStringDResult(global::System.Collections.Generic.Dictionary<string, string> returnValue, global::System.Collections.Generic.Dictionary<string, string> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, string> returnValue;
            public global::System.Collections.Generic.Dictionary<string, string> p3;
        }

        public struct MyClass_OpStringMyEnumDResult
        {
            public MyClass_OpStringMyEnumDResult(global::System.Collections.Generic.Dictionary<string, MyEnum> returnValue, global::System.Collections.Generic.Dictionary<string, MyEnum> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum> returnValue;
            public global::System.Collections.Generic.Dictionary<string, MyEnum> p3;
        }

        public struct MyClass_OpMyEnumStringDResult
        {
            public MyClass_OpMyEnumStringDResult(global::System.Collections.Generic.Dictionary<MyEnum, string> returnValue, global::System.Collections.Generic.Dictionary<MyEnum, string> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string> returnValue;
            public global::System.Collections.Generic.Dictionary<MyEnum, string> p3;
        }

        public struct MyClass_OpMyStructMyEnumDResult
        {
            public MyClass_OpMyStructMyEnumDResult(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> returnValue, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> returnValue;
            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3;
        }

        public struct MyClass_OpByteBoolDSResult
        {
            public MyClass_OpByteBoolDSResult(global::System.Collections.Generic.Dictionary<byte, bool>[] returnValue, global::System.Collections.Generic.Dictionary<byte, bool>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<byte, bool>[] returnValue;
            public global::System.Collections.Generic.Dictionary<byte, bool>[] p3;
        }

        public struct MyClass_OpShortIntDSResult
        {
            public MyClass_OpShortIntDSResult(global::System.Collections.Generic.Dictionary<short, int>[] returnValue, global::System.Collections.Generic.Dictionary<short, int>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<short, int>[] returnValue;
            public global::System.Collections.Generic.Dictionary<short, int>[] p3;
        }

        public struct MyClass_OpLongFloatDSResult
        {
            public MyClass_OpLongFloatDSResult(global::System.Collections.Generic.Dictionary<long, float>[] returnValue, global::System.Collections.Generic.Dictionary<long, float>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<long, float>[] returnValue;
            public global::System.Collections.Generic.Dictionary<long, float>[] p3;
        }

        public struct MyClass_OpStringStringDSResult
        {
            public MyClass_OpStringStringDSResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, string>[] returnValue;
            public global::System.Collections.Generic.Dictionary<string, string>[] p3;
        }

        public struct MyClass_OpStringMyEnumDSResult
        {
            public MyClass_OpStringMyEnumDSResult(global::System.Collections.Generic.Dictionary<string, MyEnum>[] returnValue, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum>[] returnValue;
            public global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3;
        }

        public struct MyClass_OpMyEnumStringDSResult
        {
            public MyClass_OpMyEnumStringDSResult(global::System.Collections.Generic.Dictionary<MyEnum, string>[] returnValue, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string>[] returnValue;
            public global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3;
        }

        public struct MyClass_OpMyStructMyEnumDSResult
        {
            public MyClass_OpMyStructMyEnumDSResult(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] returnValue, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] returnValue;
            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3;
        }

        public struct MyClass_OpByteByteSDResult
        {
            public MyClass_OpByteByteSDResult(global::System.Collections.Generic.Dictionary<byte, byte[]> returnValue, global::System.Collections.Generic.Dictionary<byte, byte[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<byte, byte[]> returnValue;
            public global::System.Collections.Generic.Dictionary<byte, byte[]> p3;
        }

        public struct MyClass_OpBoolBoolSDResult
        {
            public MyClass_OpBoolBoolSDResult(global::System.Collections.Generic.Dictionary<bool, bool[]> returnValue, global::System.Collections.Generic.Dictionary<bool, bool[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<bool, bool[]> returnValue;
            public global::System.Collections.Generic.Dictionary<bool, bool[]> p3;
        }

        public struct MyClass_OpShortShortSDResult
        {
            public MyClass_OpShortShortSDResult(global::System.Collections.Generic.Dictionary<short, short[]> returnValue, global::System.Collections.Generic.Dictionary<short, short[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<short, short[]> returnValue;
            public global::System.Collections.Generic.Dictionary<short, short[]> p3;
        }

        public struct MyClass_OpIntIntSDResult
        {
            public MyClass_OpIntIntSDResult(global::System.Collections.Generic.Dictionary<int, int[]> returnValue, global::System.Collections.Generic.Dictionary<int, int[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<int, int[]> returnValue;
            public global::System.Collections.Generic.Dictionary<int, int[]> p3;
        }

        public struct MyClass_OpLongLongSDResult
        {
            public MyClass_OpLongLongSDResult(global::System.Collections.Generic.Dictionary<long, long[]> returnValue, global::System.Collections.Generic.Dictionary<long, long[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<long, long[]> returnValue;
            public global::System.Collections.Generic.Dictionary<long, long[]> p3;
        }

        public struct MyClass_OpStringFloatSDResult
        {
            public MyClass_OpStringFloatSDResult(global::System.Collections.Generic.Dictionary<string, float[]> returnValue, global::System.Collections.Generic.Dictionary<string, float[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, float[]> returnValue;
            public global::System.Collections.Generic.Dictionary<string, float[]> p3;
        }

        public struct MyClass_OpStringDoubleSDResult
        {
            public MyClass_OpStringDoubleSDResult(global::System.Collections.Generic.Dictionary<string, double[]> returnValue, global::System.Collections.Generic.Dictionary<string, double[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, double[]> returnValue;
            public global::System.Collections.Generic.Dictionary<string, double[]> p3;
        }

        public struct MyClass_OpStringStringSDResult
        {
            public MyClass_OpStringStringSDResult(global::System.Collections.Generic.Dictionary<string, string[]> returnValue, global::System.Collections.Generic.Dictionary<string, string[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<string, string[]> returnValue;
            public global::System.Collections.Generic.Dictionary<string, string[]> p3;
        }

        public struct MyClass_OpMyEnumMyEnumSDResult
        {
            public MyClass_OpMyEnumMyEnumSDResult(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> returnValue, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> returnValue;
            public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMStruct1MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMStruct1MarshaledResult(Structure ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                Structure.ice_write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMStruct1MarshaledResult(new Structure(), current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct MyClass_OpMStruct2Result
        {
            public MyClass_OpMStruct2Result(Structure returnValue, Structure p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public Structure returnValue;
            public Structure p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMStruct2MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMStruct2MarshaledResult(Structure ret, Structure p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                Structure.ice_write(_ostr, p2);
                Structure.ice_write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMStruct2MarshaledResult(new Structure(), new Structure(), current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMSeq1MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMSeq1MarshaledResult(string[] ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                StringSHelper.write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMSeq1MarshaledResult(null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct MyClass_OpMSeq2Result
        {
            public MyClass_OpMSeq2Result(string[] returnValue, string[] p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public string[] returnValue;
            public string[] p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMSeq2MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMSeq2MarshaledResult(string[] ret, string[] p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                StringSHelper.write(_ostr, p2);
                StringSHelper.write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMSeq2MarshaledResult(null, null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMDict1MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMDict1MarshaledResult(global::System.Collections.Generic.Dictionary<string, string> ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                StringStringDHelper.write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMDict1MarshaledResult(null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct MyClass_OpMDict2Result
        {
            public MyClass_OpMDict2Result(global::System.Collections.Generic.Dictionary<string, string> returnValue, global::System.Collections.Generic.Dictionary<string, string> p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public global::System.Collections.Generic.Dictionary<string, string> returnValue;
            public global::System.Collections.Generic.Dictionary<string, string> p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct MyClass_OpMDict2MarshaledResult : global::Ice.MarshaledResult
        {
            public MyClass_OpMDict2MarshaledResult(global::System.Collections.Generic.Dictionary<string, string> ret, global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                StringStringDHelper.write(_ostr, p2);
                StringStringDHelper.write(_ostr, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new MyClass_OpMDict2MarshaledResult(null, null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }
    }
}

namespace Ice.operations
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyClassPrx : global::Ice.ObjectPrx
        {
            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool supportsCompress(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            byte opByte(byte p1, byte p2, out byte p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool opBool(bool p1, bool p2, out bool p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string opString(string p1, string p2, out string p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringSSSResult> opStringSSSAsync(string[][][] p1, string[][][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDResult> opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDSResult> opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            int[] opIntS(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opByteSOneway(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opByteSOnewayAsync(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            int opByteSOnewayCallCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> opByteSOnewayCallCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opDoubleMarshaling(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opDoubleMarshalingAsync(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opNonmutating(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opNonmutatingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            byte opByte1(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            short opShort1(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            int opInt1(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            long opLong1(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            float opFloat1(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            double opDouble1(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string opString1(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opStringS1(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opStringS2(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opWStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> opWStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            Structure opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            Structure opMStruct2(Structure p1, out Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            string[] opMSeq2(string[] p1, out string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyDerivedClassPrx : MyClassPrx
        {
            void opDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            MyClass1 opMyClass1(MyClass1 opMyClass1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyClass1> opMyClass1Async(MyClass1 opMyClass1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            MyStruct1 opMyStruct1(MyStruct1 opMyStruct1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<MyStruct1> opMyStruct1Async(MyStruct1 opMyStruct1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
        }
    }
}

namespace Test2
{
    /// <summary>
    /// Makes sure that proxy operations are correctly generated when extending an interface from
    /// a different module (ICE-7639).
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyDerivedClassPrx : global::Ice.operations.Test.MyClassPrx
    {
    }
}

namespace Ice.operations
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyClassOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool supportsCompress(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opVoid(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte opByte(byte p1, byte p2, out byte p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool opBool(bool p1, bool p2, out bool p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string opString(string p1, string p2, out string p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            int[] opIntS(int[] s, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opByteSOneway(byte[] s, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            int opByteSOnewayCallCount(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opDoubleMarshaling(double p1, double[] p2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opIdempotent(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opNonmutating(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte opByte1(byte opByte1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            short opShort1(short opShort1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            int opInt1(int opInt1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long opLong1(long opLong1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            float opFloat1(float opFloat1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double opDouble1(double opDouble1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string opString1(string opString1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[] opStringS1(string[] opStringS1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[] opStringS2(string[] stringS, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[] opStringLiterals(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            string[] opWStringLiterals(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMDict1MarshaledResult opMDict1(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyDerivedClassOperations_ : MyClassOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void opDerived(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyClass1 opMyClass1(MyClass1 opMyClass1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            MyStruct1 opMyStruct1(MyStruct1 opMyStruct1, global::Ice.Current current = null);
        }
    }
}

namespace Test2
{
    /// <summary>
    /// Makes sure that proxy operations are correctly generated when extending an interface from
    /// a different module (ICE-7639).
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyDerivedClassOperations_ : global::Ice.operations.Test.MyClassOperations_
    {
    }
}

namespace Ice.operations
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(global::Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(global::Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(global::Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(global::Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(global::Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(global::Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(global::Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static MyEnum[] read(global::Ice.InputStream istr)
            {
                MyEnum[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyEnum[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = (MyEnum)istr.readEnum(2);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyClassPrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyClassPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyClassPrx[] read(global::Ice.InputStream istr)
            {
                MyClassPrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new MyClassPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyClassPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ByteSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static byte[][] read(global::Ice.InputStream istr)
            {
                byte[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new byte[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = ByteSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, bool[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        BoolSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static bool[][] read(global::Ice.InputStream istr)
            {
                bool[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new bool[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = BoolSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, short[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ShortSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static short[][] read(global::Ice.InputStream istr)
            {
                short[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new short[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = ShortSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, int[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IntSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static int[][] read(global::Ice.InputStream istr)
            {
                int[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new int[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IntSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, long[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        LongSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static long[][] read(global::Ice.InputStream istr)
            {
                long[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new long[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = LongSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, float[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        FloatSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static float[][] read(global::Ice.InputStream istr)
            {
                float[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new float[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = FloatSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, double[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        DoubleSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static double[][] read(global::Ice.InputStream istr)
            {
                double[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new double[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = DoubleSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        StringSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static string[][] read(global::Ice.InputStream istr)
            {
                string[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new string[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = StringSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyEnumSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyEnum[][] read(global::Ice.InputStream istr)
            {
                MyEnum[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyEnum[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyEnumSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyClassPrx[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyClassSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyClassPrx[][] read(global::Ice.InputStream istr)
            {
                MyClassPrx[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyClassPrx[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyClassSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[][][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        StringSSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static string[][][] read(global::Ice.InputStream istr)
            {
                string[][][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new string[szx][][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = StringSSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteBoolDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<byte, bool> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<byte, bool> e in v)
                    {
                        ostr.writeByte(e.Key);
                        ostr.writeBool(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<byte, bool> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<byte, bool> r = new global::System.Collections.Generic.Dictionary<byte, bool>();
                for(int i = 0; i < sz; ++i)
                {
                    byte k;
                    k = istr.readByte();
                    bool v;
                    v = istr.readBool();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortIntDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<short, int> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<short, int> e in v)
                    {
                        ostr.writeShort(e.Key);
                        ostr.writeInt(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<short, int> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<short, int> r = new global::System.Collections.Generic.Dictionary<short, int>();
                for(int i = 0; i < sz; ++i)
                {
                    short k;
                    k = istr.readShort();
                    int v;
                    v = istr.readInt();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongFloatDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<long, float> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<long, float> e in v)
                    {
                        ostr.writeLong(e.Key);
                        ostr.writeFloat(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<long, float> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<long, float> r = new global::System.Collections.Generic.Dictionary<long, float>();
                for(int i = 0; i < sz; ++i)
                {
                    long k;
                    k = istr.readLong();
                    float v;
                    v = istr.readFloat();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringStringDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, string> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeString(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string v;
                    v = istr.readString();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringMyEnumDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, MyEnum> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, MyEnum> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeEnum((int)e.Value, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, MyEnum> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, MyEnum> r = new global::System.Collections.Generic.Dictionary<string, MyEnum>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    MyEnum v;
                    v = (MyEnum)istr.readEnum(2);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumStringDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<MyEnum, string> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<MyEnum, string> e in v)
                    {
                        ostr.writeEnum((int)e.Key, 2);
                        ostr.writeString(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<MyEnum, string> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<MyEnum, string> r = new global::System.Collections.Generic.Dictionary<MyEnum, string>();
                for(int i = 0; i < sz; ++i)
                {
                    MyEnum k;
                    k = (MyEnum)istr.readEnum(2);
                    string v;
                    v = istr.readString();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyStructMyEnumDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<MyStruct, MyEnum> e in v)
                    {
                        e.Key.ice_writeMembers(ostr);
                        ostr.writeEnum((int)e.Value, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> r = new global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>();
                for(int i = 0; i < sz; ++i)
                {
                    MyStruct k;
                    k = new MyStruct();
                    k.ice_readMembers(istr);
                    MyEnum v;
                    v = (MyEnum)istr.readEnum(2);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteBoolDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<byte, bool>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ByteBoolDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<byte, bool>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<byte, bool>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<byte, bool>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = ByteBoolDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortIntDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<short, int>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ShortIntDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<short, int>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<short, int>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<short, int>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = ShortIntDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongFloatDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<long, float>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        LongFloatDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<long, float>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<long, float>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<long, float>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = LongFloatDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringStringDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        StringStringDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<string, string>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = StringStringDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringMyEnumDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, MyEnum>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        StringMyEnumDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, MyEnum>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<string, MyEnum>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<string, MyEnum>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = StringMyEnumDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumStringDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<MyEnum, string>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyEnumStringDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<MyEnum, string>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<MyEnum, string>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<MyEnum, string>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyEnumStringDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyStructMyEnumDSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyStructMyEnumDHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyStructMyEnumDHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteByteSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<byte, byte[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<byte, byte[]> e in v)
                    {
                        ostr.writeByte(e.Key);
                        ByteSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<byte, byte[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<byte, byte[]> r = new global::System.Collections.Generic.Dictionary<byte, byte[]>();
                for(int i = 0; i < sz; ++i)
                {
                    byte k;
                    k = istr.readByte();
                    byte[] v;
                    v = ByteSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolBoolSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<bool, bool[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<bool, bool[]> e in v)
                    {
                        ostr.writeBool(e.Key);
                        BoolSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<bool, bool[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<bool, bool[]> r = new global::System.Collections.Generic.Dictionary<bool, bool[]>();
                for(int i = 0; i < sz; ++i)
                {
                    bool k;
                    k = istr.readBool();
                    bool[] v;
                    v = BoolSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortShortSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<short, short[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<short, short[]> e in v)
                    {
                        ostr.writeShort(e.Key);
                        ShortSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<short, short[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<short, short[]> r = new global::System.Collections.Generic.Dictionary<short, short[]>();
                for(int i = 0; i < sz; ++i)
                {
                    short k;
                    k = istr.readShort();
                    short[] v;
                    v = ShortSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntIntSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, int[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, int[]> e in v)
                    {
                        ostr.writeInt(e.Key);
                        IntSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, int[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, int[]> r = new global::System.Collections.Generic.Dictionary<int, int[]>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    int[] v;
                    v = IntSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongLongSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<long, long[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<long, long[]> e in v)
                    {
                        ostr.writeLong(e.Key);
                        LongSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<long, long[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<long, long[]> r = new global::System.Collections.Generic.Dictionary<long, long[]>();
                for(int i = 0; i < sz; ++i)
                {
                    long k;
                    k = istr.readLong();
                    long[] v;
                    v = LongSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringFloatSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, float[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, float[]> e in v)
                    {
                        ostr.writeString(e.Key);
                        FloatSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, float[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, float[]> r = new global::System.Collections.Generic.Dictionary<string, float[]>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    float[] v;
                    v = FloatSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringDoubleSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, double[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, double[]> e in v)
                    {
                        ostr.writeString(e.Key);
                        DoubleSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, double[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, double[]> r = new global::System.Collections.Generic.Dictionary<string, double[]>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    double[] v;
                    v = DoubleSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringStringSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, string[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string[]> e in v)
                    {
                        ostr.writeString(e.Key);
                        StringSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, string[]> r = new global::System.Collections.Generic.Dictionary<string, string[]>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string[] v;
                    v = StringSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumMyEnumSDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<MyEnum, MyEnum[]> e in v)
                    {
                        ostr.writeEnum((int)e.Key, 2);
                        MyEnumSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> r = new global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]>();
                for(int i = 0; i < sz; ++i)
                {
                    MyEnum k;
                    k = (MyEnum)istr.readEnum(2);
                    MyEnum[] v;
                    v = MyEnumSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyClassPrx
        {
            public MyClassPrxHelper()
            {
            }

            #region Synchronous operations

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsCompress(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte opByte(byte p1, byte p2, out byte p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool opBool(bool p1, bool p2, out bool p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string opString(string p1, string p2, out string p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyStructMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyStructMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int[] opIntS(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opByteSOneway(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opByteSOnewayAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int opByteSOnewayCallCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteSOnewayCallCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opDoubleMarshaling(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opDoubleMarshalingAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opNonmutating(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opNonmutatingAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte opByte1(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short opShort1(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int opInt1(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long opLong1(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float opFloat1(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double opDouble1(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string opString1(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS1(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS2(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opWStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opWStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opMStruct2(Structure p1, out Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opMSeq2(string[] p1, out string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsCompressAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsCompress_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsCompress(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsCompress_name = "supportsCompress";

            private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsCompress_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opVoidAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opVoid(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opVoid_name = "opVoid";

            private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opVoid_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByte_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteResult>(progress, cancel);
                _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByte_name = "opByte";

            private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteResult>(completed);
                outAsync.invoke(
                    _opByte_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(iceP_p1);
                        ostr.writeByte(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteResult ret = new MyClass_OpByteResult();
                        ret.p3 = istr.readByte();
                        ret.returnValue = istr.readByte();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBool_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolResult>(progress, cancel);
                _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBool_name = "opBool";

            private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolResult>(completed);
                outAsync.invoke(
                    _opBool_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_p1);
                        ostr.writeBool(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolResult ret = new MyClass_OpBoolResult();
                        ret.p3 = istr.readBool();
                        ret.returnValue = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLong_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongResult>(progress, cancel);
                _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLong_name = "opShortIntLong";

            private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongResult>(completed);
                outAsync.invoke(
                    _opShortIntLong_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShort(iceP_p1);
                        ostr.writeInt(iceP_p2);
                        ostr.writeLong(iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongResult ret = new MyClass_OpShortIntLongResult();
                        ret.p4 = istr.readShort();
                        ret.p5 = istr.readInt();
                        ret.p6 = istr.readLong();
                        ret.returnValue = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDouble_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleResult>(progress, cancel);
                _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDouble_name = "opFloatDouble";

            private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleResult>(completed);
                outAsync.invoke(
                    _opFloatDouble_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(iceP_p1);
                        ostr.writeDouble(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleResult ret = new MyClass_OpFloatDoubleResult();
                        ret.p3 = istr.readFloat();
                        ret.p4 = istr.readDouble();
                        ret.returnValue = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opString_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringResult>(progress, cancel);
                _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opString_name = "opString";

            private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringResult>(completed);
                outAsync.invoke(
                    _opString_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_p1);
                        ostr.writeString(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringResult ret = new MyClass_OpStringResult();
                        ret.p3 = istr.readString();
                        ret.returnValue = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnum_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumResult>(progress, cancel);
                _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnum_name = "opMyEnum";

            private void _iceI_opMyEnum(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumResult>(completed);
                outAsync.invoke(
                    _opMyEnum_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeEnum((int)iceP_p1, 2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumResult ret = new MyClass_OpMyEnumResult();
                        ret.p2 = (MyEnum)istr.readEnum(2);
                        ret.returnValue = (MyEnum)istr.readEnum(2);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> _iceI_opMyClassAsync(MyClassPrx iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyClass_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyClassResult>(progress, cancel);
                _iceI_opMyClass(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyClass_name = "opMyClass";

            private void _iceI_opMyClass(MyClassPrx iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyClassResult>(completed);
                outAsync.invoke(
                    _opMyClass_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyClassPrxHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyClassResult ret = new MyClass_OpMyClassResult();
                        ret.p2 = MyClassPrxHelper.read(istr);
                        ret.p3 = MyClassPrxHelper.read(istr);
                        ret.returnValue = MyClassPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStructResult> _iceI_opStructAsync(Structure iceP_p1, Structure iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStruct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStructResult>(progress, cancel);
                _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStruct_name = "opStruct";

            private void _iceI_opStruct(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStructResult>(completed);
                outAsync.invoke(
                    _opStruct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Structure.ice_write(ostr, iceP_p1);
                        Structure.ice_write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStructResult ret = new MyClass_OpStructResult();
                        ret.p3 = Structure.ice_read(istr);
                        ret.returnValue = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteSResult>(progress, cancel);
                _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteS_name = "opByteS";

            private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteSResult>(completed);
                outAsync.invoke(
                    _opByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSHelper.write(ostr, iceP_p1);
                        ByteSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteSResult ret = new MyClass_OpByteSResult();
                        ret.p3 = ByteSHelper.read(istr);
                        ret.returnValue = ByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolSResult>(progress, cancel);
                _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolS_name = "opBoolS";

            private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolSResult>(completed);
                outAsync.invoke(
                    _opBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolSHelper.write(ostr, iceP_p1);
                        BoolSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolSResult ret = new MyClass_OpBoolSResult();
                        ret.p3 = BoolSHelper.read(istr);
                        ret.returnValue = BoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLongS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSResult>(progress, cancel);
                _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLongS_name = "opShortIntLongS";

            private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSResult>(completed);
                outAsync.invoke(
                    _opShortIntLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortSHelper.write(ostr, iceP_p1);
                        IntSHelper.write(ostr, iceP_p2);
                        LongSHelper.write(ostr, iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongSResult ret = new MyClass_OpShortIntLongSResult();
                        ret.p4 = ShortSHelper.read(istr);
                        ret.p5 = IntSHelper.read(istr);
                        ret.p6 = LongSHelper.read(istr);
                        ret.returnValue = LongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDoubleS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSResult>(progress, cancel);
                _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDoubleS_name = "opFloatDoubleS";

            private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSResult>(completed);
                outAsync.invoke(
                    _opFloatDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        FloatSHelper.write(ostr, iceP_p1);
                        DoubleSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleSResult ret = new MyClass_OpFloatDoubleSResult();
                        ret.p3 = FloatSHelper.read(istr);
                        ret.p4 = DoubleSHelper.read(istr);
                        ret.returnValue = DoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSResult>(progress, cancel);
                _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS_name = "opStringS";

            private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSResult>(completed);
                outAsync.invoke(
                    _opStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_p1);
                        StringSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSResult ret = new MyClass_OpStringSResult();
                        ret.p3 = StringSHelper.read(istr);
                        ret.returnValue = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteSSResult>(progress, cancel);
                _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSS_name = "opByteSS";

            private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteSSResult>(completed);
                outAsync.invoke(
                    _opByteSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSSHelper.write(ostr, iceP_p1);
                        ByteSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteSSResult ret = new MyClass_OpByteSSResult();
                        ret.p3 = ByteSSHelper.read(istr);
                        ret.returnValue = ByteSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolSSResult>(progress, cancel);
                _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolSS_name = "opBoolSS";

            private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolSSResult>(completed);
                outAsync.invoke(
                    _opBoolSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolSSHelper.write(ostr, iceP_p1);
                        BoolSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolSSResult ret = new MyClass_OpBoolSSResult();
                        ret.p3 = BoolSSHelper.read(istr);
                        ret.returnValue = BoolSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLongSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSSResult>(progress, cancel);
                _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLongSS_name = "opShortIntLongSS";

            private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSSResult>(completed);
                outAsync.invoke(
                    _opShortIntLongSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortSSHelper.write(ostr, iceP_p1);
                        IntSSHelper.write(ostr, iceP_p2);
                        LongSSHelper.write(ostr, iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongSSResult ret = new MyClass_OpShortIntLongSSResult();
                        ret.p4 = ShortSSHelper.read(istr);
                        ret.p5 = IntSSHelper.read(istr);
                        ret.p6 = LongSSHelper.read(istr);
                        ret.returnValue = LongSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDoubleSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSSResult>(progress, cancel);
                _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

            private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSSResult>(completed);
                outAsync.invoke(
                    _opFloatDoubleSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        FloatSSHelper.write(ostr, iceP_p1);
                        DoubleSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleSSResult ret = new MyClass_OpFloatDoubleSSResult();
                        ret.p3 = FloatSSHelper.read(istr);
                        ret.p4 = DoubleSSHelper.read(istr);
                        ret.returnValue = DoubleSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSSResult>(progress, cancel);
                _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringSS_name = "opStringSS";

            private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSSResult>(completed);
                outAsync.invoke(
                    _opStringSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSSHelper.write(ostr, iceP_p1);
                        StringSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSSResult ret = new MyClass_OpStringSSResult();
                        ret.p3 = StringSSHelper.read(istr);
                        ret.returnValue = StringSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSSSResult> opStringSSSAsync(string[][][] p1, string[][][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSSSResult> _iceI_opStringSSSAsync(string[][][] iceP_p1, string[][][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringSSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSSSResult>(progress, cancel);
                _iceI_opStringSSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringSSS_name = "opStringSSS";

            private void _iceI_opStringSSS(string[][][] iceP_p1, string[][][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSSSResult>(completed);
                outAsync.invoke(
                    _opStringSSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSSSHelper.write(ostr, iceP_p1);
                        StringSSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSSSResult ret = new MyClass_OpStringSSSResult();
                        ret.p3 = StringSSSHelper.read(istr);
                        ret.returnValue = StringSSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteBoolDResult>(progress, cancel);
                _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD_name = "opByteBoolD";

            private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteBoolDResult>(completed);
                outAsync.invoke(
                    _opByteBoolD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_p1);
                        ByteBoolDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteBoolDResult ret = new MyClass_OpByteBoolDResult();
                        ret.p3 = ByteBoolDHelper.read(istr);
                        ret.returnValue = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntDResult>(progress, cancel);
                _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntD_name = "opShortIntD";

            private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntDResult>(completed);
                outAsync.invoke(
                    _opShortIntD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortIntDHelper.write(ostr, iceP_p1);
                        ShortIntDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntDResult ret = new MyClass_OpShortIntDResult();
                        ret.p3 = ShortIntDHelper.read(istr);
                        ret.returnValue = ShortIntDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongFloatD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongFloatDResult>(progress, cancel);
                _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongFloatD_name = "opLongFloatD";

            private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongFloatDResult>(completed);
                outAsync.invoke(
                    _opLongFloatD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongFloatDHelper.write(ostr, iceP_p1);
                        LongFloatDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongFloatDResult ret = new MyClass_OpLongFloatDResult();
                        ret.p3 = LongFloatDHelper.read(istr);
                        ret.returnValue = LongFloatDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringDResult>(progress, cancel);
                _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringD_name = "opStringStringD";

            private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringDResult>(completed);
                outAsync.invoke(
                    _opStringStringD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDHelper.write(ostr, iceP_p1);
                        StringStringDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringDResult ret = new MyClass_OpStringStringDResult();
                        ret.p3 = StringStringDHelper.read(istr);
                        ret.returnValue = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringMyEnumD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDResult>(progress, cancel);
                _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringMyEnumD_name = "opStringMyEnumD";

            private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDResult>(completed);
                outAsync.invoke(
                    _opStringMyEnumD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringMyEnumDHelper.write(ostr, iceP_p1);
                        StringMyEnumDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringMyEnumDResult ret = new MyClass_OpStringMyEnumDResult();
                        ret.p3 = StringMyEnumDHelper.read(istr);
                        ret.returnValue = StringMyEnumDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumStringD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDResult>(progress, cancel);
                _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumStringD_name = "opMyEnumStringD";

            private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDResult>(completed);
                outAsync.invoke(
                    _opMyEnumStringD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumStringDHelper.write(ostr, iceP_p1);
                        MyEnumStringDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumStringDResult ret = new MyClass_OpMyEnumStringDResult();
                        ret.p3 = MyEnumStringDHelper.read(istr);
                        ret.returnValue = MyEnumStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDResult> opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyStructMyEnumDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDResult> _iceI_opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyStructMyEnumD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyStructMyEnumDResult>(progress, cancel);
                _iceI_opMyStructMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyStructMyEnumD_name = "opMyStructMyEnumD";

            private void _iceI_opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyStructMyEnumDResult>(completed);
                outAsync.invoke(
                    _opMyStructMyEnumD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyStructMyEnumDHelper.write(ostr, iceP_p1);
                        MyStructMyEnumDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyStructMyEnumDResult ret = new MyClass_OpMyStructMyEnumDResult();
                        ret.p3 = MyStructMyEnumDHelper.read(istr);
                        ret.returnValue = MyStructMyEnumDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteBoolDSResult>(progress, cancel);
                _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolDS_name = "opByteBoolDS";

            private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteBoolDSResult>(completed);
                outAsync.invoke(
                    _opByteBoolDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDSHelper.write(ostr, iceP_p1);
                        ByteBoolDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteBoolDSResult ret = new MyClass_OpByteBoolDSResult();
                        ret.p3 = ByteBoolDSHelper.read(istr);
                        ret.returnValue = ByteBoolDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntDSResult>(progress, cancel);
                _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntDS_name = "opShortIntDS";

            private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntDSResult>(completed);
                outAsync.invoke(
                    _opShortIntDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortIntDSHelper.write(ostr, iceP_p1);
                        ShortIntDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntDSResult ret = new MyClass_OpShortIntDSResult();
                        ret.p3 = ShortIntDSHelper.read(istr);
                        ret.returnValue = ShortIntDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongFloatDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongFloatDSResult>(progress, cancel);
                _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongFloatDS_name = "opLongFloatDS";

            private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongFloatDSResult>(completed);
                outAsync.invoke(
                    _opLongFloatDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongFloatDSHelper.write(ostr, iceP_p1);
                        LongFloatDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongFloatDSResult ret = new MyClass_OpLongFloatDSResult();
                        ret.p3 = LongFloatDSHelper.read(istr);
                        ret.returnValue = LongFloatDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringDSResult>(progress, cancel);
                _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringDS_name = "opStringStringDS";

            private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringDSResult>(completed);
                outAsync.invoke(
                    _opStringStringDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDSHelper.write(ostr, iceP_p1);
                        StringStringDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringDSResult ret = new MyClass_OpStringStringDSResult();
                        ret.p3 = StringStringDSHelper.read(istr);
                        ret.returnValue = StringStringDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringMyEnumDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDSResult>(progress, cancel);
                _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

            private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDSResult>(completed);
                outAsync.invoke(
                    _opStringMyEnumDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringMyEnumDSHelper.write(ostr, iceP_p1);
                        StringMyEnumDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringMyEnumDSResult ret = new MyClass_OpStringMyEnumDSResult();
                        ret.p3 = StringMyEnumDSHelper.read(istr);
                        ret.returnValue = StringMyEnumDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumStringDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDSResult>(progress, cancel);
                _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

            private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDSResult>(completed);
                outAsync.invoke(
                    _opMyEnumStringDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumStringDSHelper.write(ostr, iceP_p1);
                        MyEnumStringDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumStringDSResult ret = new MyClass_OpMyEnumStringDSResult();
                        ret.p3 = MyEnumStringDSHelper.read(istr);
                        ret.returnValue = MyEnumStringDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDSResult> opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyStructMyEnumDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDSResult> _iceI_opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyStructMyEnumDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyStructMyEnumDSResult>(progress, cancel);
                _iceI_opMyStructMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyStructMyEnumDS_name = "opMyStructMyEnumDS";

            private void _iceI_opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyStructMyEnumDSResult>(completed);
                outAsync.invoke(
                    _opMyStructMyEnumDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyStructMyEnumDSHelper.write(ostr, iceP_p1);
                        MyStructMyEnumDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyStructMyEnumDSResult ret = new MyClass_OpMyStructMyEnumDSResult();
                        ret.p3 = MyStructMyEnumDSHelper.read(istr);
                        ret.returnValue = MyStructMyEnumDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteByteSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteByteSDResult>(progress, cancel);
                _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteByteSD_name = "opByteByteSD";

            private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteByteSDResult>(completed);
                outAsync.invoke(
                    _opByteByteSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteByteSDHelper.write(ostr, iceP_p1);
                        ByteByteSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteByteSDResult ret = new MyClass_OpByteByteSDResult();
                        ret.p3 = ByteByteSDHelper.read(istr);
                        ret.returnValue = ByteByteSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolBoolSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolBoolSDResult>(progress, cancel);
                _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolBoolSD_name = "opBoolBoolSD";

            private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolBoolSDResult>(completed);
                outAsync.invoke(
                    _opBoolBoolSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolBoolSDHelper.write(ostr, iceP_p1);
                        BoolBoolSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolBoolSDResult ret = new MyClass_OpBoolBoolSDResult();
                        ret.p3 = BoolBoolSDHelper.read(istr);
                        ret.returnValue = BoolBoolSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortShortSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortShortSDResult>(progress, cancel);
                _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortShortSD_name = "opShortShortSD";

            private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortShortSDResult>(completed);
                outAsync.invoke(
                    _opShortShortSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortShortSDHelper.write(ostr, iceP_p1);
                        ShortShortSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortShortSDResult ret = new MyClass_OpShortShortSDResult();
                        ret.p3 = ShortShortSDHelper.read(istr);
                        ret.returnValue = ShortShortSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntIntSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpIntIntSDResult>(progress, cancel);
                _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntIntSD_name = "opIntIntSD";

            private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpIntIntSDResult>(completed);
                outAsync.invoke(
                    _opIntIntSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        IntIntSDHelper.write(ostr, iceP_p1);
                        IntIntSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpIntIntSDResult ret = new MyClass_OpIntIntSDResult();
                        ret.p3 = IntIntSDHelper.read(istr);
                        ret.returnValue = IntIntSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongLongSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongLongSDResult>(progress, cancel);
                _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongLongSD_name = "opLongLongSD";

            private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongLongSDResult>(completed);
                outAsync.invoke(
                    _opLongLongSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongLongSDHelper.write(ostr, iceP_p1);
                        LongLongSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongLongSDResult ret = new MyClass_OpLongLongSDResult();
                        ret.p3 = LongLongSDHelper.read(istr);
                        ret.returnValue = LongLongSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringFloatSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringFloatSDResult>(progress, cancel);
                _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringFloatSD_name = "opStringFloatSD";

            private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringFloatSDResult>(completed);
                outAsync.invoke(
                    _opStringFloatSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringFloatSDHelper.write(ostr, iceP_p1);
                        StringFloatSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringFloatSDResult ret = new MyClass_OpStringFloatSDResult();
                        ret.p3 = StringFloatSDHelper.read(istr);
                        ret.returnValue = StringFloatSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringDoubleSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringDoubleSDResult>(progress, cancel);
                _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringDoubleSD_name = "opStringDoubleSD";

            private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringDoubleSDResult>(completed);
                outAsync.invoke(
                    _opStringDoubleSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringDoubleSDHelper.write(ostr, iceP_p1);
                        StringDoubleSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringDoubleSDResult ret = new MyClass_OpStringDoubleSDResult();
                        ret.p3 = StringDoubleSDHelper.read(istr);
                        ret.returnValue = StringDoubleSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringSDResult>(progress, cancel);
                _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringSD_name = "opStringStringSD";

            private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringSDResult>(completed);
                outAsync.invoke(
                    _opStringStringSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringSDHelper.write(ostr, iceP_p1);
                        StringStringSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringSDResult ret = new MyClass_OpStringStringSDResult();
                        ret.p3 = StringStringSDHelper.read(istr);
                        ret.returnValue = StringStringSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
                _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

            private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumMyEnumSDResult>(completed);
                outAsync.invoke(
                    _opMyEnumMyEnumSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                        MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumMyEnumSDResult ret = new MyClass_OpMyEnumMyEnumSDResult();
                        ret.p3 = MyEnumMyEnumSDHelper.read(istr);
                        ret.returnValue = MyEnumMyEnumSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntSAsync(s, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                _iceI_opIntS(iceP_s, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntS_name = "opIntS";

            private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int[]>(completed);
                outAsync.invoke(
                    _opIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        IntSHelper.write(ostr, iceP_s);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        int[] ret;
                        ret = IntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opByteSOnewayAsync(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSOnewayAsync(s, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opByteSOnewayAsync(byte[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opByteSOneway(iceP_s, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSOneway_name = "opByteSOneway";

            private void _iceI_opByteSOneway(byte[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opByteSOneway_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSHelper.write(ostr, iceP_s);
                    });
            }

            public global::System.Threading.Tasks.Task<int> opByteSOnewayCallCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSOnewayCallCountAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_opByteSOnewayCallCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSOnewayCallCount_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_opByteSOnewayCallCount(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSOnewayCallCount_name = "opByteSOnewayCallCount";

            private void _iceI_opByteSOnewayCallCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _opByteSOnewayCallCount_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opContextAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opContext_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_opContext(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opContext_name = "opContext";

            private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _opContext_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = global::Ice.ContextHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opDoubleMarshalingAsync(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleMarshalingAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opDoubleMarshalingAsync(double iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opDoubleMarshaling(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleMarshaling_name = "opDoubleMarshaling";

            private void _iceI_opDoubleMarshaling(double iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opDoubleMarshaling_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDouble(iceP_p1);
                        DoubleSHelper.write(ostr, iceP_p2);
                    });
            }

            public global::System.Threading.Tasks.Task opIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIdempotentAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opIdempotent(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIdempotent_name = "opIdempotent";

            private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opIdempotent_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task opNonmutatingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opNonmutatingAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opNonmutatingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opNonmutating(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNonmutating_name = "opNonmutating";

            private void _iceI_opNonmutating(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opNonmutating_name,
                    global::Ice.OperationMode.Nonmutating,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByte1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte>(progress, cancel);
                _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByte1_name = "opByte1";

            private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte>(completed);
                outAsync.invoke(
                    _opByte1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(iceP_opByte1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte ret;
                        ret = istr.readByte();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShort1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<short>(progress, cancel);
                _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShort1_name = "opShort1";

            private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short>(completed);
                outAsync.invoke(
                    _opShort1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShort(iceP_opShort1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        short ret;
                        ret = istr.readShort();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opInt1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opInt1_name = "opInt1";

            private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _opInt1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_opInt1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLong1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLong1_name = "opLong1";

            private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _opLong1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeLong(iceP_opLong1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloat1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloat1_name = "opFloat1";

            private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _opFloat1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(iceP_opFloat1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDouble1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDouble1_name = "opDouble1";

            private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _opDouble1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDouble(iceP_opDouble1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opString1Async(opString1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opString1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_opString1(iceP_opString1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opString1_name = "opString1";

            private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _opString1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_opString1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS1_name = "opStringS1";

            private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringS1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_opStringS1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
                _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD1_name = "opByteBoolD1";

            private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
                outAsync.invoke(
                    _opByteBoolD1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<byte, bool> ret;
                        ret = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS2_name = "opStringS2";

            private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringS2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_stringS);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
                _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD2_name = "opByteBoolD2";

            private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
                outAsync.invoke(
                    _opByteBoolD2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<byte, bool> ret;
                        ret = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringLiterals_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringLiterals(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringLiterals_name = "opStringLiterals";

            private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringLiterals_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opWStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opWStringLiteralsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opWStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opWStringLiterals_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opWStringLiterals(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opWStringLiterals_name = "opWStringLiterals";

            private void _iceI_opWStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opWStringLiterals_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Structure> _iceI_opMStruct1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Structure>(progress, cancel);
                _iceI_opMStruct1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct1_name = "opMStruct1";

            private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Structure>(completed);
                outAsync.invoke(
                    _opMStruct1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        Structure ret = null;
                        ret = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> _iceI_opMStruct2Async(Structure iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMStruct2Result>(progress, cancel);
                _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct2_name = "opMStruct2";

            private void _iceI_opMStruct2(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMStruct2Result>(completed);
                outAsync.invoke(
                    _opMStruct2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Structure.ice_write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMStruct2Result ret = new MyClass_OpMStruct2Result();
                        ret.p2 = Structure.ice_read(istr);
                        ret.returnValue = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opMSeq1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq1_name = "opMSeq1";

            private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opMSeq1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMSeq2Result>(progress, cancel);
                _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq2_name = "opMSeq2";

            private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMSeq2Result>(completed);
                outAsync.invoke(
                    _opMSeq2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMSeq2Result ret = new MyClass_OpMSeq2Result();
                        ret.p2 = StringSHelper.read(istr);
                        ret.returnValue = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_opMDict1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict1_name = "opMDict1";

            private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _opMDict1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMDict2Result>(progress, cancel);
                _iceI_opMDict2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict2_name = "opMDict2";

            private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMDict2Result>(completed);
                outAsync.invoke(
                    _opMDict2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMDict2Result ret = new MyClass_OpMDict2Result();
                        ret.p2 = StringStringDHelper.read(istr);
                        ret.returnValue = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Checked and unchecked cast operations

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyClassPrx r = b as MyClassPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    MyClassPrxHelper h = new MyClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                MyClassPrx r = b as MyClassPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    MyClassPrxHelper h = new MyClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        MyClassPrxHelper h = new MyClassPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        MyClassPrxHelper h = new MyClassPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyClassPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyClassPrx r = b as MyClassPrx;
                if(r == null)
                {
                    MyClassPrxHelper h = new MyClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyClassPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                MyClassPrxHelper h = new MyClassPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public static string ice_staticId() => "::Test::MyClass";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, MyClassPrx v)
            {
                ostr.writeProxy(v);
            }

            public static MyClassPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    MyClassPrxHelper result = new MyClassPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyDerivedClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyDerivedClassPrx
        {
            public MyDerivedClassPrxHelper()
            {
            }

            #region Synchronous operations

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsCompress(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte opByte(byte p1, byte p2, out byte p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool opBool(bool p1, bool p2, out bool p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string opString(string p1, string p2, out string p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p4 = result_.p4;
                    p5 = result_.p5;
                    p6 = result_.p6;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    p4 = result_.p4;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyStructMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyStructMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int[] opIntS(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opByteSOneway(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opByteSOnewayAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int opByteSOnewayCallCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteSOnewayCallCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opDoubleMarshaling(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opDoubleMarshalingAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opNonmutating(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opNonmutatingAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte opByte1(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short opShort1(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int opInt1(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long opLong1(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float opFloat1(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double opDouble1(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string opString1(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS1(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringS2(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opWStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opWStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Structure opMStruct2(Structure p1, out Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opMSeq2(string[] p1, out string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyClass1 opMyClass1(MyClass1 opMyClass1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMyClass1Async(opMyClass1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public MyStruct1 opMyStruct1(MyStruct1 opMyStruct1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMyStruct1Async(opMyStruct1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsCompressAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsCompress_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsCompress(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsCompress_name = "supportsCompress";

            private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsCompress_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opVoidAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opVoid(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opVoid_name = "opVoid";

            private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opVoid_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByte_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteResult>(progress, cancel);
                _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByte_name = "opByte";

            private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteResult>(completed);
                outAsync.invoke(
                    _opByte_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(iceP_p1);
                        ostr.writeByte(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteResult ret = new MyClass_OpByteResult();
                        ret.p3 = istr.readByte();
                        ret.returnValue = istr.readByte();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBool_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolResult>(progress, cancel);
                _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBool_name = "opBool";

            private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolResult>(completed);
                outAsync.invoke(
                    _opBool_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_p1);
                        ostr.writeBool(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolResult ret = new MyClass_OpBoolResult();
                        ret.p3 = istr.readBool();
                        ret.returnValue = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLong_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongResult>(progress, cancel);
                _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLong_name = "opShortIntLong";

            private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongResult>(completed);
                outAsync.invoke(
                    _opShortIntLong_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShort(iceP_p1);
                        ostr.writeInt(iceP_p2);
                        ostr.writeLong(iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongResult ret = new MyClass_OpShortIntLongResult();
                        ret.p4 = istr.readShort();
                        ret.p5 = istr.readInt();
                        ret.p6 = istr.readLong();
                        ret.returnValue = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDouble_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleResult>(progress, cancel);
                _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDouble_name = "opFloatDouble";

            private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleResult>(completed);
                outAsync.invoke(
                    _opFloatDouble_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(iceP_p1);
                        ostr.writeDouble(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleResult ret = new MyClass_OpFloatDoubleResult();
                        ret.p3 = istr.readFloat();
                        ret.p4 = istr.readDouble();
                        ret.returnValue = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opString_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringResult>(progress, cancel);
                _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opString_name = "opString";

            private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringResult>(completed);
                outAsync.invoke(
                    _opString_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_p1);
                        ostr.writeString(iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringResult ret = new MyClass_OpStringResult();
                        ret.p3 = istr.readString();
                        ret.returnValue = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnum_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumResult>(progress, cancel);
                _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnum_name = "opMyEnum";

            private void _iceI_opMyEnum(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumResult>(completed);
                outAsync.invoke(
                    _opMyEnum_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeEnum((int)iceP_p1, 2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumResult ret = new MyClass_OpMyEnumResult();
                        ret.p2 = (MyEnum)istr.readEnum(2);
                        ret.returnValue = (MyEnum)istr.readEnum(2);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> _iceI_opMyClassAsync(MyClassPrx iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyClass_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyClassResult>(progress, cancel);
                _iceI_opMyClass(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyClass_name = "opMyClass";

            private void _iceI_opMyClass(MyClassPrx iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyClassResult>(completed);
                outAsync.invoke(
                    _opMyClass_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyClassPrxHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyClassResult ret = new MyClass_OpMyClassResult();
                        ret.p2 = MyClassPrxHelper.read(istr);
                        ret.p3 = MyClassPrxHelper.read(istr);
                        ret.returnValue = MyClassPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStructResult> _iceI_opStructAsync(Structure iceP_p1, Structure iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStruct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStructResult>(progress, cancel);
                _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStruct_name = "opStruct";

            private void _iceI_opStruct(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStructResult>(completed);
                outAsync.invoke(
                    _opStruct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Structure.ice_write(ostr, iceP_p1);
                        Structure.ice_write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStructResult ret = new MyClass_OpStructResult();
                        ret.p3 = Structure.ice_read(istr);
                        ret.returnValue = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteSResult>(progress, cancel);
                _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteS_name = "opByteS";

            private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteSResult>(completed);
                outAsync.invoke(
                    _opByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSHelper.write(ostr, iceP_p1);
                        ByteSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteSResult ret = new MyClass_OpByteSResult();
                        ret.p3 = ByteSHelper.read(istr);
                        ret.returnValue = ByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolSResult>(progress, cancel);
                _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolS_name = "opBoolS";

            private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolSResult>(completed);
                outAsync.invoke(
                    _opBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolSHelper.write(ostr, iceP_p1);
                        BoolSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolSResult ret = new MyClass_OpBoolSResult();
                        ret.p3 = BoolSHelper.read(istr);
                        ret.returnValue = BoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLongS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSResult>(progress, cancel);
                _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLongS_name = "opShortIntLongS";

            private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSResult>(completed);
                outAsync.invoke(
                    _opShortIntLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortSHelper.write(ostr, iceP_p1);
                        IntSHelper.write(ostr, iceP_p2);
                        LongSHelper.write(ostr, iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongSResult ret = new MyClass_OpShortIntLongSResult();
                        ret.p4 = ShortSHelper.read(istr);
                        ret.p5 = IntSHelper.read(istr);
                        ret.p6 = LongSHelper.read(istr);
                        ret.returnValue = LongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDoubleS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSResult>(progress, cancel);
                _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDoubleS_name = "opFloatDoubleS";

            private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSResult>(completed);
                outAsync.invoke(
                    _opFloatDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        FloatSHelper.write(ostr, iceP_p1);
                        DoubleSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleSResult ret = new MyClass_OpFloatDoubleSResult();
                        ret.p3 = FloatSHelper.read(istr);
                        ret.p4 = DoubleSHelper.read(istr);
                        ret.returnValue = DoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSResult>(progress, cancel);
                _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS_name = "opStringS";

            private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSResult>(completed);
                outAsync.invoke(
                    _opStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_p1);
                        StringSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSResult ret = new MyClass_OpStringSResult();
                        ret.p3 = StringSHelper.read(istr);
                        ret.returnValue = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteSSResult>(progress, cancel);
                _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSS_name = "opByteSS";

            private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteSSResult>(completed);
                outAsync.invoke(
                    _opByteSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSSHelper.write(ostr, iceP_p1);
                        ByteSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteSSResult ret = new MyClass_OpByteSSResult();
                        ret.p3 = ByteSSHelper.read(istr);
                        ret.returnValue = ByteSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolSSResult>(progress, cancel);
                _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolSS_name = "opBoolSS";

            private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolSSResult>(completed);
                outAsync.invoke(
                    _opBoolSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolSSHelper.write(ostr, iceP_p1);
                        BoolSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolSSResult ret = new MyClass_OpBoolSSResult();
                        ret.p3 = BoolSSHelper.read(istr);
                        ret.returnValue = BoolSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntLongSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSSResult>(progress, cancel);
                _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntLongSS_name = "opShortIntLongSS";

            private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSSResult>(completed);
                outAsync.invoke(
                    _opShortIntLongSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortSSHelper.write(ostr, iceP_p1);
                        IntSSHelper.write(ostr, iceP_p2);
                        LongSSHelper.write(ostr, iceP_p3);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntLongSSResult ret = new MyClass_OpShortIntLongSSResult();
                        ret.p4 = ShortSSHelper.read(istr);
                        ret.p5 = IntSSHelper.read(istr);
                        ret.p6 = LongSSHelper.read(istr);
                        ret.returnValue = LongSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatDoubleSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSSResult>(progress, cancel);
                _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

            private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSSResult>(completed);
                outAsync.invoke(
                    _opFloatDoubleSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        FloatSSHelper.write(ostr, iceP_p1);
                        DoubleSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpFloatDoubleSSResult ret = new MyClass_OpFloatDoubleSSResult();
                        ret.p3 = FloatSSHelper.read(istr);
                        ret.p4 = DoubleSSHelper.read(istr);
                        ret.returnValue = DoubleSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSSResult>(progress, cancel);
                _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringSS_name = "opStringSS";

            private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSSResult>(completed);
                outAsync.invoke(
                    _opStringSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSSHelper.write(ostr, iceP_p1);
                        StringSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSSResult ret = new MyClass_OpStringSSResult();
                        ret.p3 = StringSSHelper.read(istr);
                        ret.returnValue = StringSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringSSSResult> opStringSSSAsync(string[][][] p1, string[][][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSSSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringSSSResult> _iceI_opStringSSSAsync(string[][][] iceP_p1, string[][][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringSSS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringSSSResult>(progress, cancel);
                _iceI_opStringSSS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringSSS_name = "opStringSSS";

            private void _iceI_opStringSSS(string[][][] iceP_p1, string[][][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringSSSResult>(completed);
                outAsync.invoke(
                    _opStringSSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSSSHelper.write(ostr, iceP_p1);
                        StringSSSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringSSSResult ret = new MyClass_OpStringSSSResult();
                        ret.p3 = StringSSSHelper.read(istr);
                        ret.returnValue = StringSSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteBoolDResult>(progress, cancel);
                _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD_name = "opByteBoolD";

            private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteBoolDResult>(completed);
                outAsync.invoke(
                    _opByteBoolD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_p1);
                        ByteBoolDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteBoolDResult ret = new MyClass_OpByteBoolDResult();
                        ret.p3 = ByteBoolDHelper.read(istr);
                        ret.returnValue = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntDResult>(progress, cancel);
                _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntD_name = "opShortIntD";

            private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntDResult>(completed);
                outAsync.invoke(
                    _opShortIntD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortIntDHelper.write(ostr, iceP_p1);
                        ShortIntDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntDResult ret = new MyClass_OpShortIntDResult();
                        ret.p3 = ShortIntDHelper.read(istr);
                        ret.returnValue = ShortIntDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongFloatD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongFloatDResult>(progress, cancel);
                _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongFloatD_name = "opLongFloatD";

            private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongFloatDResult>(completed);
                outAsync.invoke(
                    _opLongFloatD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongFloatDHelper.write(ostr, iceP_p1);
                        LongFloatDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongFloatDResult ret = new MyClass_OpLongFloatDResult();
                        ret.p3 = LongFloatDHelper.read(istr);
                        ret.returnValue = LongFloatDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringDResult>(progress, cancel);
                _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringD_name = "opStringStringD";

            private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringDResult>(completed);
                outAsync.invoke(
                    _opStringStringD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDHelper.write(ostr, iceP_p1);
                        StringStringDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringDResult ret = new MyClass_OpStringStringDResult();
                        ret.p3 = StringStringDHelper.read(istr);
                        ret.returnValue = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringMyEnumD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDResult>(progress, cancel);
                _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringMyEnumD_name = "opStringMyEnumD";

            private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDResult>(completed);
                outAsync.invoke(
                    _opStringMyEnumD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringMyEnumDHelper.write(ostr, iceP_p1);
                        StringMyEnumDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringMyEnumDResult ret = new MyClass_OpStringMyEnumDResult();
                        ret.p3 = StringMyEnumDHelper.read(istr);
                        ret.returnValue = StringMyEnumDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumStringD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDResult>(progress, cancel);
                _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumStringD_name = "opMyEnumStringD";

            private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDResult>(completed);
                outAsync.invoke(
                    _opMyEnumStringD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumStringDHelper.write(ostr, iceP_p1);
                        MyEnumStringDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumStringDResult ret = new MyClass_OpMyEnumStringDResult();
                        ret.p3 = MyEnumStringDHelper.read(istr);
                        ret.returnValue = MyEnumStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDResult> opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyStructMyEnumDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDResult> _iceI_opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyStructMyEnumD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyStructMyEnumDResult>(progress, cancel);
                _iceI_opMyStructMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyStructMyEnumD_name = "opMyStructMyEnumD";

            private void _iceI_opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyStructMyEnumDResult>(completed);
                outAsync.invoke(
                    _opMyStructMyEnumD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyStructMyEnumDHelper.write(ostr, iceP_p1);
                        MyStructMyEnumDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyStructMyEnumDResult ret = new MyClass_OpMyStructMyEnumDResult();
                        ret.p3 = MyStructMyEnumDHelper.read(istr);
                        ret.returnValue = MyStructMyEnumDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteBoolDSResult>(progress, cancel);
                _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolDS_name = "opByteBoolDS";

            private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteBoolDSResult>(completed);
                outAsync.invoke(
                    _opByteBoolDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDSHelper.write(ostr, iceP_p1);
                        ByteBoolDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteBoolDSResult ret = new MyClass_OpByteBoolDSResult();
                        ret.p3 = ByteBoolDSHelper.read(istr);
                        ret.returnValue = ByteBoolDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortIntDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortIntDSResult>(progress, cancel);
                _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortIntDS_name = "opShortIntDS";

            private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortIntDSResult>(completed);
                outAsync.invoke(
                    _opShortIntDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortIntDSHelper.write(ostr, iceP_p1);
                        ShortIntDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortIntDSResult ret = new MyClass_OpShortIntDSResult();
                        ret.p3 = ShortIntDSHelper.read(istr);
                        ret.returnValue = ShortIntDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongFloatDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongFloatDSResult>(progress, cancel);
                _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongFloatDS_name = "opLongFloatDS";

            private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongFloatDSResult>(completed);
                outAsync.invoke(
                    _opLongFloatDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongFloatDSHelper.write(ostr, iceP_p1);
                        LongFloatDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongFloatDSResult ret = new MyClass_OpLongFloatDSResult();
                        ret.p3 = LongFloatDSHelper.read(istr);
                        ret.returnValue = LongFloatDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringDSResult>(progress, cancel);
                _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringDS_name = "opStringStringDS";

            private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringDSResult>(completed);
                outAsync.invoke(
                    _opStringStringDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDSHelper.write(ostr, iceP_p1);
                        StringStringDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringDSResult ret = new MyClass_OpStringStringDSResult();
                        ret.p3 = StringStringDSHelper.read(istr);
                        ret.returnValue = StringStringDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringMyEnumDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDSResult>(progress, cancel);
                _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

            private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDSResult>(completed);
                outAsync.invoke(
                    _opStringMyEnumDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringMyEnumDSHelper.write(ostr, iceP_p1);
                        StringMyEnumDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringMyEnumDSResult ret = new MyClass_OpStringMyEnumDSResult();
                        ret.p3 = StringMyEnumDSHelper.read(istr);
                        ret.returnValue = StringMyEnumDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumStringDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDSResult>(progress, cancel);
                _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

            private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDSResult>(completed);
                outAsync.invoke(
                    _opMyEnumStringDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumStringDSHelper.write(ostr, iceP_p1);
                        MyEnumStringDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumStringDSResult ret = new MyClass_OpMyEnumStringDSResult();
                        ret.p3 = MyEnumStringDSHelper.read(istr);
                        ret.returnValue = MyEnumStringDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDSResult> opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyStructMyEnumDSAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyStructMyEnumDSResult> _iceI_opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyStructMyEnumDS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyStructMyEnumDSResult>(progress, cancel);
                _iceI_opMyStructMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyStructMyEnumDS_name = "opMyStructMyEnumDS";

            private void _iceI_opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyStructMyEnumDSResult>(completed);
                outAsync.invoke(
                    _opMyStructMyEnumDS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyStructMyEnumDSHelper.write(ostr, iceP_p1);
                        MyStructMyEnumDSHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyStructMyEnumDSResult ret = new MyClass_OpMyStructMyEnumDSResult();
                        ret.p3 = MyStructMyEnumDSHelper.read(istr);
                        ret.returnValue = MyStructMyEnumDSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteByteSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpByteByteSDResult>(progress, cancel);
                _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteByteSD_name = "opByteByteSD";

            private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpByteByteSDResult>(completed);
                outAsync.invoke(
                    _opByteByteSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteByteSDHelper.write(ostr, iceP_p1);
                        ByteByteSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpByteByteSDResult ret = new MyClass_OpByteByteSDResult();
                        ret.p3 = ByteByteSDHelper.read(istr);
                        ret.returnValue = ByteByteSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolBoolSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpBoolBoolSDResult>(progress, cancel);
                _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolBoolSD_name = "opBoolBoolSD";

            private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpBoolBoolSDResult>(completed);
                outAsync.invoke(
                    _opBoolBoolSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolBoolSDHelper.write(ostr, iceP_p1);
                        BoolBoolSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpBoolBoolSDResult ret = new MyClass_OpBoolBoolSDResult();
                        ret.p3 = BoolBoolSDHelper.read(istr);
                        ret.returnValue = BoolBoolSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortShortSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpShortShortSDResult>(progress, cancel);
                _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortShortSD_name = "opShortShortSD";

            private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpShortShortSDResult>(completed);
                outAsync.invoke(
                    _opShortShortSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortShortSDHelper.write(ostr, iceP_p1);
                        ShortShortSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpShortShortSDResult ret = new MyClass_OpShortShortSDResult();
                        ret.p3 = ShortShortSDHelper.read(istr);
                        ret.returnValue = ShortShortSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntIntSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpIntIntSDResult>(progress, cancel);
                _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntIntSD_name = "opIntIntSD";

            private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpIntIntSDResult>(completed);
                outAsync.invoke(
                    _opIntIntSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        IntIntSDHelper.write(ostr, iceP_p1);
                        IntIntSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpIntIntSDResult ret = new MyClass_OpIntIntSDResult();
                        ret.p3 = IntIntSDHelper.read(istr);
                        ret.returnValue = IntIntSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongLongSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpLongLongSDResult>(progress, cancel);
                _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongLongSD_name = "opLongLongSD";

            private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLongLongSDResult>(completed);
                outAsync.invoke(
                    _opLongLongSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongLongSDHelper.write(ostr, iceP_p1);
                        LongLongSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLongLongSDResult ret = new MyClass_OpLongLongSDResult();
                        ret.p3 = LongLongSDHelper.read(istr);
                        ret.returnValue = LongLongSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringFloatSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringFloatSDResult>(progress, cancel);
                _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringFloatSD_name = "opStringFloatSD";

            private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringFloatSDResult>(completed);
                outAsync.invoke(
                    _opStringFloatSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringFloatSDHelper.write(ostr, iceP_p1);
                        StringFloatSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringFloatSDResult ret = new MyClass_OpStringFloatSDResult();
                        ret.p3 = StringFloatSDHelper.read(istr);
                        ret.returnValue = StringFloatSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringDoubleSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringDoubleSDResult>(progress, cancel);
                _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringDoubleSD_name = "opStringDoubleSD";

            private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringDoubleSDResult>(completed);
                outAsync.invoke(
                    _opStringDoubleSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringDoubleSDHelper.write(ostr, iceP_p1);
                        StringDoubleSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringDoubleSDResult ret = new MyClass_OpStringDoubleSDResult();
                        ret.p3 = StringDoubleSDHelper.read(istr);
                        ret.returnValue = StringDoubleSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringStringSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpStringStringSDResult>(progress, cancel);
                _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringStringSD_name = "opStringStringSD";

            private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpStringStringSDResult>(completed);
                outAsync.invoke(
                    _opStringStringSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringSDHelper.write(ostr, iceP_p1);
                        StringStringSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpStringStringSDResult ret = new MyClass_OpStringStringSDResult();
                        ret.p3 = StringStringSDHelper.read(istr);
                        ret.returnValue = StringStringSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
                _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

            private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMyEnumMyEnumSDResult>(completed);
                outAsync.invoke(
                    _opMyEnumMyEnumSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                        MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMyEnumMyEnumSDResult ret = new MyClass_OpMyEnumMyEnumSDResult();
                        ret.p3 = MyEnumMyEnumSDHelper.read(istr);
                        ret.returnValue = MyEnumMyEnumSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntSAsync(s, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntS_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                _iceI_opIntS(iceP_s, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntS_name = "opIntS";

            private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int[]>(completed);
                outAsync.invoke(
                    _opIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        IntSHelper.write(ostr, iceP_s);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        int[] ret;
                        ret = IntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opByteSOnewayAsync(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSOnewayAsync(s, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opByteSOnewayAsync(byte[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opByteSOneway(iceP_s, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSOneway_name = "opByteSOneway";

            private void _iceI_opByteSOneway(byte[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opByteSOneway_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSHelper.write(ostr, iceP_s);
                    });
            }

            public global::System.Threading.Tasks.Task<int> opByteSOnewayCallCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSOnewayCallCountAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_opByteSOnewayCallCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSOnewayCallCount_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_opByteSOnewayCallCount(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSOnewayCallCount_name = "opByteSOnewayCallCount";

            private void _iceI_opByteSOnewayCallCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _opByteSOnewayCallCount_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opContextAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opContext_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_opContext(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opContext_name = "opContext";

            private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _opContext_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = global::Ice.ContextHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opDoubleMarshalingAsync(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleMarshalingAsync(p1, p2, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opDoubleMarshalingAsync(double iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opDoubleMarshaling(iceP_p1, iceP_p2, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleMarshaling_name = "opDoubleMarshaling";

            private void _iceI_opDoubleMarshaling(double iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opDoubleMarshaling_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDouble(iceP_p1);
                        DoubleSHelper.write(ostr, iceP_p2);
                    });
            }

            public global::System.Threading.Tasks.Task opIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIdempotentAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opIdempotent(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIdempotent_name = "opIdempotent";

            private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opIdempotent_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task opNonmutatingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opNonmutatingAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opNonmutatingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opNonmutating(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNonmutating_name = "opNonmutating";

            private void _iceI_opNonmutating(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opNonmutating_name,
                    global::Ice.OperationMode.Nonmutating,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByte1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte>(progress, cancel);
                _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByte1_name = "opByte1";

            private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte>(completed);
                outAsync.invoke(
                    _opByte1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(iceP_opByte1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte ret;
                        ret = istr.readByte();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShort1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<short>(progress, cancel);
                _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShort1_name = "opShort1";

            private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short>(completed);
                outAsync.invoke(
                    _opShort1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShort(iceP_opShort1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        short ret;
                        ret = istr.readShort();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opInt1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opInt1_name = "opInt1";

            private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _opInt1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_opInt1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLong1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLong1_name = "opLong1";

            private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _opLong1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeLong(iceP_opLong1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloat1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloat1_name = "opFloat1";

            private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _opFloat1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(iceP_opFloat1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDouble1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDouble1_name = "opDouble1";

            private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _opDouble1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDouble(iceP_opDouble1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opString1Async(opString1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opString1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_opString1(iceP_opString1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opString1_name = "opString1";

            private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _opString1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_opString1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS1_name = "opStringS1";

            private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringS1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_opStringS1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
                _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD1_name = "opByteBoolD1";

            private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
                outAsync.invoke(
                    _opByteBoolD1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<byte, bool> ret;
                        ret = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringS2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringS2_name = "opStringS2";

            private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringS2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_stringS);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteBoolD2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
                _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteBoolD2_name = "opByteBoolD2";

            private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
                outAsync.invoke(
                    _opByteBoolD2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<byte, bool> ret;
                        ret = ByteBoolDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringLiterals_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opStringLiterals(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringLiterals_name = "opStringLiterals";

            private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opStringLiterals_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opWStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opWStringLiteralsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opWStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opWStringLiterals_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opWStringLiterals(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opWStringLiterals_name = "opWStringLiterals";

            private void _iceI_opWStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opWStringLiterals_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Structure> _iceI_opMStruct1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Structure>(progress, cancel);
                _iceI_opMStruct1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct1_name = "opMStruct1";

            private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Structure>(completed);
                outAsync.invoke(
                    _opMStruct1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        Structure ret = null;
                        ret = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> _iceI_opMStruct2Async(Structure iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMStruct2Result>(progress, cancel);
                _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct2_name = "opMStruct2";

            private void _iceI_opMStruct2(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMStruct2Result>(completed);
                outAsync.invoke(
                    _opMStruct2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Structure.ice_write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMStruct2Result ret = new MyClass_OpMStruct2Result();
                        ret.p2 = Structure.ice_read(istr);
                        ret.returnValue = Structure.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_opMSeq1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq1_name = "opMSeq1";

            private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _opMSeq1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMSeq2Result>(progress, cancel);
                _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq2_name = "opMSeq2";

            private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMSeq2Result>(completed);
                outAsync.invoke(
                    _opMSeq2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMSeq2Result ret = new MyClass_OpMSeq2Result();
                        ret.p2 = StringSHelper.read(istr);
                        ret.returnValue = StringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
                _iceI_opMDict1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict1_name = "opMDict1";

            private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
                outAsync.invoke(
                    _opMDict1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::System.Collections.Generic.Dictionary<string, string> ret;
                        ret = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass_OpMDict2Result>(progress, cancel);
                _iceI_opMDict2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict2_name = "opMDict2";

            private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpMDict2Result>(completed);
                outAsync.invoke(
                    _opMDict2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringStringDHelper.write(ostr, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpMDict2Result ret = new MyClass_OpMDict2Result();
                        ret.p2 = StringStringDHelper.read(istr);
                        ret.returnValue = StringStringDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDerivedAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opDerivedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opDerived(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDerived_name = "opDerived";

            private void _iceI_opDerived(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opDerived_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass1> opMyClass1Async(MyClass1 opMyClass1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyClass1Async(opMyClass1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass1> _iceI_opMyClass1Async(MyClass1 iceP_opMyClass1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyClass1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyClass1>(progress, cancel);
                _iceI_opMyClass1(iceP_opMyClass1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyClass1_name = "opMyClass1";

            private void _iceI_opMyClass1(MyClass1 iceP_opMyClass1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass1>(completed);
                outAsync.invoke(
                    _opMyClass1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_opMyClass1);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass1 ret = null;
                        istr.readValue((MyClass1 v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyStruct1> opMyStruct1Async(MyStruct1 opMyStruct1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyStruct1Async(opMyStruct1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyStruct1> _iceI_opMyStruct1Async(MyStruct1 iceP_opMyStruct1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyStruct1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<MyStruct1>(progress, cancel);
                _iceI_opMyStruct1(iceP_opMyStruct1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyStruct1_name = "opMyStruct1";

            private void _iceI_opMyStruct1(MyStruct1 iceP_opMyStruct1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyStruct1>(completed);
                outAsync.invoke(
                    _opMyStruct1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        MyStruct1.ice_write(ostr, iceP_opMyStruct1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyStruct1 ret = null;
                        ret = MyStruct1.ice_read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Checked and unchecked cast operations

            public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyDerivedClassPrx r = b as MyDerivedClassPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                MyDerivedClassPrx r = b as MyDerivedClassPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyDerivedClassPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyDerivedClassPrx r = b as MyDerivedClassPrx;
                if(r == null)
                {
                    MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyDerivedClassPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass",
                "::Test::MyDerivedClass"
            };

            public static string ice_staticId() => "::Test::MyDerivedClass";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, MyDerivedClassPrx v)
            {
                ostr.writeProxy(v);
            }

            public static MyDerivedClassPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    MyDerivedClassPrxHelper result = new MyDerivedClassPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyDerivedClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyDerivedClassPrx
    {
        public MyDerivedClassPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool supportsCompress(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte opByte(byte p1, byte p2, out byte p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool opBool(bool p1, bool p2, out bool p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string opString(string p1, string p2, out string p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.operations.Test.MyEnum opMyEnum(global::Ice.operations.Test.MyEnum p1, out global::Ice.operations.Test.MyEnum p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.operations.Test.MyClassPrx opMyClass(global::Ice.operations.Test.MyClassPrx p1, out global::Ice.operations.Test.MyClassPrx p2, out global::Ice.operations.Test.MyClassPrx p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.operations.Test.Structure opStruct(global::Ice.operations.Test.Structure p1, global::Ice.operations.Test.Structure p2, out global::Ice.operations.Test.Structure p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringSSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyStructMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyStructMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int[] opIntS(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opByteSOneway(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opByteSOnewayAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int opByteSOnewayCallCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opByteSOnewayCallCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opDoubleMarshaling(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opDoubleMarshalingAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opNonmutating(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opNonmutatingAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte opByte1(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short opShort1(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int opInt1(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long opLong1(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float opFloat1(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double opDouble1(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string opString1(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringS1(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringS2(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opWStringLiterals(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opWStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.operations.Test.Structure opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.operations.Test.Structure opMStruct2(global::Ice.operations.Test.Structure p1, out global::Ice.operations.Test.Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opMSeq2(string[] p1, out string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_supportsCompressAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsCompress_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsCompress(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsCompress_name = "supportsCompress";

        private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsCompress_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVoidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_p1);
                    ostr.writeByte(iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteResult ret = new global::Ice.operations.Test.MyClass_OpByteResult();
                    ret.p3 = istr.readByte();
                    ret.returnValue = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBool_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpBoolResult>(progress, cancel);
            _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBool_name = "opBool";

        private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpBoolResult>(completed);
            outAsync.invoke(
                _opBool_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_p1);
                    ostr.writeBool(iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpBoolResult ret = new global::Ice.operations.Test.MyClass_OpBoolResult();
                    ret.p3 = istr.readBool();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLong_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortIntLongResult>(progress, cancel);
            _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLong_name = "opShortIntLong";

        private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortIntLongResult>(completed);
            outAsync.invoke(
                _opShortIntLong_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_p1);
                    ostr.writeInt(iceP_p2);
                    ostr.writeLong(iceP_p3);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortIntLongResult ret = new global::Ice.operations.Test.MyClass_OpShortIntLongResult();
                    ret.p4 = istr.readShort();
                    ret.p5 = istr.readInt();
                    ret.p6 = istr.readLong();
                    ret.returnValue = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDouble_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpFloatDoubleResult>(progress, cancel);
            _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDouble_name = "opFloatDouble";

        private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpFloatDoubleResult>(completed);
            outAsync.invoke(
                _opFloatDouble_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_p1);
                    ostr.writeDouble(iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpFloatDoubleResult ret = new global::Ice.operations.Test.MyClass_OpFloatDoubleResult();
                    ret.p3 = istr.readFloat();
                    ret.p4 = istr.readDouble();
                    ret.returnValue = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringResult> opStringAsync(string p1, string p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_p1);
                    ostr.writeString(iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringResult ret = new global::Ice.operations.Test.MyClass_OpStringResult();
                    ret.p3 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumResult> opMyEnumAsync(global::Ice.operations.Test.MyEnum p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(global::Ice.operations.Test.MyEnum iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnum_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyEnumResult>(progress, cancel);
            _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnum_name = "opMyEnum";

        private void _iceI_opMyEnum(global::Ice.operations.Test.MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyEnumResult>(completed);
            outAsync.invoke(
                _opMyEnum_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_p1, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyEnumResult ret = new global::Ice.operations.Test.MyClass_OpMyEnumResult();
                    ret.p2 = (global::Ice.operations.Test.MyEnum)istr.readEnum(2);
                    ret.returnValue = (global::Ice.operations.Test.MyEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyClassResult> opMyClassAsync(global::Ice.operations.Test.MyClassPrx p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyClassResult> _iceI_opMyClassAsync(global::Ice.operations.Test.MyClassPrx iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyClass_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyClassResult>(progress, cancel);
            _iceI_opMyClass(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyClass_name = "opMyClass";

        private void _iceI_opMyClass(global::Ice.operations.Test.MyClassPrx iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyClassResult>(completed);
            outAsync.invoke(
                _opMyClass_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyClassPrxHelper.write(ostr, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyClassResult ret = new global::Ice.operations.Test.MyClass_OpMyClassResult();
                    ret.p2 = global::Ice.operations.Test.MyClassPrxHelper.read(istr);
                    ret.p3 = global::Ice.operations.Test.MyClassPrxHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyClassPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStructResult> opStructAsync(global::Ice.operations.Test.Structure p1, global::Ice.operations.Test.Structure p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStructResult> _iceI_opStructAsync(global::Ice.operations.Test.Structure iceP_p1, global::Ice.operations.Test.Structure iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(global::Ice.operations.Test.Structure iceP_p1, global::Ice.operations.Test.Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.Structure.ice_write(ostr, iceP_p1);
                    global::Ice.operations.Test.Structure.ice_write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStructResult ret = new global::Ice.operations.Test.MyClass_OpStructResult();
                    ret.p3 = global::Ice.operations.Test.Structure.ice_read(istr);
                    ret.returnValue = global::Ice.operations.Test.Structure.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteSResult>(progress, cancel);
            _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteS_name = "opByteS";

        private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteSResult>(completed);
            outAsync.invoke(
                _opByteS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ByteSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteSResult ret = new global::Ice.operations.Test.MyClass_OpByteSResult();
                    ret.p3 = global::Ice.operations.Test.ByteSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ByteSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpBoolSResult>(progress, cancel);
            _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolS_name = "opBoolS";

        private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpBoolSResult>(completed);
            outAsync.invoke(
                _opBoolS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.BoolSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.BoolSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpBoolSResult ret = new global::Ice.operations.Test.MyClass_OpBoolSResult();
                    ret.p3 = global::Ice.operations.Test.BoolSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.BoolSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortIntLongSResult>(progress, cancel);
            _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongS_name = "opShortIntLongS";

        private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortIntLongSResult>(completed);
            outAsync.invoke(
                _opShortIntLongS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ShortSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.IntSHelper.write(ostr, iceP_p2);
                    global::Ice.operations.Test.LongSHelper.write(ostr, iceP_p3);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortIntLongSResult ret = new global::Ice.operations.Test.MyClass_OpShortIntLongSResult();
                    ret.p4 = global::Ice.operations.Test.ShortSHelper.read(istr);
                    ret.p5 = global::Ice.operations.Test.IntSHelper.read(istr);
                    ret.p6 = global::Ice.operations.Test.LongSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.LongSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpFloatDoubleSResult>(progress, cancel);
            _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleS_name = "opFloatDoubleS";

        private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpFloatDoubleSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.FloatSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.DoubleSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpFloatDoubleSResult ret = new global::Ice.operations.Test.MyClass_OpFloatDoubleSResult();
                    ret.p3 = global::Ice.operations.Test.FloatSHelper.read(istr);
                    ret.p4 = global::Ice.operations.Test.DoubleSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.DoubleSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringSResult>(progress, cancel);
            _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS_name = "opStringS";

        private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringSResult>(completed);
            outAsync.invoke(
                _opStringS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringSResult ret = new global::Ice.operations.Test.MyClass_OpStringSResult();
                    ret.p3 = global::Ice.operations.Test.StringSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteSSResult>(progress, cancel);
            _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSS_name = "opByteSS";

        private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteSSResult>(completed);
            outAsync.invoke(
                _opByteSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ByteSSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteSSResult ret = new global::Ice.operations.Test.MyClass_OpByteSSResult();
                    ret.p3 = global::Ice.operations.Test.ByteSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ByteSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpBoolSSResult>(progress, cancel);
            _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSS_name = "opBoolSS";

        private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpBoolSSResult>(completed);
            outAsync.invoke(
                _opBoolSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.BoolSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.BoolSSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpBoolSSResult ret = new global::Ice.operations.Test.MyClass_OpBoolSSResult();
                    ret.p3 = global::Ice.operations.Test.BoolSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.BoolSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortIntLongSSResult>(progress, cancel);
            _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongSS_name = "opShortIntLongSS";

        private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortIntLongSSResult>(completed);
            outAsync.invoke(
                _opShortIntLongSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ShortSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.IntSSHelper.write(ostr, iceP_p2);
                    global::Ice.operations.Test.LongSSHelper.write(ostr, iceP_p3);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortIntLongSSResult ret = new global::Ice.operations.Test.MyClass_OpShortIntLongSSResult();
                    ret.p4 = global::Ice.operations.Test.ShortSSHelper.read(istr);
                    ret.p5 = global::Ice.operations.Test.IntSSHelper.read(istr);
                    ret.p6 = global::Ice.operations.Test.LongSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.LongSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult>(progress, cancel);
            _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

        private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.FloatSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.DoubleSSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult ret = new global::Ice.operations.Test.MyClass_OpFloatDoubleSSResult();
                    ret.p3 = global::Ice.operations.Test.FloatSSHelper.read(istr);
                    ret.p4 = global::Ice.operations.Test.DoubleSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.DoubleSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringSSResult>(progress, cancel);
            _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSS_name = "opStringSS";

        private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringSSResult>(completed);
            outAsync.invoke(
                _opStringSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringSSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringSSResult ret = new global::Ice.operations.Test.MyClass_OpStringSSResult();
                    ret.p3 = global::Ice.operations.Test.StringSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSSSResult> opStringSSSAsync(string[][][] p1, string[][][] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringSSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringSSSResult> _iceI_opStringSSSAsync(string[][][] iceP_p1, string[][][] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSSS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringSSSResult>(progress, cancel);
            _iceI_opStringSSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSSS_name = "opStringSSS";

        private void _iceI_opStringSSS(string[][][] iceP_p1, string[][][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringSSSResult>(completed);
            outAsync.invoke(
                _opStringSSS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSSSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringSSSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringSSSResult ret = new global::Ice.operations.Test.MyClass_OpStringSSSResult();
                    ret.p3 = global::Ice.operations.Test.StringSSSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringSSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteBoolDResult>(progress, cancel);
            _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD_name = "opByteBoolD";

        private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteBoolDResult>(completed);
            outAsync.invoke(
                _opByteBoolD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteBoolDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ByteBoolDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteBoolDResult ret = new global::Ice.operations.Test.MyClass_OpByteBoolDResult();
                    ret.p3 = global::Ice.operations.Test.ByteBoolDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortIntDResult>(progress, cancel);
            _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntD_name = "opShortIntD";

        private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortIntDResult>(completed);
            outAsync.invoke(
                _opShortIntD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ShortIntDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ShortIntDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortIntDResult ret = new global::Ice.operations.Test.MyClass_OpShortIntDResult();
                    ret.p3 = global::Ice.operations.Test.ShortIntDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ShortIntDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpLongFloatDResult>(progress, cancel);
            _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatD_name = "opLongFloatD";

        private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpLongFloatDResult>(completed);
            outAsync.invoke(
                _opLongFloatD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.LongFloatDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.LongFloatDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpLongFloatDResult ret = new global::Ice.operations.Test.MyClass_OpLongFloatDResult();
                    ret.p3 = global::Ice.operations.Test.LongFloatDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.LongFloatDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringStringDResult>(progress, cancel);
            _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringD_name = "opStringStringD";

        private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringStringDResult>(completed);
            outAsync.invoke(
                _opStringStringD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringStringDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringStringDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringStringDResult ret = new global::Ice.operations.Test.MyClass_OpStringStringDResult();
                    ret.p3 = global::Ice.operations.Test.StringStringDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringMyEnumDResult>(progress, cancel);
            _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumD_name = "opStringMyEnumD";

        private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringMyEnumDResult>(completed);
            outAsync.invoke(
                _opStringMyEnumD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringMyEnumDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringMyEnumDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringMyEnumDResult ret = new global::Ice.operations.Test.MyClass_OpStringMyEnumDResult();
                    ret.p3 = global::Ice.operations.Test.StringMyEnumDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringMyEnumDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyEnumStringDResult>(progress, cancel);
            _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringD_name = "opMyEnumStringD";

        private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyEnumStringDResult>(completed);
            outAsync.invoke(
                _opMyEnumStringD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyEnumStringDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.MyEnumStringDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyEnumStringDResult ret = new global::Ice.operations.Test.MyClass_OpMyEnumStringDResult();
                    ret.p3 = global::Ice.operations.Test.MyEnumStringDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyEnumStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult> opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyStructMyEnumDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult> _iceI_opMyStructMyEnumDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyStructMyEnumD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult>(progress, cancel);
            _iceI_opMyStructMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyStructMyEnumD_name = "opMyStructMyEnumD";

        private void _iceI_opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult>(completed);
            outAsync.invoke(
                _opMyStructMyEnumD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyStructMyEnumDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.MyStructMyEnumDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult ret = new global::Ice.operations.Test.MyClass_OpMyStructMyEnumDResult();
                    ret.p3 = global::Ice.operations.Test.MyStructMyEnumDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyStructMyEnumDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteBoolDSResult>(progress, cancel);
            _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolDS_name = "opByteBoolDS";

        private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteBoolDSResult>(completed);
            outAsync.invoke(
                _opByteBoolDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteBoolDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ByteBoolDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteBoolDSResult ret = new global::Ice.operations.Test.MyClass_OpByteBoolDSResult();
                    ret.p3 = global::Ice.operations.Test.ByteBoolDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ByteBoolDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortIntDSResult>(progress, cancel);
            _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntDS_name = "opShortIntDS";

        private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortIntDSResult>(completed);
            outAsync.invoke(
                _opShortIntDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ShortIntDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ShortIntDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortIntDSResult ret = new global::Ice.operations.Test.MyClass_OpShortIntDSResult();
                    ret.p3 = global::Ice.operations.Test.ShortIntDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ShortIntDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpLongFloatDSResult>(progress, cancel);
            _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatDS_name = "opLongFloatDS";

        private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpLongFloatDSResult>(completed);
            outAsync.invoke(
                _opLongFloatDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.LongFloatDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.LongFloatDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpLongFloatDSResult ret = new global::Ice.operations.Test.MyClass_OpLongFloatDSResult();
                    ret.p3 = global::Ice.operations.Test.LongFloatDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.LongFloatDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringStringDSResult>(progress, cancel);
            _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDS_name = "opStringStringDS";

        private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringStringDSResult>(completed);
            outAsync.invoke(
                _opStringStringDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringStringDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringStringDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringStringDSResult ret = new global::Ice.operations.Test.MyClass_OpStringStringDSResult();
                    ret.p3 = global::Ice.operations.Test.StringStringDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult>(progress, cancel);
            _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

        private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult>(completed);
            outAsync.invoke(
                _opStringMyEnumDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringMyEnumDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringMyEnumDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult ret = new global::Ice.operations.Test.MyClass_OpStringMyEnumDSResult();
                    ret.p3 = global::Ice.operations.Test.StringMyEnumDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringMyEnumDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult>(progress, cancel);
            _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

        private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult>(completed);
            outAsync.invoke(
                _opMyEnumStringDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyEnumStringDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.MyEnumStringDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult ret = new global::Ice.operations.Test.MyClass_OpMyEnumStringDSResult();
                    ret.p3 = global::Ice.operations.Test.MyEnumStringDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyEnumStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult> opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyStructMyEnumDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult> _iceI_opMyStructMyEnumDSAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyStructMyEnumDS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult>(progress, cancel);
            _iceI_opMyStructMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyStructMyEnumDS_name = "opMyStructMyEnumDS";

        private void _iceI_opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult>(completed);
            outAsync.invoke(
                _opMyStructMyEnumDS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyStructMyEnumDSHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.MyStructMyEnumDSHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult ret = new global::Ice.operations.Test.MyClass_OpMyStructMyEnumDSResult();
                    ret.p3 = global::Ice.operations.Test.MyStructMyEnumDSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyStructMyEnumDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteByteSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpByteByteSDResult>(progress, cancel);
            _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteByteSD_name = "opByteByteSD";

        private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpByteByteSDResult>(completed);
            outAsync.invoke(
                _opByteByteSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteByteSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ByteByteSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpByteByteSDResult ret = new global::Ice.operations.Test.MyClass_OpByteByteSDResult();
                    ret.p3 = global::Ice.operations.Test.ByteByteSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ByteByteSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBoolSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpBoolBoolSDResult>(progress, cancel);
            _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBoolSD_name = "opBoolBoolSD";

        private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpBoolBoolSDResult>(completed);
            outAsync.invoke(
                _opBoolBoolSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.BoolBoolSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.BoolBoolSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpBoolBoolSDResult ret = new global::Ice.operations.Test.MyClass_OpBoolBoolSDResult();
                    ret.p3 = global::Ice.operations.Test.BoolBoolSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.BoolBoolSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortShortSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpShortShortSDResult>(progress, cancel);
            _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortShortSD_name = "opShortShortSD";

        private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpShortShortSDResult>(completed);
            outAsync.invoke(
                _opShortShortSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ShortShortSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.ShortShortSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpShortShortSDResult ret = new global::Ice.operations.Test.MyClass_OpShortShortSDResult();
                    ret.p3 = global::Ice.operations.Test.ShortShortSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.ShortShortSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpIntIntSDResult>(progress, cancel);
            _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntSD_name = "opIntIntSD";

        private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpIntIntSDResult>(completed);
            outAsync.invoke(
                _opIntIntSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.IntIntSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.IntIntSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpIntIntSDResult ret = new global::Ice.operations.Test.MyClass_OpIntIntSDResult();
                    ret.p3 = global::Ice.operations.Test.IntIntSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.IntIntSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongLongSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpLongLongSDResult>(progress, cancel);
            _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongLongSD_name = "opLongLongSD";

        private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpLongLongSDResult>(completed);
            outAsync.invoke(
                _opLongLongSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.LongLongSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.LongLongSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpLongLongSDResult ret = new global::Ice.operations.Test.MyClass_OpLongLongSDResult();
                    ret.p3 = global::Ice.operations.Test.LongLongSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.LongLongSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringFloatSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringFloatSDResult>(progress, cancel);
            _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringFloatSD_name = "opStringFloatSD";

        private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringFloatSDResult>(completed);
            outAsync.invoke(
                _opStringFloatSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringFloatSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringFloatSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringFloatSDResult ret = new global::Ice.operations.Test.MyClass_OpStringFloatSDResult();
                    ret.p3 = global::Ice.operations.Test.StringFloatSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringFloatSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringDoubleSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringDoubleSDResult>(progress, cancel);
            _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringDoubleSD_name = "opStringDoubleSD";

        private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringDoubleSDResult>(completed);
            outAsync.invoke(
                _opStringDoubleSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringDoubleSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringDoubleSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringDoubleSDResult ret = new global::Ice.operations.Test.MyClass_OpStringDoubleSDResult();
                    ret.p3 = global::Ice.operations.Test.StringDoubleSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringDoubleSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpStringStringSDResult>(progress, cancel);
            _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringSD_name = "opStringStringSD";

        private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpStringStringSDResult>(completed);
            outAsync.invoke(
                _opStringStringSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringStringSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.StringStringSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpStringStringSDResult ret = new global::Ice.operations.Test.MyClass_OpStringStringSDResult();
                    ret.p3 = global::Ice.operations.Test.StringStringSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringStringSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
            _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

        private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult>(completed);
            outAsync.invoke(
                _opMyEnumMyEnumSD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                    global::Ice.operations.Test.MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult ret = new global::Ice.operations.Test.MyClass_OpMyEnumMyEnumSDResult();
                    ret.p3 = global::Ice.operations.Test.MyEnumMyEnumSDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.MyEnumMyEnumSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntSAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntS_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
            _iceI_opIntS(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntS_name = "opIntS";

        private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int[]>(completed);
            outAsync.invoke(
                _opIntS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.IntSHelper.write(ostr, iceP_s);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int[] ret;
                    ret = global::Ice.operations.Test.IntSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opByteSOnewayAsync(byte[] s, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSOnewayAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opByteSOnewayAsync(byte[] iceP_s, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opByteSOneway(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSOneway_name = "opByteSOneway";

        private void _iceI_opByteSOneway(byte[] iceP_s, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opByteSOneway_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteSHelper.write(ostr, iceP_s);
                });
        }

        public global::System.Threading.Tasks.Task<int> opByteSOnewayCallCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSOnewayCallCountAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_opByteSOnewayCallCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSOnewayCallCount_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_opByteSOnewayCallCount(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSOnewayCallCount_name = "opByteSOnewayCallCount";

        private void _iceI_opByteSOnewayCallCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _opByteSOnewayCallCount_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opContext_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opContext_name = "opContext";

        private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opContext_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Ice.ContextHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opDoubleMarshalingAsync(double p1, double[] p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDoubleMarshalingAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opDoubleMarshalingAsync(double iceP_p1, double[] iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opDoubleMarshaling(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleMarshaling_name = "opDoubleMarshaling";

        private void _iceI_opDoubleMarshaling(double iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opDoubleMarshaling_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_p1);
                    global::Ice.operations.Test.DoubleSHelper.write(ostr, iceP_p2);
                });
        }

        public global::System.Threading.Tasks.Task opIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIdempotentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opIdempotent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIdempotent_name = "opIdempotent";

        private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opIdempotent_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task opNonmutatingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opNonmutatingAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opNonmutatingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opNonmutating(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opNonmutating_name = "opNonmutating";

        private void _iceI_opNonmutating(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opNonmutating_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<byte>(progress, cancel);
            _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte1_name = "opByte1";

        private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte>(completed);
            outAsync.invoke(
                _opByte1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_opByte1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte ret;
                    ret = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<short>(progress, cancel);
            _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort1_name = "opShort1";

        private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<short>(completed);
            outAsync.invoke(
                _opShort1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_opShort1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    short ret;
                    ret = istr.readShort();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt1_name = "opInt1";

        private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _opInt1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_opInt1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLong1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLong1_name = "opLong1";

        private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _opLong1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_opLong1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloat1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloat1_name = "opFloat1";

        private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _opFloat1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_opFloat1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDouble1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
            _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDouble1_name = "opDouble1";

        private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<double>(completed);
            outAsync.invoke(
                _opDouble1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_opDouble1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    double ret;
                    ret = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opString1Async(opString1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_opString1(iceP_opString1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString1_name = "opString1";

        private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _opString1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_opString1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS1_name = "opStringS1";

        private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSHelper.write(ostr, iceP_opStringS1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD1_name = "opByteBoolD1";

        private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = global::Ice.operations.Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS2_name = "opStringS2";

        private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSHelper.write(ostr, iceP_stringS);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD2_name = "opByteBoolD2";

        private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = global::Ice.operations.Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringLiterals_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringLiterals(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringLiterals_name = "opStringLiterals";

        private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringLiterals_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opWStringLiteralsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opWStringLiteralsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opWStringLiteralsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opWStringLiterals_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opWStringLiterals(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opWStringLiterals_name = "opWStringLiterals";

        private void _iceI_opWStringLiterals(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opWStringLiterals_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.Structure> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMStruct1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.Structure> _iceI_opMStruct1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.Structure>(progress, cancel);
            _iceI_opMStruct1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct1_name = "opMStruct1";

        private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.Structure>(completed);
            outAsync.invoke(
                _opMStruct1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.Structure ret = null;
                    ret = global::Ice.operations.Test.Structure.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMStruct2Result> opMStruct2Async(global::Ice.operations.Test.Structure p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMStruct2Result> _iceI_opMStruct2Async(global::Ice.operations.Test.Structure iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMStruct2Result>(progress, cancel);
            _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct2_name = "opMStruct2";

        private void _iceI_opMStruct2(global::Ice.operations.Test.Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMStruct2Result>(completed);
            outAsync.invoke(
                _opMStruct2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.Structure.ice_write(ostr, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMStruct2Result ret = new global::Ice.operations.Test.MyClass_OpMStruct2Result();
                    ret.p2 = global::Ice.operations.Test.Structure.ice_read(istr);
                    ret.returnValue = global::Ice.operations.Test.Structure.ice_read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMSeq1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opMSeq1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq1_name = "opMSeq1";

        private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opMSeq1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMSeq2Result>(progress, cancel);
            _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq2_name = "opMSeq2";

        private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMSeq2Result>(completed);
            outAsync.invoke(
                _opMSeq2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringSHelper.write(ostr, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMSeq2Result ret = new global::Ice.operations.Test.MyClass_OpMSeq2Result();
                    ret.p2 = global::Ice.operations.Test.StringSHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMDict1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opMDict1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict1_name = "opMDict1";

        private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opMDict1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Ice.operations.Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMDict2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.operations.Test.MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.operations.Test.MyClass_OpMDict2Result>(progress, cancel);
            _iceI_opMDict2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict2_name = "opMDict2";

        private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.operations.Test.MyClass_OpMDict2Result>(completed);
            outAsync.invoke(
                _opMDict2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.operations.Test.StringStringDHelper.write(ostr, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.operations.Test.MyClass_OpMDict2Result ret = new global::Ice.operations.Test.MyClass_OpMDict2Result();
                    ret.p2 = global::Ice.operations.Test.StringStringDHelper.read(istr);
                    ret.returnValue = global::Ice.operations.Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MyDerivedClassPrx r = b as MyDerivedClassPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            MyDerivedClassPrx r = b as MyDerivedClassPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MyDerivedClassPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MyDerivedClassPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MyDerivedClassPrx r = b as MyDerivedClassPrx;
            if(r == null)
            {
                MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static MyDerivedClassPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            MyDerivedClassPrxHelper h = new MyDerivedClassPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test2::MyDerivedClass",
            "::Test::MyClass"
        };

        public static string ice_staticId() => "::Test2::MyDerivedClass";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, MyDerivedClassPrx v)
        {
            ostr.writeProxy(v);
        }

        public static MyDerivedClassPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                MyDerivedClassPrxHelper result = new MyDerivedClassPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice.operations
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyClassDisp_ : global::Ice.ObjectImpl, MyClass
        {
            #region Slice operations

            public abstract void shutdown(global::Ice.Current current = null);

            public abstract bool supportsCompress(global::Ice.Current current = null);

            public abstract void opVoid(global::Ice.Current current = null);

            public abstract byte opByte(byte p1, byte p2, out byte p3, global::Ice.Current current = null);

            public abstract bool opBool(bool p1, bool p2, out bool p3, global::Ice.Current current = null);

            public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.Current current = null);

            public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.Current current = null);

            public abstract string opString(string p1, string p2, out string p3, global::Ice.Current current = null);

            public abstract MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.Current current = null);

            public abstract MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.Current current = null);

            public abstract Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.Current current = null);

            public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.Current current = null);

            public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.Current current = null);

            public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.Current current = null);

            public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.Current current = null);

            public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.Current current = null);

            public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.Current current = null);

            public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.Current current = null);

            public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.Current current = null);

            public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.Current current = null);

            public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.Current current = null);

            public abstract string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.Current current = null);

            public abstract int[] opIntS(int[] s, global::Ice.Current current = null);

            public abstract void opByteSOneway(byte[] s, global::Ice.Current current = null);

            public abstract int opByteSOnewayCallCount(global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.Current current = null);

            public abstract void opDoubleMarshaling(double p1, double[] p2, global::Ice.Current current = null);

            public abstract void opIdempotent(global::Ice.Current current = null);

            public abstract void opNonmutating(global::Ice.Current current = null);

            public abstract byte opByte1(byte opByte1, global::Ice.Current current = null);

            public abstract short opShort1(short opShort1, global::Ice.Current current = null);

            public abstract int opInt1(int opInt1, global::Ice.Current current = null);

            public abstract long opLong1(long opLong1, global::Ice.Current current = null);

            public abstract float opFloat1(float opFloat1, global::Ice.Current current = null);

            public abstract double opDouble1(double opDouble1, global::Ice.Current current = null);

            public abstract string opString1(string opString1, global::Ice.Current current = null);

            public abstract string[] opStringS1(string[] opStringS1, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.Current current = null);

            public abstract string[] opStringS2(string[] stringS, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.Current current = null);

            public abstract string[] opStringLiterals(global::Ice.Current current = null);

            public abstract string[] opWStringLiterals(global::Ice.Current current = null);

            public abstract MyClass_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current current = null);

            public abstract MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, global::Ice.Current current = null);

            public abstract MyClass_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current current = null);

            public abstract MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, global::Ice.Current current = null);

            public abstract MyClass_OpMDict1MarshaledResult opMDict1(global::Ice.Current current = null);

            public abstract MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::MyClass";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsCompress(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.supportsCompress(current);
                var ostr = inS.startWriteParams();
                ostr.writeBool(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opVoid(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.opVoid(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByte(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte iceP_p1;
                byte iceP_p2;
                iceP_p1 = istr.readByte();
                iceP_p2 = istr.readByte();
                inS.endReadParams();
                byte iceP_p3;
                var ret = obj.opByte(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ostr.writeByte(iceP_p3);
                ostr.writeByte(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBool(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool iceP_p1;
                bool iceP_p2;
                iceP_p1 = istr.readBool();
                iceP_p2 = istr.readBool();
                inS.endReadParams();
                bool iceP_p3;
                var ret = obj.opBool(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ostr.writeBool(iceP_p3);
                ostr.writeBool(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortIntLong(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short iceP_p1;
                int iceP_p2;
                long iceP_p3;
                iceP_p1 = istr.readShort();
                iceP_p2 = istr.readInt();
                iceP_p3 = istr.readLong();
                inS.endReadParams();
                short iceP_p4;
                int iceP_p5;
                long iceP_p6;
                var ret = obj.opShortIntLong(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, current);
                var ostr = inS.startWriteParams();
                ostr.writeShort(iceP_p4);
                ostr.writeInt(iceP_p5);
                ostr.writeLong(iceP_p6);
                ostr.writeLong(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatDouble(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float iceP_p1;
                double iceP_p2;
                iceP_p1 = istr.readFloat();
                iceP_p2 = istr.readDouble();
                inS.endReadParams();
                float iceP_p3;
                double iceP_p4;
                var ret = obj.opFloatDouble(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, current);
                var ostr = inS.startWriteParams();
                ostr.writeFloat(iceP_p3);
                ostr.writeDouble(iceP_p4);
                ostr.writeDouble(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opString(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_p1;
                string iceP_p2;
                iceP_p1 = istr.readString();
                iceP_p2 = istr.readString();
                inS.endReadParams();
                string iceP_p3;
                var ret = obj.opString(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(iceP_p3);
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyEnum(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                MyEnum iceP_p1;
                iceP_p1 = (MyEnum)istr.readEnum(2);
                inS.endReadParams();
                MyEnum iceP_p2;
                var ret = obj.opMyEnum(iceP_p1, out iceP_p2, current);
                var ostr = inS.startWriteParams();
                ostr.writeEnum((int)iceP_p2, 2);
                ostr.writeEnum((int)ret, 2);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyClass(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                MyClassPrx iceP_p1;
                iceP_p1 = MyClassPrxHelper.read(istr);
                inS.endReadParams();
                MyClassPrx iceP_p2;
                MyClassPrx iceP_p3;
                var ret = obj.opMyClass(iceP_p1, out iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyClassPrxHelper.write(ostr, iceP_p2);
                MyClassPrxHelper.write(ostr, iceP_p3);
                MyClassPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStruct(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Structure iceP_p1;
                iceP_p1 = null;
                Structure iceP_p2;
                iceP_p2 = null;
                iceP_p1 = Structure.ice_read(istr);
                iceP_p2 = Structure.ice_read(istr);
                inS.endReadParams();
                Structure iceP_p3;
                var ret = obj.opStruct(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                Structure.ice_write(ostr, iceP_p3);
                Structure.ice_write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_p1;
                byte[] iceP_p2;
                iceP_p1 = ByteSHelper.read(istr);
                iceP_p2 = ByteSHelper.read(istr);
                inS.endReadParams();
                byte[] iceP_p3;
                var ret = obj.opByteS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ByteSHelper.write(ostr, iceP_p3);
                ByteSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool[] iceP_p1;
                bool[] iceP_p2;
                iceP_p1 = BoolSHelper.read(istr);
                iceP_p2 = BoolSHelper.read(istr);
                inS.endReadParams();
                bool[] iceP_p3;
                var ret = obj.opBoolS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                BoolSHelper.write(ostr, iceP_p3);
                BoolSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortIntLongS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short[] iceP_p1;
                int[] iceP_p2;
                long[] iceP_p3;
                iceP_p1 = ShortSHelper.read(istr);
                iceP_p2 = IntSHelper.read(istr);
                iceP_p3 = LongSHelper.read(istr);
                inS.endReadParams();
                short[] iceP_p4;
                int[] iceP_p5;
                long[] iceP_p6;
                var ret = obj.opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, current);
                var ostr = inS.startWriteParams();
                ShortSHelper.write(ostr, iceP_p4);
                IntSHelper.write(ostr, iceP_p5);
                LongSHelper.write(ostr, iceP_p6);
                LongSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatDoubleS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float[] iceP_p1;
                double[] iceP_p2;
                iceP_p1 = FloatSHelper.read(istr);
                iceP_p2 = DoubleSHelper.read(istr);
                inS.endReadParams();
                float[] iceP_p3;
                double[] iceP_p4;
                var ret = obj.opFloatDoubleS(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, current);
                var ostr = inS.startWriteParams();
                FloatSHelper.write(ostr, iceP_p3);
                DoubleSHelper.write(ostr, iceP_p4);
                DoubleSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_p1;
                string[] iceP_p2;
                iceP_p1 = StringSHelper.read(istr);
                iceP_p2 = StringSHelper.read(istr);
                inS.endReadParams();
                string[] iceP_p3;
                var ret = obj.opStringS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringSHelper.write(ostr, iceP_p3);
                StringSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[][] iceP_p1;
                byte[][] iceP_p2;
                iceP_p1 = ByteSSHelper.read(istr);
                iceP_p2 = ByteSSHelper.read(istr);
                inS.endReadParams();
                byte[][] iceP_p3;
                var ret = obj.opByteSS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ByteSSHelper.write(ostr, iceP_p3);
                ByteSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool[][] iceP_p1;
                bool[][] iceP_p2;
                iceP_p1 = BoolSSHelper.read(istr);
                iceP_p2 = BoolSSHelper.read(istr);
                inS.endReadParams();
                bool[][] iceP_p3;
                var ret = obj.opBoolSS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                BoolSSHelper.write(ostr, iceP_p3);
                BoolSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortIntLongSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short[][] iceP_p1;
                int[][] iceP_p2;
                long[][] iceP_p3;
                iceP_p1 = ShortSSHelper.read(istr);
                iceP_p2 = IntSSHelper.read(istr);
                iceP_p3 = LongSSHelper.read(istr);
                inS.endReadParams();
                short[][] iceP_p4;
                int[][] iceP_p5;
                long[][] iceP_p6;
                var ret = obj.opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, current);
                var ostr = inS.startWriteParams();
                ShortSSHelper.write(ostr, iceP_p4);
                IntSSHelper.write(ostr, iceP_p5);
                LongSSHelper.write(ostr, iceP_p6);
                LongSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatDoubleSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float[][] iceP_p1;
                double[][] iceP_p2;
                iceP_p1 = FloatSSHelper.read(istr);
                iceP_p2 = DoubleSSHelper.read(istr);
                inS.endReadParams();
                float[][] iceP_p3;
                double[][] iceP_p4;
                var ret = obj.opFloatDoubleSS(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, current);
                var ostr = inS.startWriteParams();
                FloatSSHelper.write(ostr, iceP_p3);
                DoubleSSHelper.write(ostr, iceP_p4);
                DoubleSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[][] iceP_p1;
                string[][] iceP_p2;
                iceP_p1 = StringSSHelper.read(istr);
                iceP_p2 = StringSSHelper.read(istr);
                inS.endReadParams();
                string[][] iceP_p3;
                var ret = obj.opStringSS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringSSHelper.write(ostr, iceP_p3);
                StringSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringSSS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[][][] iceP_p1;
                string[][][] iceP_p2;
                iceP_p1 = StringSSSHelper.read(istr);
                iceP_p2 = StringSSSHelper.read(istr);
                inS.endReadParams();
                string[][][] iceP_p3;
                var ret = obj.opStringSSS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringSSSHelper.write(ostr, iceP_p3);
                StringSSSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteBoolD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1;
                global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2;
                iceP_p1 = ByteBoolDHelper.read(istr);
                iceP_p2 = ByteBoolDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool> iceP_p3;
                var ret = obj.opByteBoolD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ByteBoolDHelper.write(ostr, iceP_p3);
                ByteBoolDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortIntD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<short, int> iceP_p1;
                global::System.Collections.Generic.Dictionary<short, int> iceP_p2;
                iceP_p1 = ShortIntDHelper.read(istr);
                iceP_p2 = ShortIntDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<short, int> iceP_p3;
                var ret = obj.opShortIntD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ShortIntDHelper.write(ostr, iceP_p3);
                ShortIntDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongFloatD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<long, float> iceP_p1;
                global::System.Collections.Generic.Dictionary<long, float> iceP_p2;
                iceP_p1 = LongFloatDHelper.read(istr);
                iceP_p2 = LongFloatDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<long, float> iceP_p3;
                var ret = obj.opLongFloatD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                LongFloatDHelper.write(ostr, iceP_p3);
                LongFloatDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringStringD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, string> iceP_p1;
                global::System.Collections.Generic.Dictionary<string, string> iceP_p2;
                iceP_p1 = StringStringDHelper.read(istr);
                iceP_p2 = StringStringDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, string> iceP_p3;
                var ret = obj.opStringStringD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringStringDHelper.write(ostr, iceP_p3);
                StringStringDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringMyEnumD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1;
                global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2;
                iceP_p1 = StringMyEnumDHelper.read(istr);
                iceP_p2 = StringMyEnumDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p3;
                var ret = obj.opStringMyEnumD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringMyEnumDHelper.write(ostr, iceP_p3);
                StringMyEnumDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyEnumStringD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1;
                global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2;
                iceP_p1 = MyEnumStringDHelper.read(istr);
                iceP_p2 = MyEnumStringDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p3;
                var ret = obj.opMyEnumStringD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyEnumStringDHelper.write(ostr, iceP_p3);
                MyEnumStringDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyStructMyEnumD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p1;
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p2;
                iceP_p1 = MyStructMyEnumDHelper.read(istr);
                iceP_p2 = MyStructMyEnumDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> iceP_p3;
                var ret = obj.opMyStructMyEnumD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyStructMyEnumDHelper.write(ostr, iceP_p3);
                MyStructMyEnumDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteBoolDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2;
                iceP_p1 = ByteBoolDSHelper.read(istr);
                iceP_p2 = ByteBoolDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p3;
                var ret = obj.opByteBoolDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ByteBoolDSHelper.write(ostr, iceP_p3);
                ByteBoolDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortIntDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2;
                iceP_p1 = ShortIntDSHelper.read(istr);
                iceP_p2 = ShortIntDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<short, int>[] iceP_p3;
                var ret = obj.opShortIntDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ShortIntDSHelper.write(ostr, iceP_p3);
                ShortIntDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongFloatDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2;
                iceP_p1 = LongFloatDSHelper.read(istr);
                iceP_p2 = LongFloatDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<long, float>[] iceP_p3;
                var ret = obj.opLongFloatDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                LongFloatDSHelper.write(ostr, iceP_p3);
                LongFloatDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringStringDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2;
                iceP_p1 = StringStringDSHelper.read(istr);
                iceP_p2 = StringStringDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, string>[] iceP_p3;
                var ret = obj.opStringStringDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringStringDSHelper.write(ostr, iceP_p3);
                StringStringDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringMyEnumDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2;
                iceP_p1 = StringMyEnumDSHelper.read(istr);
                iceP_p2 = StringMyEnumDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p3;
                var ret = obj.opStringMyEnumDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringMyEnumDSHelper.write(ostr, iceP_p3);
                StringMyEnumDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyEnumStringDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2;
                iceP_p1 = MyEnumStringDSHelper.read(istr);
                iceP_p2 = MyEnumStringDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p3;
                var ret = obj.opMyEnumStringDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyEnumStringDSHelper.write(ostr, iceP_p3);
                MyEnumStringDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyStructMyEnumDS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p1;
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p2;
                iceP_p1 = MyStructMyEnumDSHelper.read(istr);
                iceP_p2 = MyStructMyEnumDSHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] iceP_p3;
                var ret = obj.opMyStructMyEnumDS(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyStructMyEnumDSHelper.write(ostr, iceP_p3);
                MyStructMyEnumDSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteByteSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2;
                iceP_p1 = ByteByteSDHelper.read(istr);
                iceP_p2 = ByteByteSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p3;
                var ret = obj.opByteByteSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ByteByteSDHelper.write(ostr, iceP_p3);
                ByteByteSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolBoolSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2;
                iceP_p1 = BoolBoolSDHelper.read(istr);
                iceP_p2 = BoolBoolSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p3;
                var ret = obj.opBoolBoolSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                BoolBoolSDHelper.write(ostr, iceP_p3);
                BoolBoolSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortShortSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2;
                iceP_p1 = ShortShortSDHelper.read(istr);
                iceP_p2 = ShortShortSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<short, short[]> iceP_p3;
                var ret = obj.opShortShortSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                ShortShortSDHelper.write(ostr, iceP_p3);
                ShortShortSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntIntSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2;
                iceP_p1 = IntIntSDHelper.read(istr);
                iceP_p2 = IntIntSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<int, int[]> iceP_p3;
                var ret = obj.opIntIntSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                IntIntSDHelper.write(ostr, iceP_p3);
                IntIntSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongLongSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2;
                iceP_p1 = LongLongSDHelper.read(istr);
                iceP_p2 = LongLongSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<long, long[]> iceP_p3;
                var ret = obj.opLongLongSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                LongLongSDHelper.write(ostr, iceP_p3);
                LongLongSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringFloatSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2;
                iceP_p1 = StringFloatSDHelper.read(istr);
                iceP_p2 = StringFloatSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, float[]> iceP_p3;
                var ret = obj.opStringFloatSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringFloatSDHelper.write(ostr, iceP_p3);
                StringFloatSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringDoubleSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2;
                iceP_p1 = StringDoubleSDHelper.read(istr);
                iceP_p2 = StringDoubleSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, double[]> iceP_p3;
                var ret = obj.opStringDoubleSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringDoubleSDHelper.write(ostr, iceP_p3);
                StringDoubleSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringStringSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2;
                iceP_p1 = StringStringSDHelper.read(istr);
                iceP_p2 = StringStringSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<string, string[]> iceP_p3;
                var ret = obj.opStringStringSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                StringStringSDHelper.write(ostr, iceP_p3);
                StringStringSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyEnumMyEnumSD(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1;
                global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2;
                iceP_p1 = MyEnumMyEnumSDHelper.read(istr);
                iceP_p2 = MyEnumMyEnumSDHelper.read(istr);
                inS.endReadParams();
                global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p3;
                var ret = obj.opMyEnumMyEnumSD(iceP_p1, iceP_p2, out iceP_p3, current);
                var ostr = inS.startWriteParams();
                MyEnumMyEnumSDHelper.write(ostr, iceP_p3);
                MyEnumMyEnumSDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntS(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int[] iceP_s;
                iceP_s = IntSHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opIntS(iceP_s, current);
                var ostr = inS.startWriteParams();
                IntSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteSOneway(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_s;
                iceP_s = ByteSHelper.read(istr);
                inS.endReadParams();
                obj.opByteSOneway(iceP_s, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteSOnewayCallCount(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opByteSOnewayCallCount(current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opContext(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opContext(current);
                var ostr = inS.startWriteParams();
                global::Ice.ContextHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDoubleMarshaling(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                double iceP_p1;
                double[] iceP_p2;
                iceP_p1 = istr.readDouble();
                iceP_p2 = DoubleSHelper.read(istr);
                inS.endReadParams();
                obj.opDoubleMarshaling(iceP_p1, iceP_p2, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIdempotent(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                obj.opIdempotent(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opNonmutating(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                obj.opNonmutating(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByte1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte iceP_opByte1;
                iceP_opByte1 = istr.readByte();
                inS.endReadParams();
                var ret = obj.opByte1(iceP_opByte1, current);
                var ostr = inS.startWriteParams();
                ostr.writeByte(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShort1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short iceP_opShort1;
                iceP_opShort1 = istr.readShort();
                inS.endReadParams();
                var ret = obj.opShort1(iceP_opShort1, current);
                var ostr = inS.startWriteParams();
                ostr.writeShort(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opInt1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_opInt1;
                iceP_opInt1 = istr.readInt();
                inS.endReadParams();
                var ret = obj.opInt1(iceP_opInt1, current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLong1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                long iceP_opLong1;
                iceP_opLong1 = istr.readLong();
                inS.endReadParams();
                var ret = obj.opLong1(iceP_opLong1, current);
                var ostr = inS.startWriteParams();
                ostr.writeLong(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloat1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float iceP_opFloat1;
                iceP_opFloat1 = istr.readFloat();
                inS.endReadParams();
                var ret = obj.opFloat1(iceP_opFloat1, current);
                var ostr = inS.startWriteParams();
                ostr.writeFloat(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDouble1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                double iceP_opDouble1;
                iceP_opDouble1 = istr.readDouble();
                inS.endReadParams();
                var ret = obj.opDouble1(iceP_opDouble1, current);
                var ostr = inS.startWriteParams();
                ostr.writeDouble(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opString1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_opString1;
                iceP_opString1 = istr.readString();
                inS.endReadParams();
                var ret = obj.opString1(iceP_opString1, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringS1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_opStringS1;
                iceP_opStringS1 = StringSHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opStringS1(iceP_opStringS1, current);
                var ostr = inS.startWriteParams();
                StringSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteBoolD1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1;
                iceP_opByteBoolD1 = ByteBoolDHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opByteBoolD1(iceP_opByteBoolD1, current);
                var ostr = inS.startWriteParams();
                ByteBoolDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringS2(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_stringS;
                iceP_stringS = StringSHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opStringS2(iceP_stringS, current);
                var ostr = inS.startWriteParams();
                StringSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteBoolD2(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD;
                iceP_byteBoolD = ByteBoolDHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opByteBoolD2(iceP_byteBoolD, current);
                var ostr = inS.startWriteParams();
                ByteBoolDHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringLiterals(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opStringLiterals(current);
                var ostr = inS.startWriteParams();
                StringSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opWStringLiterals(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opWStringLiterals(current);
                var ostr = inS.startWriteParams();
                StringSHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMStruct1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResult(obj.opMStruct1(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMStruct2(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Structure iceP_p1;
                iceP_p1 = null;
                iceP_p1 = Structure.ice_read(istr);
                inS.endReadParams();
                return inS.setMarshaledResult(obj.opMStruct2(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMSeq1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResult(obj.opMSeq1(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMSeq2(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_p1;
                iceP_p1 = StringSHelper.read(istr);
                inS.endReadParams();
                return inS.setMarshaledResult(obj.opMSeq2(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMDict1(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResult(obj.opMDict1(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMDict2(MyClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Dictionary<string, string> iceP_p1;
                iceP_p1 = StringStringDHelper.read(istr);
                inS.endReadParams();
                return inS.setMarshaledResult(obj.opMDict2(iceP_p1, current));
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opBool",
                "opBoolBoolSD",
                "opBoolS",
                "opBoolSS",
                "opByte",
                "opByte1",
                "opByteBoolD",
                "opByteBoolD1",
                "opByteBoolD2",
                "opByteBoolDS",
                "opByteByteSD",
                "opByteS",
                "opByteSOneway",
                "opByteSOnewayCallCount",
                "opByteSS",
                "opContext",
                "opDouble1",
                "opDoubleMarshaling",
                "opFloat1",
                "opFloatDouble",
                "opFloatDoubleS",
                "opFloatDoubleSS",
                "opIdempotent",
                "opInt1",
                "opIntIntSD",
                "opIntS",
                "opLong1",
                "opLongFloatD",
                "opLongFloatDS",
                "opLongLongSD",
                "opMDict1",
                "opMDict2",
                "opMSeq1",
                "opMSeq2",
                "opMStruct1",
                "opMStruct2",
                "opMyClass",
                "opMyEnum",
                "opMyEnumMyEnumSD",
                "opMyEnumStringD",
                "opMyEnumStringDS",
                "opMyStructMyEnumD",
                "opMyStructMyEnumDS",
                "opNonmutating",
                "opShort1",
                "opShortIntD",
                "opShortIntDS",
                "opShortIntLong",
                "opShortIntLongS",
                "opShortIntLongSS",
                "opShortShortSD",
                "opString",
                "opString1",
                "opStringDoubleSD",
                "opStringFloatSD",
                "opStringLiterals",
                "opStringMyEnumD",
                "opStringMyEnumDS",
                "opStringS",
                "opStringS1",
                "opStringS2",
                "opStringSS",
                "opStringSSS",
                "opStringStringD",
                "opStringStringDS",
                "opStringStringSD",
                "opStruct",
                "opVoid",
                "opWStringLiterals",
                "shutdown",
                "supportsCompress"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_opBool(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_opBoolBoolSD(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_opBoolS(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_opBoolSS(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_opByte(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_opByte1(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_opByteBoolD(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_opByteBoolD1(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_opByteBoolD2(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_opByteBoolDS(this, inS, current);
                    }
                    case 14:
                    {
                        return iceD_opByteByteSD(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_opByteS(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_opByteSOneway(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_opByteSOnewayCallCount(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_opByteSS(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_opContext(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_opDouble1(this, inS, current);
                    }
                    case 21:
                    {
                        return iceD_opDoubleMarshaling(this, inS, current);
                    }
                    case 22:
                    {
                        return iceD_opFloat1(this, inS, current);
                    }
                    case 23:
                    {
                        return iceD_opFloatDouble(this, inS, current);
                    }
                    case 24:
                    {
                        return iceD_opFloatDoubleS(this, inS, current);
                    }
                    case 25:
                    {
                        return iceD_opFloatDoubleSS(this, inS, current);
                    }
                    case 26:
                    {
                        return iceD_opIdempotent(this, inS, current);
                    }
                    case 27:
                    {
                        return iceD_opInt1(this, inS, current);
                    }
                    case 28:
                    {
                        return iceD_opIntIntSD(this, inS, current);
                    }
                    case 29:
                    {
                        return iceD_opIntS(this, inS, current);
                    }
                    case 30:
                    {
                        return iceD_opLong1(this, inS, current);
                    }
                    case 31:
                    {
                        return iceD_opLongFloatD(this, inS, current);
                    }
                    case 32:
                    {
                        return iceD_opLongFloatDS(this, inS, current);
                    }
                    case 33:
                    {
                        return iceD_opLongLongSD(this, inS, current);
                    }
                    case 34:
                    {
                        return iceD_opMDict1(this, inS, current);
                    }
                    case 35:
                    {
                        return iceD_opMDict2(this, inS, current);
                    }
                    case 36:
                    {
                        return iceD_opMSeq1(this, inS, current);
                    }
                    case 37:
                    {
                        return iceD_opMSeq2(this, inS, current);
                    }
                    case 38:
                    {
                        return iceD_opMStruct1(this, inS, current);
                    }
                    case 39:
                    {
                        return iceD_opMStruct2(this, inS, current);
                    }
                    case 40:
                    {
                        return iceD_opMyClass(this, inS, current);
                    }
                    case 41:
                    {
                        return iceD_opMyEnum(this, inS, current);
                    }
                    case 42:
                    {
                        return iceD_opMyEnumMyEnumSD(this, inS, current);
                    }
                    case 43:
                    {
                        return iceD_opMyEnumStringD(this, inS, current);
                    }
                    case 44:
                    {
                        return iceD_opMyEnumStringDS(this, inS, current);
                    }
                    case 45:
                    {
                        return iceD_opMyStructMyEnumD(this, inS, current);
                    }
                    case 46:
                    {
                        return iceD_opMyStructMyEnumDS(this, inS, current);
                    }
                    case 47:
                    {
                        return iceD_opNonmutating(this, inS, current);
                    }
                    case 48:
                    {
                        return iceD_opShort1(this, inS, current);
                    }
                    case 49:
                    {
                        return iceD_opShortIntD(this, inS, current);
                    }
                    case 50:
                    {
                        return iceD_opShortIntDS(this, inS, current);
                    }
                    case 51:
                    {
                        return iceD_opShortIntLong(this, inS, current);
                    }
                    case 52:
                    {
                        return iceD_opShortIntLongS(this, inS, current);
                    }
                    case 53:
                    {
                        return iceD_opShortIntLongSS(this, inS, current);
                    }
                    case 54:
                    {
                        return iceD_opShortShortSD(this, inS, current);
                    }
                    case 55:
                    {
                        return iceD_opString(this, inS, current);
                    }
                    case 56:
                    {
                        return iceD_opString1(this, inS, current);
                    }
                    case 57:
                    {
                        return iceD_opStringDoubleSD(this, inS, current);
                    }
                    case 58:
                    {
                        return iceD_opStringFloatSD(this, inS, current);
                    }
                    case 59:
                    {
                        return iceD_opStringLiterals(this, inS, current);
                    }
                    case 60:
                    {
                        return iceD_opStringMyEnumD(this, inS, current);
                    }
                    case 61:
                    {
                        return iceD_opStringMyEnumDS(this, inS, current);
                    }
                    case 62:
                    {
                        return iceD_opStringS(this, inS, current);
                    }
                    case 63:
                    {
                        return iceD_opStringS1(this, inS, current);
                    }
                    case 64:
                    {
                        return iceD_opStringS2(this, inS, current);
                    }
                    case 65:
                    {
                        return iceD_opStringSS(this, inS, current);
                    }
                    case 66:
                    {
                        return iceD_opStringSSS(this, inS, current);
                    }
                    case 67:
                    {
                        return iceD_opStringStringD(this, inS, current);
                    }
                    case 68:
                    {
                        return iceD_opStringStringDS(this, inS, current);
                    }
                    case 69:
                    {
                        return iceD_opStringStringSD(this, inS, current);
                    }
                    case 70:
                    {
                        return iceD_opStruct(this, inS, current);
                    }
                    case 71:
                    {
                        return iceD_opVoid(this, inS, current);
                    }
                    case 72:
                    {
                        return iceD_opWStringLiterals(this, inS, current);
                    }
                    case 73:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                    case 74:
                    {
                        return iceD_supportsCompress(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyDerivedClassDisp_ : global::Ice.ObjectImpl, MyDerivedClass
        {
            #region Slice operations

            public abstract void opDerived(global::Ice.Current current = null);

            public abstract MyClass1 opMyClass1(MyClass1 opMyClass1, global::Ice.Current current = null);

            public abstract MyStruct1 opMyStruct1(MyStruct1 opMyStruct1, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract void shutdown(global::Ice.Current current = null);

            public abstract bool supportsCompress(global::Ice.Current current = null);

            public abstract void opVoid(global::Ice.Current current = null);

            public abstract byte opByte(byte p1, byte p2, out byte p3, global::Ice.Current current = null);

            public abstract bool opBool(bool p1, bool p2, out bool p3, global::Ice.Current current = null);

            public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.Current current = null);

            public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.Current current = null);

            public abstract string opString(string p1, string p2, out string p3, global::Ice.Current current = null);

            public abstract MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.Current current = null);

            public abstract MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.Current current = null);

            public abstract Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.Current current = null);

            public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.Current current = null);

            public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.Current current = null);

            public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.Current current = null);

            public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.Current current = null);

            public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.Current current = null);

            public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.Current current = null);

            public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.Current current = null);

            public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.Current current = null);

            public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.Current current = null);

            public abstract string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.Current current = null);

            public abstract int[] opIntS(int[] s, global::Ice.Current current = null);

            public abstract void opByteSOneway(byte[] s, global::Ice.Current current = null);

            public abstract int opByteSOnewayCallCount(global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.Current current = null);

            public abstract void opDoubleMarshaling(double p1, double[] p2, global::Ice.Current current = null);

            public abstract void opIdempotent(global::Ice.Current current = null);

            public abstract void opNonmutating(global::Ice.Current current = null);

            public abstract byte opByte1(byte opByte1, global::Ice.Current current = null);

            public abstract short opShort1(short opShort1, global::Ice.Current current = null);

            public abstract int opInt1(int opInt1, global::Ice.Current current = null);

            public abstract long opLong1(long opLong1, global::Ice.Current current = null);

            public abstract float opFloat1(float opFloat1, global::Ice.Current current = null);

            public abstract double opDouble1(double opDouble1, global::Ice.Current current = null);

            public abstract string opString1(string opString1, global::Ice.Current current = null);

            public abstract string[] opStringS1(string[] opStringS1, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.Current current = null);

            public abstract string[] opStringS2(string[] stringS, global::Ice.Current current = null);

            public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.Current current = null);

            public abstract string[] opStringLiterals(global::Ice.Current current = null);

            public abstract string[] opWStringLiterals(global::Ice.Current current = null);

            public abstract MyClass_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current current = null);

            public abstract MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, global::Ice.Current current = null);

            public abstract MyClass_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current current = null);

            public abstract MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, global::Ice.Current current = null);

            public abstract MyClass_OpMDict1MarshaledResult opMDict1(global::Ice.Current current = null);

            public abstract MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.Current current = null);

            public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass",
                "::Test::MyDerivedClass"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::MyDerivedClass";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDerived(MyDerivedClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.opDerived(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyClass1(MyDerivedClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                MyClass1 iceP_opMyClass1;
                iceP_opMyClass1 = null;
                istr.readValue((MyClass1 v) => {iceP_opMyClass1 = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.opMyClass1(iceP_opMyClass1, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyStruct1(MyDerivedClass obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                MyStruct1 iceP_opMyStruct1;
                iceP_opMyStruct1 = null;
                iceP_opMyStruct1 = MyStruct1.ice_read(istr);
                inS.endReadParams();
                var ret = obj.opMyStruct1(iceP_opMyStruct1, current);
                var ostr = inS.startWriteParams();
                MyStruct1.ice_write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opBool",
                "opBoolBoolSD",
                "opBoolS",
                "opBoolSS",
                "opByte",
                "opByte1",
                "opByteBoolD",
                "opByteBoolD1",
                "opByteBoolD2",
                "opByteBoolDS",
                "opByteByteSD",
                "opByteS",
                "opByteSOneway",
                "opByteSOnewayCallCount",
                "opByteSS",
                "opContext",
                "opDerived",
                "opDouble1",
                "opDoubleMarshaling",
                "opFloat1",
                "opFloatDouble",
                "opFloatDoubleS",
                "opFloatDoubleSS",
                "opIdempotent",
                "opInt1",
                "opIntIntSD",
                "opIntS",
                "opLong1",
                "opLongFloatD",
                "opLongFloatDS",
                "opLongLongSD",
                "opMDict1",
                "opMDict2",
                "opMSeq1",
                "opMSeq2",
                "opMStruct1",
                "opMStruct2",
                "opMyClass",
                "opMyClass1",
                "opMyEnum",
                "opMyEnumMyEnumSD",
                "opMyEnumStringD",
                "opMyEnumStringDS",
                "opMyStruct1",
                "opMyStructMyEnumD",
                "opMyStructMyEnumDS",
                "opNonmutating",
                "opShort1",
                "opShortIntD",
                "opShortIntDS",
                "opShortIntLong",
                "opShortIntLongS",
                "opShortIntLongSS",
                "opShortShortSD",
                "opString",
                "opString1",
                "opStringDoubleSD",
                "opStringFloatSD",
                "opStringLiterals",
                "opStringMyEnumD",
                "opStringMyEnumDS",
                "opStringS",
                "opStringS1",
                "opStringS2",
                "opStringSS",
                "opStringSSS",
                "opStringStringD",
                "opStringStringDS",
                "opStringStringSD",
                "opStruct",
                "opVoid",
                "opWStringLiterals",
                "shutdown",
                "supportsCompress"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return MyClassDisp_.iceD_opBool(this, inS, current);
                    }
                    case 5:
                    {
                        return MyClassDisp_.iceD_opBoolBoolSD(this, inS, current);
                    }
                    case 6:
                    {
                        return MyClassDisp_.iceD_opBoolS(this, inS, current);
                    }
                    case 7:
                    {
                        return MyClassDisp_.iceD_opBoolSS(this, inS, current);
                    }
                    case 8:
                    {
                        return MyClassDisp_.iceD_opByte(this, inS, current);
                    }
                    case 9:
                    {
                        return MyClassDisp_.iceD_opByte1(this, inS, current);
                    }
                    case 10:
                    {
                        return MyClassDisp_.iceD_opByteBoolD(this, inS, current);
                    }
                    case 11:
                    {
                        return MyClassDisp_.iceD_opByteBoolD1(this, inS, current);
                    }
                    case 12:
                    {
                        return MyClassDisp_.iceD_opByteBoolD2(this, inS, current);
                    }
                    case 13:
                    {
                        return MyClassDisp_.iceD_opByteBoolDS(this, inS, current);
                    }
                    case 14:
                    {
                        return MyClassDisp_.iceD_opByteByteSD(this, inS, current);
                    }
                    case 15:
                    {
                        return MyClassDisp_.iceD_opByteS(this, inS, current);
                    }
                    case 16:
                    {
                        return MyClassDisp_.iceD_opByteSOneway(this, inS, current);
                    }
                    case 17:
                    {
                        return MyClassDisp_.iceD_opByteSOnewayCallCount(this, inS, current);
                    }
                    case 18:
                    {
                        return MyClassDisp_.iceD_opByteSS(this, inS, current);
                    }
                    case 19:
                    {
                        return MyClassDisp_.iceD_opContext(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_opDerived(this, inS, current);
                    }
                    case 21:
                    {
                        return MyClassDisp_.iceD_opDouble1(this, inS, current);
                    }
                    case 22:
                    {
                        return MyClassDisp_.iceD_opDoubleMarshaling(this, inS, current);
                    }
                    case 23:
                    {
                        return MyClassDisp_.iceD_opFloat1(this, inS, current);
                    }
                    case 24:
                    {
                        return MyClassDisp_.iceD_opFloatDouble(this, inS, current);
                    }
                    case 25:
                    {
                        return MyClassDisp_.iceD_opFloatDoubleS(this, inS, current);
                    }
                    case 26:
                    {
                        return MyClassDisp_.iceD_opFloatDoubleSS(this, inS, current);
                    }
                    case 27:
                    {
                        return MyClassDisp_.iceD_opIdempotent(this, inS, current);
                    }
                    case 28:
                    {
                        return MyClassDisp_.iceD_opInt1(this, inS, current);
                    }
                    case 29:
                    {
                        return MyClassDisp_.iceD_opIntIntSD(this, inS, current);
                    }
                    case 30:
                    {
                        return MyClassDisp_.iceD_opIntS(this, inS, current);
                    }
                    case 31:
                    {
                        return MyClassDisp_.iceD_opLong1(this, inS, current);
                    }
                    case 32:
                    {
                        return MyClassDisp_.iceD_opLongFloatD(this, inS, current);
                    }
                    case 33:
                    {
                        return MyClassDisp_.iceD_opLongFloatDS(this, inS, current);
                    }
                    case 34:
                    {
                        return MyClassDisp_.iceD_opLongLongSD(this, inS, current);
                    }
                    case 35:
                    {
                        return MyClassDisp_.iceD_opMDict1(this, inS, current);
                    }
                    case 36:
                    {
                        return MyClassDisp_.iceD_opMDict2(this, inS, current);
                    }
                    case 37:
                    {
                        return MyClassDisp_.iceD_opMSeq1(this, inS, current);
                    }
                    case 38:
                    {
                        return MyClassDisp_.iceD_opMSeq2(this, inS, current);
                    }
                    case 39:
                    {
                        return MyClassDisp_.iceD_opMStruct1(this, inS, current);
                    }
                    case 40:
                    {
                        return MyClassDisp_.iceD_opMStruct2(this, inS, current);
                    }
                    case 41:
                    {
                        return MyClassDisp_.iceD_opMyClass(this, inS, current);
                    }
                    case 42:
                    {
                        return iceD_opMyClass1(this, inS, current);
                    }
                    case 43:
                    {
                        return MyClassDisp_.iceD_opMyEnum(this, inS, current);
                    }
                    case 44:
                    {
                        return MyClassDisp_.iceD_opMyEnumMyEnumSD(this, inS, current);
                    }
                    case 45:
                    {
                        return MyClassDisp_.iceD_opMyEnumStringD(this, inS, current);
                    }
                    case 46:
                    {
                        return MyClassDisp_.iceD_opMyEnumStringDS(this, inS, current);
                    }
                    case 47:
                    {
                        return iceD_opMyStruct1(this, inS, current);
                    }
                    case 48:
                    {
                        return MyClassDisp_.iceD_opMyStructMyEnumD(this, inS, current);
                    }
                    case 49:
                    {
                        return MyClassDisp_.iceD_opMyStructMyEnumDS(this, inS, current);
                    }
                    case 50:
                    {
                        return MyClassDisp_.iceD_opNonmutating(this, inS, current);
                    }
                    case 51:
                    {
                        return MyClassDisp_.iceD_opShort1(this, inS, current);
                    }
                    case 52:
                    {
                        return MyClassDisp_.iceD_opShortIntD(this, inS, current);
                    }
                    case 53:
                    {
                        return MyClassDisp_.iceD_opShortIntDS(this, inS, current);
                    }
                    case 54:
                    {
                        return MyClassDisp_.iceD_opShortIntLong(this, inS, current);
                    }
                    case 55:
                    {
                        return MyClassDisp_.iceD_opShortIntLongS(this, inS, current);
                    }
                    case 56:
                    {
                        return MyClassDisp_.iceD_opShortIntLongSS(this, inS, current);
                    }
                    case 57:
                    {
                        return MyClassDisp_.iceD_opShortShortSD(this, inS, current);
                    }
                    case 58:
                    {
                        return MyClassDisp_.iceD_opString(this, inS, current);
                    }
                    case 59:
                    {
                        return MyClassDisp_.iceD_opString1(this, inS, current);
                    }
                    case 60:
                    {
                        return MyClassDisp_.iceD_opStringDoubleSD(this, inS, current);
                    }
                    case 61:
                    {
                        return MyClassDisp_.iceD_opStringFloatSD(this, inS, current);
                    }
                    case 62:
                    {
                        return MyClassDisp_.iceD_opStringLiterals(this, inS, current);
                    }
                    case 63:
                    {
                        return MyClassDisp_.iceD_opStringMyEnumD(this, inS, current);
                    }
                    case 64:
                    {
                        return MyClassDisp_.iceD_opStringMyEnumDS(this, inS, current);
                    }
                    case 65:
                    {
                        return MyClassDisp_.iceD_opStringS(this, inS, current);
                    }
                    case 66:
                    {
                        return MyClassDisp_.iceD_opStringS1(this, inS, current);
                    }
                    case 67:
                    {
                        return MyClassDisp_.iceD_opStringS2(this, inS, current);
                    }
                    case 68:
                    {
                        return MyClassDisp_.iceD_opStringSS(this, inS, current);
                    }
                    case 69:
                    {
                        return MyClassDisp_.iceD_opStringSSS(this, inS, current);
                    }
                    case 70:
                    {
                        return MyClassDisp_.iceD_opStringStringD(this, inS, current);
                    }
                    case 71:
                    {
                        return MyClassDisp_.iceD_opStringStringDS(this, inS, current);
                    }
                    case 72:
                    {
                        return MyClassDisp_.iceD_opStringStringSD(this, inS, current);
                    }
                    case 73:
                    {
                        return MyClassDisp_.iceD_opStruct(this, inS, current);
                    }
                    case 74:
                    {
                        return MyClassDisp_.iceD_opVoid(this, inS, current);
                    }
                    case 75:
                    {
                        return MyClassDisp_.iceD_opWStringLiterals(this, inS, current);
                    }
                    case 76:
                    {
                        return MyClassDisp_.iceD_shutdown(this, inS, current);
                    }
                    case 77:
                    {
                        return MyClassDisp_.iceD_supportsCompress(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public class MyDerivedClassTie_ : MyDerivedClassDisp_, global::Ice.TieBase
        {
            public MyDerivedClassTie_()
            {
            }

            public MyDerivedClassTie_(MyDerivedClassOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (MyDerivedClassOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is MyDerivedClassTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((MyDerivedClassTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((MyDerivedClassTie_)rhs)._ice_delegate);
            }

            public override void opDerived(global::Ice.Current current = null)
            {
                _ice_delegate.opDerived(current);
            }

            public override MyClass1 opMyClass1(MyClass1 opMyClass1, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyClass1(opMyClass1, current);
            }

            public override MyStruct1 opMyStruct1(MyStruct1 opMyStruct1, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyStruct1(opMyStruct1, current);
            }

            public override void shutdown(global::Ice.Current current = null)
            {
                _ice_delegate.shutdown(current);
            }

            public override bool supportsCompress(global::Ice.Current current = null)
            {
                return _ice_delegate.supportsCompress(current);
            }

            public override void opVoid(global::Ice.Current current = null)
            {
                _ice_delegate.opVoid(current);
            }

            public override byte opByte(byte p1, byte p2, out byte p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByte(p1, p2, out p3, current);
            }

            public override bool opBool(bool p1, bool p2, out bool p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opBool(p1, p2, out p3, current);
            }

            public override long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortIntLong(p1, p2, p3, out p4, out p5, out p6, current);
            }

            public override double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.Current current = null)
            {
                return _ice_delegate.opFloatDouble(p1, p2, out p3, out p4, current);
            }

            public override string opString(string p1, string p2, out string p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opString(p1, p2, out p3, current);
            }

            public override MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyEnum(p1, out p2, current);
            }

            public override MyClassPrx opMyClass(MyClassPrx p1, out MyClassPrx p2, out MyClassPrx p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyClass(p1, out p2, out p3, current);
            }

            public override Structure opStruct(Structure p1, Structure p2, out Structure p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStruct(p1, p2, out p3, current);
            }

            public override byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteS(p1, p2, out p3, current);
            }

            public override bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opBoolS(p1, p2, out p3, current);
            }

            public override long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortIntLongS(p1, p2, p3, out p4, out p5, out p6, current);
            }

            public override double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.Current current = null)
            {
                return _ice_delegate.opFloatDoubleS(p1, p2, out p3, out p4, current);
            }

            public override string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringS(p1, p2, out p3, current);
            }

            public override byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteSS(p1, p2, out p3, current);
            }

            public override bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opBoolSS(p1, p2, out p3, current);
            }

            public override long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortIntLongSS(p1, p2, p3, out p4, out p5, out p6, current);
            }

            public override double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.Current current = null)
            {
                return _ice_delegate.opFloatDoubleSS(p1, p2, out p3, out p4, current);
            }

            public override string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringSS(p1, p2, out p3, current);
            }

            public override string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringSSS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteBoolD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortIntD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opLongFloatD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringStringD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringMyEnumD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyEnumStringD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyStructMyEnumD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteBoolDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortIntDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opLongFloatDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringStringDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringMyEnumDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyEnumStringDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<MyStruct, MyEnum>[] p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyStructMyEnumDS(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteByteSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opBoolBoolSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opShortShortSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opIntIntSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opLongLongSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringFloatSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringDoubleSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringStringSD(p1, p2, out p3, current);
            }

            public override global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::Ice.Current current = null)
            {
                return _ice_delegate.opMyEnumMyEnumSD(p1, p2, out p3, current);
            }

            public override int[] opIntS(int[] s, global::Ice.Current current = null)
            {
                return _ice_delegate.opIntS(s, current);
            }

            public override void opByteSOneway(byte[] s, global::Ice.Current current = null)
            {
                _ice_delegate.opByteSOneway(s, current);
            }

            public override int opByteSOnewayCallCount(global::Ice.Current current = null)
            {
                return _ice_delegate.opByteSOnewayCallCount(current);
            }

            public override global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.Current current = null)
            {
                return _ice_delegate.opContext(current);
            }

            public override void opDoubleMarshaling(double p1, double[] p2, global::Ice.Current current = null)
            {
                _ice_delegate.opDoubleMarshaling(p1, p2, current);
            }

            public override void opIdempotent(global::Ice.Current current = null)
            {
                _ice_delegate.opIdempotent(current);
            }

            public override void opNonmutating(global::Ice.Current current = null)
            {
                _ice_delegate.opNonmutating(current);
            }

            public override byte opByte1(byte opByte1, global::Ice.Current current = null)
            {
                return _ice_delegate.opByte1(opByte1, current);
            }

            public override short opShort1(short opShort1, global::Ice.Current current = null)
            {
                return _ice_delegate.opShort1(opShort1, current);
            }

            public override int opInt1(int opInt1, global::Ice.Current current = null)
            {
                return _ice_delegate.opInt1(opInt1, current);
            }

            public override long opLong1(long opLong1, global::Ice.Current current = null)
            {
                return _ice_delegate.opLong1(opLong1, current);
            }

            public override float opFloat1(float opFloat1, global::Ice.Current current = null)
            {
                return _ice_delegate.opFloat1(opFloat1, current);
            }

            public override double opDouble1(double opDouble1, global::Ice.Current current = null)
            {
                return _ice_delegate.opDouble1(opDouble1, current);
            }

            public override string opString1(string opString1, global::Ice.Current current = null)
            {
                return _ice_delegate.opString1(opString1, current);
            }

            public override string[] opStringS1(string[] opStringS1, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringS1(opStringS1, current);
            }

            public override global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteBoolD1(opByteBoolD1, current);
            }

            public override string[] opStringS2(string[] stringS, global::Ice.Current current = null)
            {
                return _ice_delegate.opStringS2(stringS, current);
            }

            public override global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.Current current = null)
            {
                return _ice_delegate.opByteBoolD2(byteBoolD, current);
            }

            public override string[] opStringLiterals(global::Ice.Current current = null)
            {
                return _ice_delegate.opStringLiterals(current);
            }

            public override string[] opWStringLiterals(global::Ice.Current current = null)
            {
                return _ice_delegate.opWStringLiterals(current);
            }

            public override MyClass_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current current = null)
            {
                return _ice_delegate.opMStruct1(current);
            }

            public override MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, global::Ice.Current current = null)
            {
                return _ice_delegate.opMStruct2(p1, current);
            }

            public override MyClass_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current current = null)
            {
                return _ice_delegate.opMSeq1(current);
            }

            public override MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, global::Ice.Current current = null)
            {
                return _ice_delegate.opMSeq2(p1, current);
            }

            public override MyClass_OpMDict1MarshaledResult opMDict1(global::Ice.Current current = null)
            {
                return _ice_delegate.opMDict1(current);
            }

            public override MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.Current current = null)
            {
                return _ice_delegate.opMDict2(p1, current);
            }

            private MyDerivedClassOperations_ _ice_delegate;
        }
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyDerivedClassDisp_ : global::Ice.ObjectImpl, MyDerivedClass
    {
        #region Inherited Slice operations

        public abstract void shutdown(global::Ice.Current current = null);

        public abstract bool supportsCompress(global::Ice.Current current = null);

        public abstract void opVoid(global::Ice.Current current = null);

        public abstract byte opByte(byte p1, byte p2, out byte p3, global::Ice.Current current = null);

        public abstract bool opBool(bool p1, bool p2, out bool p3, global::Ice.Current current = null);

        public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::Ice.Current current = null);

        public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, global::Ice.Current current = null);

        public abstract string opString(string p1, string p2, out string p3, global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyEnum opMyEnum(global::Ice.operations.Test.MyEnum p1, out global::Ice.operations.Test.MyEnum p2, global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClassPrx opMyClass(global::Ice.operations.Test.MyClassPrx p1, out global::Ice.operations.Test.MyClassPrx p2, out global::Ice.operations.Test.MyClassPrx p3, global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.Structure opStruct(global::Ice.operations.Test.Structure p1, global::Ice.operations.Test.Structure p2, out global::Ice.operations.Test.Structure p3, global::Ice.Current current = null);

        public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::Ice.Current current = null);

        public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::Ice.Current current = null);

        public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::Ice.Current current = null);

        public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::Ice.Current current = null);

        public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::Ice.Current current = null);

        public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::Ice.Current current = null);

        public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::Ice.Current current = null);

        public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::Ice.Current current = null);

        public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::Ice.Current current = null);

        public abstract string[][][] opStringSSS(string[][][] p1, string[][][] p2, out string[][][] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> opMyStructMyEnumD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, global::Ice.operations.Test.MyEnum>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, string>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] opMyStructMyEnumDS(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyStruct, global::Ice.operations.Test.MyEnum>[] p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<global::Ice.operations.Test.MyEnum, global::Ice.operations.Test.MyEnum[]> p3, global::Ice.Current current = null);

        public abstract int[] opIntS(int[] s, global::Ice.Current current = null);

        public abstract void opByteSOneway(byte[] s, global::Ice.Current current = null);

        public abstract int opByteSOnewayCallCount(global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(global::Ice.Current current = null);

        public abstract void opDoubleMarshaling(double p1, double[] p2, global::Ice.Current current = null);

        public abstract void opIdempotent(global::Ice.Current current = null);

        public abstract void opNonmutating(global::Ice.Current current = null);

        public abstract byte opByte1(byte opByte1, global::Ice.Current current = null);

        public abstract short opShort1(short opShort1, global::Ice.Current current = null);

        public abstract int opInt1(int opInt1, global::Ice.Current current = null);

        public abstract long opLong1(long opLong1, global::Ice.Current current = null);

        public abstract float opFloat1(float opFloat1, global::Ice.Current current = null);

        public abstract double opDouble1(double opDouble1, global::Ice.Current current = null);

        public abstract string opString1(string opString1, global::Ice.Current current = null);

        public abstract string[] opStringS1(string[] opStringS1, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::Ice.Current current = null);

        public abstract string[] opStringS2(string[] stringS, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::Ice.Current current = null);

        public abstract string[] opStringLiterals(global::Ice.Current current = null);

        public abstract string[] opWStringLiterals(global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMStruct2MarshaledResult opMStruct2(global::Ice.operations.Test.Structure p1, global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMDict1MarshaledResult opMDict1(global::Ice.Current current = null);

        public abstract global::Ice.operations.Test.MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, global::Ice.Current current = null);

        public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test2::MyDerivedClass",
            "::Test::MyClass"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test2::MyDerivedClass";
        }

        #endregion

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBool",
            "opBoolBoolSD",
            "opBoolS",
            "opBoolSS",
            "opByte",
            "opByte1",
            "opByteBoolD",
            "opByteBoolD1",
            "opByteBoolD2",
            "opByteBoolDS",
            "opByteByteSD",
            "opByteS",
            "opByteSOneway",
            "opByteSOnewayCallCount",
            "opByteSS",
            "opContext",
            "opDouble1",
            "opDoubleMarshaling",
            "opFloat1",
            "opFloatDouble",
            "opFloatDoubleS",
            "opFloatDoubleSS",
            "opIdempotent",
            "opInt1",
            "opIntIntSD",
            "opIntS",
            "opLong1",
            "opLongFloatD",
            "opLongFloatDS",
            "opLongLongSD",
            "opMDict1",
            "opMDict2",
            "opMSeq1",
            "opMSeq2",
            "opMStruct1",
            "opMStruct2",
            "opMyClass",
            "opMyEnum",
            "opMyEnumMyEnumSD",
            "opMyEnumStringD",
            "opMyEnumStringDS",
            "opMyStructMyEnumD",
            "opMyStructMyEnumDS",
            "opNonmutating",
            "opShort1",
            "opShortIntD",
            "opShortIntDS",
            "opShortIntLong",
            "opShortIntLongS",
            "opShortIntLongSS",
            "opShortShortSD",
            "opString",
            "opString1",
            "opStringDoubleSD",
            "opStringFloatSD",
            "opStringLiterals",
            "opStringMyEnumD",
            "opStringMyEnumDS",
            "opStringS",
            "opStringS1",
            "opStringS2",
            "opStringSS",
            "opStringSSS",
            "opStringStringD",
            "opStringStringDS",
            "opStringStringSD",
            "opStruct",
            "opVoid",
            "opWStringLiterals",
            "shutdown",
            "supportsCompress"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opBool(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opBoolBoolSD(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opBoolS(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opBoolSS(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByte(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByte1(this, inS, current);
                }
                case 10:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteBoolD(this, inS, current);
                }
                case 11:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteBoolD1(this, inS, current);
                }
                case 12:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteBoolD2(this, inS, current);
                }
                case 13:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteBoolDS(this, inS, current);
                }
                case 14:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteByteSD(this, inS, current);
                }
                case 15:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteS(this, inS, current);
                }
                case 16:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteSOneway(this, inS, current);
                }
                case 17:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteSOnewayCallCount(this, inS, current);
                }
                case 18:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opByteSS(this, inS, current);
                }
                case 19:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opContext(this, inS, current);
                }
                case 20:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opDouble1(this, inS, current);
                }
                case 21:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opDoubleMarshaling(this, inS, current);
                }
                case 22:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opFloat1(this, inS, current);
                }
                case 23:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opFloatDouble(this, inS, current);
                }
                case 24:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opFloatDoubleS(this, inS, current);
                }
                case 25:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opFloatDoubleSS(this, inS, current);
                }
                case 26:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opIdempotent(this, inS, current);
                }
                case 27:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opInt1(this, inS, current);
                }
                case 28:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opIntIntSD(this, inS, current);
                }
                case 29:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opIntS(this, inS, current);
                }
                case 30:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opLong1(this, inS, current);
                }
                case 31:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opLongFloatD(this, inS, current);
                }
                case 32:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opLongFloatDS(this, inS, current);
                }
                case 33:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opLongLongSD(this, inS, current);
                }
                case 34:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMDict1(this, inS, current);
                }
                case 35:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMDict2(this, inS, current);
                }
                case 36:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMSeq1(this, inS, current);
                }
                case 37:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMSeq2(this, inS, current);
                }
                case 38:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMStruct1(this, inS, current);
                }
                case 39:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMStruct2(this, inS, current);
                }
                case 40:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyClass(this, inS, current);
                }
                case 41:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyEnum(this, inS, current);
                }
                case 42:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyEnumMyEnumSD(this, inS, current);
                }
                case 43:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyEnumStringD(this, inS, current);
                }
                case 44:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyEnumStringDS(this, inS, current);
                }
                case 45:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyStructMyEnumD(this, inS, current);
                }
                case 46:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opMyStructMyEnumDS(this, inS, current);
                }
                case 47:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opNonmutating(this, inS, current);
                }
                case 48:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShort1(this, inS, current);
                }
                case 49:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortIntD(this, inS, current);
                }
                case 50:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortIntDS(this, inS, current);
                }
                case 51:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortIntLong(this, inS, current);
                }
                case 52:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortIntLongS(this, inS, current);
                }
                case 53:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortIntLongSS(this, inS, current);
                }
                case 54:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opShortShortSD(this, inS, current);
                }
                case 55:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opString(this, inS, current);
                }
                case 56:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opString1(this, inS, current);
                }
                case 57:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringDoubleSD(this, inS, current);
                }
                case 58:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringFloatSD(this, inS, current);
                }
                case 59:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringLiterals(this, inS, current);
                }
                case 60:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringMyEnumD(this, inS, current);
                }
                case 61:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringMyEnumDS(this, inS, current);
                }
                case 62:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringS(this, inS, current);
                }
                case 63:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringS1(this, inS, current);
                }
                case 64:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringS2(this, inS, current);
                }
                case 65:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringSS(this, inS, current);
                }
                case 66:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringSSS(this, inS, current);
                }
                case 67:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringStringD(this, inS, current);
                }
                case 68:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringStringDS(this, inS, current);
                }
                case 69:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStringStringSD(this, inS, current);
                }
                case 70:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opStruct(this, inS, current);
                }
                case 71:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opVoid(this, inS, current);
                }
                case 72:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_opWStringLiterals(this, inS, current);
                }
                case 73:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_shutdown(this, inS, current);
                }
                case 74:
                {
                    return global::Ice.operations.Test.MyClassDisp_.iceD_supportsCompress(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }
    }
}
