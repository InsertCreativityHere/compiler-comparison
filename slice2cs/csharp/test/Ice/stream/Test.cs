//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.stream
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum MyEnum
        {
            enum1,
            enum2,
            enum3
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum v)
            {
                ostr.writeEnum((int)v, 2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static MyEnum read(global::Ice.InputStream istr)
            {
                MyEnum v;
                v = (MyEnum)istr.readEnum(2);
                return v;
            }
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class SmallStruct : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool bo;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public byte by;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public short sh;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int i;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public long l;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public float f;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public double d;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string str;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyEnum e;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyInterfacePrx p;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SmallStruct()
            {
                this.str = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SmallStruct(bool bo, byte by, short sh, int i, long l, float f, double d, string str, MyEnum e, MyInterfacePrx p)
            {
                this.bo = bo;
                this.by = by;
                this.sh = sh;
                this.i = i;
                this.l = l;
                this.f = f;
                this.d = d;
                this.str = str;
                this.e = e;
                this.p = p;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::SmallStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, bo);
                global::IceInternal.HashUtil.hashAdd(ref h_, by);
                global::IceInternal.HashUtil.hashAdd(ref h_, sh);
                global::IceInternal.HashUtil.hashAdd(ref h_, i);
                global::IceInternal.HashUtil.hashAdd(ref h_, l);
                global::IceInternal.HashUtil.hashAdd(ref h_, f);
                global::IceInternal.HashUtil.hashAdd(ref h_, d);
                global::IceInternal.HashUtil.hashAdd(ref h_, str);
                global::IceInternal.HashUtil.hashAdd(ref h_, e);
                global::IceInternal.HashUtil.hashAdd(ref h_, p);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                SmallStruct o = (SmallStruct)other;
                if(!this.bo.Equals(o.bo))
                {
                    return false;
                }
                if(!this.by.Equals(o.by))
                {
                    return false;
                }
                if(!this.sh.Equals(o.sh))
                {
                    return false;
                }
                if(!this.i.Equals(o.i))
                {
                    return false;
                }
                if(!this.l.Equals(o.l))
                {
                    return false;
                }
                if(!this.f.Equals(o.f))
                {
                    return false;
                }
                if(!this.d.Equals(o.d))
                {
                    return false;
                }
                if(this.str == null)
                {
                    if(o.str != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.str.Equals(o.str))
                    {
                        return false;
                    }
                }
                if(!this.e.Equals(o.e))
                {
                    return false;
                }
                if(this.p == null)
                {
                    if(o.p != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.p.Equals(o.p))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(SmallStruct lhs, SmallStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(SmallStruct lhs, SmallStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeBool(this.bo);
                ostr.writeByte(this.by);
                ostr.writeShort(this.sh);
                ostr.writeInt(this.i);
                ostr.writeLong(this.l);
                ostr.writeFloat(this.f);
                ostr.writeDouble(this.d);
                ostr.writeString(this.str);
                ostr.writeEnum((int)this.e, 2);
                MyInterfacePrxHelper.write(ostr, this.p);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.bo = istr.readBool();
                this.by = istr.readByte();
                this.sh = istr.readShort();
                this.i = istr.readInt();
                this.l = istr.readLong();
                this.f = istr.readFloat();
                this.d = istr.readDouble();
                this.str = istr.readString();
                this.e = (MyEnum)istr.readEnum(2);
                this.p = MyInterfacePrxHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, SmallStruct v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static SmallStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new SmallStruct();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly SmallStruct _nullMarshalValue = new SmallStruct();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class OptionalClass : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool bo;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public byte by;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<short> sh;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> i;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalClass()
            {
                this.sh = new global::Ice.Optional<short>();
                this.i = new global::Ice.Optional<int>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalClass(bool bo, byte by, global::Ice.Optional<short> sh, global::Ice.Optional<int> i)
            {
                this.bo = bo;
                this.by = by;
                this.sh = sh;
                this.i = i;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::OptionalClass";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeBool(bo);
                ostr_.writeByte(by);
                ostr_.writeShort(1, sh);
                ostr_.writeInt(2, i);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                bo = istr_.readBool();
                by = istr_.readByte();
                sh = istr_.readShort(1);
                i = istr_.readInt(2);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class MyClass : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass c;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Value o;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SmallStruct s;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool[] seq1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public byte[] seq2;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public short[] seq3;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int[] seq4;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public long[] seq5;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public float[] seq6;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public double[] seq7;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string[] seq8;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyEnum[] seq9;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass[] seq10;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::System.Collections.Generic.Dictionary<string, MyClass> d;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass()
            {
                this.s = new SmallStruct();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass(MyClass c, global::Ice.Value o, SmallStruct s, bool[] seq1, byte[] seq2, short[] seq3, int[] seq4, long[] seq5, float[] seq6, double[] seq7, string[] seq8, MyEnum[] seq9, MyClass[] seq10, global::System.Collections.Generic.Dictionary<string, MyClass> d)
            {
                this.c = c;
                this.o = o;
                this.s = s;
                this.seq1 = seq1;
                this.seq2 = seq2;
                this.seq3 = seq3;
                this.seq4 = seq4;
                this.seq5 = seq5;
                this.seq6 = seq6;
                this.seq7 = seq7;
                this.seq8 = seq8;
                this.seq9 = seq9;
                this.seq10 = seq10;
                this.d = d;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::MyClass";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(c);
                ostr_.writeValue(o);
                SmallStruct.ice_write(ostr_, s);
                global::Ice.BoolSeqHelper.write(ostr_, seq1);
                global::Ice.ByteSeqHelper.write(ostr_, seq2);
                global::Ice.ShortSeqHelper.write(ostr_, seq3);
                global::Ice.IntSeqHelper.write(ostr_, seq4);
                global::Ice.LongSeqHelper.write(ostr_, seq5);
                global::Ice.FloatSeqHelper.write(ostr_, seq6);
                global::Ice.DoubleSeqHelper.write(ostr_, seq7);
                global::Ice.StringSeqHelper.write(ostr_, seq8);
                MyEnumSHelper.write(ostr_, seq9);
                MyClassSHelper.write(ostr_, seq10);
                StringMyClassDHelper.write(ostr_, d);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((MyClass v) => { this.c = v; });
                istr_.readValue((global::Ice.Value v) => { this.o = v; });
                s = SmallStruct.ice_read(istr_);
                seq1 = global::Ice.BoolSeqHelper.read(istr_);
                seq2 = global::Ice.ByteSeqHelper.read(istr_);
                seq3 = global::Ice.ShortSeqHelper.read(istr_);
                seq4 = global::Ice.IntSeqHelper.read(istr_);
                seq5 = global::Ice.LongSeqHelper.read(istr_);
                seq6 = global::Ice.FloatSeqHelper.read(istr_);
                seq7 = global::Ice.DoubleSeqHelper.read(istr_);
                seq8 = global::Ice.StringSeqHelper.read(istr_);
                seq9 = MyEnumSHelper.read(istr_);
                seq10 = MyClassSHelper.read(istr_);
                d = StringMyClassDHelper.read(istr_);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class MyException : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyClass c;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyException()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyException(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(MyClass c)
            {
                this.c = c;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyException(MyClass c)
            {
                _initDM(c);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MyException(MyClass c, global::System.Exception ex) : base(ex)
            {
                _initDM(c);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::MyException";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::MyException", -1, true);
                ostr_.writeValue(c);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((MyClass v) => { this.c = v; });
                istr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool iceUsesClasses()
            {
                return true;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface MyInterface : global::Ice.Object, MyInterfaceOperations_
        {
        }
    }
}

namespace Ice.stream.TypeId.Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class OptionalClass
    {
        public abstract global::Ice.stream.Test.OptionalClass targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyClass
    {
        public abstract global::Ice.stream.Test.MyClass targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyException
    {
        public abstract global::Ice.stream.Test.MyException targetClass { get; }
    }
}

namespace Ice.stream
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyInterfacePrx : global::Ice.ObjectPrx
        {
        }
    }
}

namespace Ice.stream
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyInterfaceOperations_
        {
        }
    }
}

namespace Ice.stream
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static MyEnum[] read(global::Ice.InputStream istr)
            {
                MyEnum[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyEnum[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = (MyEnum)istr.readEnum(2);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyClass[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static MyClass[] read(global::Ice.InputStream istr)
            {
                MyClass[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyClass[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::IceInternal.Patcher.arrayReadValue<MyClass>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, bool[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.BoolSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static bool[][] read(global::Ice.InputStream istr)
            {
                bool[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new bool[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.BoolSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.ByteSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static byte[][] read(global::Ice.InputStream istr)
            {
                byte[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new byte[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.ByteSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, short[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.ShortSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static short[][] read(global::Ice.InputStream istr)
            {
                short[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new short[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.ShortSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, int[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.IntSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static int[][] read(global::Ice.InputStream istr)
            {
                int[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new int[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.IntSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, long[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.LongSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static long[][] read(global::Ice.InputStream istr)
            {
                long[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new long[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.LongSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, float[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.FloatSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static float[][] read(global::Ice.InputStream istr)
            {
                float[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new float[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.FloatSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, double[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.DoubleSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static double[][] read(global::Ice.InputStream istr)
            {
                double[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new double[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.DoubleSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ice.StringSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static string[][] read(global::Ice.InputStream istr)
            {
                string[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new string[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ice.StringSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyEnumSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyEnum[][] read(global::Ice.InputStream istr)
            {
                MyEnum[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyEnum[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyEnumSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyClass[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyClassSHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyClass[][] read(global::Ice.InputStream istr)
            {
                MyClass[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyClass[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyClassSHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteBoolDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<byte, bool> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<byte, bool> e in v)
                    {
                        ostr.writeByte(e.Key);
                        ostr.writeBool(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<byte, bool> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<byte, bool> r = new global::System.Collections.Generic.Dictionary<byte, bool>();
                for(int i = 0; i < sz; ++i)
                {
                    byte k;
                    k = istr.readByte();
                    bool v;
                    v = istr.readBool();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortIntDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<short, int> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<short, int> e in v)
                    {
                        ostr.writeShort(e.Key);
                        ostr.writeInt(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<short, int> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<short, int> r = new global::System.Collections.Generic.Dictionary<short, int>();
                for(int i = 0; i < sz; ++i)
                {
                    short k;
                    k = istr.readShort();
                    int v;
                    v = istr.readInt();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongFloatDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<long, float> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<long, float> e in v)
                    {
                        ostr.writeLong(e.Key);
                        ostr.writeFloat(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<long, float> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<long, float> r = new global::System.Collections.Generic.Dictionary<long, float>();
                for(int i = 0; i < sz; ++i)
                {
                    long k;
                    k = istr.readLong();
                    float v;
                    v = istr.readFloat();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringStringDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, string> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeString(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string v;
                    v = istr.readString();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringMyClassDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, MyClass> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, MyClass> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, MyClass> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, MyClass> r = new global::System.Collections.Generic.Dictionary<string, MyClass>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    istr.readValue((MyClass v) => { r[k] = v; });
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<bool> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<byte> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<MyEnum> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static global::System.Collections.Generic.List<MyEnum> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<MyEnum> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<MyEnum>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add((MyEnum)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<SmallStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new SmallStruct() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<SmallStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<SmallStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(32);
                    v = new global::System.Collections.Generic.List<SmallStruct>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SmallStruct val = new SmallStruct();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<MyClass> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<MyClass> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<MyClass> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<MyClass>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::IceInternal.Patcher.listReadValue<MyClass>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyInterfaceProxyListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<MyInterfacePrx> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        MyInterfacePrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<MyInterfacePrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<MyInterfacePrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.List<MyInterfacePrx>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(MyInterfacePrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortLinkedListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<short> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntLinkedListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<int> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumLinkedListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<MyEnum> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<MyEnum> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<MyEnum> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<MyEnum> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.LinkedList<MyEnum>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.AddLast((MyEnum)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructLinkedListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<SmallStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SmallStruct> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SmallStruct() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<SmallStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<SmallStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(32);
                    v = new global::System.Collections.Generic.LinkedList<SmallStruct>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SmallStruct val = new SmallStruct();
                        val.ice_readMembers(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<long> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<float> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<SmallStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    SmallStruct[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        (v_tmp[ix] == null ? new SmallStruct() : v_tmp[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<SmallStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<SmallStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(32);
                    SmallStruct[] v_tmp = new SmallStruct[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = new SmallStruct();
                        v_tmp[ix].ice_readMembers(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<SmallStruct>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyInterfaceProxyStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<MyInterfacePrx> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    MyInterfacePrx[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        MyInterfacePrxHelper.write(ostr, v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<MyInterfacePrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<MyInterfacePrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    MyInterfacePrx[] v_tmp = new MyInterfacePrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = MyInterfacePrxHelper.read(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<MyInterfacePrx>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ObjectStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.Value[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Ice.Value[] read(global::Ice.InputStream istr)
            {
                global::Ice.Value[] v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new global::Ice.Value[v_lenx];
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<global::Ice.Value>(v, ix));
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyClass[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static MyClass[] read(global::Ice.InputStream istr)
            {
                MyClass[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyClass[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::IceInternal.Patcher.arrayReadValue<MyClass>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleQueueHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<double> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringQueueHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<string> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructQueueHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<SmallStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SmallStruct> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SmallStruct() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<SmallStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<SmallStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(32);
                    v = new global::System.Collections.Generic.Queue<SmallStruct>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SmallStruct val = new SmallStruct();
                        val.ice_readMembers(istr);
                        v.Enqueue(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<string[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        global::Ice.StringSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<string[]> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<string[]> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<string[]>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(global::Ice.StringSeqHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSStackHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<string[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    string[][] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        global::Ice.StringSeqHelper.write(ostr, v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<string[]> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<string[]> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    string[][] v_tmp = new string[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = global::Ice.StringSeqHelper.read(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<string[]>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SortedStringStringDHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.SortedDictionary<string, string> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeString(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.SortedDictionary<string, string> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.SortedDictionary<string, string> r = new global::System.Collections.Generic.SortedDictionary<string, string>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string v;
                    v = istr.readString();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, MyInterfacePrx
        {
            public MyInterfacePrxHelper()
            {
            }

            #region Async Task operations

            #endregion

            #region Asynchronous operations

            #endregion

            #region Checked and unchecked cast operations

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if(r == null)
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyInterface"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, MyInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static MyInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    MyInterfacePrxHelper result = new MyInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.stream
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyInterfaceDisp_ : global::Ice.ObjectImpl, MyInterface
        {
            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyInterface"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion
        }
    }
}
