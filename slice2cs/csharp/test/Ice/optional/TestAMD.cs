//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class OneOptional : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> a;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OneOptional()
            {
                this.a = new global::Ice.Optional<int>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OneOptional(global::Ice.Optional<int> a)
            {
                this.a = a;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::OneOptional";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(1, a);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a = istr_.readInt(1);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface MyInterface : global::Ice.Object, MyInterfaceOperations_
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum MyEnum
        {
            MyEnumMember
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum v)
            {
                ostr.writeEnum((int)v, 0);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static MyEnum read(global::Ice.InputStream istr)
            {
                MyEnum v;
                v = (MyEnum)istr.readEnum(0);
                return v;
            }
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial struct SmallStruct
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public byte m;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SmallStruct(byte m)
            {
                this.m = m;
                ice_initialize();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::SmallStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, m);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(!(other is SmallStruct))
                {
                    return false;
                }
                SmallStruct o = (SmallStruct)other;
                if(!this.m.Equals(o.m))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(SmallStruct lhs, SmallStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(SmallStruct lhs, SmallStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeByte(this.m);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.m = istr.readByte();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, SmallStruct v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static SmallStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new SmallStruct();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial struct FixedStruct
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int m;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public FixedStruct(int m)
            {
                this.m = m;
                ice_initialize();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::FixedStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, m);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(!(other is FixedStruct))
                {
                    return false;
                }
                FixedStruct o = (FixedStruct)other;
                if(!this.m.Equals(o.m))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(FixedStruct lhs, FixedStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(FixedStruct lhs, FixedStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.m);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.m = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, FixedStruct v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static FixedStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new FixedStruct();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class VarStruct : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string m;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public VarStruct()
            {
                this.m = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public VarStruct(string m)
            {
                this.m = m;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::VarStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, m);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                VarStruct o = (VarStruct)other;
                if(this.m == null)
                {
                    if(o.m != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.m.Equals(o.m))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(VarStruct lhs, VarStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(VarStruct lhs, VarStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.m);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.m = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, VarStruct v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static VarStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new VarStruct();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly VarStruct _nullMarshalValue = new VarStruct();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class ClassVarStruct : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int a;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public ClassVarStruct()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public ClassVarStruct(int a)
            {
                this.a = a;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::ClassVarStruct");
                global::IceInternal.HashUtil.hashAdd(ref h_, a);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ClassVarStruct o = (ClassVarStruct)other;
                if(!this.a.Equals(o.a))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator==(ClassVarStruct lhs, ClassVarStruct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator!=(ClassVarStruct lhs, ClassVarStruct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.a);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.a = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, ClassVarStruct v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static ClassVarStruct ice_read(global::Ice.InputStream istr)
            {
                var v = new ClassVarStruct();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ClassVarStruct _nullMarshalValue = new ClassVarStruct();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class MultiOptional : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<byte> a;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<bool> b;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<short> c;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> d;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<long> e;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<float> f;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<double> g;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string> h;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<MyEnum> i;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<MyInterfacePrx> j;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<MultiOptional> k;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<byte[]> bs;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string[]> ss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> iid;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> sid;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<FixedStruct> fs;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<VarStruct> vs;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<short[]> shs;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<MyEnum[]> es;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<FixedStruct[]> fss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<VarStruct[]> vss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<OneOptional[]> oos;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<MyInterfacePrx[]> mips;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyEnum>> ied;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, FixedStruct>> ifsd;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, VarStruct>> ivsd;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> iood;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>> imipd;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<bool[]> bos;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MultiOptional()
            {
                this.a = new global::Ice.Optional<byte>();
                this.b = new global::Ice.Optional<bool>();
                this.c = new global::Ice.Optional<short>();
                this.d = new global::Ice.Optional<int>();
                this.e = new global::Ice.Optional<long>();
                this.f = new global::Ice.Optional<float>();
                this.g = new global::Ice.Optional<double>();
                this.h = new global::Ice.Optional<string>();
                this.i = new global::Ice.Optional<MyEnum>();
                this.j = new global::Ice.Optional<MyInterfacePrx>();
                this.k = new global::Ice.Optional<MultiOptional>();
                this.bs = new global::Ice.Optional<byte[]>();
                this.ss = new global::Ice.Optional<string[]>();
                this.iid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>();
                this.sid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                this.fs = new global::Ice.Optional<FixedStruct>();
                this.vs = new global::Ice.Optional<VarStruct>();
                this.shs = new global::Ice.Optional<short[]>();
                this.es = new global::Ice.Optional<MyEnum[]>();
                this.fss = new global::Ice.Optional<FixedStruct[]>();
                this.vss = new global::Ice.Optional<VarStruct[]>();
                this.oos = new global::Ice.Optional<OneOptional[]>();
                this.mips = new global::Ice.Optional<MyInterfacePrx[]>();
                this.ied = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyEnum>>();
                this.ifsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, FixedStruct>>();
                this.ivsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, VarStruct>>();
                this.iood = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>();
                this.imipd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>>();
                this.bos = new global::Ice.Optional<bool[]>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public MultiOptional(global::Ice.Optional<byte> a, global::Ice.Optional<bool> b, global::Ice.Optional<short> c, global::Ice.Optional<int> d, global::Ice.Optional<long> e, global::Ice.Optional<float> f, global::Ice.Optional<double> g, global::Ice.Optional<string> h, global::Ice.Optional<MyEnum> i, global::Ice.Optional<MyInterfacePrx> j, global::Ice.Optional<MultiOptional> k, global::Ice.Optional<byte[]> bs, global::Ice.Optional<string[]> ss, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> iid, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> sid, global::Ice.Optional<FixedStruct> fs, global::Ice.Optional<VarStruct> vs, global::Ice.Optional<short[]> shs, global::Ice.Optional<MyEnum[]> es, global::Ice.Optional<FixedStruct[]> fss, global::Ice.Optional<VarStruct[]> vss, global::Ice.Optional<OneOptional[]> oos, global::Ice.Optional<MyInterfacePrx[]> mips, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyEnum>> ied, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, FixedStruct>> ifsd, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, VarStruct>> ivsd, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> iood, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>> imipd, global::Ice.Optional<bool[]> bos)
            {
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.e = e;
                this.f = f;
                this.g = g;
                this.h = h;
                this.i = i;
                this.j = j;
                this.k = k;
                this.bs = bs;
                this.ss = ss;
                this.iid = iid;
                this.sid = sid;
                this.fs = fs;
                this.vs = vs;
                this.shs = shs;
                this.es = es;
                this.fss = fss;
                this.vss = vss;
                this.oos = oos;
                this.mips = mips;
                this.ied = ied;
                this.ifsd = ifsd;
                this.ivsd = ivsd;
                this.iood = iood;
                this.imipd = imipd;
                this.bos = bos;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::MultiOptional";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeByte(1, a);
                ostr_.writeBool(2, b);
                ostr_.writeShort(3, c);
                ostr_.writeInt(4, d);
                ostr_.writeLong(5, e);
                ostr_.writeFloat(6, f);
                ostr_.writeDouble(7, g);
                ostr_.writeString(8, h);
                if(i.HasValue)
                {
                    ostr_.writeEnum(9, (int)i.Value, 1);
                }
                if(j.HasValue && ostr_.writeOptional(10, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    MyInterfacePrxHelper.write(ostr_, j.Value);
                    ostr_.endSize(pos);
                }
                ostr_.writeValue(11, k);
                ostr_.writeByteSeq(12, bs);
                ostr_.writeStringSeq(13, ss);
                if(iid.HasValue && ostr_.writeOptional(14, global::Ice.OptionalFormat.VSize))
                {
                    ostr_.writeSize(iid.Value == null ? 1 : iid.Value.Count * 8 + (iid.Value.Count > 254 ? 5 : 1));
                    IntIntDictHelper.write(ostr_, iid.Value);
                }
                if(sid.HasValue && ostr_.writeOptional(15, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    StringIntDictHelper.write(ostr_, sid.Value);
                    ostr_.endSize(pos);
                }
                if(fs.HasValue && ostr_.writeOptional(16, global::Ice.OptionalFormat.VSize))
                {
                    ostr_.writeSize(4);
                    fs.Value.ice_writeMembers(ostr_);
                }
                if(vs.HasValue && ostr_.writeOptional(17, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    VarStruct.ice_write(ostr_, vs.Value);
                    ostr_.endSize(pos);
                }
                ostr_.writeShortSeq(18, shs);
                if(es.HasValue && ostr_.writeOptional(19, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    MyEnumSeqHelper.write(ostr_, es.Value);
                    ostr_.endSize(pos);
                }
                if(fss.HasValue && ostr_.writeOptional(20, global::Ice.OptionalFormat.VSize))
                {
                    ostr_.writeSize(fss.Value == null ? 1 : fss.Value.Length * 4 + (fss.Value.Length > 254 ? 5 : 1));
                    FixedStructSeqHelper.write(ostr_, fss.Value);
                }
                if(vss.HasValue && ostr_.writeOptional(21, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    VarStructSeqHelper.write(ostr_, vss.Value);
                    ostr_.endSize(pos);
                }
                if(oos.HasValue && ostr_.writeOptional(22, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    OneOptionalSeqHelper.write(ostr_, oos.Value);
                    ostr_.endSize(pos);
                }
                if(mips.HasValue && ostr_.writeOptional(23, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    MyInterfacePrxSeqHelper.write(ostr_, mips.Value);
                    ostr_.endSize(pos);
                }
                if(ied.HasValue && ostr_.writeOptional(24, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    IntEnumDictHelper.write(ostr_, ied.Value);
                    ostr_.endSize(pos);
                }
                if(ifsd.HasValue && ostr_.writeOptional(25, global::Ice.OptionalFormat.VSize))
                {
                    ostr_.writeSize(ifsd.Value == null ? 1 : ifsd.Value.Count * 8 + (ifsd.Value.Count > 254 ? 5 : 1));
                    IntFixedStructDictHelper.write(ostr_, ifsd.Value);
                }
                if(ivsd.HasValue && ostr_.writeOptional(26, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    IntVarStructDictHelper.write(ostr_, ivsd.Value);
                    ostr_.endSize(pos);
                }
                if(iood.HasValue && ostr_.writeOptional(27, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    IntOneOptionalDictHelper.write(ostr_, iood.Value);
                    ostr_.endSize(pos);
                }
                if(imipd.HasValue && ostr_.writeOptional(28, global::Ice.OptionalFormat.FSize))
                {
                    int pos = ostr_.startSize();
                    IntMyInterfacePrxDictHelper.write(ostr_, imipd.Value);
                    ostr_.endSize(pos);
                }
                ostr_.writeBoolSeq(29, bos);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a = istr_.readByte(1);
                b = istr_.readBool(2);
                c = istr_.readShort(3);
                d = istr_.readInt(4);
                e = istr_.readLong(5);
                f = istr_.readFloat(6);
                g = istr_.readDouble(7);
                h = istr_.readString(8);
                if(istr_.readOptional(9, global::Ice.OptionalFormat.Size))
                {
                    MyEnum tmpVal;
                    tmpVal = (MyEnum)istr_.readEnum(0);
                    i = new global::Ice.Optional<MyEnum>(tmpVal);
                }
                else
                {
                    i = new global::Ice.Optional<MyEnum>();
                }
                if(istr_.readOptional(10, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    MyInterfacePrx tmpVal;
                    tmpVal = MyInterfacePrxHelper.read(istr_);
                    j = new global::Ice.Optional<MyInterfacePrx>(tmpVal);
                }
                else
                {
                    j = new global::Ice.Optional<MyInterfacePrx>();
                }
                istr_.readValue(11, (MultiOptional v) => { this.k = v; });
                if(istr_.readOptional(12, global::Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal;
                    tmpVal = ByteSeqHelper.read(istr_);
                    bs = new global::Ice.Optional<byte[]>(tmpVal);
                }
                else
                {
                    bs = new global::Ice.Optional<byte[]>();
                }
                if(istr_.readOptional(13, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    string[] tmpVal;
                    tmpVal = StringSeqHelper.read(istr_);
                    ss = new global::Ice.Optional<string[]>(tmpVal);
                }
                else
                {
                    ss = new global::Ice.Optional<string[]>();
                }
                if(istr_.readOptional(14, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                    tmpVal = IntIntDictHelper.read(istr_);
                    iid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>(tmpVal);
                }
                else
                {
                    iid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>();
                }
                if(istr_.readOptional(15, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                    tmpVal = StringIntDictHelper.read(istr_);
                    sid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                }
                else
                {
                    sid = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                }
                if(istr_.readOptional(16, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    FixedStruct tmpVal = new FixedStruct();
                    tmpVal.ice_readMembers(istr_);
                    fs = new global::Ice.Optional<FixedStruct>(tmpVal);
                }
                else
                {
                    fs = new global::Ice.Optional<FixedStruct>();
                }
                if(istr_.readOptional(17, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    VarStruct tmpVal = null;
                    tmpVal = VarStruct.ice_read(istr_);
                    vs = new global::Ice.Optional<VarStruct>(tmpVal);
                }
                else
                {
                    vs = new global::Ice.Optional<VarStruct>();
                }
                if(istr_.readOptional(18, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    short[] tmpVal;
                    tmpVal = ShortSeqHelper.read(istr_);
                    shs = new global::Ice.Optional<short[]>(tmpVal);
                }
                else
                {
                    shs = new global::Ice.Optional<short[]>();
                }
                if(istr_.readOptional(19, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    MyEnum[] tmpVal;
                    tmpVal = MyEnumSeqHelper.read(istr_);
                    es = new global::Ice.Optional<MyEnum[]>(tmpVal);
                }
                else
                {
                    es = new global::Ice.Optional<MyEnum[]>();
                }
                if(istr_.readOptional(20, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    FixedStruct[] tmpVal;
                    tmpVal = FixedStructSeqHelper.read(istr_);
                    fss = new global::Ice.Optional<FixedStruct[]>(tmpVal);
                }
                else
                {
                    fss = new global::Ice.Optional<FixedStruct[]>();
                }
                if(istr_.readOptional(21, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    VarStruct[] tmpVal;
                    tmpVal = VarStructSeqHelper.read(istr_);
                    vss = new global::Ice.Optional<VarStruct[]>(tmpVal);
                }
                else
                {
                    vss = new global::Ice.Optional<VarStruct[]>();
                }
                if(istr_.readOptional(22, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    OneOptional[] tmpVal;
                    tmpVal = OneOptionalSeqHelper.read(istr_);
                    oos = new global::Ice.Optional<OneOptional[]>(tmpVal);
                }
                else
                {
                    oos = new global::Ice.Optional<OneOptional[]>();
                }
                if(istr_.readOptional(23, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    MyInterfacePrx[] tmpVal;
                    tmpVal = MyInterfacePrxSeqHelper.read(istr_);
                    mips = new global::Ice.Optional<MyInterfacePrx[]>(tmpVal);
                }
                else
                {
                    mips = new global::Ice.Optional<MyInterfacePrx[]>();
                }
                if(istr_.readOptional(24, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    global::System.Collections.Generic.Dictionary<int, MyEnum> tmpVal = new global::System.Collections.Generic.Dictionary<int, MyEnum>();
                    tmpVal = IntEnumDictHelper.read(istr_);
                    ied = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyEnum>>(tmpVal);
                }
                else
                {
                    ied = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyEnum>>();
                }
                if(istr_.readOptional(25, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    global::System.Collections.Generic.Dictionary<int, FixedStruct> tmpVal = new global::System.Collections.Generic.Dictionary<int, FixedStruct>();
                    tmpVal = IntFixedStructDictHelper.read(istr_);
                    ifsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, FixedStruct>>(tmpVal);
                }
                else
                {
                    ifsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, FixedStruct>>();
                }
                if(istr_.readOptional(26, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    global::System.Collections.Generic.Dictionary<int, VarStruct> tmpVal = new global::System.Collections.Generic.Dictionary<int, VarStruct>();
                    tmpVal = IntVarStructDictHelper.read(istr_);
                    ivsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, VarStruct>>(tmpVal);
                }
                else
                {
                    ivsd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, VarStruct>>();
                }
                if(istr_.readOptional(27, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    global::System.Collections.Generic.Dictionary<int, OneOptional> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional>();
                    tmpVal = IntOneOptionalDictHelper.read(istr_);
                    iood = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>(tmpVal);
                }
                else
                {
                    iood = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>();
                }
                if(istr_.readOptional(28, global::Ice.OptionalFormat.FSize))
                {
                    istr_.skip(4);
                    global::System.Collections.Generic.Dictionary<int, MyInterfacePrx> tmpVal = new global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>();
                    tmpVal = IntMyInterfacePrxDictHelper.read(istr_);
                    imipd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>>(tmpVal);
                }
                else
                {
                    imipd = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>>();
                }
                if(istr_.readOptional(29, global::Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal;
                    tmpVal = BoolSeqHelper.read(istr_);
                    bos = new global::Ice.Optional<bool[]>(tmpVal);
                }
                else
                {
                    bos = new global::Ice.Optional<bool[]>();
                }
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class A : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int requiredA;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> ma;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> mb;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> mc;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A()
            {
                this.ma = new global::Ice.Optional<int>();
                this.mb = new global::Ice.Optional<int>();
                this.mc = new global::Ice.Optional<int>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A(int requiredA, global::Ice.Optional<int> ma, global::Ice.Optional<int> mb, global::Ice.Optional<int> mc)
            {
                this.requiredA = requiredA;
                this.ma = ma;
                this.mb = mb;
                this.mc = mc;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::A";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(requiredA);
                ostr_.writeInt(1, ma);
                ostr_.writeInt(50, mb);
                ostr_.writeInt(500, mc);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                requiredA = istr_.readInt();
                ma = istr_.readInt(1);
                mb = istr_.readInt(50);
                mc = istr_.readInt(500);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class B : A
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int requiredB;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> md;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public B() : base()
            {
                this.md = new global::Ice.Optional<int>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public B(int requiredA, global::Ice.Optional<int> ma, global::Ice.Optional<int> mb, global::Ice.Optional<int> mc, int requiredB, global::Ice.Optional<int> md) : base(requiredA, ma, mb, mc)
            {
                this.requiredB = requiredB;
                this.md = md;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::B";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(requiredB);
                ostr_.writeInt(10, md);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                requiredB = istr_.readInt();
                md = istr_.readInt(10);
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class C : B
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string ss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string> ms;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C() : base()
            {
                this.ss = "";
                this.ms = new global::Ice.Optional<string>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C(int requiredA, global::Ice.Optional<int> ma, global::Ice.Optional<int> mb, global::Ice.Optional<int> mc, int requiredB, global::Ice.Optional<int> md, string ss, global::Ice.Optional<string> ms) : base(requiredA, ma, mb, mc, requiredB, md)
            {
                this.ss = ss;
                this.ms = ms;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::C";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeString(ss);
                ostr_.writeString(890, ms);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                ss = istr_.readString();
                ms = istr_.readString(890);
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class WD : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> a;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string> s;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public WD()
            {
                this.a = 5;
                this.s = "test";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public WD(global::Ice.Optional<int> a, global::Ice.Optional<string> s)
            {
                this.a = a;
                this.s = s;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::WD";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(1, a);
                ostr_.writeString(2, s);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a = istr_.readInt(1);
                s = istr_.readString(2);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class OptionalException : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool req;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<int> a;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string> b;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<OneOptional> o;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.req = false;
                this.a = 5;
                this.b = new global::Ice.Optional<string>();
                this.o = new global::Ice.Optional<OneOptional>();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalException()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalException(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o)
            {
                this.req = req;
                this.a = a;
                this.b = b;
                this.o = o;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o)
            {
                _initDM(req, a, b, o);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::System.Exception ex) : base(ex)
            {
                _initDM(req, a, b, o);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::OptionalException";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::OptionalException", -1, true);
                ostr_.writeBool(req);
                ostr_.writeInt(1, a);
                ostr_.writeString(2, b);
                ostr_.writeValue(50, o);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                req = istr_.readBool();
                a = istr_.readInt(1);
                b = istr_.readString(2);
                istr_.readValue(50, (OneOptional v) => { this.o = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class DerivedException : OptionalException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string d1;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<string> ss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<OneOptional> o2;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string d2;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.d1 = "";
                this.ss = "test";
                this.o2 = new global::Ice.Optional<OneOptional>();
                this.d2 = "";
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public DerivedException()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public DerivedException(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(string d1, global::Ice.Optional<string> ss, global::Ice.Optional<OneOptional> o2, string d2)
            {
                this.d1 = d1;
                this.ss = ss;
                this.o2 = o2;
                this.d2 = d2;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public DerivedException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, string d1, global::Ice.Optional<string> ss, global::Ice.Optional<OneOptional> o2, string d2) : base(req, a, b, o)
            {
                _initDM(d1, ss, o2, d2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public DerivedException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, string d1, global::Ice.Optional<string> ss, global::Ice.Optional<OneOptional> o2, string d2, global::System.Exception ex) : base(req, a, b, o, ex)
            {
                _initDM(d1, ss, o2, d2);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::DerivedException";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::DerivedException", -1, false);
                ostr_.writeString(d1);
                ostr_.writeString(d2);
                ostr_.writeString(600, ss);
                ostr_.writeValue(601, o2);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                d1 = istr_.readString();
                d2 = istr_.readString();
                ss = istr_.readString(600);
                istr_.readValue(601, (OneOptional v) => { this.o2 = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class RequiredException : OptionalException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string ss;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OneOptional o2;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.ss = "test";
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public RequiredException()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public RequiredException(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(string ss, OneOptional o2)
            {
                this.ss = ss;
                this.o2 = o2;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public RequiredException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, string ss, OneOptional o2) : base(req, a, b, o)
            {
                _initDM(ss, o2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public RequiredException(bool req, global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, string ss, OneOptional o2, global::System.Exception ex) : base(req, a, b, o, ex)
            {
                _initDM(ss, o2);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::RequiredException";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::RequiredException", -1, false);
                ostr_.writeString(ss);
                ostr_.writeValue(o2);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                ss = istr_.readString();
                istr_.readValue((OneOptional v) => { this.o2 = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool iceUsesClasses()
            {
                return true;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class OptionalWithCustom : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public virtual global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> l { get; set; }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected virtual global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> lp { get; set; }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public virtual global::Ice.Optional<ClassVarStruct> s { get; set; }

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalWithCustom()
            {
                this.l = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                this.lp = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                this.s = new global::Ice.Optional<ClassVarStruct>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public OptionalWithCustom(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> l, global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> lp, global::Ice.Optional<ClassVarStruct> s)
            {
                this.l = l;
                this.lp = lp;
                this.s = s;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::OptionalWithCustom";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                if(l.HasValue && ostr_.writeOptional(1, global::Ice.OptionalFormat.VSize))
                {
                    SmallStructListHelper.write(ostr_, l.Value);
                }
                if(lp.HasValue && ostr_.writeOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    SmallStructListHelper.write(ostr_, lp.Value);
                }
                if(s.HasValue && ostr_.writeOptional(3, global::Ice.OptionalFormat.VSize))
                {
                    ostr_.writeSize(4);
                    ClassVarStruct.ice_write(ostr_, s.Value);
                }
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                if(istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
                {
                    global::System.Collections.Generic.List<SmallStruct> tmpVal;
                    tmpVal = SmallStructListHelper.read(istr_);
                    l = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>(tmpVal);
                }
                else
                {
                    l = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                }
                if(istr_.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    global::System.Collections.Generic.List<SmallStruct> tmpVal;
                    tmpVal = SmallStructListHelper.read(istr_);
                    lp = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>(tmpVal);
                }
                else
                {
                    lp = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                }
                if(istr_.readOptional(3, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    ClassVarStruct tmpVal = null;
                    tmpVal = ClassVarStruct.ice_read(istr_);
                    s = new global::Ice.Optional<ClassVarStruct>(tmpVal);
                }
                else
                {
                    s = new global::Ice.Optional<ClassVarStruct>();
                }
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class E : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A ae;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public E()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public E(A ae)
            {
                this.ae = ae;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::E";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(ae);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A v) => { this.ae = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class F : E
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<A> af;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public F() : base()
            {
                this.af = new global::Ice.Optional<A>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public F(A ae, global::Ice.Optional<A> af) : base(ae)
            {
                this.af = af;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::F";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeValue(1, af);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue(1, (A v) => { this.af = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class G1 : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string a;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G1()
            {
                this.a = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G1(string a)
            {
                this.a = a;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::G1";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(a);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class G2 : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public long a;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G2()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G2(long a)
            {
                this.a = a;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::G2";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeLong(a);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a = istr_.readLong();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class G : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<G1> gg1Opt;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G2 gg2;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Ice.Optional<G2> gg2Opt;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G1 gg1;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G()
            {
                this.gg1Opt = new global::Ice.Optional<G1>();
                this.gg2Opt = new global::Ice.Optional<G2>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public G(global::Ice.Optional<G1> gg1Opt, G2 gg2, global::Ice.Optional<G2> gg2Opt, G1 gg1)
            {
                this.gg1Opt = gg1Opt;
                this.gg2 = gg2;
                this.gg2Opt = gg2Opt;
                this.gg1 = gg1;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::G";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(gg2);
                ostr_.writeValue(gg1);
                ostr_.writeValue(0, gg2Opt);
                ostr_.writeValue(1, gg1Opt);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((G2 v) => { this.gg2 = v; });
                istr_.readValue((G1 v) => { this.gg1 = v; });
                istr_.readValue(0, (G2 v) => { this.gg2Opt = v; });
                istr_.readValue(1, (G1 v) => { this.gg1Opt = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Initial : global::Ice.Object, InitialOperations_
        {
        }
    }
}

namespace Ice.optional.AMD.TypeId.Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class OneOptional
    {
        public abstract global::Ice.optional.AMD.Test.OneOptional targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MultiOptional
    {
        public abstract global::Ice.optional.AMD.Test.MultiOptional targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class A
    {
        public abstract global::Ice.optional.AMD.Test.A targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class B
    {
        public abstract global::Ice.optional.AMD.Test.B targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class C
    {
        public abstract global::Ice.optional.AMD.Test.C targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class WD
    {
        public abstract global::Ice.optional.AMD.Test.WD targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class OptionalException
    {
        public abstract global::Ice.optional.AMD.Test.OptionalException targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class DerivedException
    {
        public abstract global::Ice.optional.AMD.Test.DerivedException targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RequiredException
    {
        public abstract global::Ice.optional.AMD.Test.RequiredException targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class OptionalWithCustom
    {
        public abstract global::Ice.optional.AMD.Test.OptionalWithCustom targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class E
    {
        public abstract global::Ice.optional.AMD.Test.E targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class F
    {
        public abstract global::Ice.optional.AMD.Test.F targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class G1
    {
        public abstract global::Ice.optional.AMD.Test.G1 targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class G2
    {
        public abstract global::Ice.optional.AMD.Test.G2 targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class G
    {
        public abstract global::Ice.optional.AMD.Test.G targetClass { get; }
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_MyInterface_op();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_pingPong(global::Ice.Value ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opOptionalException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opDerivedException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opRequiredException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opByte(global::Ice.Optional<byte> ret, global::Ice.Optional<byte> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opBool(global::Ice.Optional<bool> ret, global::Ice.Optional<bool> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opShort(global::Ice.Optional<short> ret, global::Ice.Optional<short> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opInt(global::Ice.Optional<int> ret, global::Ice.Optional<int> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opLong(global::Ice.Optional<long> ret, global::Ice.Optional<long> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opFloat(global::Ice.Optional<float> ret, global::Ice.Optional<float> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opDouble(global::Ice.Optional<double> ret, global::Ice.Optional<double> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opString(global::Ice.Optional<string> ret, global::Ice.Optional<string> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMyEnum(global::Ice.Optional<MyEnum> ret, global::Ice.Optional<MyEnum> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opSmallStruct(global::Ice.Optional<SmallStruct> ret, global::Ice.Optional<SmallStruct> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opFixedStruct(global::Ice.Optional<FixedStruct> ret, global::Ice.Optional<FixedStruct> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opVarStruct(global::Ice.Optional<VarStruct> ret, global::Ice.Optional<VarStruct> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opOneOptional(global::Ice.Optional<OneOptional> ret, global::Ice.Optional<OneOptional> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMyInterfaceProxy(global::Ice.Optional<MyInterfacePrx> ret, global::Ice.Optional<MyInterfacePrx> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opByteSeq(global::Ice.Optional<byte[]> ret, global::Ice.Optional<byte[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opBoolSeq(global::Ice.Optional<bool[]> ret, global::Ice.Optional<bool[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opShortSeq(global::Ice.Optional<short[]> ret, global::Ice.Optional<short[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opIntSeq(global::Ice.Optional<int[]> ret, global::Ice.Optional<int[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opLongSeq(global::Ice.Optional<long[]> ret, global::Ice.Optional<long[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opFloatSeq(global::Ice.Optional<float[]> ret, global::Ice.Optional<float[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opDoubleSeq(global::Ice.Optional<double[]> ret, global::Ice.Optional<double[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opStringSeq(global::Ice.Optional<string[]> ret, global::Ice.Optional<string[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opSmallStructSeq(global::Ice.Optional<SmallStruct[]> ret, global::Ice.Optional<SmallStruct[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opSmallStructList(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> ret, global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opFixedStructSeq(global::Ice.Optional<FixedStruct[]> ret, global::Ice.Optional<FixedStruct[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opFixedStructList(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> ret, global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opVarStructSeq(global::Ice.Optional<VarStruct[]> ret, global::Ice.Optional<VarStruct[]> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opIntIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> ret, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opStringIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opIntOneOptionalDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> ret, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p3);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opClassAndUnknownOptional();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_sendOptionalClass();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_returnOptionalClass(global::Ice.Optional<OneOptional> o);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opG(G ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opVoid();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMStruct1(global::Ice.Optional<SmallStruct> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMStruct2(global::Ice.Optional<SmallStruct> ret, global::Ice.Optional<SmallStruct> p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMSeq1(global::Ice.Optional<string[]> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMSeq2(global::Ice.Optional<string[]> ret, global::Ice.Optional<string[]> p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMDict1(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMDict2(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMG1(global::Ice.Optional<G> ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_opMG2(global::Ice.Optional<G> ret, global::Ice.Optional<G> p2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_supportsRequiredParams(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_supportsJavaSerializable(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public delegate void Callback_Initial_supportsNullOptional(bool ret);
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        public struct Initial_OpByteResult
        {
            public Initial_OpByteResult(global::Ice.Optional<byte> returnValue, global::Ice.Optional<byte> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<byte> returnValue;
            public global::Ice.Optional<byte> p3;
        }

        public struct Initial_OpBoolResult
        {
            public Initial_OpBoolResult(global::Ice.Optional<bool> returnValue, global::Ice.Optional<bool> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<bool> returnValue;
            public global::Ice.Optional<bool> p3;
        }

        public struct Initial_OpShortResult
        {
            public Initial_OpShortResult(global::Ice.Optional<short> returnValue, global::Ice.Optional<short> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<short> returnValue;
            public global::Ice.Optional<short> p3;
        }

        public struct Initial_OpIntResult
        {
            public Initial_OpIntResult(global::Ice.Optional<int> returnValue, global::Ice.Optional<int> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<int> returnValue;
            public global::Ice.Optional<int> p3;
        }

        public struct Initial_OpLongResult
        {
            public Initial_OpLongResult(global::Ice.Optional<long> returnValue, global::Ice.Optional<long> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<long> returnValue;
            public global::Ice.Optional<long> p3;
        }

        public struct Initial_OpFloatResult
        {
            public Initial_OpFloatResult(global::Ice.Optional<float> returnValue, global::Ice.Optional<float> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<float> returnValue;
            public global::Ice.Optional<float> p3;
        }

        public struct Initial_OpDoubleResult
        {
            public Initial_OpDoubleResult(global::Ice.Optional<double> returnValue, global::Ice.Optional<double> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<double> returnValue;
            public global::Ice.Optional<double> p3;
        }

        public struct Initial_OpStringResult
        {
            public Initial_OpStringResult(global::Ice.Optional<string> returnValue, global::Ice.Optional<string> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<string> returnValue;
            public global::Ice.Optional<string> p3;
        }

        public struct Initial_OpMyEnumResult
        {
            public Initial_OpMyEnumResult(global::Ice.Optional<MyEnum> returnValue, global::Ice.Optional<MyEnum> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<MyEnum> returnValue;
            public global::Ice.Optional<MyEnum> p3;
        }

        public struct Initial_OpSmallStructResult
        {
            public Initial_OpSmallStructResult(global::Ice.Optional<SmallStruct> returnValue, global::Ice.Optional<SmallStruct> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<SmallStruct> returnValue;
            public global::Ice.Optional<SmallStruct> p3;
        }

        public struct Initial_OpFixedStructResult
        {
            public Initial_OpFixedStructResult(global::Ice.Optional<FixedStruct> returnValue, global::Ice.Optional<FixedStruct> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<FixedStruct> returnValue;
            public global::Ice.Optional<FixedStruct> p3;
        }

        public struct Initial_OpVarStructResult
        {
            public Initial_OpVarStructResult(global::Ice.Optional<VarStruct> returnValue, global::Ice.Optional<VarStruct> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<VarStruct> returnValue;
            public global::Ice.Optional<VarStruct> p3;
        }

        public struct Initial_OpOneOptionalResult
        {
            public Initial_OpOneOptionalResult(global::Ice.Optional<OneOptional> returnValue, global::Ice.Optional<OneOptional> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<OneOptional> returnValue;
            public global::Ice.Optional<OneOptional> p3;
        }

        public struct Initial_OpMyInterfaceProxyResult
        {
            public Initial_OpMyInterfaceProxyResult(global::Ice.Optional<MyInterfacePrx> returnValue, global::Ice.Optional<MyInterfacePrx> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<MyInterfacePrx> returnValue;
            public global::Ice.Optional<MyInterfacePrx> p3;
        }

        public struct Initial_OpByteSeqResult
        {
            public Initial_OpByteSeqResult(global::Ice.Optional<byte[]> returnValue, global::Ice.Optional<byte[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<byte[]> returnValue;
            public global::Ice.Optional<byte[]> p3;
        }

        public struct Initial_OpBoolSeqResult
        {
            public Initial_OpBoolSeqResult(global::Ice.Optional<bool[]> returnValue, global::Ice.Optional<bool[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<bool[]> returnValue;
            public global::Ice.Optional<bool[]> p3;
        }

        public struct Initial_OpShortSeqResult
        {
            public Initial_OpShortSeqResult(global::Ice.Optional<short[]> returnValue, global::Ice.Optional<short[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<short[]> returnValue;
            public global::Ice.Optional<short[]> p3;
        }

        public struct Initial_OpIntSeqResult
        {
            public Initial_OpIntSeqResult(global::Ice.Optional<int[]> returnValue, global::Ice.Optional<int[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<int[]> returnValue;
            public global::Ice.Optional<int[]> p3;
        }

        public struct Initial_OpLongSeqResult
        {
            public Initial_OpLongSeqResult(global::Ice.Optional<long[]> returnValue, global::Ice.Optional<long[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<long[]> returnValue;
            public global::Ice.Optional<long[]> p3;
        }

        public struct Initial_OpFloatSeqResult
        {
            public Initial_OpFloatSeqResult(global::Ice.Optional<float[]> returnValue, global::Ice.Optional<float[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<float[]> returnValue;
            public global::Ice.Optional<float[]> p3;
        }

        public struct Initial_OpDoubleSeqResult
        {
            public Initial_OpDoubleSeqResult(global::Ice.Optional<double[]> returnValue, global::Ice.Optional<double[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<double[]> returnValue;
            public global::Ice.Optional<double[]> p3;
        }

        public struct Initial_OpStringSeqResult
        {
            public Initial_OpStringSeqResult(global::Ice.Optional<string[]> returnValue, global::Ice.Optional<string[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<string[]> returnValue;
            public global::Ice.Optional<string[]> p3;
        }

        public struct Initial_OpSmallStructSeqResult
        {
            public Initial_OpSmallStructSeqResult(global::Ice.Optional<SmallStruct[]> returnValue, global::Ice.Optional<SmallStruct[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<SmallStruct[]> returnValue;
            public global::Ice.Optional<SmallStruct[]> p3;
        }

        public struct Initial_OpSmallStructListResult
        {
            public Initial_OpSmallStructListResult(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> returnValue, global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p3;
        }

        public struct Initial_OpFixedStructSeqResult
        {
            public Initial_OpFixedStructSeqResult(global::Ice.Optional<FixedStruct[]> returnValue, global::Ice.Optional<FixedStruct[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<FixedStruct[]> returnValue;
            public global::Ice.Optional<FixedStruct[]> p3;
        }

        public struct Initial_OpFixedStructListResult
        {
            public Initial_OpFixedStructListResult(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> returnValue, global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p3;
        }

        public struct Initial_OpVarStructSeqResult
        {
            public Initial_OpVarStructSeqResult(global::Ice.Optional<VarStruct[]> returnValue, global::Ice.Optional<VarStruct[]> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<VarStruct[]> returnValue;
            public global::Ice.Optional<VarStruct[]> p3;
        }

        public struct Initial_OpIntIntDictResult
        {
            public Initial_OpIntIntDictResult(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> returnValue, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p3;
        }

        public struct Initial_OpStringIntDictResult
        {
            public Initial_OpStringIntDictResult(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> returnValue, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p3;
        }

        public struct Initial_OpIntOneOptionalDictResult
        {
            public Initial_OpIntOneOptionalDictResult(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> returnValue, global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p3)
            {
                this.returnValue = returnValue;
                this.p3 = p3;
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p3;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMStruct1MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMStruct1MarshaledResult(global::Ice.Optional<SmallStruct> ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                if(ret.HasValue && _ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                {
                    _ostr.writeSize(1);
                    ret.Value.ice_writeMembers(_ostr);
                }
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMStruct1MarshaledResult(new SmallStruct(), current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct Initial_OpMStruct2Result
        {
            public Initial_OpMStruct2Result(global::Ice.Optional<SmallStruct> returnValue, global::Ice.Optional<SmallStruct> p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public global::Ice.Optional<SmallStruct> returnValue;
            public global::Ice.Optional<SmallStruct> p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMStruct2MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMStruct2MarshaledResult(global::Ice.Optional<SmallStruct> ret, global::Ice.Optional<SmallStruct> p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                if(ret.HasValue && _ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                {
                    _ostr.writeSize(1);
                    ret.Value.ice_writeMembers(_ostr);
                }
                if(p2.HasValue && _ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                {
                    _ostr.writeSize(1);
                    p2.Value.ice_writeMembers(_ostr);
                }
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMStruct2MarshaledResult(new SmallStruct(), new SmallStruct(), current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMSeq1MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMSeq1MarshaledResult(global::Ice.Optional<string[]> ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                _ostr.writeStringSeq(1, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMSeq1MarshaledResult(null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct Initial_OpMSeq2Result
        {
            public Initial_OpMSeq2Result(global::Ice.Optional<string[]> returnValue, global::Ice.Optional<string[]> p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public global::Ice.Optional<string[]> returnValue;
            public global::Ice.Optional<string[]> p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMSeq2MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMSeq2MarshaledResult(global::Ice.Optional<string[]> ret, global::Ice.Optional<string[]> p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                _ostr.writeStringSeq(1, ret);
                _ostr.writeStringSeq(3, p2);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMSeq2MarshaledResult(null, null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMDict1MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMDict1MarshaledResult(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                if(ret.HasValue && _ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                {
                    int pos = _ostr.startSize();
                    StringIntDictHelper.write(_ostr, ret.Value);
                    _ostr.endSize(pos);
                }
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMDict1MarshaledResult(null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct Initial_OpMDict2Result
        {
            public Initial_OpMDict2Result(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> returnValue, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> returnValue;
            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMDict2MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMDict2MarshaledResult(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret, global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                if(ret.HasValue && _ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                {
                    int pos = _ostr.startSize();
                    StringIntDictHelper.write(_ostr, ret.Value);
                    _ostr.endSize(pos);
                }
                if(p2.HasValue && _ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                {
                    int pos = _ostr.startSize();
                    StringIntDictHelper.write(_ostr, p2.Value);
                    _ostr.endSize(pos);
                }
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMDict2MarshaledResult(null, null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMG1MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMG1MarshaledResult(global::Ice.Optional<G> ret, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                _ostr.writeValue(1, ret);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMG1MarshaledResult(null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }

        public struct Initial_OpMG2Result
        {
            public Initial_OpMG2Result(global::Ice.Optional<G> returnValue, global::Ice.Optional<G> p2)
            {
                this.returnValue = returnValue;
                this.p2 = p2;
            }

            public global::Ice.Optional<G> returnValue;
            public global::Ice.Optional<G> p2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public struct Initial_OpMG2MarshaledResult : global::Ice.MarshaledResult
        {
            public Initial_OpMG2MarshaledResult(global::Ice.Optional<G> ret, global::Ice.Optional<G> p2, global::Ice.Current current)
            {
                _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
                _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
                _ostr.writeValue(1, ret);
                _ostr.writeValue(3, p2);
                _ostr.endEncapsulation();
            }

            public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
            {
                if(_ostr == null)
                {
                    return new Initial_OpMG2MarshaledResult(null, null, current).getOutputStream(current);
                }
                return _ostr;
            }

            private global::Ice.OutputStream _ostr;
        }
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyInterfacePrx : global::Ice.ObjectPrx
        {
            void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface InitialPrx : global::Ice.ObjectPrx
        {
            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Value pingPong(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Value> pingPongAsync(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opOptionalException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opOptionalExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opDerivedException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opDerivedExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opRequiredException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opRequiredExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<byte> opByte(global::Ice.Optional<byte> p1, out global::Ice.Optional<byte> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(global::Ice.Optional<byte> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<bool> opBool(global::Ice.Optional<bool> p1, out global::Ice.Optional<bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(global::Ice.Optional<bool> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<short> opShort(global::Ice.Optional<short> p1, out global::Ice.Optional<short> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(global::Ice.Optional<short> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<int> opInt(global::Ice.Optional<int> p1, out global::Ice.Optional<int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(global::Ice.Optional<int> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<long> opLong(global::Ice.Optional<long> p1, out global::Ice.Optional<long> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(global::Ice.Optional<long> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<float> opFloat(global::Ice.Optional<float> p1, out global::Ice.Optional<float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(global::Ice.Optional<float> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<double> opDouble(global::Ice.Optional<double> p1, out global::Ice.Optional<double> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(global::Ice.Optional<double> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<string> opString(global::Ice.Optional<string> p1, out global::Ice.Optional<string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(global::Ice.Optional<string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<MyEnum> opMyEnum(global::Ice.Optional<MyEnum> p1, out global::Ice.Optional<MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(global::Ice.Optional<MyEnum> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<SmallStruct> opSmallStruct(global::Ice.Optional<SmallStruct> p1, out global::Ice.Optional<SmallStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(global::Ice.Optional<SmallStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<FixedStruct> opFixedStruct(global::Ice.Optional<FixedStruct> p1, out global::Ice.Optional<FixedStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(global::Ice.Optional<FixedStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<VarStruct> opVarStruct(global::Ice.Optional<VarStruct> p1, out global::Ice.Optional<VarStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(global::Ice.Optional<VarStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<OneOptional> opOneOptional(global::Ice.Optional<OneOptional> p1, out global::Ice.Optional<OneOptional> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(global::Ice.Optional<OneOptional> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<MyInterfacePrx> opMyInterfaceProxy(global::Ice.Optional<MyInterfacePrx> p1, out global::Ice.Optional<MyInterfacePrx> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(global::Ice.Optional<MyInterfacePrx> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<byte[]> opByteSeq(global::Ice.Optional<byte[]> p1, out global::Ice.Optional<byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(global::Ice.Optional<byte[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<bool[]> opBoolSeq(global::Ice.Optional<bool[]> p1, out global::Ice.Optional<bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(global::Ice.Optional<bool[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<short[]> opShortSeq(global::Ice.Optional<short[]> p1, out global::Ice.Optional<short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(global::Ice.Optional<short[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<int[]> opIntSeq(global::Ice.Optional<int[]> p1, out global::Ice.Optional<int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(global::Ice.Optional<int[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<long[]> opLongSeq(global::Ice.Optional<long[]> p1, out global::Ice.Optional<long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(global::Ice.Optional<long[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<float[]> opFloatSeq(global::Ice.Optional<float[]> p1, out global::Ice.Optional<float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(global::Ice.Optional<float[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<double[]> opDoubleSeq(global::Ice.Optional<double[]> p1, out global::Ice.Optional<double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(global::Ice.Optional<double[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<string[]> opStringSeq(global::Ice.Optional<string[]> p1, out global::Ice.Optional<string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(global::Ice.Optional<string[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<SmallStruct[]> opSmallStructSeq(global::Ice.Optional<SmallStruct[]> p1, out global::Ice.Optional<SmallStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(global::Ice.Optional<SmallStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> opSmallStructList(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, out global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<FixedStruct[]> opFixedStructSeq(global::Ice.Optional<FixedStruct[]> p1, out global::Ice.Optional<FixedStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(global::Ice.Optional<FixedStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> opFixedStructList(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, out global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<VarStruct[]> opVarStructSeq(global::Ice.Optional<VarStruct[]> p1, out global::Ice.Optional<VarStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(global::Ice.Optional<VarStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> opIntIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opStringIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> opIntOneOptionalDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opClassAndUnknownOptional(A p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void sendOptionalClass(bool req, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task sendOptionalClassAsync(bool req, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void returnOptionalClass(bool req, out global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Optional<OneOptional>> returnOptionalClassAsync(bool req, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            G opG(G g, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<G> opGAsync(G g, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<SmallStruct> opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Optional<SmallStruct>> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<SmallStruct> opMStruct2(global::Ice.Optional<SmallStruct> p1, out global::Ice.Optional<SmallStruct> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> opMStruct2Async(global::Ice.Optional<SmallStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<string[]> opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Optional<string[]>> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<string[]> opMSeq2(global::Ice.Optional<string[]> p1, out global::Ice.Optional<string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> opMSeq2Async(global::Ice.Optional<string[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opMDict2(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMDict2Result> opMDict2Async(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<G> opMG1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.Optional<G>> opMG1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.Optional<G> opMG2(global::Ice.Optional<G> p1, out global::Ice.Optional<G> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Initial_OpMG2Result> opMG2Async(global::Ice.Optional<G> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool supportsRequiredParams(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool supportsJavaSerializable(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            bool supportsNullOptional(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsNullOptionalAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
        }
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface InitialOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<global::Ice.Value> pingPongAsync(global::Ice.Value o, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task opOptionalExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task opDerivedExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task opRequiredExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(global::Ice.Optional<byte> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(global::Ice.Optional<bool> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(global::Ice.Optional<short> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(global::Ice.Optional<int> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(global::Ice.Optional<long> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(global::Ice.Optional<float> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(global::Ice.Optional<double> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(global::Ice.Optional<string> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(global::Ice.Optional<MyEnum> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(global::Ice.Optional<SmallStruct> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(global::Ice.Optional<FixedStruct> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(global::Ice.Optional<VarStruct> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(global::Ice.Optional<OneOptional> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(global::Ice.Optional<MyInterfacePrx> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(global::Ice.Optional<byte[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(global::Ice.Optional<bool[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(global::Ice.Optional<short[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(global::Ice.Optional<int[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(global::Ice.Optional<long[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(global::Ice.Optional<float[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(global::Ice.Optional<double[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(global::Ice.Optional<string[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(global::Ice.Optional<SmallStruct[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(global::Ice.Optional<FixedStruct[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(global::Ice.Optional<VarStruct[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task sendOptionalClassAsync(bool req, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<global::Ice.Optional<OneOptional>> returnOptionalClassAsync(bool req, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<G> opGAsync(G g, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task opVoidAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMStruct1MarshaledResult> opMStruct1Async(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMStruct2MarshaledResult> opMStruct2Async(global::Ice.Optional<SmallStruct> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMSeq1MarshaledResult> opMSeq1Async(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMSeq2MarshaledResult> opMSeq2Async(global::Ice.Optional<string[]> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMDict1MarshaledResult> opMDict1Async(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMDict2MarshaledResult> opMDict2Async(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMG1MarshaledResult> opMG1Async(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<Initial_OpMG2MarshaledResult> opMG2Async(global::Ice.Optional<G> p1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<bool> supportsNullOptionalAsync(global::Ice.Current current = null);
        }
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, MyInterfacePrx
        {
            public MyInterfacePrxHelper()
            {
            }

            #region Synchronous operations

            public void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Checked and unchecked cast operations

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                MyInterfacePrx r = b as MyInterfacePrx;
                if(r == null)
                {
                    MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static MyInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                MyInterfacePrxHelper h = new MyInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyInterface"
            };

            public static string ice_staticId() => "::Test::MyInterface";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, MyInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static MyInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    MyInterfacePrxHelper result = new MyInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(global::Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(global::Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(global::Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(global::Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(global::Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(global::Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(global::Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyEnumSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyEnum[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 0);
                    }
                }
            }

            public static MyEnum[] read(global::Ice.InputStream istr)
            {
                MyEnum[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new MyEnum[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = (MyEnum)istr.readEnum(0);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, SmallStruct[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static SmallStruct[] read(global::Ice.InputStream istr)
            {
                SmallStruct[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new SmallStruct[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SmallStructListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<SmallStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<SmallStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<SmallStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<SmallStruct>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SmallStruct val = new SmallStruct();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FixedStructSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, FixedStruct[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static FixedStruct[] read(global::Ice.InputStream istr)
            {
                FixedStruct[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new FixedStruct[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FixedStructListHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<FixedStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<FixedStruct> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<FixedStruct> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<FixedStruct> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.LinkedList<FixedStruct>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        FixedStruct val = new FixedStruct();
                        val.ice_readMembers(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class VarStructSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, VarStruct[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new VarStruct() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static VarStruct[] read(global::Ice.InputStream istr)
            {
                VarStruct[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new VarStruct[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new VarStruct();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class OneOptionalSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, OneOptional[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static OneOptional[] read(global::Ice.InputStream istr)
            {
                OneOptional[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new OneOptional[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::IceInternal.Patcher.arrayReadValue<OneOptional>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyInterfacePrxSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, MyInterfacePrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        MyInterfacePrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static MyInterfacePrx[] read(global::Ice.InputStream istr)
            {
                MyInterfacePrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new MyInterfacePrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = MyInterfacePrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntIntDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, int> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, int> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeInt(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, int> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, int> r = new global::System.Collections.Generic.Dictionary<int, int>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    int v;
                    v = istr.readInt();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class StringIntDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, int> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeInt(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, int> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    int v;
                    v = istr.readInt();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntEnumDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, MyEnum> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, MyEnum> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeEnum((int)e.Value, 0);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, MyEnum> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, MyEnum> r = new global::System.Collections.Generic.Dictionary<int, MyEnum>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    MyEnum v;
                    v = (MyEnum)istr.readEnum(0);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntFixedStructDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, FixedStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, FixedStruct> e in v)
                    {
                        ostr.writeInt(e.Key);
                        e.Value.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, FixedStruct> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, FixedStruct> r = new global::System.Collections.Generic.Dictionary<int, FixedStruct>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    FixedStruct v;
                    v = new FixedStruct();
                    v.ice_readMembers(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntVarStructDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, VarStruct> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, VarStruct> e in v)
                    {
                        ostr.writeInt(e.Key);
                        VarStruct.ice_write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, VarStruct> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, VarStruct> r = new global::System.Collections.Generic.Dictionary<int, VarStruct>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    VarStruct v;
                    v = null;
                    v = VarStruct.ice_read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntOneOptionalDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, OneOptional> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, OneOptional> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, OneOptional> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, OneOptional> r = new global::System.Collections.Generic.Dictionary<int, OneOptional>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    istr.readValue((OneOptional v) => { r[k] = v; });
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntMyInterfacePrxDictHelper
        {
            public static void write(global::Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, MyInterfacePrx> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, MyInterfacePrx> e in v)
                    {
                        ostr.writeInt(e.Key);
                        MyInterfacePrxHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, MyInterfacePrx> read(global::Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, MyInterfacePrx> r = new global::System.Collections.Generic.Dictionary<int, MyInterfacePrx>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    MyInterfacePrx v;
                    v = MyInterfacePrxHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class InitialPrxHelper : global::Ice.ObjectPrxHelperBase, InitialPrx
        {
            public InitialPrxHelper()
            {
            }

            #region Synchronous operations

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Value pingPong(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_pingPongAsync(o, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opOptionalException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opOptionalExceptionAsync(a, b, o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opDerivedException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opDerivedExceptionAsync(a, b, o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opRequiredException(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opRequiredExceptionAsync(a, b, o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<byte> opByte(global::Ice.Optional<byte> p1, out global::Ice.Optional<byte> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<bool> opBool(global::Ice.Optional<bool> p1, out global::Ice.Optional<bool> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<short> opShort(global::Ice.Optional<short> p1, out global::Ice.Optional<short> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<int> opInt(global::Ice.Optional<int> p1, out global::Ice.Optional<int> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<long> opLong(global::Ice.Optional<long> p1, out global::Ice.Optional<long> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<float> opFloat(global::Ice.Optional<float> p1, out global::Ice.Optional<float> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<double> opDouble(global::Ice.Optional<double> p1, out global::Ice.Optional<double> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opDoubleAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<string> opString(global::Ice.Optional<string> p1, out global::Ice.Optional<string> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<MyEnum> opMyEnum(global::Ice.Optional<MyEnum> p1, out global::Ice.Optional<MyEnum> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<SmallStruct> opSmallStruct(global::Ice.Optional<SmallStruct> p1, out global::Ice.Optional<SmallStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opSmallStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<FixedStruct> opFixedStruct(global::Ice.Optional<FixedStruct> p1, out global::Ice.Optional<FixedStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFixedStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<VarStruct> opVarStruct(global::Ice.Optional<VarStruct> p1, out global::Ice.Optional<VarStruct> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opVarStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<OneOptional> opOneOptional(global::Ice.Optional<OneOptional> p1, out global::Ice.Optional<OneOptional> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opOneOptionalAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<MyInterfacePrx> opMyInterfaceProxy(global::Ice.Optional<MyInterfacePrx> p1, out global::Ice.Optional<MyInterfacePrx> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMyInterfaceProxyAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<byte[]> opByteSeq(global::Ice.Optional<byte[]> p1, out global::Ice.Optional<byte[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<bool[]> opBoolSeq(global::Ice.Optional<bool[]> p1, out global::Ice.Optional<bool[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<short[]> opShortSeq(global::Ice.Optional<short[]> p1, out global::Ice.Optional<short[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<int[]> opIntSeq(global::Ice.Optional<int[]> p1, out global::Ice.Optional<int[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<long[]> opLongSeq(global::Ice.Optional<long[]> p1, out global::Ice.Optional<long[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<float[]> opFloatSeq(global::Ice.Optional<float[]> p1, out global::Ice.Optional<float[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<double[]> opDoubleSeq(global::Ice.Optional<double[]> p1, out global::Ice.Optional<double[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opDoubleSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<string[]> opStringSeq(global::Ice.Optional<string[]> p1, out global::Ice.Optional<string[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<SmallStruct[]> opSmallStructSeq(global::Ice.Optional<SmallStruct[]> p1, out global::Ice.Optional<SmallStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opSmallStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> opSmallStructList(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, out global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opSmallStructListAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<FixedStruct[]> opFixedStructSeq(global::Ice.Optional<FixedStruct[]> p1, out global::Ice.Optional<FixedStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFixedStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> opFixedStructList(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, out global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFixedStructListAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<VarStruct[]> opVarStructSeq(global::Ice.Optional<VarStruct[]> p1, out global::Ice.Optional<VarStruct[]> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opVarStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> opIntIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntIntDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opStringIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opStringIntDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> opIntOneOptionalDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p3, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntOneOptionalDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p3 = result_.p3;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opClassAndUnknownOptional(A p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opClassAndUnknownOptionalAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void sendOptionalClass(bool req, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_sendOptionalClassAsync(req, o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void returnOptionalClass(bool req, out global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    o = _iceI_returnOptionalClassAsync(req, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public G opG(G g, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opGAsync(g, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void opVoid(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<SmallStruct> opMStruct1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<SmallStruct> opMStruct2(global::Ice.Optional<SmallStruct> p1, out global::Ice.Optional<SmallStruct> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<string[]> opMSeq1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<string[]> opMSeq2(global::Ice.Optional<string[]> p1, out global::Ice.Optional<string[]> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opMDict1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> opMDict2(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, out global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<G> opMG1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opMG1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Optional<G> opMG2(global::Ice.Optional<G> p1, out global::Ice.Optional<G> p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opMG2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    p2 = result_.p2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsRequiredParams(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsRequiredParamsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsJavaSerializable(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsJavaSerializableAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsNullOptional(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsNullOptionalAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<global::Ice.Value> pingPongAsync(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_pingPongAsync(o, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Value> _iceI_pingPongAsync(global::Ice.Value iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_pingPong_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Value>(progress, cancel);
                _iceI_pingPong(iceP_o, context, synchronous, completed);
                return completed.Task;
            }

            private const string _pingPong_name = "pingPong";

            private void _iceI_pingPong(global::Ice.Value iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Value>(completed);
                outAsync.invoke(
                    _pingPong_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_o);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Value ret = null;
                        istr.readValue((global::Ice.Value v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opOptionalExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opOptionalExceptionAsync(a, b, o, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opOptionalExceptionAsync(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opOptionalException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opOptionalException(iceP_a, iceP_b, iceP_o, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opOptionalException_name = "opOptionalException";

            private void _iceI_opOptionalException(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opOptionalException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(1, iceP_a);
                        ostr.writeString(2, iceP_b);
                        ostr.writeValue(3, iceP_o);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(OptionalException)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task opDerivedExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDerivedExceptionAsync(a, b, o, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opDerivedExceptionAsync(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDerivedException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opDerivedException(iceP_a, iceP_b, iceP_o, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDerivedException_name = "opDerivedException";

            private void _iceI_opDerivedException(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opDerivedException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(1, iceP_a);
                        ostr.writeString(2, iceP_b);
                        ostr.writeValue(3, iceP_o);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(OptionalException)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task opRequiredExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opRequiredExceptionAsync(a, b, o, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opRequiredExceptionAsync(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opRequiredException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opRequiredException(iceP_a, iceP_b, iceP_o, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opRequiredException_name = "opRequiredException";

            private void _iceI_opRequiredException(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_b, global::Ice.Optional<OneOptional> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opRequiredException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(1, iceP_a);
                        ostr.writeString(2, iceP_b);
                        ostr.writeValue(3, iceP_o);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(OptionalException)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(global::Ice.Optional<byte> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpByteResult> _iceI_opByteAsync(global::Ice.Optional<byte> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByte_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpByteResult>(progress, cancel);
                _iceI_opByte(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByte_name = "opByte";

            private void _iceI_opByte(global::Ice.Optional<byte> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpByteResult>(completed);
                outAsync.invoke(
                    _opByte_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpByteResult ret = new Initial_OpByteResult();
                        {
                            var tmp = istr.readByte(1);
                            ret.returnValue = tmp;
                        }
                        {
                            var tmp = istr.readByte(3);
                            ret.p3 = tmp;
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(global::Ice.Optional<bool> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpBoolResult> _iceI_opBoolAsync(global::Ice.Optional<bool> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBool_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpBoolResult>(progress, cancel);
                _iceI_opBool(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBool_name = "opBool";

            private void _iceI_opBool(global::Ice.Optional<bool> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpBoolResult>(completed);
                outAsync.invoke(
                    _opBool_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpBoolResult ret = new Initial_OpBoolResult();
                        {
                            var tmp = istr.readBool(1);
                            ret.returnValue = tmp;
                        }
                        {
                            var tmp = istr.readBool(3);
                            ret.p3 = tmp;
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(global::Ice.Optional<short> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpShortResult> _iceI_opShortAsync(global::Ice.Optional<short> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShort_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpShortResult>(progress, cancel);
                _iceI_opShort(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShort_name = "opShort";

            private void _iceI_opShort(global::Ice.Optional<short> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpShortResult>(completed);
                outAsync.invoke(
                    _opShort_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShort(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpShortResult ret = new Initial_OpShortResult();
                        ret.returnValue = istr.readShort(1);
                        ret.p3 = istr.readShort(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(global::Ice.Optional<int> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpIntResult> _iceI_opIntAsync(global::Ice.Optional<int> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opInt_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpIntResult>(progress, cancel);
                _iceI_opInt(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opInt_name = "opInt";

            private void _iceI_opInt(global::Ice.Optional<int> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpIntResult>(completed);
                outAsync.invoke(
                    _opInt_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpIntResult ret = new Initial_OpIntResult();
                        ret.returnValue = istr.readInt(1);
                        ret.p3 = istr.readInt(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(global::Ice.Optional<long> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpLongResult> _iceI_opLongAsync(global::Ice.Optional<long> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLong_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpLongResult>(progress, cancel);
                _iceI_opLong(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLong_name = "opLong";

            private void _iceI_opLong(global::Ice.Optional<long> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpLongResult>(completed);
                outAsync.invoke(
                    _opLong_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeLong(1, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpLongResult ret = new Initial_OpLongResult();
                        ret.p3 = istr.readLong(2);
                        ret.returnValue = istr.readLong(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(global::Ice.Optional<float> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpFloatResult> _iceI_opFloatAsync(global::Ice.Optional<float> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloat_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpFloatResult>(progress, cancel);
                _iceI_opFloat(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloat_name = "opFloat";

            private void _iceI_opFloat(global::Ice.Optional<float> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpFloatResult>(completed);
                outAsync.invoke(
                    _opFloat_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpFloatResult ret = new Initial_OpFloatResult();
                        ret.returnValue = istr.readFloat(1);
                        ret.p3 = istr.readFloat(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(global::Ice.Optional<double> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpDoubleResult> _iceI_opDoubleAsync(global::Ice.Optional<double> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDouble_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpDoubleResult>(progress, cancel);
                _iceI_opDouble(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDouble_name = "opDouble";

            private void _iceI_opDouble(global::Ice.Optional<double> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpDoubleResult>(completed);
                outAsync.invoke(
                    _opDouble_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDouble(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpDoubleResult ret = new Initial_OpDoubleResult();
                        ret.returnValue = istr.readDouble(1);
                        ret.p3 = istr.readDouble(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(global::Ice.Optional<string> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpStringResult> _iceI_opStringAsync(global::Ice.Optional<string> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opString_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpStringResult>(progress, cancel);
                _iceI_opString(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opString_name = "opString";

            private void _iceI_opString(global::Ice.Optional<string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpStringResult>(completed);
                outAsync.invoke(
                    _opString_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpStringResult ret = new Initial_OpStringResult();
                        ret.returnValue = istr.readString(1);
                        ret.p3 = istr.readString(3);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(global::Ice.Optional<MyEnum> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> _iceI_opMyEnumAsync(global::Ice.Optional<MyEnum> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyEnum_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMyEnumResult>(progress, cancel);
                _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyEnum_name = "opMyEnum";

            private void _iceI_opMyEnum(global::Ice.Optional<MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMyEnumResult>(completed);
                outAsync.invoke(
                    _opMyEnum_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue)
                        {
                            ostr.writeEnum(2, (int)iceP_p1.Value, 1);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMyEnumResult ret = new Initial_OpMyEnumResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.Size))
                        {
                            MyEnum tmpVal;
                            tmpVal = (MyEnum)istr.readEnum(0);
                            ret.returnValue = new global::Ice.Optional<MyEnum>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<MyEnum>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.Size))
                        {
                            MyEnum tmpVal;
                            tmpVal = (MyEnum)istr.readEnum(0);
                            ret.p3 = new global::Ice.Optional<MyEnum>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<MyEnum>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(global::Ice.Optional<SmallStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opSmallStructAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> _iceI_opSmallStructAsync(global::Ice.Optional<SmallStruct> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSmallStruct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpSmallStructResult>(progress, cancel);
                _iceI_opSmallStruct(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSmallStruct_name = "opSmallStruct";

            private void _iceI_opSmallStruct(global::Ice.Optional<SmallStruct> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpSmallStructResult>(completed);
                outAsync.invoke(
                    _opSmallStruct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(1);
                            iceP_p1.Value.ice_writeMembers(ostr);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpSmallStructResult ret = new Initial_OpSmallStructResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            SmallStruct tmpVal = new SmallStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.returnValue = new global::Ice.Optional<SmallStruct>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<SmallStruct>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            SmallStruct tmpVal = new SmallStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.p3 = new global::Ice.Optional<SmallStruct>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<SmallStruct>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(global::Ice.Optional<FixedStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFixedStructAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> _iceI_opFixedStructAsync(global::Ice.Optional<FixedStruct> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFixedStruct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpFixedStructResult>(progress, cancel);
                _iceI_opFixedStruct(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFixedStruct_name = "opFixedStruct";

            private void _iceI_opFixedStruct(global::Ice.Optional<FixedStruct> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpFixedStructResult>(completed);
                outAsync.invoke(
                    _opFixedStruct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(4);
                            iceP_p1.Value.ice_writeMembers(ostr);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpFixedStructResult ret = new Initial_OpFixedStructResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            FixedStruct tmpVal = new FixedStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.returnValue = new global::Ice.Optional<FixedStruct>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<FixedStruct>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            FixedStruct tmpVal = new FixedStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.p3 = new global::Ice.Optional<FixedStruct>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<FixedStruct>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(global::Ice.Optional<VarStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opVarStructAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpVarStructResult> _iceI_opVarStructAsync(global::Ice.Optional<VarStruct> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opVarStruct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpVarStructResult>(progress, cancel);
                _iceI_opVarStruct(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opVarStruct_name = "opVarStruct";

            private void _iceI_opVarStruct(global::Ice.Optional<VarStruct> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpVarStructResult>(completed);
                outAsync.invoke(
                    _opVarStruct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStruct.ice_write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpVarStructResult ret = new Initial_OpVarStructResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            VarStruct tmpVal = null;
                            tmpVal = VarStruct.ice_read(istr);
                            ret.returnValue = new global::Ice.Optional<VarStruct>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<VarStruct>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            VarStruct tmpVal = null;
                            tmpVal = VarStruct.ice_read(istr);
                            ret.p3 = new global::Ice.Optional<VarStruct>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<VarStruct>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(global::Ice.Optional<OneOptional> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opOneOptionalAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> _iceI_opOneOptionalAsync(global::Ice.Optional<OneOptional> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opOneOptional_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpOneOptionalResult>(progress, cancel);
                _iceI_opOneOptional(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opOneOptional_name = "opOneOptional";

            private void _iceI_opOneOptional(global::Ice.Optional<OneOptional> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpOneOptionalResult>(completed);
                outAsync.invoke(
                    _opOneOptional_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpOneOptionalResult ret = new Initial_OpOneOptionalResult();
                        istr.readValue(1, (OneOptional v) => {ret.returnValue = v; });
                        istr.readValue(3, (OneOptional v) => {ret.p3 = v; });
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(global::Ice.Optional<MyInterfacePrx> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMyInterfaceProxyAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> _iceI_opMyInterfaceProxyAsync(global::Ice.Optional<MyInterfacePrx> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMyInterfaceProxy_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMyInterfaceProxyResult>(progress, cancel);
                _iceI_opMyInterfaceProxy(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMyInterfaceProxy_name = "opMyInterfaceProxy";

            private void _iceI_opMyInterfaceProxy(global::Ice.Optional<MyInterfacePrx> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMyInterfaceProxyResult>(completed);
                outAsync.invoke(
                    _opMyInterfaceProxy_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            MyInterfacePrxHelper.write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMyInterfaceProxyResult ret = new Initial_OpMyInterfaceProxyResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            MyInterfacePrx tmpVal;
                            tmpVal = MyInterfacePrxHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<MyInterfacePrx>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<MyInterfacePrx>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            MyInterfacePrx tmpVal;
                            tmpVal = MyInterfacePrxHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<MyInterfacePrx>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<MyInterfacePrx>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(global::Ice.Optional<byte[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> _iceI_opByteSeqAsync(global::Ice.Optional<byte[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpByteSeqResult>(progress, cancel);
                _iceI_opByteSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSeq_name = "opByteSeq";

            private void _iceI_opByteSeq(global::Ice.Optional<byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpByteSeqResult>(completed);
                outAsync.invoke(
                    _opByteSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeByteSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpByteSeqResult ret = new Initial_OpByteSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            byte[] tmpVal;
                            tmpVal = ByteSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<byte[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<byte[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            byte[] tmpVal;
                            tmpVal = ByteSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<byte[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<byte[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(global::Ice.Optional<bool[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> _iceI_opBoolSeqAsync(global::Ice.Optional<bool[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpBoolSeqResult>(progress, cancel);
                _iceI_opBoolSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolSeq_name = "opBoolSeq";

            private void _iceI_opBoolSeq(global::Ice.Optional<bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpBoolSeqResult>(completed);
                outAsync.invoke(
                    _opBoolSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBoolSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpBoolSeqResult ret = new Initial_OpBoolSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            bool[] tmpVal;
                            tmpVal = BoolSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<bool[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<bool[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            bool[] tmpVal;
                            tmpVal = BoolSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<bool[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<bool[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(global::Ice.Optional<short[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> _iceI_opShortSeqAsync(global::Ice.Optional<short[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpShortSeqResult>(progress, cancel);
                _iceI_opShortSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortSeq_name = "opShortSeq";

            private void _iceI_opShortSeq(global::Ice.Optional<short[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpShortSeqResult>(completed);
                outAsync.invoke(
                    _opShortSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeShortSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpShortSeqResult ret = new Initial_OpShortSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            short[] tmpVal;
                            tmpVal = ShortSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<short[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<short[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            short[] tmpVal;
                            tmpVal = ShortSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<short[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<short[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(global::Ice.Optional<int[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> _iceI_opIntSeqAsync(global::Ice.Optional<int[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpIntSeqResult>(progress, cancel);
                _iceI_opIntSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntSeq_name = "opIntSeq";

            private void _iceI_opIntSeq(global::Ice.Optional<int[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpIntSeqResult>(completed);
                outAsync.invoke(
                    _opIntSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeIntSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpIntSeqResult ret = new Initial_OpIntSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            int[] tmpVal;
                            tmpVal = IntSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<int[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<int[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            int[] tmpVal;
                            tmpVal = IntSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<int[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<int[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(global::Ice.Optional<long[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> _iceI_opLongSeqAsync(global::Ice.Optional<long[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpLongSeqResult>(progress, cancel);
                _iceI_opLongSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongSeq_name = "opLongSeq";

            private void _iceI_opLongSeq(global::Ice.Optional<long[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpLongSeqResult>(completed);
                outAsync.invoke(
                    _opLongSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeLongSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpLongSeqResult ret = new Initial_OpLongSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            long[] tmpVal;
                            tmpVal = LongSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<long[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<long[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            long[] tmpVal;
                            tmpVal = LongSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<long[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<long[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(global::Ice.Optional<float[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> _iceI_opFloatSeqAsync(global::Ice.Optional<float[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpFloatSeqResult>(progress, cancel);
                _iceI_opFloatSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatSeq_name = "opFloatSeq";

            private void _iceI_opFloatSeq(global::Ice.Optional<float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpFloatSeqResult>(completed);
                outAsync.invoke(
                    _opFloatSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloatSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpFloatSeqResult ret = new Initial_OpFloatSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            float[] tmpVal;
                            tmpVal = FloatSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<float[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<float[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            float[] tmpVal;
                            tmpVal = FloatSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<float[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<float[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(global::Ice.Optional<double[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(global::Ice.Optional<double[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDoubleSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpDoubleSeqResult>(progress, cancel);
                _iceI_opDoubleSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleSeq_name = "opDoubleSeq";

            private void _iceI_opDoubleSeq(global::Ice.Optional<double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpDoubleSeqResult>(completed);
                outAsync.invoke(
                    _opDoubleSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeDoubleSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpDoubleSeqResult ret = new Initial_OpDoubleSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            double[] tmpVal;
                            tmpVal = DoubleSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<double[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<double[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            double[] tmpVal;
                            tmpVal = DoubleSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<double[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<double[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(global::Ice.Optional<string[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> _iceI_opStringSeqAsync(global::Ice.Optional<string[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpStringSeqResult>(progress, cancel);
                _iceI_opStringSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringSeq_name = "opStringSeq";

            private void _iceI_opStringSeq(global::Ice.Optional<string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpStringSeqResult>(completed);
                outAsync.invoke(
                    _opStringSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeStringSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpStringSeqResult ret = new Initial_OpStringSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            string[] tmpVal;
                            tmpVal = StringSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<string[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<string[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            string[] tmpVal;
                            tmpVal = StringSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<string[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<string[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(global::Ice.Optional<SmallStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opSmallStructSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> _iceI_opSmallStructSeqAsync(global::Ice.Optional<SmallStruct[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSmallStructSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpSmallStructSeqResult>(progress, cancel);
                _iceI_opSmallStructSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSmallStructSeq_name = "opSmallStructSeq";

            private void _iceI_opSmallStructSeq(global::Ice.Optional<SmallStruct[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpSmallStructSeqResult>(completed);
                outAsync.invoke(
                    _opSmallStructSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructSeqHelper.write(ostr, iceP_p1.Value);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpSmallStructSeqResult ret = new Initial_OpSmallStructSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStruct[] tmpVal;
                            tmpVal = SmallStructSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<SmallStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<SmallStruct[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStruct[] tmpVal;
                            tmpVal = SmallStructSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<SmallStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<SmallStruct[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opSmallStructListAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> _iceI_opSmallStructListAsync(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSmallStructList_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpSmallStructListResult>(progress, cancel);
                _iceI_opSmallStructList(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSmallStructList_name = "opSmallStructList";

            private void _iceI_opSmallStructList(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpSmallStructListResult>(completed);
                outAsync.invoke(
                    _opSmallStructList_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructListHelper.write(ostr, iceP_p1.Value);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpSmallStructListResult ret = new Initial_OpSmallStructListResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            global::System.Collections.Generic.List<SmallStruct> tmpVal;
                            tmpVal = SmallStructListHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            global::System.Collections.Generic.List<SmallStruct> tmpVal;
                            tmpVal = SmallStructListHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(global::Ice.Optional<FixedStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFixedStructSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> _iceI_opFixedStructSeqAsync(global::Ice.Optional<FixedStruct[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFixedStructSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpFixedStructSeqResult>(progress, cancel);
                _iceI_opFixedStructSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFixedStructSeq_name = "opFixedStructSeq";

            private void _iceI_opFixedStructSeq(global::Ice.Optional<FixedStruct[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpFixedStructSeqResult>(completed);
                outAsync.invoke(
                    _opFixedStructSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(iceP_p1.Value == null ? 1 : iceP_p1.Value.Length * 4 + (iceP_p1.Value.Length > 254 ? 5 : 1));
                            FixedStructSeqHelper.write(ostr, iceP_p1.Value);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpFixedStructSeqResult ret = new Initial_OpFixedStructSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            FixedStruct[] tmpVal;
                            tmpVal = FixedStructSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<FixedStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<FixedStruct[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            FixedStruct[] tmpVal;
                            tmpVal = FixedStructSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<FixedStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<FixedStruct[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFixedStructListAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> _iceI_opFixedStructListAsync(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFixedStructList_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpFixedStructListResult>(progress, cancel);
                _iceI_opFixedStructList(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFixedStructList_name = "opFixedStructList";

            private void _iceI_opFixedStructList(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpFixedStructListResult>(completed);
                outAsync.invoke(
                    _opFixedStructList_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(iceP_p1.Value == null ? 1 : iceP_p1.Value.Count * 4 + (iceP_p1.Value.Count > 254 ? 5 : 1));
                            FixedStructListHelper.write(ostr, iceP_p1.Value);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpFixedStructListResult ret = new Initial_OpFixedStructListResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            global::System.Collections.Generic.LinkedList<FixedStruct> tmpVal;
                            tmpVal = FixedStructListHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            global::System.Collections.Generic.LinkedList<FixedStruct> tmpVal;
                            tmpVal = FixedStructListHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(global::Ice.Optional<VarStruct[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opVarStructSeqAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> _iceI_opVarStructSeqAsync(global::Ice.Optional<VarStruct[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opVarStructSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpVarStructSeqResult>(progress, cancel);
                _iceI_opVarStructSeq(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opVarStructSeq_name = "opVarStructSeq";

            private void _iceI_opVarStructSeq(global::Ice.Optional<VarStruct[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpVarStructSeqResult>(completed);
                outAsync.invoke(
                    _opVarStructSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStructSeqHelper.write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpVarStructSeqResult ret = new Initial_OpVarStructSeqResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            VarStruct[] tmpVal;
                            tmpVal = VarStructSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<VarStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<VarStruct[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            VarStruct[] tmpVal;
                            tmpVal = VarStructSeqHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<VarStruct[]>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<VarStruct[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntIntDictAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> _iceI_opIntIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntIntDict_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpIntIntDictResult>(progress, cancel);
                _iceI_opIntIntDict(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntIntDict_name = "opIntIntDict";

            private void _iceI_opIntIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpIntIntDictResult>(completed);
                outAsync.invoke(
                    _opIntIntDict_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(iceP_p1.Value == null ? 1 : iceP_p1.Value.Count * 8 + (iceP_p1.Value.Count > 254 ? 5 : 1));
                            IntIntDictHelper.write(ostr, iceP_p1.Value);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpIntIntDictResult ret = new Initial_OpIntIntDictResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                            tmpVal = IntIntDictHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                            tmpVal = IntIntDictHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opStringIntDictAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> _iceI_opStringIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opStringIntDict_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpStringIntDictResult>(progress, cancel);
                _iceI_opStringIntDict(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opStringIntDict_name = "opStringIntDict";

            private void _iceI_opStringIntDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpStringIntDictResult>(completed);
                outAsync.invoke(
                    _opStringIntDict_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            StringIntDictHelper.write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpStringIntDictResult ret = new Initial_OpStringIntDictResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                            tmpVal = StringIntDictHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                            tmpVal = StringIntDictHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntOneOptionalDictAsync(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> _iceI_opIntOneOptionalDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntOneOptionalDict_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpIntOneOptionalDictResult>(progress, cancel);
                _iceI_opIntOneOptionalDict(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntOneOptionalDict_name = "opIntOneOptionalDict";

            private void _iceI_opIntOneOptionalDict(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpIntOneOptionalDictResult>(completed);
                outAsync.invoke(
                    _opIntOneOptionalDict_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            IntOneOptionalDictHelper.write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpIntOneOptionalDictResult ret = new Initial_OpIntOneOptionalDictResult();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<int, OneOptional> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional>();
                            tmpVal = IntOneOptionalDictHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<int, OneOptional> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional>();
                            tmpVal = IntOneOptionalDictHelper.read(istr);
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>(tmpVal);
                        }
                        else
                        {
                            ret.p3 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opClassAndUnknownOptionalAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opClassAndUnknownOptionalAsync(A iceP_p, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opClassAndUnknownOptional(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

            private void _iceI_opClassAndUnknownOptional(A iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opClassAndUnknownOptional_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_p);
                        ostr.writePendingValues();
                    });
            }

            public global::System.Threading.Tasks.Task sendOptionalClassAsync(bool req, global::Ice.Optional<OneOptional> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_sendOptionalClassAsync(req, o, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_sendOptionalClassAsync(bool iceP_req, global::Ice.Optional<OneOptional> iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_sendOptionalClass(iceP_req, iceP_o, context, synchronous, completed);
                return completed.Task;
            }

            private const string _sendOptionalClass_name = "sendOptionalClass";

            private void _iceI_sendOptionalClass(bool iceP_req, global::Ice.Optional<OneOptional> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _sendOptionalClass_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_req);
                        ostr.writeValue(1, iceP_o);
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.Optional<OneOptional>> returnOptionalClassAsync(bool req, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_returnOptionalClassAsync(req, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Optional<OneOptional>> _iceI_returnOptionalClassAsync(bool iceP_req, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_returnOptionalClass_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<OneOptional>>(progress, cancel);
                _iceI_returnOptionalClass(iceP_req, context, synchronous, completed);
                return completed.Task;
            }

            private const string _returnOptionalClass_name = "returnOptionalClass";

            private void _iceI_returnOptionalClass(bool iceP_req, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Optional<OneOptional>>(completed);
                outAsync.invoke(
                    _returnOptionalClass_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_req);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Optional<OneOptional> iceP_o = global::Ice.Util.None;
                        istr.readValue(1, (OneOptional v) => {iceP_o = v; });
                        return iceP_o;
                    });
            }

            public global::System.Threading.Tasks.Task<G> opGAsync(G g, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opGAsync(g, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<G> _iceI_opGAsync(G iceP_g, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opG_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<G>(progress, cancel);
                _iceI_opG(iceP_g, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opG_name = "opG";

            private void _iceI_opG(G iceP_g, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<G>(completed);
                outAsync.invoke(
                    _opG_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_g);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        G ret = null;
                        istr.readValue((G v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task opVoidAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opVoidAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_opVoid(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opVoid_name = "opVoid";

            private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _opVoid_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<global::Ice.Optional<SmallStruct>> opMStruct1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Optional<SmallStruct>> _iceI_opMStruct1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<SmallStruct>>(progress, cancel);
                _iceI_opMStruct1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct1_name = "opMStruct1";

            private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Optional<SmallStruct>>(completed);
                outAsync.invoke(
                    _opMStruct1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Optional<SmallStruct> ret;
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            SmallStruct tmpVal = new SmallStruct();
                            tmpVal.ice_readMembers(istr);
                            ret = new global::Ice.Optional<SmallStruct>(tmpVal);
                        }
                        else
                        {
                            ret = new global::Ice.Optional<SmallStruct>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> opMStruct2Async(global::Ice.Optional<SmallStruct> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> _iceI_opMStruct2Async(global::Ice.Optional<SmallStruct> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMStruct2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMStruct2Result>(progress, cancel);
                _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMStruct2_name = "opMStruct2";

            private void _iceI_opMStruct2(global::Ice.Optional<SmallStruct> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMStruct2Result>(completed);
                outAsync.invoke(
                    _opMStruct2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(1);
                            iceP_p1.Value.ice_writeMembers(ostr);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMStruct2Result ret = new Initial_OpMStruct2Result();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            SmallStruct tmpVal = new SmallStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.returnValue = new global::Ice.Optional<SmallStruct>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<SmallStruct>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            istr.skipSize();
                            SmallStruct tmpVal = new SmallStruct();
                            tmpVal.ice_readMembers(istr);
                            ret.p2 = new global::Ice.Optional<SmallStruct>(tmpVal);
                        }
                        else
                        {
                            ret.p2 = new global::Ice.Optional<SmallStruct>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.Optional<string[]>> opMSeq1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Optional<string[]>> _iceI_opMSeq1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<string[]>>(progress, cancel);
                _iceI_opMSeq1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq1_name = "opMSeq1";

            private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Optional<string[]>>(completed);
                outAsync.invoke(
                    _opMSeq1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Optional<string[]> ret;
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            string[] tmpVal;
                            tmpVal = StringSeqHelper.read(istr);
                            ret = new global::Ice.Optional<string[]>(tmpVal);
                        }
                        else
                        {
                            ret = new global::Ice.Optional<string[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> opMSeq2Async(global::Ice.Optional<string[]> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> _iceI_opMSeq2Async(global::Ice.Optional<string[]> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMSeq2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMSeq2Result>(progress, cancel);
                _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMSeq2_name = "opMSeq2";

            private void _iceI_opMSeq2(global::Ice.Optional<string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMSeq2Result>(completed);
                outAsync.invoke(
                    _opMSeq2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeStringSeq(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMSeq2Result ret = new Initial_OpMSeq2Result();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            string[] tmpVal;
                            tmpVal = StringSeqHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<string[]>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<string[]>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            string[] tmpVal;
                            tmpVal = StringSeqHelper.read(istr);
                            ret.p2 = new global::Ice.Optional<string[]>(tmpVal);
                        }
                        else
                        {
                            ret.p2 = new global::Ice.Optional<string[]>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>> opMDict1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>> _iceI_opMDict1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>>(progress, cancel);
                _iceI_opMDict1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict1_name = "opMDict1";

            private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>>(completed);
                outAsync.invoke(
                    _opMDict1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> ret;
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                            tmpVal = StringIntDictHelper.read(istr);
                            ret = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                        }
                        else
                        {
                            ret = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMDict2Result> opMDict2Async(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMDict2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMDict2Result> _iceI_opMDict2Async(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMDict2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMDict2Result>(progress, cancel);
                _iceI_opMDict2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMDict2_name = "opMDict2";

            private void _iceI_opMDict2(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMDict2Result>(completed);
                outAsync.invoke(
                    _opMDict2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        if(iceP_p1.HasValue && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            StringIntDictHelper.write(ostr, iceP_p1.Value);
                            ostr.endSize(pos);
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMDict2Result ret = new Initial_OpMDict2Result();
                        if(istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                            tmpVal = StringIntDictHelper.read(istr);
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                        }
                        else
                        {
                            ret.returnValue = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                        }
                        if(istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            istr.skip(4);
                            global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                            tmpVal = StringIntDictHelper.read(istr);
                            ret.p2 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                        }
                        else
                        {
                            ret.p2 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                        }
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.Optional<G>> opMG1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMG1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.Optional<G>> _iceI_opMG1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMG1_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Optional<G>>(progress, cancel);
                _iceI_opMG1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMG1_name = "opMG1";

            private void _iceI_opMG1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.Optional<G>>(completed);
                outAsync.invoke(
                    _opMG1_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.Optional<G> ret = global::Ice.Util.None;
                        istr.readValue(1, (G v) => {ret = v; });
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMG2Result> opMG2Async(global::Ice.Optional<G> p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opMG2Async(p1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMG2Result> _iceI_opMG2Async(global::Ice.Optional<G> iceP_p1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opMG2_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMG2Result>(progress, cancel);
                _iceI_opMG2(iceP_p1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opMG2_name = "opMG2";

            private void _iceI_opMG2(global::Ice.Optional<G> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMG2Result>(completed);
                outAsync.invoke(
                    _opMG2_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(2, iceP_p1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Initial_OpMG2Result ret = new Initial_OpMG2Result();
                        istr.readValue(1, (G v) => {ret.returnValue = v; });
                        istr.readValue(3, (G v) => {ret.p2 = v; });
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsRequiredParamsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsRequiredParamsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsRequiredParams_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsRequiredParams(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsRequiredParams_name = "supportsRequiredParams";

            private void _iceI_supportsRequiredParams(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsRequiredParams_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsJavaSerializableAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsJavaSerializableAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsJavaSerializable_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsJavaSerializable(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsJavaSerializable_name = "supportsJavaSerializable";

            private void _iceI_supportsJavaSerializable(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsJavaSerializable_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> supportsNullOptionalAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsNullOptionalAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsNullOptionalAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsNullOptional_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsNullOptional(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsNullOptional_name = "supportsNullOptional";

            private void _iceI_supportsNullOptional(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsNullOptional_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            #endregion

            #region Checked and unchecked cast operations

            public static InitialPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                InitialPrx r = b as InitialPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static InitialPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                InitialPrx r = b as InitialPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        InitialPrxHelper h = new InitialPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        InitialPrxHelper h = new InitialPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                InitialPrx r = b as InitialPrx;
                if(r == null)
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Initial"
            };

            public static string ice_staticId() => "::Test::Initial";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, InitialPrx v)
            {
                ostr.writeProxy(v);
            }

            public static InitialPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    InitialPrxHelper result = new InitialPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.optional.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyInterfaceDisp_ : global::Ice.ObjectImpl, MyInterface
        {
            #region Slice operations

            public abstract void op(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyInterface"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::MyInterface";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_op(MyInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.op(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "op"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_op(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class InitialDisp_ : global::Ice.ObjectImpl, Initial
        {
            #region Slice operations

            public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<global::Ice.Value> pingPongAsync(global::Ice.Value o, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task opOptionalExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task opDerivedExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task opRequiredExceptionAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> b, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(global::Ice.Optional<byte> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(global::Ice.Optional<bool> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(global::Ice.Optional<short> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(global::Ice.Optional<int> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(global::Ice.Optional<long> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(global::Ice.Optional<float> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(global::Ice.Optional<double> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(global::Ice.Optional<string> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(global::Ice.Optional<MyEnum> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(global::Ice.Optional<SmallStruct> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(global::Ice.Optional<FixedStruct> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(global::Ice.Optional<VarStruct> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(global::Ice.Optional<OneOptional> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(global::Ice.Optional<MyInterfacePrx> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(global::Ice.Optional<byte[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(global::Ice.Optional<bool[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(global::Ice.Optional<short[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(global::Ice.Optional<int[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(global::Ice.Optional<long[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(global::Ice.Optional<float[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(global::Ice.Optional<double[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(global::Ice.Optional<string[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(global::Ice.Optional<SmallStruct[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(global::Ice.Optional<FixedStruct[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(global::Ice.Optional<VarStruct[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task sendOptionalClassAsync(bool req, global::Ice.Optional<OneOptional> o, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<global::Ice.Optional<OneOptional>> returnOptionalClassAsync(bool req, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<G> opGAsync(G g, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task opVoidAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMStruct1MarshaledResult> opMStruct1Async(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMStruct2MarshaledResult> opMStruct2Async(global::Ice.Optional<SmallStruct> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMSeq1MarshaledResult> opMSeq1Async(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMSeq2MarshaledResult> opMSeq2Async(global::Ice.Optional<string[]> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMDict1MarshaledResult> opMDict1Async(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMDict2MarshaledResult> opMDict2Async(global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMG1MarshaledResult> opMG1Async(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<Initial_OpMG2MarshaledResult> opMG2Async(global::Ice.Optional<G> p1, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<bool> supportsNullOptionalAsync(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Initial"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::Initial";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.shutdownAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_pingPong(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Value iceP_o;
                iceP_o = null;
                istr.readValue((global::Ice.Value v) => {iceP_o = v; });
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<global::Ice.Value>(obj.pingPongAsync(iceP_o, current),
                    (ostr, ret) =>
                    {
                        ostr.writeValue(ret);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opOptionalException(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<int> iceP_a;
                global::Ice.Optional<string> iceP_b;
                global::Ice.Optional<OneOptional> iceP_o = global::Ice.Util.None;
                iceP_a = istr.readInt(1);
                iceP_b = istr.readString(2);
                istr.readValue(3, (OneOptional v) => {iceP_o = v; });
                inS.endReadParams();
                return inS.setResultTask(obj.opOptionalExceptionAsync(iceP_a, iceP_b, iceP_o, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDerivedException(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<int> iceP_a;
                global::Ice.Optional<string> iceP_b;
                global::Ice.Optional<OneOptional> iceP_o = global::Ice.Util.None;
                iceP_a = istr.readInt(1);
                iceP_b = istr.readString(2);
                istr.readValue(3, (OneOptional v) => {iceP_o = v; });
                inS.endReadParams();
                return inS.setResultTask(obj.opDerivedExceptionAsync(iceP_a, iceP_b, iceP_o, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opRequiredException(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<int> iceP_a;
                global::Ice.Optional<string> iceP_b;
                global::Ice.Optional<OneOptional> iceP_o = global::Ice.Util.None;
                iceP_a = istr.readInt(1);
                iceP_b = istr.readString(2);
                istr.readValue(3, (OneOptional v) => {iceP_o = v; });
                inS.endReadParams();
                return inS.setResultTask(obj.opRequiredExceptionAsync(iceP_a, iceP_b, iceP_o, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByte(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<byte> iceP_p1;
                iceP_p1 = istr.readByte(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpByteResult>(obj.opByteAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeByte(1, ret.returnValue);
                        ostr.writeByte(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBool(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<bool> iceP_p1;
                iceP_p1 = istr.readBool(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpBoolResult>(obj.opBoolAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(1, ret.returnValue);
                        ostr.writeBool(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShort(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<short> iceP_p1;
                iceP_p1 = istr.readShort(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpShortResult>(obj.opShortAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeShort(1, ret.returnValue);
                        ostr.writeShort(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opInt(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<int> iceP_p1;
                iceP_p1 = istr.readInt(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpIntResult>(obj.opIntAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeInt(1, ret.returnValue);
                        ostr.writeInt(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLong(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<long> iceP_p1;
                iceP_p1 = istr.readLong(1);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpLongResult>(obj.opLongAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeLong(2, ret.p3);
                        ostr.writeLong(3, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloat(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<float> iceP_p1;
                iceP_p1 = istr.readFloat(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpFloatResult>(obj.opFloatAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeFloat(1, ret.returnValue);
                        ostr.writeFloat(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDouble(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<double> iceP_p1;
                iceP_p1 = istr.readDouble(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpDoubleResult>(obj.opDoubleAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeDouble(1, ret.returnValue);
                        ostr.writeDouble(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opString(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<string> iceP_p1;
                iceP_p1 = istr.readString(2);
                inS.endReadParams();
                return inS.setResultTask<Initial_OpStringResult>(obj.opStringAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeString(1, ret.returnValue);
                        ostr.writeString(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyEnum(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<MyEnum> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.Size))
                {
                    MyEnum tmpVal;
                    tmpVal = (MyEnum)istr.readEnum(0);
                    iceP_p1 = new global::Ice.Optional<MyEnum>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<MyEnum>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpMyEnumResult>(obj.opMyEnumAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue)
                        {
                            ostr.writeEnum(1, (int)ret.returnValue.Value, 1);
                        }
                        if(ret.p3.HasValue)
                        {
                            ostr.writeEnum(3, (int)ret.p3.Value, 1);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSmallStruct(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<SmallStruct> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    SmallStruct tmpVal = new SmallStruct();
                    tmpVal.ice_readMembers(istr);
                    iceP_p1 = new global::Ice.Optional<SmallStruct>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<SmallStruct>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpSmallStructResult>(obj.opSmallStructAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(1);
                            ret.returnValue.Value.ice_writeMembers(ostr);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(1);
                            ret.p3.Value.ice_writeMembers(ostr);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFixedStruct(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<FixedStruct> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    FixedStruct tmpVal = new FixedStruct();
                    tmpVal.ice_readMembers(istr);
                    iceP_p1 = new global::Ice.Optional<FixedStruct>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<FixedStruct>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpFixedStructResult>(obj.opFixedStructAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(4);
                            ret.returnValue.Value.ice_writeMembers(ostr);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(4);
                            ret.p3.Value.ice_writeMembers(ostr);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opVarStruct(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<VarStruct> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    VarStruct tmpVal = null;
                    tmpVal = VarStruct.ice_read(istr);
                    iceP_p1 = new global::Ice.Optional<VarStruct>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<VarStruct>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpVarStructResult>(obj.opVarStructAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStruct.ice_write(ostr, ret.returnValue.Value);
                            ostr.endSize(pos);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStruct.ice_write(ostr, ret.p3.Value);
                            ostr.endSize(pos);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opOneOptional(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<OneOptional> iceP_p1 = global::Ice.Util.None;
                istr.readValue(2, (OneOptional v) => {iceP_p1 = v; });
                inS.endReadParams();
                return inS.setResultTask<Initial_OpOneOptionalResult>(obj.opOneOptionalAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeValue(1, ret.returnValue);
                        ostr.writeValue(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMyInterfaceProxy(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<MyInterfacePrx> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    MyInterfacePrx tmpVal;
                    tmpVal = MyInterfacePrxHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<MyInterfacePrx>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<MyInterfacePrx>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpMyInterfaceProxyResult>(obj.opMyInterfaceProxyAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            MyInterfacePrxHelper.write(ostr, ret.returnValue.Value);
                            ostr.endSize(pos);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            MyInterfacePrxHelper.write(ostr, ret.p3.Value);
                            ostr.endSize(pos);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<byte[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal;
                    tmpVal = ByteSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<byte[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<byte[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpByteSeqResult>(obj.opByteSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeByteSeq(1, ret.returnValue);
                        ostr.writeByteSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<bool[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal;
                    tmpVal = BoolSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<bool[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<bool[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpBoolSeqResult>(obj.opBoolSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeBoolSeq(1, ret.returnValue);
                        ostr.writeBoolSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<short[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    short[] tmpVal;
                    tmpVal = ShortSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<short[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<short[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpShortSeqResult>(obj.opShortSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeShortSeq(1, ret.returnValue);
                        ostr.writeShortSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<int[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    int[] tmpVal;
                    tmpVal = IntSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<int[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<int[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpIntSeqResult>(obj.opIntSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeIntSeq(1, ret.returnValue);
                        ostr.writeIntSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<long[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    long[] tmpVal;
                    tmpVal = LongSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<long[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<long[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpLongSeqResult>(obj.opLongSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeLongSeq(1, ret.returnValue);
                        ostr.writeLongSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<float[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    float[] tmpVal;
                    tmpVal = FloatSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<float[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<float[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpFloatSeqResult>(obj.opFloatSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeFloatSeq(1, ret.returnValue);
                        ostr.writeFloatSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDoubleSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<double[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    double[] tmpVal;
                    tmpVal = DoubleSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<double[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<double[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpDoubleSeqResult>(obj.opDoubleSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeDoubleSeq(1, ret.returnValue);
                        ostr.writeDoubleSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<string[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    string[] tmpVal;
                    tmpVal = StringSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<string[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<string[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpStringSeqResult>(obj.opStringSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        ostr.writeStringSeq(1, ret.returnValue);
                        ostr.writeStringSeq(3, ret.p3);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSmallStructSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<SmallStruct[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    SmallStruct[] tmpVal;
                    tmpVal = SmallStructSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<SmallStruct[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<SmallStruct[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpSmallStructSeqResult>(obj.opSmallStructSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructSeqHelper.write(ostr, ret.returnValue.Value);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructSeqHelper.write(ostr, ret.p3.Value);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSmallStructList(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    global::System.Collections.Generic.List<SmallStruct> tmpVal;
                    tmpVal = SmallStructListHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.List<SmallStruct>>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpSmallStructListResult>(obj.opSmallStructListAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructListHelper.write(ostr, ret.returnValue.Value);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            SmallStructListHelper.write(ostr, ret.p3.Value);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFixedStructSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<FixedStruct[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    FixedStruct[] tmpVal;
                    tmpVal = FixedStructSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<FixedStruct[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<FixedStruct[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpFixedStructSeqResult>(obj.opFixedStructSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.returnValue.Value == null ? 1 : ret.returnValue.Value.Length * 4 + (ret.returnValue.Value.Length > 254 ? 5 : 1));
                            FixedStructSeqHelper.write(ostr, ret.returnValue.Value);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.p3.Value == null ? 1 : ret.p3.Value.Length * 4 + (ret.p3.Value.Length > 254 ? 5 : 1));
                            FixedStructSeqHelper.write(ostr, ret.p3.Value);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFixedStructList(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    global::System.Collections.Generic.LinkedList<FixedStruct> tmpVal;
                    tmpVal = FixedStructListHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.LinkedList<FixedStruct>>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpFixedStructListResult>(obj.opFixedStructListAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.returnValue.Value == null ? 1 : ret.returnValue.Value.Count * 4 + (ret.returnValue.Value.Count > 254 ? 5 : 1));
                            FixedStructListHelper.write(ostr, ret.returnValue.Value);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.p3.Value == null ? 1 : ret.p3.Value.Count * 4 + (ret.p3.Value.Count > 254 ? 5 : 1));
                            FixedStructListHelper.write(ostr, ret.p3.Value);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opVarStructSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<VarStruct[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    VarStruct[] tmpVal;
                    tmpVal = VarStructSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<VarStruct[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<VarStruct[]>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpVarStructSeqResult>(obj.opVarStructSeqAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStructSeqHelper.write(ostr, ret.returnValue.Value);
                            ostr.endSize(pos);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            VarStructSeqHelper.write(ostr, ret.p3.Value);
                            ostr.endSize(pos);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntIntDict(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                    tmpVal = IntIntDictHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, int>>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpIntIntDictResult>(obj.opIntIntDictAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.returnValue.Value == null ? 1 : ret.returnValue.Value.Count * 8 + (ret.returnValue.Value.Count > 254 ? 5 : 1));
                            IntIntDictHelper.write(ostr, ret.returnValue.Value);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
                        {
                            ostr.writeSize(ret.p3.Value == null ? 1 : ret.p3.Value.Count * 8 + (ret.p3.Value.Count > 254 ? 5 : 1));
                            IntIntDictHelper.write(ostr, ret.p3.Value);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opStringIntDict(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                    tmpVal = StringIntDictHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpStringIntDictResult>(obj.opStringIntDictAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            StringIntDictHelper.write(ostr, ret.returnValue.Value);
                            ostr.endSize(pos);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            StringIntDictHelper.write(ostr, ret.p3.Value);
                            ostr.endSize(pos);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntOneOptionalDict(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    global::System.Collections.Generic.Dictionary<int, OneOptional> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional>();
                    tmpVal = IntOneOptionalDictHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<int, OneOptional>>();
                }
                inS.endReadParams();
                return inS.setResultTask<Initial_OpIntOneOptionalDictResult>(obj.opIntOneOptionalDictAsync(iceP_p1, current),
                    (ostr, ret) =>
                    {
                        if(ret.returnValue.HasValue && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            IntOneOptionalDictHelper.write(ostr, ret.returnValue.Value);
                            ostr.endSize(pos);
                        }
                        if(ret.p3.HasValue && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
                        {
                            int pos = ostr.startSize();
                            IntOneOptionalDictHelper.write(ostr, ret.p3.Value);
                            ostr.endSize(pos);
                        }
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opClassAndUnknownOptional(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                A iceP_p;
                iceP_p = null;
                istr.readValue((A v) => {iceP_p = v; });
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask(obj.opClassAndUnknownOptionalAsync(iceP_p, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_sendOptionalClass(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool iceP_req;
                global::Ice.Optional<OneOptional> iceP_o = global::Ice.Util.None;
                iceP_req = istr.readBool();
                istr.readValue(1, (OneOptional v) => {iceP_o = v; });
                inS.endReadParams();
                return inS.setResultTask(obj.sendOptionalClassAsync(iceP_req, iceP_o, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_returnOptionalClass(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool iceP_req;
                iceP_req = istr.readBool();
                inS.endReadParams();
                return inS.setResultTask<global::Ice.Optional<OneOptional>>(obj.returnOptionalClassAsync(iceP_req, current),
                    (ostr, iceP_o) =>
                    {
                        ostr.writeValue(1, iceP_o);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opG(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                G iceP_g;
                iceP_g = null;
                istr.readValue((G v) => {iceP_g = v; });
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<G>(obj.opGAsync(iceP_g, current),
                    (ostr, ret) =>
                    {
                        ostr.writeValue(ret);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opVoid(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.opVoidAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMStruct1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResultTask(obj.opMStruct1Async(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMStruct2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<SmallStruct> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    istr.skipSize();
                    SmallStruct tmpVal = new SmallStruct();
                    tmpVal.ice_readMembers(istr);
                    iceP_p1 = new global::Ice.Optional<SmallStruct>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<SmallStruct>();
                }
                inS.endReadParams();
                return inS.setMarshaledResultTask(obj.opMStruct2Async(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMSeq1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResultTask(obj.opMSeq1Async(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMSeq2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<string[]> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    string[] tmpVal;
                    tmpVal = StringSeqHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<string[]>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<string[]>();
                }
                inS.endReadParams();
                return inS.setMarshaledResultTask(obj.opMSeq2Async(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMDict1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResultTask(obj.opMDict1Async(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMDict2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>> iceP_p1;
                if(istr.readOptional(2, global::Ice.OptionalFormat.FSize))
                {
                    istr.skip(4);
                    global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                    tmpVal = StringIntDictHelper.read(istr);
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>(tmpVal);
                }
                else
                {
                    iceP_p1 = new global::Ice.Optional<global::System.Collections.Generic.Dictionary<string, int>>();
                }
                inS.endReadParams();
                return inS.setMarshaledResultTask(obj.opMDict2Async(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMG1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setMarshaledResultTask(obj.opMG1Async(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opMG2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Optional<G> iceP_p1 = global::Ice.Util.None;
                istr.readValue(2, (G v) => {iceP_p1 = v; });
                inS.endReadParams();
                return inS.setMarshaledResultTask(obj.opMG2Async(iceP_p1, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsRequiredParams(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<bool>(obj.supportsRequiredParamsAsync(current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsJavaSerializable(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<bool>(obj.supportsJavaSerializableAsync(current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsNullOptional(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<bool>(obj.supportsNullOptionalAsync(current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opBool",
                "opBoolSeq",
                "opByte",
                "opByteSeq",
                "opClassAndUnknownOptional",
                "opDerivedException",
                "opDouble",
                "opDoubleSeq",
                "opFixedStruct",
                "opFixedStructList",
                "opFixedStructSeq",
                "opFloat",
                "opFloatSeq",
                "opG",
                "opInt",
                "opIntIntDict",
                "opIntOneOptionalDict",
                "opIntSeq",
                "opLong",
                "opLongSeq",
                "opMDict1",
                "opMDict2",
                "opMG1",
                "opMG2",
                "opMSeq1",
                "opMSeq2",
                "opMStruct1",
                "opMStruct2",
                "opMyEnum",
                "opMyInterfaceProxy",
                "opOneOptional",
                "opOptionalException",
                "opRequiredException",
                "opShort",
                "opShortSeq",
                "opSmallStruct",
                "opSmallStructList",
                "opSmallStructSeq",
                "opString",
                "opStringIntDict",
                "opStringSeq",
                "opVarStruct",
                "opVarStructSeq",
                "opVoid",
                "pingPong",
                "returnOptionalClass",
                "sendOptionalClass",
                "shutdown",
                "supportsJavaSerializable",
                "supportsNullOptional",
                "supportsRequiredParams"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_opBool(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_opBoolSeq(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_opByte(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_opByteSeq(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_opClassAndUnknownOptional(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_opDerivedException(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_opDouble(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_opDoubleSeq(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_opFixedStruct(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_opFixedStructList(this, inS, current);
                    }
                    case 14:
                    {
                        return iceD_opFixedStructSeq(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_opFloat(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_opFloatSeq(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_opG(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_opInt(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_opIntIntDict(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_opIntOneOptionalDict(this, inS, current);
                    }
                    case 21:
                    {
                        return iceD_opIntSeq(this, inS, current);
                    }
                    case 22:
                    {
                        return iceD_opLong(this, inS, current);
                    }
                    case 23:
                    {
                        return iceD_opLongSeq(this, inS, current);
                    }
                    case 24:
                    {
                        return iceD_opMDict1(this, inS, current);
                    }
                    case 25:
                    {
                        return iceD_opMDict2(this, inS, current);
                    }
                    case 26:
                    {
                        return iceD_opMG1(this, inS, current);
                    }
                    case 27:
                    {
                        return iceD_opMG2(this, inS, current);
                    }
                    case 28:
                    {
                        return iceD_opMSeq1(this, inS, current);
                    }
                    case 29:
                    {
                        return iceD_opMSeq2(this, inS, current);
                    }
                    case 30:
                    {
                        return iceD_opMStruct1(this, inS, current);
                    }
                    case 31:
                    {
                        return iceD_opMStruct2(this, inS, current);
                    }
                    case 32:
                    {
                        return iceD_opMyEnum(this, inS, current);
                    }
                    case 33:
                    {
                        return iceD_opMyInterfaceProxy(this, inS, current);
                    }
                    case 34:
                    {
                        return iceD_opOneOptional(this, inS, current);
                    }
                    case 35:
                    {
                        return iceD_opOptionalException(this, inS, current);
                    }
                    case 36:
                    {
                        return iceD_opRequiredException(this, inS, current);
                    }
                    case 37:
                    {
                        return iceD_opShort(this, inS, current);
                    }
                    case 38:
                    {
                        return iceD_opShortSeq(this, inS, current);
                    }
                    case 39:
                    {
                        return iceD_opSmallStruct(this, inS, current);
                    }
                    case 40:
                    {
                        return iceD_opSmallStructList(this, inS, current);
                    }
                    case 41:
                    {
                        return iceD_opSmallStructSeq(this, inS, current);
                    }
                    case 42:
                    {
                        return iceD_opString(this, inS, current);
                    }
                    case 43:
                    {
                        return iceD_opStringIntDict(this, inS, current);
                    }
                    case 44:
                    {
                        return iceD_opStringSeq(this, inS, current);
                    }
                    case 45:
                    {
                        return iceD_opVarStruct(this, inS, current);
                    }
                    case 46:
                    {
                        return iceD_opVarStructSeq(this, inS, current);
                    }
                    case 47:
                    {
                        return iceD_opVoid(this, inS, current);
                    }
                    case 48:
                    {
                        return iceD_pingPong(this, inS, current);
                    }
                    case 49:
                    {
                        return iceD_returnOptionalClass(this, inS, current);
                    }
                    case 50:
                    {
                        return iceD_sendOptionalClass(this, inS, current);
                    }
                    case 51:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                    case 52:
                    {
                        return iceD_supportsJavaSerializable(this, inS, current);
                    }
                    case 53:
                    {
                        return iceD_supportsNullOptional(this, inS, current);
                    }
                    case 54:
                    {
                        return iceD_supportsRequiredParams(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
